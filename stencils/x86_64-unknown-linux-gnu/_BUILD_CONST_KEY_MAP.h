// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 34 c4                   leaq    (%r12,%rax,8), %r14
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 f2                      movq    %r14, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e6                      movq    %r12, %r14
// 156: 49 29 de                      subq    %rbx, %r14
// 159: 49 83 c6 b8                   addq    $-0x48, %r14
// 15d: 49 c1 ee 03                   shrq    $0x3, %r14
// 161: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1a7: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 ff                      testq   %r15, %r15
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 c8                      movzwl  %ax, %ecx
// 1e1: f7 d0                         notl    %eax
// 1e3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e8: 48 98                         cltq
// 1ea: 4d 89 3c c4                   movq    %r15, (%r12,%rax,8)
// 1ee: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f2: 4d 89 e6                      movq    %r12, %r14
// 1f5: 49 29 ce                      subq    %rcx, %r14
// 1f8: 48 f7 d9                      negq    %rcx
// 1fb: 49 8b 6c 0c f8                movq    -0x8(%r12,%rcx), %rbp
// 200: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000202:  R_X86_64_64  _PyObject_LookupSpecial
// 20a: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000020c:  R_X86_64_64  _PyRuntime
// 214: 49 8d b7 68 a6 00 00          leaq    0xa668(%r15), %rsi
// 21b: 48 89 ef                      movq    %rbp, %rdi
// 21e: ff d3                         callq   *%rbx
// 220: 48 85 c0                      testq   %rax, %rax
// 223: 0f 84 bc 00 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 229: 49 89 c5                      movq    %rax, %r13
// 22c: 49 81 c7 a0 a6 00 00          addq    $0xa6a0, %r15           # imm = 0xA6A0
// 233: 48 89 ef                      movq    %rbp, %rdi
// 236: 4c 89 fe                      movq    %r15, %rsi
// 239: ff d3                         callq   *%rbx
// 23b: 48 85 c0                      testq   %rax, %rax
// 23e: 0f 84 ab 01 00 00             je      0x3ef <_JIT_ENTRY+0x3ef>
// 244: 48 89 c3                      movq    %rax, %rbx
// 247: 48 8b 45 00                   movq    (%rbp), %rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 7f 22                         jg      0x272 <_JIT_ENTRY+0x272>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_NegativeRefcount
// 264: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 269: 48 89 ea                      movq    %rbp, %rdx
// 26c: ff d0                         callq   *%rax
// 26e: 48 8b 45 00                   movq    (%rbp), %rax
// 272: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 277: 85 c0                         testl   %eax, %eax
// 279: 78 21                         js      0x29c <_JIT_ENTRY+0x29c>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 285: ff d0                         callq   *%rax
// 287: 48 ff 4d 00                   decq    (%rbp)
// 28b: 75 0f                         jne     0x29c <_JIT_ENTRY+0x29c>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 48 89 ef                      movq    %rbp, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2a0: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 2a7: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ab: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2b0: 74 7f                         je      0x331 <_JIT_ENTRY+0x331>
// 2b2: 48 8b 40 38                   movq    0x38(%rax), %rax
// 2b6: 49 8b 44 05 00                movq    (%r13,%rax), %rax
// 2bb: 48 85 c0                      testq   %rax, %rax
// 2be: 74 71                         je      0x331 <_JIT_ENTRY+0x331>
// 2c0: 4c 89 ef                      movq    %r13, %rdi
// 2c3: 31 f6                         xorl    %esi, %esi
// 2c5: 31 d2                         xorl    %edx, %edx
// 2c7: 31 c9                         xorl    %ecx, %ecx
// 2c9: ff d0                         callq   *%rax
// 2cb: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002cd:  R_X86_64_64  _Py_CheckFunctionResult
// 2d5: 4c 89 ff                      movq    %r15, %rdi
// 2d8: 4c 89 ee                      movq    %r13, %rsi
// 2db: 48 89 c2                      movq    %rax, %rdx
// 2de: 31 c9                         xorl    %ecx, %ecx
// 2e0: 41 ff d0                      callq   *%r8
// 2e3: eb 65                         jmp     0x34a <_JIT_ENTRY+0x34a>
// 2e5: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2ea: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2ee: 48 85 c0                      testq   %rax, %rax
// 2f1: 74 07                         je      0x2fa <_JIT_ENTRY+0x2fa>
// 2f3: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2f8: 75 2e                         jne     0x328 <_JIT_ENTRY+0x328>
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  PyExc_TypeError
// 304: 48 8b 30                      movq    (%rax), %rsi
// 307: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 30f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000311:  R_X86_64_64  .rodata.str1.1+0x5f
// 319: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000031b:  R_X86_64_64  _PyErr_Format
// 323: 31 c0                         xorl    %eax, %eax
// 325: 41 ff d0                      callq   *%r8
// 328: 48 8b 1c 24                   movq    (%rsp), %rbx
// 32c: e9 25 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _PyObject_MakeTpCall
// 33b: 4c 89 ff                      movq    %r15, %rdi
// 33e: 4c 89 ee                      movq    %r13, %rsi
// 341: 31 d2                         xorl    %edx, %edx
// 343: 31 c9                         xorl    %ecx, %ecx
// 345: 45 31 c0                      xorl    %r8d, %r8d
// 348: ff d0                         callq   *%rax
// 34a: 48 89 c5                      movq    %rax, %rbp
// 34d: 49 8b 45 00                   movq    (%r13), %rax
// 351: 48 85 c0                      testq   %rax, %rax
// 354: 7f 22                         jg      0x378 <_JIT_ENTRY+0x378>
// 356: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000358:  R_X86_64_64  .rodata.str1.1
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_NegativeRefcount
// 36a: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 36f: 4c 89 ea                      movq    %r13, %rdx
// 372: ff d0                         callq   *%rax
// 374: 49 8b 45 00                   movq    (%r13), %rax
// 378: 85 c0                         testl   %eax, %eax
// 37a: 78 21                         js      0x39d <_JIT_ENTRY+0x39d>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 386: ff d0                         callq   *%rax
// 388: 49 ff 4d 00                   decq    (%r13)
// 38c: 75 0f                         jne     0x39d <_JIT_ENTRY+0x39d>
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_Dealloc
// 398: 4c 89 ef                      movq    %r13, %rdi
// 39b: ff d0                         callq   *%rax
// 39d: 48 85 ed                      testq   %rbp, %rbp
// 3a0: 0f 84 84 00 00 00             je      0x42a <_JIT_ENTRY+0x42a>
// 3a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a8:  R_X86_64_64  _JIT_OPARG
// 3b0: 0f b7 c0                      movzwl  %ax, %eax
// 3b3: 48 c1 e0 03                   shlq    $0x3, %rax
// 3b7: 49 29 c4                      subq    %rax, %r12
// 3ba: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3bf: 49 89 44 24 f8                movq    %rax, -0x8(%r12)
// 3c4: 49 89 2c 24                   movq    %rbp, (%r12)
// 3c8: 49 83 c4 08                   addq    $0x8, %r12
// 3cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ce:  R_X86_64_64  _JIT_CONTINUE
// 3d6: 48 89 df                      movq    %rbx, %rdi
// 3d9: 4c 89 e6                      movq    %r12, %rsi
// 3dc: 4c 89 fa                      movq    %r15, %rdx
// 3df: 48 83 c4 18                   addq    $0x18, %rsp
// 3e3: 5b                            popq    %rbx
// 3e4: 41 5c                         popq    %r12
// 3e6: 41 5d                         popq    %r13
// 3e8: 41 5e                         popq    %r14
// 3ea: 41 5f                         popq    %r15
// 3ec: 5d                            popq    %rbp
// 3ed: ff e0                         jmpq    *%rax
// 3ef: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 3f4: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 3f8: 48 85 c0                      testq   %rax, %rax
// 3fb: 0f 84 8c 00 00 00             je      0x48d <_JIT_ENTRY+0x48d>
// 401: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 406: 0f 84 81 00 00 00             je      0x48d <_JIT_ENTRY+0x48d>
// 40c: 49 8b 45 00                   movq    (%r13), %rax
// 410: 48 85 c0                      testq   %rax, %rax
// 413: 48 8b 1c 24                   movq    (%rsp), %rbx
// 417: 0f 8e af 00 00 00             jle     0x4cc <_JIT_ENTRY+0x4cc>
// 41d: 85 c0                         testl   %eax, %eax
// 41f: 0f 88 31 fd ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 425: e9 cc 00 00 00                jmp     0x4f6 <_JIT_ENTRY+0x4f6>
// 42a: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 42f: 49 8b 07                      movq    (%r15), %rax
// 432: 48 85 c0                      testq   %rax, %rax
// 435: 7f 21                         jg      0x458 <_JIT_ENTRY+0x458>
// 437: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000439:  R_X86_64_64  .rodata.str1.1
// 441: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000443:  R_X86_64_64  _Py_NegativeRefcount
// 44b: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 450: 4c 89 fa                      movq    %r15, %rdx
// 453: ff d0                         callq   *%rax
// 455: 49 8b 07                      movq    (%r15), %rax
// 458: 49 83 c6 f8                   addq    $-0x8, %r14
// 45c: 85 c0                         testl   %eax, %eax
// 45e: 0f 88 f2 fc ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 464: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000466:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 46e: ff d0                         callq   *%rax
// 470: 49 ff 0f                      decq    (%r15)
// 473: 0f 85 dd fc ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 479: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047b:  R_X86_64_64  _Py_Dealloc
// 483: 4c 89 ff                      movq    %r15, %rdi
// 486: ff d0                         callq   *%rax
// 488: e9 c9 fc ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 48d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000048f:  R_X86_64_64  PyExc_TypeError
// 497: 48 8b 30                      movq    (%rax), %rsi
// 49a: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 49e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004a4:  R_X86_64_64  .rodata.str1.1+0xaa
// 4ac: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000004ae:  R_X86_64_64  _PyErr_Format
// 4b6: 31 c0                         xorl    %eax, %eax
// 4b8: 41 ff d0                      callq   *%r8
// 4bb: 49 8b 45 00                   movq    (%r13), %rax
// 4bf: 48 85 c0                      testq   %rax, %rax
// 4c2: 48 8b 1c 24                   movq    (%rsp), %rbx
// 4c6: 0f 8f 51 ff ff ff             jg      0x41d <_JIT_ENTRY+0x41d>
// 4cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000004ce:  R_X86_64_64  .rodata.str1.1
// 4d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004d8:  R_X86_64_64  _Py_NegativeRefcount
// 4e0: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 4e5: 4c 89 ea                      movq    %r13, %rdx
// 4e8: ff d0                         callq   *%rax
// 4ea: 49 8b 45 00                   movq    (%r13), %rax
// 4ee: 85 c0                         testl   %eax, %eax
// 4f0: 0f 88 60 fc ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 4f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 500: ff d0                         callq   *%rax
// 502: 49 ff 4d 00                   decq    (%r13)
// 506: 0f 85 4a fc ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 50c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000050e:  R_X86_64_64  _Py_Dealloc
// 516: 4c 89 ef                      movq    %r13, %rdi
// 519: ff d0                         callq   *%rax
// 51b: e9 36 fc ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 520: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH_code_body[1313] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0c, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb7, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x81, 0xc7, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xab, 0x01, 0x00, 0x00, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x7f, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x44, 0x05, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x71, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x65, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0x25, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x44, 0x24, 0xf8, 0x49, 0x89, 0x2c, 0x24, 0x49, 0x83, 0xc4, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x8e, 0xaf, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x31, 0xfd, 0xff, 0xff, 0xe9, 0xcc, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0xf2, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0xdd, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xc9, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x8f, 0x51, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x60, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x4a, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x36, 0xfc, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH_code_holes[47] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3ce, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x439, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x443, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x466, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x47b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x48f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xaa},
    {0x4ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x4ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x50e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// 10f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH_data_body[273] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BEFORE_WITH
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BEFORE_WITH.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 34 c4                   leaq    (%r12,%rax,8), %r14
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 f2                      movq    %r14, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e6                      movq    %r12, %r14
// 156: 49 29 de                      subq    %rbx, %r14
// 159: 49 83 c6 b8                   addq    $-0x48, %r14
// 15d: 49 c1 ee 03                   shrq    $0x3, %r14
// 161: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1a7: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 ff                      testq   %r15, %r15
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 c8                      movzwl  %ax, %ecx
// 1e1: f7 d0                         notl    %eax
// 1e3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e8: 48 98                         cltq
// 1ea: 4d 89 3c c4                   movq    %r15, (%r12,%rax,8)
// 1ee: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f2: 4d 89 e6                      movq    %r12, %r14
// 1f5: 49 29 ce                      subq    %rcx, %r14
// 1f8: 48 f7 d9                      negq    %rcx
// 1fb: 49 8b 6c 0c f8                movq    -0x8(%r12,%rcx), %rbp
// 200: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000202:  R_X86_64_64  _PyObject_LookupSpecial
// 20a: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000020c:  R_X86_64_64  _PyRuntime
// 214: 49 8d b7 50 ae 00 00          leaq    0xae50(%r15), %rsi
// 21b: 48 89 ef                      movq    %rbp, %rdi
// 21e: ff d3                         callq   *%rbx
// 220: 48 85 c0                      testq   %rax, %rax
// 223: 0f 84 bc 00 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 229: 49 89 c5                      movq    %rax, %r13
// 22c: 49 81 c7 b8 ae 00 00          addq    $0xaeb8, %r15           # imm = 0xAEB8
// 233: 48 89 ef                      movq    %rbp, %rdi
// 236: 4c 89 fe                      movq    %r15, %rsi
// 239: ff d3                         callq   *%rbx
// 23b: 48 85 c0                      testq   %rax, %rax
// 23e: 0f 84 ab 01 00 00             je      0x3ef <_JIT_ENTRY+0x3ef>
// 244: 48 89 c3                      movq    %rax, %rbx
// 247: 48 8b 45 00                   movq    (%rbp), %rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 7f 22                         jg      0x272 <_JIT_ENTRY+0x272>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_NegativeRefcount
// 264: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 269: 48 89 ea                      movq    %rbp, %rdx
// 26c: ff d0                         callq   *%rax
// 26e: 48 8b 45 00                   movq    (%rbp), %rax
// 272: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 277: 85 c0                         testl   %eax, %eax
// 279: 78 21                         js      0x29c <_JIT_ENTRY+0x29c>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 285: ff d0                         callq   *%rax
// 287: 48 ff 4d 00                   decq    (%rbp)
// 28b: 75 0f                         jne     0x29c <_JIT_ENTRY+0x29c>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 48 89 ef                      movq    %rbp, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2a0: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 2a7: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ab: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2b0: 74 7f                         je      0x331 <_JIT_ENTRY+0x331>
// 2b2: 48 8b 40 38                   movq    0x38(%rax), %rax
// 2b6: 49 8b 44 05 00                movq    (%r13,%rax), %rax
// 2bb: 48 85 c0                      testq   %rax, %rax
// 2be: 74 71                         je      0x331 <_JIT_ENTRY+0x331>
// 2c0: 4c 89 ef                      movq    %r13, %rdi
// 2c3: 31 f6                         xorl    %esi, %esi
// 2c5: 31 d2                         xorl    %edx, %edx
// 2c7: 31 c9                         xorl    %ecx, %ecx
// 2c9: ff d0                         callq   *%rax
// 2cb: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002cd:  R_X86_64_64  _Py_CheckFunctionResult
// 2d5: 4c 89 ff                      movq    %r15, %rdi
// 2d8: 4c 89 ee                      movq    %r13, %rsi
// 2db: 48 89 c2                      movq    %rax, %rdx
// 2de: 31 c9                         xorl    %ecx, %ecx
// 2e0: 41 ff d0                      callq   *%r8
// 2e3: eb 65                         jmp     0x34a <_JIT_ENTRY+0x34a>
// 2e5: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2ea: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 2ee: 48 85 c0                      testq   %rax, %rax
// 2f1: 74 07                         je      0x2fa <_JIT_ENTRY+0x2fa>
// 2f3: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2f8: 75 2e                         jne     0x328 <_JIT_ENTRY+0x328>
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  PyExc_TypeError
// 304: 48 8b 30                      movq    (%rax), %rsi
// 307: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 30b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 30f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000311:  R_X86_64_64  .rodata.str1.1+0x5f
// 319: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000031b:  R_X86_64_64  _PyErr_Format
// 323: 31 c0                         xorl    %eax, %eax
// 325: 41 ff d0                      callq   *%r8
// 328: 48 8b 1c 24                   movq    (%rsp), %rbx
// 32c: e9 25 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _PyObject_MakeTpCall
// 33b: 4c 89 ff                      movq    %r15, %rdi
// 33e: 4c 89 ee                      movq    %r13, %rsi
// 341: 31 d2                         xorl    %edx, %edx
// 343: 31 c9                         xorl    %ecx, %ecx
// 345: 45 31 c0                      xorl    %r8d, %r8d
// 348: ff d0                         callq   *%rax
// 34a: 48 89 c5                      movq    %rax, %rbp
// 34d: 49 8b 45 00                   movq    (%r13), %rax
// 351: 48 85 c0                      testq   %rax, %rax
// 354: 7f 22                         jg      0x378 <_JIT_ENTRY+0x378>
// 356: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000358:  R_X86_64_64  .rodata.str1.1
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_NegativeRefcount
// 36a: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 36f: 4c 89 ea                      movq    %r13, %rdx
// 372: ff d0                         callq   *%rax
// 374: 49 8b 45 00                   movq    (%r13), %rax
// 378: 85 c0                         testl   %eax, %eax
// 37a: 78 21                         js      0x39d <_JIT_ENTRY+0x39d>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 386: ff d0                         callq   *%rax
// 388: 49 ff 4d 00                   decq    (%r13)
// 38c: 75 0f                         jne     0x39d <_JIT_ENTRY+0x39d>
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_Dealloc
// 398: 4c 89 ef                      movq    %r13, %rdi
// 39b: ff d0                         callq   *%rax
// 39d: 48 85 ed                      testq   %rbp, %rbp
// 3a0: 0f 84 84 00 00 00             je      0x42a <_JIT_ENTRY+0x42a>
// 3a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a8:  R_X86_64_64  _JIT_OPARG
// 3b0: 0f b7 c0                      movzwl  %ax, %eax
// 3b3: 48 c1 e0 03                   shlq    $0x3, %rax
// 3b7: 49 29 c4                      subq    %rax, %r12
// 3ba: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 3bf: 49 89 44 24 f8                movq    %rax, -0x8(%r12)
// 3c4: 49 89 2c 24                   movq    %rbp, (%r12)
// 3c8: 49 83 c4 08                   addq    $0x8, %r12
// 3cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ce:  R_X86_64_64  _JIT_CONTINUE
// 3d6: 48 89 df                      movq    %rbx, %rdi
// 3d9: 4c 89 e6                      movq    %r12, %rsi
// 3dc: 4c 89 fa                      movq    %r15, %rdx
// 3df: 48 83 c4 18                   addq    $0x18, %rsp
// 3e3: 5b                            popq    %rbx
// 3e4: 41 5c                         popq    %r12
// 3e6: 41 5d                         popq    %r13
// 3e8: 41 5e                         popq    %r14
// 3ea: 41 5f                         popq    %r15
// 3ec: 5d                            popq    %rbp
// 3ed: ff e0                         jmpq    *%rax
// 3ef: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 3f4: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 3f8: 48 85 c0                      testq   %rax, %rax
// 3fb: 0f 84 8c 00 00 00             je      0x48d <_JIT_ENTRY+0x48d>
// 401: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 406: 0f 84 81 00 00 00             je      0x48d <_JIT_ENTRY+0x48d>
// 40c: 49 8b 45 00                   movq    (%r13), %rax
// 410: 48 85 c0                      testq   %rax, %rax
// 413: 48 8b 1c 24                   movq    (%rsp), %rbx
// 417: 0f 8e af 00 00 00             jle     0x4cc <_JIT_ENTRY+0x4cc>
// 41d: 85 c0                         testl   %eax, %eax
// 41f: 0f 88 31 fd ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 425: e9 cc 00 00 00                jmp     0x4f6 <_JIT_ENTRY+0x4f6>
// 42a: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 42f: 49 8b 07                      movq    (%r15), %rax
// 432: 48 85 c0                      testq   %rax, %rax
// 435: 7f 21                         jg      0x458 <_JIT_ENTRY+0x458>
// 437: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000439:  R_X86_64_64  .rodata.str1.1
// 441: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000443:  R_X86_64_64  _Py_NegativeRefcount
// 44b: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 450: 4c 89 fa                      movq    %r15, %rdx
// 453: ff d0                         callq   *%rax
// 455: 49 8b 07                      movq    (%r15), %rax
// 458: 49 83 c6 f8                   addq    $-0x8, %r14
// 45c: 85 c0                         testl   %eax, %eax
// 45e: 0f 88 f2 fc ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 464: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000466:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 46e: ff d0                         callq   *%rax
// 470: 49 ff 0f                      decq    (%r15)
// 473: 0f 85 dd fc ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 479: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047b:  R_X86_64_64  _Py_Dealloc
// 483: 4c 89 ff                      movq    %r15, %rdi
// 486: ff d0                         callq   *%rax
// 488: e9 c9 fc ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 48d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000048f:  R_X86_64_64  PyExc_TypeError
// 497: 48 8b 30                      movq    (%rax), %rsi
// 49a: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 49e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004a4:  R_X86_64_64  .rodata.str1.1+0x9d
// 4ac: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000004ae:  R_X86_64_64  _PyErr_Format
// 4b6: 31 c0                         xorl    %eax, %eax
// 4b8: 41 ff d0                      callq   *%r8
// 4bb: 49 8b 45 00                   movq    (%r13), %rax
// 4bf: 48 85 c0                      testq   %rax, %rax
// 4c2: 48 8b 1c 24                   movq    (%rsp), %rbx
// 4c6: 0f 8f 51 ff ff ff             jg      0x41d <_JIT_ENTRY+0x41d>
// 4cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000004ce:  R_X86_64_64  .rodata.str1.1
// 4d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004d8:  R_X86_64_64  _Py_NegativeRefcount
// 4e0: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 4e5: 4c 89 ea                      movq    %r13, %rdx
// 4e8: ff d0                         callq   *%rax
// 4ea: 49 8b 45 00                   movq    (%r13), %rax
// 4ee: 85 c0                         testl   %eax, %eax
// 4f0: 0f 88 60 fc ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 4f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 500: ff d0                         callq   *%rax
// 502: 49 ff 4d 00                   decq    (%r13)
// 506: 0f 85 4a fc ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 50c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000050e:  R_X86_64_64  _Py_Dealloc
// 516: 4c 89 ef                      movq    %r13, %rdi
// 519: ff d0                         callq   *%rax
// 51b: e9 36 fc ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 520: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BEFORE_WITH_code_body[1313] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0c, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb7, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x81, 0xc7, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xab, 0x01, 0x00, 0x00, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x74, 0x7f, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x44, 0x05, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x71, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xeb, 0x65, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0x25, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x44, 0x24, 0xf8, 0x49, 0x89, 0x2c, 0x24, 0x49, 0x83, 0xc4, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x8e, 0xaf, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x31, 0xfd, 0xff, 0xff, 0xe9, 0xcc, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0xf2, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0xdd, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xc9, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x8f, 0x51, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x60, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x4a, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x36, 0xfc, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BEFORE_WITH_code_holes[47] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3ce, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x439, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x443, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x466, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x47b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x48f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9d},
    {0x4ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x4ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x4f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x50e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// f4: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BEFORE_WITH_data_body[249] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BEFORE_WITH_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 4d 89 fc                      movq    %r15, %r12
// 1ff: 49 29 c4                      subq    %rax, %r12
// 202: 48 f7 d8                      negq    %rax
// 205: 49 8b 6c 07 f8                movq    -0x8(%r15,%rax), %rbp
// 20a: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _PyEval_BinaryOps
// 219: 4c 89 ef                      movq    %r13, %rdi
// 21c: 48 89 ee                      movq    %rbp, %rsi
// 21f: ff 14 c8                      callq   *(%rax,%rcx,8)
// 222: 49 89 c6                      movq    %rax, %r14
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 7f 22                         jg      0x250 <_JIT_ENTRY+0x250>
// 22e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000230:  R_X86_64_64  .rodata.str1.1
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_NegativeRefcount
// 242: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 247: 4c 89 ea                      movq    %r13, %rdx
// 24a: ff d0                         callq   *%rax
// 24c: 49 8b 45 00                   movq    (%r13), %rax
// 250: 85 c0                         testl   %eax, %eax
// 252: 78 21                         js      0x275 <_JIT_ENTRY+0x275>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25e: ff d0                         callq   *%rax
// 260: 49 ff 4d 00                   decq    (%r13)
// 264: 75 0f                         jne     0x275 <_JIT_ENTRY+0x275>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_Dealloc
// 270: 4c 89 ef                      movq    %r13, %rdi
// 273: ff d0                         callq   *%rax
// 275: 48 8b 45 00                   movq    (%rbp), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7f 22                         jg      0x2a0 <_JIT_ENTRY+0x2a0>
// 27e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_NegativeRefcount
// 292: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 297: 48 89 ea                      movq    %rbp, %rdx
// 29a: ff d0                         callq   *%rax
// 29c: 48 8b 45 00                   movq    (%rbp), %rax
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 78 21                         js      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ae: ff d0                         callq   *%rax
// 2b0: 48 ff 4d 00                   decq    (%rbp)
// 2b4: 75 0f                         jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 48 89 ef                      movq    %rbp, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 4d 85 f6                      testq   %r14, %r14
// 2c8: 74 41                         je      0x30b <_JIT_ENTRY+0x30b>
// 2ca: 49 83 c4 f8                   addq    $-0x8, %r12
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_OPARG
// 2d8: 0f b7 c0                      movzwl  %ax, %eax
// 2db: 48 c1 e0 03                   shlq    $0x3, %rax
// 2df: 49 29 c7                      subq    %rax, %r15
// 2e2: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_CONTINUE
// 2f0: 48 89 df                      movq    %rbx, %rdi
// 2f3: 4c 89 e6                      movq    %r12, %rsi
// 2f6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2fb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: ff e0                         jmpq    *%rax
// 30b: 49 83 c4 f0                   addq    $-0x10, %r12
// 30f: e9 4c fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 314: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_code_body[789] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x6c, 0x07, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0x14, 0xc8, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x4c, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 f4                      movq    %r14, %r12
// 1f6: 49 29 cc                      subq    %rcx, %r12
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 4d 8b 6c 0e f8                movq    -0x8(%r14,%rcx), %r13
// 201: 4d 8b 7c 24 f0                movq    -0x10(%r12), %r15
// 206: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0       # xmm0 = mem[0],zero
// 20c: f2 41 0f 58 45 10             addsd   0x10(%r13), %xmm0
// 212: 49 83 3f 01                   cmpq    $0x1, (%r15)
// 216: 75 3d                         jne     0x255 <_JIT_ENTRY+0x255>
// 218: f2 41 0f 11 47 10             movsd   %xmm0, 0x10(%r15)
// 21e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 223: 75 28                         jne     0x24d <_JIT_ENTRY+0x24d>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: ff d0                         callq   *%rax
// 231: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 238: 49 ff 4d 00                   decq    (%r13)
// 23c: 75 0f                         jne     0x24d <_JIT_ENTRY+0x24d>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _PyFloat_ExactDealloc
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: ff d0                         callq   *%rax
// 24d: 4d 89 fd                      movq    %r15, %r13
// 250: e9 cb 00 00 00                jmp     0x320 <_JIT_ENTRY+0x320>
// 255: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 25a: 75 30                         jne     0x28c <_JIT_ENTRY+0x28c>
// 25c: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 262: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 267: 0f 85 b3 00 00 00             jne     0x320 <_JIT_ENTRY+0x320>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyInterpreterState_Get
// 277: ff d0                         callq   *%rax
// 279: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 280: 49 8b 07                      movq    (%r15), %rax
// 283: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 287: 49 89 0f                      movq    %rcx, (%r15)
// 28a: eb 6b                         jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  PyFloat_FromDouble
// 296: ff d0                         callq   *%rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 0f 84 b5 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2a1: 48 89 c5                      movq    %rax, %rbp
// 2a4: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 2a9: 75 23                         jne     0x2ce <_JIT_ENTRY+0x2ce>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  PyInterpreterState_Get
// 2b5: ff d0                         callq   *%rax
// 2b7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2be: 49 8b 07                      movq    (%r15), %rax
// 2c1: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c5: 49 89 0f                      movq    %rcx, (%r15)
// 2c8: 48 83 f8 01                   cmpq    $0x1, %rax
// 2cc: 7e 2f                         jle     0x2fd <_JIT_ENTRY+0x2fd>
// 2ce: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2d3: 75 48                         jne     0x31d <_JIT_ENTRY+0x31d>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  PyInterpreterState_Get
// 2df: ff d0                         callq   *%rax
// 2e1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e8: 49 8b 45 00                   movq    (%r13), %rax
// 2ec: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2f0: 49 89 4d 00                   movq    %rcx, (%r13)
// 2f4: 49 89 ed                      movq    %rbp, %r13
// 2f7: 48 83 f8 01                   cmpq    $0x1, %rax
// 2fb: 7f 23                         jg      0x320 <_JIT_ENTRY+0x320>
// 2fd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ff:  R_X86_64_64  .rodata.str1.1+0x5f
// 307: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000309:  R_X86_64_64  .rodata.str1.1+0x75
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 31b: ff d0                         callq   *%rax
// 31d: 49 89 ed                      movq    %rbp, %r13
// 320: 49 83 c4 f8                   addq    $-0x8, %r12
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_OPARG
// 32e: 0f b7 c0                      movzwl  %ax, %eax
// 331: 48 c1 e0 03                   shlq    $0x3, %rax
// 335: 49 29 c6                      subq    %rax, %r14
// 338: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_CONTINUE
// 346: 48 89 df                      movq    %rbx, %rdi
// 349: 4c 89 e6                      movq    %r12, %rsi
// 34c: 48 8b 14 24                   movq    (%rsp), %rdx
// 350: 48 83 c4 18                   addq    $0x18, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT_code_body[865] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0e, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0xf0, 0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x45, 0x10, 0x49, 0x83, 0x3f, 0x01, 0x75, 0x3d, 0xf2, 0x41, 0x0f, 0x11, 0x47, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0xe9, 0xcb, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x30, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x0f, 0x85, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0xeb, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb5, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x2f, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x89, 0xed, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xed, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x309, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x75},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 9c: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT_data_body[161] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 74 0f f8                movq    -0x8(%r15,%rcx), %r14
// 206: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _PyLong_Add
// 215: 48 89 ef                      movq    %rbp, %rdi
// 218: 4c 89 f6                      movq    %r14, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 49 89 c5                      movq    %rax, %r13
// 220: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: 75 3b                         jne     0x26c <_JIT_ENTRY+0x26c>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PyInterpreterState_Get
// 23b: ff d0                         callq   *%rax
// 23d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  PyInterpreterState_Get
// 24e: 49 ff 0e                      decq    (%r14)
// 251: 75 19                         jne     0x26c <_JIT_ENTRY+0x26c>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  PyObject_Free
// 25d: 4c 89 f7                      movq    %r14, %rdi
// 260: ff d0                         callq   *%rax
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 270: 75 1e                         jne     0x290 <_JIT_ENTRY+0x290>
// 272: ff d1                         callq   *%rcx
// 274: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27b: 48 ff 4d 00                   decq    (%rbp)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  PyObject_Free
// 28b: 48 89 ef                      movq    %rbp, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 4d 85 ed                      testq   %r13, %r13
// 293: 74 41                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 295: 49 83 c4 f8                   addq    $-0x8, %r12
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_OPARG
// 2a3: 0f b7 c0                      movzwl  %ax, %eax
// 2a6: 48 c1 e0 03                   shlq    $0x3, %rax
// 2aa: 49 29 c7                      subq    %rax, %r15
// 2ad: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _JIT_CONTINUE
// 2bb: 48 89 df                      movq    %rbx, %rdi
// 2be: 4c 89 e6                      movq    %r12, %rsi
// 2c1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2c6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 49 83 c4 f0                   addq    $-0x10, %r12
// 2da: e9 81 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 2df: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x74, 0x0f, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x81, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 49 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %rbp
// 206: 4d 8b 74 24 f0                movq    -0x10(%r12), %r14
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  PyUnicode_Concat
// 215: 4c 89 f7                      movq    %r14, %rdi
// 218: 48 89 ee                      movq    %rbp, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 49 89 c5                      movq    %rax, %r13
// 220: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: 75 3b                         jne     0x26c <_JIT_ENTRY+0x26c>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PyInterpreterState_Get
// 23b: ff d0                         callq   *%rax
// 23d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  PyInterpreterState_Get
// 24e: 49 ff 0e                      decq    (%r14)
// 251: 75 19                         jne     0x26c <_JIT_ENTRY+0x26c>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _PyUnicode_ExactDealloc
// 25d: 4c 89 f7                      movq    %r14, %rdi
// 260: ff d0                         callq   *%rax
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 270: 75 1e                         jne     0x290 <_JIT_ENTRY+0x290>
// 272: ff d1                         callq   *%rcx
// 274: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27b: 48 ff 4d 00                   decq    (%rbp)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _PyUnicode_ExactDealloc
// 28b: 48 89 ef                      movq    %rbp, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 4d 85 ed                      testq   %r13, %r13
// 293: 74 41                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 295: 49 83 c4 f8                   addq    $-0x8, %r12
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_OPARG
// 2a3: 0f b7 c0                      movzwl  %ax, %eax
// 2a6: 48 c1 e0 03                   shlq    $0x3, %rax
// 2aa: 49 29 c7                      subq    %rax, %r15
// 2ad: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _JIT_CONTINUE
// 2bb: 48 89 df                      movq    %rbx, %rdi
// 2be: 4c 89 e6                      movq    %r12, %rsi
// 2c1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2c6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 49 83 c4 f0                   addq    $-0x10, %r12
// 2da: e9 81 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 2df: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0f, 0xf8, 0x4d, 0x8b, 0x74, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x81, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 f4                      movq    %r14, %r12
// 1f6: 49 29 cc                      subq    %rcx, %r12
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 4d 8b 6c 0e f8                movq    -0x8(%r14,%rcx), %r13
// 201: 4d 8b 7c 24 f0                movq    -0x10(%r12), %r15
// 206: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0       # xmm0 = mem[0],zero
// 20c: f2 41 0f 59 45 10             mulsd   0x10(%r13), %xmm0
// 212: 49 83 3f 01                   cmpq    $0x1, (%r15)
// 216: 75 3d                         jne     0x255 <_JIT_ENTRY+0x255>
// 218: f2 41 0f 11 47 10             movsd   %xmm0, 0x10(%r15)
// 21e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 223: 75 28                         jne     0x24d <_JIT_ENTRY+0x24d>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: ff d0                         callq   *%rax
// 231: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 238: 49 ff 4d 00                   decq    (%r13)
// 23c: 75 0f                         jne     0x24d <_JIT_ENTRY+0x24d>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _PyFloat_ExactDealloc
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: ff d0                         callq   *%rax
// 24d: 4d 89 fd                      movq    %r15, %r13
// 250: e9 cb 00 00 00                jmp     0x320 <_JIT_ENTRY+0x320>
// 255: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 25a: 75 30                         jne     0x28c <_JIT_ENTRY+0x28c>
// 25c: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 262: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 267: 0f 85 b3 00 00 00             jne     0x320 <_JIT_ENTRY+0x320>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyInterpreterState_Get
// 277: ff d0                         callq   *%rax
// 279: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 280: 49 8b 07                      movq    (%r15), %rax
// 283: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 287: 49 89 0f                      movq    %rcx, (%r15)
// 28a: eb 6b                         jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  PyFloat_FromDouble
// 296: ff d0                         callq   *%rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 0f 84 b5 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2a1: 48 89 c5                      movq    %rax, %rbp
// 2a4: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 2a9: 75 23                         jne     0x2ce <_JIT_ENTRY+0x2ce>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  PyInterpreterState_Get
// 2b5: ff d0                         callq   *%rax
// 2b7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2be: 49 8b 07                      movq    (%r15), %rax
// 2c1: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c5: 49 89 0f                      movq    %rcx, (%r15)
// 2c8: 48 83 f8 01                   cmpq    $0x1, %rax
// 2cc: 7e 2f                         jle     0x2fd <_JIT_ENTRY+0x2fd>
// 2ce: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2d3: 75 48                         jne     0x31d <_JIT_ENTRY+0x31d>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  PyInterpreterState_Get
// 2df: ff d0                         callq   *%rax
// 2e1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e8: 49 8b 45 00                   movq    (%r13), %rax
// 2ec: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2f0: 49 89 4d 00                   movq    %rcx, (%r13)
// 2f4: 49 89 ed                      movq    %rbp, %r13
// 2f7: 48 83 f8 01                   cmpq    $0x1, %rax
// 2fb: 7f 23                         jg      0x320 <_JIT_ENTRY+0x320>
// 2fd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ff:  R_X86_64_64  .rodata.str1.1+0x5f
// 307: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000309:  R_X86_64_64  .rodata.str1.1+0x75
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 31b: ff d0                         callq   *%rax
// 31d: 49 89 ed                      movq    %rbp, %r13
// 320: 49 83 c4 f8                   addq    $-0x8, %r12
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_OPARG
// 32e: 0f b7 c0                      movzwl  %ax, %eax
// 331: 48 c1 e0 03                   shlq    $0x3, %rax
// 335: 49 29 c6                      subq    %rax, %r14
// 338: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_CONTINUE
// 346: 48 89 df                      movq    %rbx, %rdi
// 349: 4c 89 e6                      movq    %r12, %rsi
// 34c: 48 8b 14 24                   movq    (%rsp), %rdx
// 350: 48 83 c4 18                   addq    $0x18, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT_code_body[865] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0e, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0xf0, 0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x45, 0x10, 0x49, 0x83, 0x3f, 0x01, 0x75, 0x3d, 0xf2, 0x41, 0x0f, 0x11, 0x47, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0xe9, 0xcb, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x30, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x0f, 0x85, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0xeb, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb5, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x2f, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x89, 0xed, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xed, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x309, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x75},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 9c: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT_data_body[161] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 74 0f f8                movq    -0x8(%r15,%rcx), %r14
// 206: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _PyLong_Multiply
// 215: 48 89 ef                      movq    %rbp, %rdi
// 218: 4c 89 f6                      movq    %r14, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 49 89 c5                      movq    %rax, %r13
// 220: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: 75 3b                         jne     0x26c <_JIT_ENTRY+0x26c>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PyInterpreterState_Get
// 23b: ff d0                         callq   *%rax
// 23d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  PyInterpreterState_Get
// 24e: 49 ff 0e                      decq    (%r14)
// 251: 75 19                         jne     0x26c <_JIT_ENTRY+0x26c>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  PyObject_Free
// 25d: 4c 89 f7                      movq    %r14, %rdi
// 260: ff d0                         callq   *%rax
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 270: 75 1e                         jne     0x290 <_JIT_ENTRY+0x290>
// 272: ff d1                         callq   *%rcx
// 274: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27b: 48 ff 4d 00                   decq    (%rbp)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  PyObject_Free
// 28b: 48 89 ef                      movq    %rbp, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 4d 85 ed                      testq   %r13, %r13
// 293: 74 41                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 295: 49 83 c4 f8                   addq    $-0x8, %r12
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_OPARG
// 2a3: 0f b7 c0                      movzwl  %ax, %eax
// 2a6: 48 c1 e0 03                   shlq    $0x3, %rax
// 2aa: 49 29 c7                      subq    %rax, %r15
// 2ad: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _JIT_CONTINUE
// 2bb: 48 89 df                      movq    %rbx, %rdi
// 2be: 4c 89 e6                      movq    %r12, %rsi
// 2c1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2c6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 49 83 c4 f0                   addq    $-0x10, %r12
// 2da: e9 81 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 2df: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x74, 0x0f, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x81, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 f4                      movq    %r14, %r12
// 1f6: 49 29 cc                      subq    %rcx, %r12
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 4d 8b 6c 0e f8                movq    -0x8(%r14,%rcx), %r13
// 201: 4d 8b 7c 24 f0                movq    -0x10(%r12), %r15
// 206: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0       # xmm0 = mem[0],zero
// 20c: f2 41 0f 5c 45 10             subsd   0x10(%r13), %xmm0
// 212: 49 83 3f 01                   cmpq    $0x1, (%r15)
// 216: 75 3d                         jne     0x255 <_JIT_ENTRY+0x255>
// 218: f2 41 0f 11 47 10             movsd   %xmm0, 0x10(%r15)
// 21e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 223: 75 28                         jne     0x24d <_JIT_ENTRY+0x24d>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: ff d0                         callq   *%rax
// 231: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 238: 49 ff 4d 00                   decq    (%r13)
// 23c: 75 0f                         jne     0x24d <_JIT_ENTRY+0x24d>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _PyFloat_ExactDealloc
// 248: 4c 89 ef                      movq    %r13, %rdi
// 24b: ff d0                         callq   *%rax
// 24d: 4d 89 fd                      movq    %r15, %r13
// 250: e9 cb 00 00 00                jmp     0x320 <_JIT_ENTRY+0x320>
// 255: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 25a: 75 30                         jne     0x28c <_JIT_ENTRY+0x28c>
// 25c: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 262: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 267: 0f 85 b3 00 00 00             jne     0x320 <_JIT_ENTRY+0x320>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  PyInterpreterState_Get
// 277: ff d0                         callq   *%rax
// 279: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 280: 49 8b 07                      movq    (%r15), %rax
// 283: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 287: 49 89 0f                      movq    %rcx, (%r15)
// 28a: eb 6b                         jmp     0x2f7 <_JIT_ENTRY+0x2f7>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  PyFloat_FromDouble
// 296: ff d0                         callq   *%rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 0f 84 b5 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2a1: 48 89 c5                      movq    %rax, %rbp
// 2a4: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 2a9: 75 23                         jne     0x2ce <_JIT_ENTRY+0x2ce>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  PyInterpreterState_Get
// 2b5: ff d0                         callq   *%rax
// 2b7: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2be: 49 8b 07                      movq    (%r15), %rax
// 2c1: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2c5: 49 89 0f                      movq    %rcx, (%r15)
// 2c8: 48 83 f8 01                   cmpq    $0x1, %rax
// 2cc: 7e 2f                         jle     0x2fd <_JIT_ENTRY+0x2fd>
// 2ce: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2d3: 75 48                         jne     0x31d <_JIT_ENTRY+0x31d>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  PyInterpreterState_Get
// 2df: ff d0                         callq   *%rax
// 2e1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e8: 49 8b 45 00                   movq    (%r13), %rax
// 2ec: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 2f0: 49 89 4d 00                   movq    %rcx, (%r13)
// 2f4: 49 89 ed                      movq    %rbp, %r13
// 2f7: 48 83 f8 01                   cmpq    $0x1, %rax
// 2fb: 7f 23                         jg      0x320 <_JIT_ENTRY+0x320>
// 2fd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ff:  R_X86_64_64  .rodata.str1.1+0x5f
// 307: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000309:  R_X86_64_64  .rodata.str1.1+0x75
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 31b: ff d0                         callq   *%rax
// 31d: 49 89 ed                      movq    %rbp, %r13
// 320: 49 83 c4 f8                   addq    $-0x8, %r12
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _JIT_OPARG
// 32e: 0f b7 c0                      movzwl  %ax, %eax
// 331: 48 c1 e0 03                   shlq    $0x3, %rax
// 335: 49 29 c6                      subq    %rax, %r14
// 338: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _JIT_CONTINUE
// 346: 48 89 df                      movq    %rbx, %rdi
// 349: 4c 89 e6                      movq    %r12, %rsi
// 34c: 48 8b 14 24                   movq    (%rsp), %rdx
// 350: 48 83 c4 18                   addq    $0x18, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: ff e0                         jmpq    *%rax
// 360: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT_code_body[865] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0e, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0xf0, 0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x45, 0x10, 0x49, 0x83, 0x3f, 0x01, 0x75, 0x3d, 0xf2, 0x41, 0x0f, 0x11, 0x47, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0xe9, 0xcb, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x30, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x0f, 0x85, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0xeb, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb5, 0xfe, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0f, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x2f, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x89, 0xed, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xed, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x309, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x75},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 9c: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT_data_body[161] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 74 0f f8                movq    -0x8(%r15,%rcx), %r14
// 206: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _PyLong_Subtract
// 215: 48 89 ef                      movq    %rbp, %rdi
// 218: 4c 89 f6                      movq    %r14, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 49 89 c5                      movq    %rax, %r13
// 220: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  PyInterpreterState_Get
// 22f: 75 3b                         jne     0x26c <_JIT_ENTRY+0x26c>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  PyInterpreterState_Get
// 23b: ff d0                         callq   *%rax
// 23d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  PyInterpreterState_Get
// 24e: 49 ff 0e                      decq    (%r14)
// 251: 75 19                         jne     0x26c <_JIT_ENTRY+0x26c>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  PyObject_Free
// 25d: 4c 89 f7                      movq    %r14, %rdi
// 260: ff d0                         callq   *%rax
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  PyInterpreterState_Get
// 26c: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 270: 75 1e                         jne     0x290 <_JIT_ENTRY+0x290>
// 272: ff d1                         callq   *%rcx
// 274: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27b: 48 ff 4d 00                   decq    (%rbp)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  PyObject_Free
// 28b: 48 89 ef                      movq    %rbp, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 4d 85 ed                      testq   %r13, %r13
// 293: 74 41                         je      0x2d6 <_JIT_ENTRY+0x2d6>
// 295: 49 83 c4 f8                   addq    $-0x8, %r12
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_OPARG
// 2a3: 0f b7 c0                      movzwl  %ax, %eax
// 2a6: 48 c1 e0 03                   shlq    $0x3, %rax
// 2aa: 49 29 c7                      subq    %rax, %r15
// 2ad: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _JIT_CONTINUE
// 2bb: 48 89 df                      movq    %rbx, %rdi
// 2be: 4c 89 e6                      movq    %r12, %rsi
// 2c1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2c6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ca: 5b                            popq    %rbx
// 2cb: 41 5c                         popq    %r12
// 2cd: 41 5d                         popq    %r13
// 2cf: 41 5e                         popq    %r14
// 2d1: 41 5f                         popq    %r15
// 2d3: 5d                            popq    %rbp
// 2d4: ff e0                         jmpq    *%rax
// 2d6: 49 83 c4 f0                   addq    $-0x10, %r12
// 2da: e9 81 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 2df: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x74, 0x0f, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x81, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_SLICE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 f6                      testq   %r14, %r14
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 fc                      movq    %r15, %r12
// 1f6: 49 29 cc                      subq    %rcx, %r12
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 49 8b 74 0f f8                movq    -0x8(%r15,%rcx), %rsi
// 201: 4d 8b 6c 24 e8                movq    -0x18(%r12), %r13
// 206: 49 8b 7c 24 f0                movq    -0x10(%r12), %rdi
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 215: ff d0                         callq   *%rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 74 6a                         je      0x286 <_JIT_ENTRY+0x286>
// 21c: 48 89 c5                      movq    %rax, %rbp
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  PyObject_GetItem
// 229: 4c 89 ef                      movq    %r13, %rdi
// 22c: 48 89 ee                      movq    %rbp, %rsi
// 22f: ff d0                         callq   *%rax
// 231: 49 89 c6                      movq    %rax, %r14
// 234: 48 8b 45 00                   movq    (%rbp), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 256: 48 89 ea                      movq    %rbp, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 48 8b 45 00                   movq    (%rbp), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 26                         js      0x289 <_JIT_ENTRY+0x289>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 48 ff 4d 00                   decq    (%rbp)
// 273: 75 14                         jne     0x289 <_JIT_ENTRY+0x289>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 48 89 ef                      movq    %rbp, %rdi
// 282: ff d0                         callq   *%rax
// 284: eb 03                         jmp     0x289 <_JIT_ENTRY+0x289>
// 286: 45 31 f6                      xorl    %r14d, %r14d
// 289: 49 8b 45 00                   movq    (%r13), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 7f 22                         jg      0x2b4 <_JIT_ENTRY+0x2b4>
// 292: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_NegativeRefcount
// 2a6: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 2ab: 4c 89 ea                      movq    %r13, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 21                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 ff 4d 00                   decq    (%r13)
// 2c8: 75 0f                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 ef                      movq    %r13, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 4d 85 f6                      testq   %r14, %r14
// 2dc: 74 40                         je      0x31e <_JIT_ENTRY+0x31e>
// 2de: 49 83 c4 f0                   addq    $-0x10, %r12
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _JIT_OPARG
// 2ec: 0f b7 c0                      movzwl  %ax, %eax
// 2ef: 48 c1 e0 03                   shlq    $0x3, %rax
// 2f3: 49 29 c7                      subq    %rax, %r15
// 2f6: 4d 89 77 e8                   movq    %r14, -0x18(%r15)
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _JIT_CONTINUE
// 304: 48 89 df                      movq    %rbx, %rdi
// 307: 4c 89 e6                      movq    %r12, %rsi
// 30a: 48 8b 14 24                   movq    (%rsp), %rdx
// 30e: 48 83 c4 18                   addq    $0x18, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: ff e0                         jmpq    *%rax
// 31e: 49 83 c4 e8                   addq    $-0x18, %r12
// 322: e9 2f fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 327: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SLICE_code_body[808] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x74, 0x0f, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0xe8, 0x49, 0x8b, 0x7c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x6a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x03, 0x45, 0x31, 0xf6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x40, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xe8, 0xe9, 0x2f, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SLICE_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SLICE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SLICE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 49 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %rbp
// 206: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  PyObject_GetItem
// 215: 4c 89 ef                      movq    %r13, %rdi
// 218: 48 89 ee                      movq    %rbp, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 49 89 c6                      movq    %rax, %r14
// 220: 49 8b 45 00                   movq    (%r13), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 242: 4c 89 ea                      movq    %r13, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 45 00                   movq    (%r13), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 78 21                         js      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 259: ff d0                         callq   *%rax
// 25b: 49 ff 4d 00                   decq    (%r13)
// 25f: 75 0f                         jne     0x270 <_JIT_ENTRY+0x270>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ef                      movq    %r13, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 48 8b 45 00                   movq    (%rbp), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 22                         jg      0x29b <_JIT_ENTRY+0x29b>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 292: 48 89 ea                      movq    %rbp, %rdx
// 295: ff d0                         callq   *%rax
// 297: 48 8b 45 00                   movq    (%rbp), %rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 21                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 ff 4d 00                   decq    (%rbp)
// 2af: 75 0f                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 48 89 ef                      movq    %rbp, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 4d 85 f6                      testq   %r14, %r14
// 2c3: 74 41                         je      0x306 <_JIT_ENTRY+0x306>
// 2c5: 49 83 c4 f8                   addq    $-0x8, %r12
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _JIT_OPARG
// 2d3: 0f b7 c0                      movzwl  %ax, %eax
// 2d6: 48 c1 e0 03                   shlq    $0x3, %rax
// 2da: 49 29 c7                      subq    %rax, %r15
// 2dd: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _JIT_CONTINUE
// 2eb: 48 89 df                      movq    %rbx, %rdi
// 2ee: 4c 89 e6                      movq    %r12, %rsi
// 2f1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2f6: 48 83 c4 18                   addq    $0x18, %rsp
// 2fa: 5b                            popq    %rbx
// 2fb: 41 5c                         popq    %r12
// 2fd: 41 5d                         popq    %r13
// 2ff: 41 5e                         popq    %r14
// 301: 41 5f                         popq    %r15
// 303: 5d                            popq    %rbp
// 304: ff e0                         jmpq    *%rax
// 306: 49 83 c4 f0                   addq    $-0x10, %r12
// 30a: e9 51 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 30f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0f, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x51, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 4c 89 74 24 18                movq    %r14, 0x18(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 97: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9d: 0f 8e d3 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 0f b7 e8                      movzwl  %ax, %ebp
// b0: 48 ff c5                      incq    %rbp
// b3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 4d 29 f4                      subq    %r14, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 1a8: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 85 db                      testq   %rbx, %rbx
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c1                      movzwl  %cx, %eax
// 1e2: f7 d1                         notl    %ecx
// 1e4: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ea: 48 63 c9                      movslq  %ecx, %rcx
// 1ed: 49 89 1c cf                   movq    %rbx, (%r15,%rcx,8)
// 1f1: 48 c1 e0 03                   shlq    $0x3, %rax
// 1f5: 4d 89 fd                      movq    %r15, %r13
// 1f8: 49 29 c5                      subq    %rax, %r13
// 1fb: 4d 8b 65 f0                   movq    -0x10(%r13), %r12
// 1ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000201:  R_X86_64_64  PyDict_Type
// 209: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 20e: 74 40                         je      0x250 <_JIT_ENTRY+0x250>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_OPARG
// 21a: 0f b7 c0                      movzwl  %ax, %eax
// 21d: f7 d8                         negl    %eax
// 21f: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 223: 4c 29 f0                      subq    %r14, %rax
// 226: 48 83 c0 b8                   addq    $-0x48, %rax
// 22a: 48 c1 e8 03                   shrq    $0x3, %rax
// 22e: 41 89 46 40                   movl    %eax, 0x40(%r14)
// 232: 49 8b 06                      movq    (%r14), %rax
// 235: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000237:  R_X86_64_64  _JIT_TARGET
// 23f: 89 c9                         movl    %ecx, %ecx
// 241: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 245: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 24b: e9 17 ff ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 250: 48 f7 d8                      negq    %rax
// 253: 4d 8b 7c 07 f8                movq    -0x8(%r15,%rax), %r15
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  PyDict_GetItemRef
// 262: 48 8d 54 24 20                leaq    0x20(%rsp), %rdx
// 267: 4c 89 e7                      movq    %r12, %rdi
// 26a: 4c 89 fe                      movq    %r15, %rsi
// 26d: ff d0                         callq   *%rax
// 26f: 89 c5                         movl    %eax, %ebp
// 271: 85 c0                         testl   %eax, %eax
// 273: 74 19                         je      0x28e <_JIT_ENTRY+0x28e>
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7e 28                         jle     0x2a6 <_JIT_ENTRY+0x2a6>
// 27e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000280:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 288: 85 c0                         testl   %eax, %eax
// 28a: 79 4a                         jns     0x2d6 <_JIT_ENTRY+0x2d6>
// 28c: eb 5f                         jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _PyErr_SetKeyError
// 298: 4c 89 ff                      movq    %r15, %rdi
// 29b: ff d0                         callq   *%rax
// 29d: 49 8b 04 24                   movq    (%r12), %rax
// 2a1: 48 85 c0                      testq   %rax, %rax
// 2a4: 7f d8                         jg      0x27e <_JIT_ENTRY+0x27e>
// 2a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_NegativeRefcount
// 2ba: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 2bf: 4c 89 e2                      movq    %r12, %rdx
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 8b 04 24                   movq    (%r12), %rax
// 2c8: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 17                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2d6: ff d3                         callq   *%rbx
// 2d8: 49 ff 0c 24                   decq    (%r12)
// 2dc: 75 0f                         jne     0x2ed <_JIT_ENTRY+0x2ed>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_Dealloc
// 2e8: 4c 89 e7                      movq    %r12, %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: 49 8b 07                      movq    (%r15), %rax
// 2f0: 48 85 c0                      testq   %rax, %rax
// 2f3: 7f 21                         jg      0x316 <_JIT_ENTRY+0x316>
// 2f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f7:  R_X86_64_64  .rodata.str1.1
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_NegativeRefcount
// 309: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 30e: 4c 89 fa                      movq    %r15, %rdx
// 311: ff d0                         callq   *%rax
// 313: 49 8b 07                      movq    (%r15), %rax
// 316: 85 c0                         testl   %eax, %eax
// 318: 78 16                         js      0x330 <_JIT_ENTRY+0x330>
// 31a: ff d3                         callq   *%rbx
// 31c: 49 ff 0f                      decq    (%r15)
// 31f: 75 0f                         jne     0x330 <_JIT_ENTRY+0x330>
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _Py_Dealloc
// 32b: 4c 89 ff                      movq    %r15, %rdi
// 32e: ff d0                         callq   *%rax
// 330: 4d 8d 65 f0                   leaq    -0x10(%r13), %r12
// 334: 85 ed                         testl   %ebp, %ebp
// 336: 0f 8e 1a fe ff ff             jle     0x156 <_JIT_ENTRY+0x156>
// 33c: 49 83 c5 f8                   addq    $-0x8, %r13
// 340: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 345: 49 89 04 24                   movq    %rax, (%r12)
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _JIT_CONTINUE
// 353: 4c 89 f7                      movq    %r14, %rdi
// 356: 4c 89 ee                      movq    %r13, %rsi
// 359: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 35e: 48 83 c4 28                   addq    $0x28, %rsp
// 362: 5b                            popq    %rbx
// 363: 41 5c                         popq    %r12
// 365: 41 5d                         popq    %r13
// 367: 41 5e                         popq    %r14
// 369: 41 5f                         popq    %r15
// 36b: 5d                            popq    %rbp
// 36c: ff e0                         jmpq    *%rax
// 36e: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT_code_body[879] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0x74, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x1c, 0xcf, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xc5, 0x4d, 0x8b, 0x65, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x74, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xf7, 0xd8, 0x49, 0x8d, 0x04, 0xc7, 0x4c, 0x29, 0xf0, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89, 0x46, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x17, 0xff, 0xff, 0xff, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x7c, 0x07, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x19, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x28, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x16, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x65, 0xf0, 0x85, 0xed, 0x0f, 0x8e, 0x1a, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT_code_holes[33] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 49 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %rbp
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyLong_Type
// 21b: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 21f: 0f 85 0d 01 00 00             jne     0x332 <_JIT_ENTRY+0x332>
// 225: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyList_Type
// 234: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 238: 0f 85 f4 00 00 00             jne     0x332 <_JIT_ENTRY+0x332>
// 23e: 48 83 7d 10 08                cmpq    $0x8, 0x10(%rbp)
// 243: 0f 87 e9 00 00 00             ja      0x332 <_JIT_ENTRY+0x332>
// 249: 8b 45 18                      movl    0x18(%rbp), %eax
// 24c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 250: 0f 8e dc 00 00 00             jle     0x332 <_JIT_ENTRY+0x332>
// 256: 49 8b 4d 18                   movq    0x18(%r13), %rcx
// 25a: 4c 8b 34 c1                   movq    (%rcx,%rax,8), %r14
// 25e: 41 8b 06                      movl    (%r14), %eax
// 261: ff c0                         incl    %eax
// 263: 74 0f                         je      0x274 <_JIT_ENTRY+0x274>
// 265: 41 89 06                      movl    %eax, (%r14)
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 272: ff d0                         callq   *%rax
// 274: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 278: 75 28                         jne     0x2a2 <_JIT_ENTRY+0x2a2>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  PyInterpreterState_Get
// 284: ff d0                         callq   *%rax
// 286: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28d: 48 ff 4d 00                   decq    (%rbp)
// 291: 75 0f                         jne     0x2a2 <_JIT_ENTRY+0x2a2>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  PyObject_Free
// 29d: 48 89 ef                      movq    %rbp, %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 45 00                   movq    (%r13), %rax
// 2a6: 48 85 c0                      testq   %rax, %rax
// 2a9: 7f 22                         jg      0x2cd <_JIT_ENTRY+0x2cd>
// 2ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ad:  R_X86_64_64  .rodata.str1.1
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_NegativeRefcount
// 2bf: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 2c4: 4c 89 ea                      movq    %r13, %rdx
// 2c7: ff d0                         callq   *%rax
// 2c9: 49 8b 45 00                   movq    (%r13), %rax
// 2cd: 49 83 c4 f8                   addq    $-0x8, %r12
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 21                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 4d 00                   decq    (%r13)
// 2e5: 75 0f                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_Dealloc
// 2f1: 4c 89 ef                      movq    %r13, %rdi
// 2f4: ff d0                         callq   *%rax
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _JIT_OPARG
// 300: 0f b7 c0                      movzwl  %ax, %eax
// 303: 48 c1 e0 03                   shlq    $0x3, %rax
// 307: 49 29 c7                      subq    %rax, %r15
// 30a: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _JIT_CONTINUE
// 318: 48 89 df                      movq    %rbx, %rdi
// 31b: 4c 89 e6                      movq    %r12, %rsi
// 31e: 48 8b 14 24                   movq    (%rsp), %rdx
// 322: 48 83 c4 18                   addq    $0x18, %rsp
// 326: 5b                            popq    %rbx
// 327: 41 5c                         popq    %r12
// 329: 41 5d                         popq    %r13
// 32b: 41 5e                         popq    %r14
// 32d: 41 5f                         popq    %r15
// 32f: 5d                            popq    %rbp
// 330: ff e0                         jmpq    *%rax
// 332: 49 29 dc                      subq    %rbx, %r12
// 335: 49 83 c4 b8                   addq    $-0x48, %r12
// 339: 49 c1 ec 03                   shrq    $0x3, %r12
// 33d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 341: 48 8b 03                      movq    (%rbx), %rax
// 344: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000346:  R_X86_64_64  _JIT_TARGET
// 34e: 89 c9                         movl    %ecx, %ecx
// 350: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 354: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 35a: e9 18 fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 35f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT_code_body[864] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf4, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xe9, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0xdc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4d, 0x18, 0x4c, 0x8b, 0x34, 0xc1, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x18, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 d8                      movzwl  %ax, %ebx
// b2: 48 ff c3                      incq    %rbx
// b5: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cb                      decq    %rbx
// d3: 48 83 fb 01                   cmpq    $0x1, %rbx
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d5                         callq   *%rbp
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 49 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %rbp
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyLong_Type
// 21b: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 21f: 0f 85 c6 00 00 00             jne     0x2eb <_JIT_ENTRY+0x2eb>
// 225: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyUnicode_Type
// 234: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 238: 0f 85 ad 00 00 00             jne     0x2eb <_JIT_ENTRY+0x2eb>
// 23e: 48 83 7d 10 08                cmpq    $0x8, 0x10(%rbp)
// 243: 0f 87 a2 00 00 00             ja      0x2eb <_JIT_ENTRY+0x2eb>
// 249: 8b 45 18                      movl    0x18(%rbp), %eax
// 24c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 250: 0f 8e 95 00 00 00             jle     0x2eb <_JIT_ENTRY+0x2eb>
// 256: 41 8b 4d 20                   movl    0x20(%r13), %ecx
// 25a: 89 ca                         movl    %ecx, %edx
// 25c: c1 ea 02                      shrl    $0x2, %edx
// 25f: 83 e2 07                      andl    $0x7, %edx
// 262: 83 fa 02                      cmpl    $0x2, %edx
// 265: 74 15                         je      0x27c <_JIT_ENTRY+0x27c>
// 267: 83 fa 01                      cmpl    $0x1, %edx
// 26a: 75 20                         jne     0x28c <_JIT_ENTRY+0x28c>
// 26c: f6 c1 20                      testb   $0x20, %cl
// 26f: 75 26                         jne     0x297 <_JIT_ENTRY+0x297>
// 271: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 275: 44 0f b6 34 01                movzbl  (%rcx,%rax), %r14d
// 27a: eb 69                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 27c: f6 c1 20                      testb   $0x20, %cl
// 27f: 75 31                         jne     0x2b2 <_JIT_ENTRY+0x2b2>
// 281: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 285: 44 0f b7 34 41                movzwl  (%rcx,%rax,2), %r14d
// 28a: eb 59                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 28c: f6 c1 20                      testb   $0x20, %cl
// 28f: 75 3c                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 291: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 295: eb 4a                         jmp     0x2e1 <_JIT_ENTRY+0x2e1>
// 297: 31 d2                         xorl    %edx, %edx
// 299: f6 c1 40                      testb   $0x40, %cl
// 29c: 0f 94 c2                      sete    %dl
// 29f: 48 c1 e2 04                   shlq    $0x4, %rdx
// 2a3: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// 2a7: 48 83 c1 28                   addq    $0x28, %rcx
// 2ab: 44 0f b6 34 01                movzbl  (%rcx,%rax), %r14d
// 2b0: eb 33                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 2b2: 31 d2                         xorl    %edx, %edx
// 2b4: f6 c1 40                      testb   $0x40, %cl
// 2b7: 0f 94 c2                      sete    %dl
// 2ba: 48 c1 e2 04                   shlq    $0x4, %rdx
// 2be: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// 2c2: 48 83 c1 28                   addq    $0x28, %rcx
// 2c6: 44 0f b7 34 41                movzwl  (%rcx,%rax,2), %r14d
// 2cb: eb 18                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 2cd: 31 d2                         xorl    %edx, %edx
// 2cf: f6 c1 40                      testb   $0x40, %cl
// 2d2: 0f 94 c2                      sete    %dl
// 2d5: 48 c1 e2 04                   shlq    $0x4, %rdx
// 2d9: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// 2dd: 48 83 c1 28                   addq    $0x28, %rcx
// 2e1: 44 8b 34 81                   movl    (%rcx,%rax,4), %r14d
// 2e5: 41 83 fe 7f                   cmpl    $0x7f, %r14d
// 2e9: 76 2d                         jbe     0x318 <_JIT_ENTRY+0x318>
// 2eb: 49 29 dc                      subq    %rbx, %r12
// 2ee: 49 83 c4 b8                   addq    $-0x48, %r12
// 2f2: 49 c1 ec 03                   shrq    $0x3, %r12
// 2f6: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2fa: 48 8b 03                      movq    (%rbx), %rax
// 2fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ff:  R_X86_64_64  _JIT_TARGET
// 307: 89 c9                         movl    %ecx, %ecx
// 309: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 30d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 313: e9 5f fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 318: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 31c: 75 28                         jne     0x346 <_JIT_ENTRY+0x346>
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  PyInterpreterState_Get
// 328: ff d0                         callq   *%rax
// 32a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 331: 48 ff 4d 00                   decq    (%rbp)
// 335: 75 0f                         jne     0x346 <_JIT_ENTRY+0x346>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  PyObject_Free
// 341: 48 89 ef                      movq    %rbp, %rdi
// 344: ff d0                         callq   *%rax
// 346: 49 8b 45 00                   movq    (%r13), %rax
// 34a: 48 85 c0                      testq   %rax, %rax
// 34d: 7f 22                         jg      0x371 <_JIT_ENTRY+0x371>
// 34f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000351:  R_X86_64_64  .rodata.str1.1
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  _Py_NegativeRefcount
// 363: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 368: 4c 89 ea                      movq    %r13, %rdx
// 36b: ff d0                         callq   *%rax
// 36d: 49 8b 45 00                   movq    (%r13), %rax
// 371: 49 83 c4 f8                   addq    $-0x8, %r12
// 375: 85 c0                         testl   %eax, %eax
// 377: 78 21                         js      0x39a <_JIT_ENTRY+0x39a>
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 383: ff d0                         callq   *%rax
// 385: 49 ff 4d 00                   decq    (%r13)
// 389: 75 0f                         jne     0x39a <_JIT_ENTRY+0x39a>
// 38b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038d:  R_X86_64_64  _Py_Dealloc
// 395: 4c 89 ef                      movq    %r13, %rdi
// 398: ff d0                         callq   *%rax
// 39a: 44 89 f0                      movl    %r14d, %eax
// 39d: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 3a1: 48 c1 e0 04                   shlq    $0x4, %rax
// 3a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003a7:  R_X86_64_64  _PyRuntime
// 3af: 48 01 c8                      addq    %rcx, %rax
// 3b2: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 3b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003ba:  R_X86_64_64  _JIT_OPARG
// 3c2: 0f b7 c9                      movzwl  %cx, %ecx
// 3c5: 48 c1 e1 03                   shlq    $0x3, %rcx
// 3c9: 49 29 cf                      subq    %rcx, %r15
// 3cc: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 3d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d2:  R_X86_64_64  _JIT_CONTINUE
// 3da: 48 89 df                      movq    %rbx, %rdi
// 3dd: 4c 89 e6                      movq    %r12, %rsi
// 3e0: 48 8b 14 24                   movq    (%rsp), %rdx
// 3e4: 48 83 c4 18                   addq    $0x18, %rsp
// 3e8: 5b                            popq    %rbx
// 3e9: 41 5c                         popq    %r12
// 3eb: 41 5d                         popq    %r13
// 3ed: 41 5e                         popq    %r14
// 3ef: 41 5f                         popq    %r15
// 3f1: 5d                            popq    %rbp
// 3f2: ff e0                         jmpq    *%rax
// 3f4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT_code_body[1013] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa2, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0x95, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x26, 0x49, 0x8b, 0x4d, 0x38, 0x44, 0x0f, 0xb6, 0x34, 0x01, 0xeb, 0x69, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4d, 0x38, 0x44, 0x0f, 0xb7, 0x34, 0x41, 0xeb, 0x59, 0xf6, 0xc1, 0x20, 0x75, 0x3c, 0x49, 0x8b, 0x4d, 0x38, 0xeb, 0x4a, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x44, 0x0f, 0xb6, 0x34, 0x01, 0xeb, 0x33, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x44, 0x0f, 0xb7, 0x34, 0x41, 0xeb, 0x18, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x44, 0x8b, 0x34, 0x81, 0x41, 0x83, 0xfe, 0x7f, 0x76, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5f, 0xfe, 0xff, 0xff, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x44, 0x89, 0xf0, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x49, 0x89, 0x47, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x3ba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 49 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %rbp
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyLong_Type
// 21b: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 21f: 0f 85 0a 01 00 00             jne     0x32f <_JIT_ENTRY+0x32f>
// 225: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyTuple_Type
// 234: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 238: 0f 85 f1 00 00 00             jne     0x32f <_JIT_ENTRY+0x32f>
// 23e: 48 83 7d 10 08                cmpq    $0x8, 0x10(%rbp)
// 243: 0f 87 e6 00 00 00             ja      0x32f <_JIT_ENTRY+0x32f>
// 249: 8b 45 18                      movl    0x18(%rbp), %eax
// 24c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 250: 0f 8e d9 00 00 00             jle     0x32f <_JIT_ENTRY+0x32f>
// 256: 4d 8b 74 c5 18                movq    0x18(%r13,%rax,8), %r14
// 25b: 41 8b 06                      movl    (%r14), %eax
// 25e: ff c0                         incl    %eax
// 260: 74 0f                         je      0x271 <_JIT_ENTRY+0x271>
// 262: 41 89 06                      movl    %eax, (%r14)
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 26f: ff d0                         callq   *%rax
// 271: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 275: 75 28                         jne     0x29f <_JIT_ENTRY+0x29f>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  PyInterpreterState_Get
// 281: ff d0                         callq   *%rax
// 283: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28a: 48 ff 4d 00                   decq    (%rbp)
// 28e: 75 0f                         jne     0x29f <_JIT_ENTRY+0x29f>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  PyObject_Free
// 29a: 48 89 ef                      movq    %rbp, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 49 8b 45 00                   movq    (%r13), %rax
// 2a3: 48 85 c0                      testq   %rax, %rax
// 2a6: 7f 22                         jg      0x2ca <_JIT_ENTRY+0x2ca>
// 2a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002aa:  R_X86_64_64  .rodata.str1.1
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 2c1: 4c 89 ea                      movq    %r13, %rdx
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 8b 45 00                   movq    (%r13), %rax
// 2ca: 49 83 c4 f8                   addq    $-0x8, %r12
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 78 21                         js      0x2f3 <_JIT_ENTRY+0x2f3>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2dc: ff d0                         callq   *%rax
// 2de: 49 ff 4d 00                   decq    (%r13)
// 2e2: 75 0f                         jne     0x2f3 <_JIT_ENTRY+0x2f3>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_Dealloc
// 2ee: 4c 89 ef                      movq    %r13, %rdi
// 2f1: ff d0                         callq   *%rax
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _JIT_OPARG
// 2fd: 0f b7 c0                      movzwl  %ax, %eax
// 300: 48 c1 e0 03                   shlq    $0x3, %rax
// 304: 49 29 c7                      subq    %rax, %r15
// 307: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _JIT_CONTINUE
// 315: 48 89 df                      movq    %rbx, %rdi
// 318: 4c 89 e6                      movq    %r12, %rsi
// 31b: 48 8b 14 24                   movq    (%rsp), %rdx
// 31f: 48 83 c4 18                   addq    $0x18, %rsp
// 323: 5b                            popq    %rbx
// 324: 41 5c                         popq    %r12
// 326: 41 5d                         popq    %r13
// 328: 41 5e                         popq    %r14
// 32a: 41 5f                         popq    %r15
// 32c: 5d                            popq    %rbp
// 32d: ff e0                         jmpq    *%rax
// 32f: 49 29 dc                      subq    %rbx, %r12
// 332: 49 83 c4 b8                   addq    $-0x48, %r12
// 336: 49 c1 ec 03                   shrq    $0x3, %r12
// 33a: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 33e: 48 8b 03                      movq    (%rbx), %rax
// 341: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000343:  R_X86_64_64  _JIT_TARGET
// 34b: 89 c9                         movl    %ecx, %ecx
// 34d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 351: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 357: e9 1b fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 35c: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT_code_body[861] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xe6, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0xd9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x74, 0xc5, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1b, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 4b: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 4d 89 fc                      movq    %r15, %r12
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyExc_SystemError
// 13a: 48 8b 30                      movq    (%rax), %rsi
// 13d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013f:  R_X86_64_64  .rodata.str1.1+0x39
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _PyErr_SetString
// 151: 4c 89 f7                      movq    %r14, %rdi
// 154: ff d0                         callq   *%rax
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 48 85 d2                      testq   %rdx, %rdx
// 1d7: 0f 84 79 ff ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 1dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 c1                      movzwl  %cx, %eax
// 1ea: f7 d1                         notl    %ecx
// 1ec: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1f2: 48 63 c9                      movslq  %ecx, %rcx
// 1f5: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 1f9: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 201: 4d 89 fc                      movq    %r15, %r12
// 204: 49 29 d4                      subq    %rdx, %r12
// 207: 48 f7 da                      negq    %rdx
// 20a: 4d 8b 6c 17 f8                movq    -0x8(%r15,%rdx), %r13
// 20f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000211:  R_X86_64_64  PyTuple_Type
// 219: 49 39 55 08                   cmpq    %rdx, 0x8(%r13)
// 21d: 0f 85 0d ff ff ff             jne     0x130 <_JIT_ENTRY+0x130>
// 223: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000225:  R_X86_64_64  _JIT_OPARG
// 22d: 0f b7 d2                      movzwl  %dx, %edx
// 230: 49 39 55 10                   cmpq    %rdx, 0x10(%r13)
// 234: 0f 85 f6 fe ff ff             jne     0x130 <_JIT_ENTRY+0x130>
// 23a: 48 29 c1                      subq    %rax, %rcx
// 23d: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 241: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 245: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000247:  R_X86_64_64  _JIT_OPARG
// 24f: 44 0f b7 c3                   movzwl  %bx, %r8d
// 253: be 01 00 00 00                movl    $0x1, %esi
// 258: b9 01 00 00 00                movl    $0x1, %ecx
// 25d: 4c 89 e2                      movq    %r12, %rdx
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _PyDict_FromItems
// 26a: ff d0                         callq   *%rax
// 26c: 48 89 04 24                   movq    %rax, (%rsp)
// 270: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 276: 0f 8e 7f 00 00 00             jle     0x2fb <_JIT_ENTRY+0x2fb>
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _JIT_OPARG
// 286: 0f b7 e8                      movzwl  %ax, %ebp
// 289: 48 ff c5                      incq    %rbp
// 28c: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: eb 11                         jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 298: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 2a0: 48 ff cd                      decq    %rbp
// 2a3: 48 83 fd 01                   cmpq    $0x1, %rbp
// 2a7: 7e 52                         jle     0x2fb <_JIT_ENTRY+0x2fb>
// 2a9: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 2ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// 2b0: 49 8b 06                      movq    (%r14), %rax
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 7e 06                         jle     0x2be <_JIT_ENTRY+0x2be>
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 78 e4                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2bc: eb 25                         jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 2be: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c0:  R_X86_64_64  .rodata.str1.1
// 2c8: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 2cd: 4c 89 f2                      movq    %r14, %rdx
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_NegativeRefcount
// 2da: ff d0                         callq   *%rax
// 2dc: 49 8b 06                      movq    (%r14), %rax
// 2df: 85 c0                         testl   %eax, %eax
// 2e1: 78 bd                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 ff 0e                      decq    (%r14)
// 2f2: 75 ac                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2f4: 4c 89 f7                      movq    %r14, %rdi
// 2f7: ff d3                         callq   *%rbx
// 2f9: eb a5                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 2fb: 49 8b 45 00                   movq    (%r13), %rax
// 2ff: 48 85 c0                      testq   %rax, %rax
// 302: 7f 22                         jg      0x326 <_JIT_ENTRY+0x326>
// 304: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000306:  R_X86_64_64  .rodata.str1.1
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_NegativeRefcount
// 318: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 31d: 4c 89 ea                      movq    %r13, %rdx
// 320: ff d0                         callq   *%rax
// 322: 49 8b 45 00                   movq    (%r13), %rax
// 326: 85 c0                         testl   %eax, %eax
// 328: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 32d: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 332: 78 21                         js      0x355 <_JIT_ENTRY+0x355>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 49 ff 4d 00                   decq    (%r13)
// 344: 75 0f                         jne     0x355 <_JIT_ENTRY+0x355>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_Dealloc
// 350: 4c 89 ef                      movq    %r13, %rdi
// 353: ff d0                         callq   *%rax
// 355: 48 8b 14 24                   movq    (%rsp), %rdx
// 359: 48 85 d2                      testq   %rdx, %rdx
// 35c: 0f 84 f4 fd ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _JIT_OPARG
// 36c: 0f b7 c8                      movzwl  %ax, %ecx
// 36f: f7 d0                         notl    %eax
// 371: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 376: 48 98                         cltq
// 378: 48 29 c8                      subq    %rcx, %rax
// 37b: 49 89 14 c7                   movq    %rdx, (%r15,%rax,8)
// 37f: 48 01 c9                      addq    %rcx, %rcx
// 382: 48 f7 d9                      negq    %rcx
// 385: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _JIT_CONTINUE
// 393: 48 89 df                      movq    %rbx, %rdi
// 396: 4c 89 f2                      movq    %r14, %rdx
// 399: 48 83 c4 18                   addq    $0x18, %rsp
// 39d: 5b                            popq    %rbx
// 39e: 41 5c                         popq    %r12
// 3a0: 41 5d                         popq    %r13
// 3a2: 41 5e                         popq    %r14
// 3a4: 41 5f                         popq    %r15
// 3a6: 5d                            popq    %rbp
// 3a7: ff e0                         jmpq    *%rax
// 3a9: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP_code_body[938] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x4d, 0x89, 0xfc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xd4, 0x48, 0xf7, 0xda, 0x4d, 0x8b, 0x6c, 0x17, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x55, 0x08, 0x0f, 0x85, 0x0d, 0xff, 0xff, 0xff, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x39, 0x55, 0x10, 0x0f, 0x85, 0xf6, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xc1, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x7f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x52, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xac, 0x4c, 0x89, 0xf7, 0xff, 0xd3, 0xeb, 0xa5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf4, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x89, 0x14, 0xc7, 0x48, 0x01, 0xc9, 0x48, 0xf7, 0xd9, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP_code_holes[34] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BUILD_LIST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BUILD_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 0a 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f3 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 99: 0f 8e e3 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 44 0f b7 f8                   movzwl  %ax, %r15d
// ad: 49 ff c7                      incq    %r15
// b0: eb 1b                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// d5: 48 8b 45 00                   movq    (%rbp), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 12                         jle     0xf0 <_JIT_ENTRY+0xf0>
// de: 85 c0                         testl   %eax, %eax
// e0: 78 de                         js      0xc0 <_JIT_ENTRY+0xc0>
// e2: eb 32                         jmp     0x116 <_JIT_ENTRY+0x116>
// e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f4                      movq    %r14, %r12
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 f0                      movzwl  %ax, %esi
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 8d 04 36                   leaq    (%rsi,%rsi), %rax
// 1fa: 48 c1 e0 03                   shlq    $0x3, %rax
// 1fe: 4d 89 f4                      movq    %r14, %r12
// 201: 49 29 c4                      subq    %rax, %r12
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _PyList_FromArraySteal
// 20e: 4c 89 e7                      movq    %r12, %rdi
// 211: ff d0                         callq   *%rax
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 0f 84 46 ff ff ff             je      0x162 <_JIT_ENTRY+0x162>
// 21c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 0f b7 d1                      movzwl  %cx, %edx
// 229: 0f b7 c9                      movzwl  %cx, %ecx
// 22c: 48 8d 34 09                   leaq    (%rcx,%rcx), %rsi
// 230: 48 c1 e6 03                   shlq    $0x3, %rsi
// 234: 48 f7 de                      negq    %rsi
// 237: 49 89 04 36                   movq    %rax, (%r14,%rsi)
// 23b: b8 01 00 00 00                movl    $0x1, %eax
// 240: 29 d0                         subl    %edx, %eax
// 242: 48 98                         cltq
// 244: 48 29 c8                      subq    %rcx, %rax
// 247: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 df                      movq    %rbx, %rdi
// 258: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_LIST_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0x36, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x34, 0x09, 0x48, 0xc1, 0xe6, 0x03, 0x48, 0xf7, 0xde, 0x49, 0x89, 0x04, 0x36, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_LIST_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_LIST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_LIST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BUILD_MAP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BUILD_MAP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 4c 8b 3c 24                   movq    (%rsp), %r15
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 ff                      testq   %r15, %r15
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d8                      movzwl  %ax, %ebx
// 1e1: 89 d9                         movl    %ebx, %ecx
// 1e3: f7 d1                         notl    %ecx
// 1e5: 48 63 c9                      movslq  %ecx, %rcx
// 1e8: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1ec: 89 d9                         movl    %ebx, %ecx
// 1ee: f7 d9                         negl    %ecx
// 1f0: 48 63 c9                      movslq  %ecx, %rcx
// 1f3: 8d 14 09                      leal    (%rcx,%rcx), %edx
// 1f6: 48 63 d2                      movslq  %edx, %rdx
// 1f9: 48 01 ca                      addq    %rcx, %rdx
// 1fc: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 200: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 204: 48 83 c2 08                   addq    $0x8, %rdx
// 208: 44 0f b7 c0                   movzwl  %ax, %r8d
// 20c: be 02 00 00 00                movl    $0x2, %esi
// 211: b9 02 00 00 00                movl    $0x2, %ecx
// 216: 4c 89 e7                      movq    %r12, %rdi
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _PyDict_FromItems
// 223: ff d0                         callq   *%rax
// 225: 48 89 04 24                   movq    %rax, (%rsp)
// 229: 01 db                         addl    %ebx, %ebx
// 22b: 85 db                         testl   %ebx, %ebx
// 22d: 0f 8e 80 00 00 00             jle     0x2b3 <_JIT_ENTRY+0x2b3>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: 0f b7 c0                      movzwl  %ax, %eax
// 240: 4c 8d 2c 00                   leaq    (%rax,%rax), %r13
// 244: 49 ff c5                      incq    %r13
// 247: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000253:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25b: eb 0c                         jmp     0x269 <_JIT_ENTRY+0x269>
// 25d: 0f 1f 00                      nopl    (%rax)
// 260: 49 ff cd                      decq    %r13
// 263: 49 83 fd 01                   cmpq    $0x1, %r13
// 267: 7e 4a                         jle     0x2b3 <_JIT_ENTRY+0x2b3>
// 269: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 26d: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7e 07                         jle     0x280 <_JIT_ENTRY+0x280>
// 279: 85 c0                         testl   %eax, %eax
// 27b: 78 e3                         js      0x260 <_JIT_ENTRY+0x260>
// 27d: eb 1c                         jmp     0x29b <_JIT_ENTRY+0x29b>
// 27f: 90                            nop
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 28f: 4c 89 fa                      movq    %r15, %rdx
// 292: ff d5                         callq   *%rbp
// 294: 49 8b 07                      movq    (%r15), %rax
// 297: 85 c0                         testl   %eax, %eax
// 299: 78 c5                         js      0x260 <_JIT_ENTRY+0x260>
// 29b: ff d3                         callq   *%rbx
// 29d: 49 ff 0f                      decq    (%r15)
// 2a0: 75 be                         jne     0x260 <_JIT_ENTRY+0x260>
// 2a2: 4c 89 ff                      movq    %r15, %rdi
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: ff d0                         callq   *%rax
// 2b1: eb ad                         jmp     0x260 <_JIT_ENTRY+0x260>
// 2b3: 48 8b 34 24                   movq    (%rsp), %rsi
// 2b7: 48 85 f6                      testq   %rsi, %rsi
// 2ba: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2bf: 0f 84 91 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _JIT_OPARG
// 2cf: 0f b7 c0                      movzwl  %ax, %eax
// 2d2: 89 c1                         movl    %eax, %ecx
// 2d4: f7 d9                         negl    %ecx
// 2d6: 48 63 c9                      movslq  %ecx, %rcx
// 2d9: 8d 14 09                      leal    (%rcx,%rcx), %edx
// 2dc: 48 63 d2                      movslq  %edx, %rdx
// 2df: 48 01 ca                      addq    %rcx, %rdx
// 2e2: 49 89 34 d6                   movq    %rsi, (%r14,%rdx,8)
// 2e6: 01 c0                         addl    %eax, %eax
// 2e8: ba 01 00 00 00                movl    $0x1, %edx
// 2ed: 29 c2                         subl    %eax, %edx
// 2ef: 48 63 c2                      movslq  %edx, %rax
// 2f2: 48 01 c8                      addq    %rcx, %rax
// 2f5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_CONTINUE
// 303: 48 89 df                      movq    %rbx, %rdi
// 306: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 30b: 48 83 c4 18                   addq    $0x18, %rsp
// 30f: 5b                            popq    %rbx
// 310: 41 5c                         popq    %r12
// 312: 41 5d                         popq    %r13
// 314: 41 5e                         popq    %r14
// 316: 41 5f                         popq    %r15
// 318: 5d                            popq    %rbp
// 319: ff e0                         jmpq    *%rax
// 31b: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_MAP_code_body[796] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x89, 0xd9, 0xf7, 0xd9, 0x48, 0x63, 0xc9, 0x8d, 0x14, 0x09, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x4d, 0x8d, 0x24, 0xd6, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x2c, 0x00, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0c, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4a, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x1c, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd5, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xc5, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xbe, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xad, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x84, 0x91, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x48, 0x63, 0xc9, 0x8d, 0x14, 0x09, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0x89, 0x34, 0xd6, 0x01, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_MAP_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_MAP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BUILD_SET
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BUILD_SET.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 4d 29 fc                      subq    %r15, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1a8: 78 21                         js      0x1cb <_JIT_ENTRY+0x1cb>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 ff 4d 00                   decq    (%r13)
// 1ba: 75 0f                         jne     0x1cb <_JIT_ENTRY+0x1cb>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 ef                      movq    %r13, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1cf: 48 85 c9                      testq   %rcx, %rcx
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d8                      movzwl  %ax, %ebx
// 1e1: f7 d0                         notl    %eax
// 1e3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e8: 48 98                         cltq
// 1ea: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  PySet_New
// 1f8: 31 ff                         xorl    %edi, %edi
// 1fa: ff d0                         callq   *%rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 84 d9 00 00 00             je      0x2de <_JIT_ENTRY+0x2de>
// 205: 49 89 c5                      movq    %rax, %r13
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_OPARG
// 212: 66 85 c0                      testw   %ax, %ax
// 215: 0f 84 39 01 00 00             je      0x354 <_JIT_ENTRY+0x354>
// 21b: 4c 89 2c 24                   movq    %r13, (%rsp)
// 21f: 48 01 db                      addq    %rbx, %rbx
// 222: 48 f7 db                      negq    %rbx
// 225: 0f b7 c0                      movzwl  %ax, %eax
// 228: 83 f8 02                      cmpl    $0x2, %eax
// 22b: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 231: 44 0f 43 f8                   cmovael %eax, %r15d
// 235: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 239: 31 db                         xorl    %ebx, %ebx
// 23b: 31 ed                         xorl    %ebp, %ebp
// 23d: eb 0d                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 23f: 90                            nop
// 240: 48 ff c3                      incq    %rbx
// 243: 49 39 df                      cmpq    %rbx, %r15
// 246: 0f 84 9e 00 00 00             je      0x2ea <_JIT_ENTRY+0x2ea>
// 24c: 4d 8b 2c dc                   movq    (%r12,%rbx,8), %r13
// 250: 85 ed                         testl   %ebp, %ebp
// 252: 74 1c                         je      0x270 <_JIT_ENTRY+0x270>
// 254: 49 8b 45 00                   movq    (%r13), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 7e 31                         jle     0x28e <_JIT_ENTRY+0x28e>
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 78 df                         js      0x240 <_JIT_ENTRY+0x240>
// 261: eb 51                         jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 263: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 270: 48 8b 3c 24                   movq    (%rsp), %rdi
// 274: 4c 89 ee                      movq    %r13, %rsi
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  PySet_Add
// 281: ff d0                         callq   *%rax
// 283: 89 c5                         movl    %eax, %ebp
// 285: 49 8b 45 00                   movq    (%r13), %rax
// 289: 48 85 c0                      testq   %rax, %rax
// 28c: 7f cf                         jg      0x25d <_JIT_ENTRY+0x25d>
// 28e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000290:  R_X86_64_64  .rodata.str1.1
// 298: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 29d: 4c 89 ea                      movq    %r13, %rdx
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_NegativeRefcount
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 45 00                   movq    (%r13), %rax
// 2b0: 85 c0                         testl   %eax, %eax
// 2b2: 78 8c                         js      0x240 <_JIT_ENTRY+0x240>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2be: ff d0                         callq   *%rax
// 2c0: 49 ff 4d 00                   decq    (%r13)
// 2c4: 0f 85 76 ff ff ff             jne     0x240 <_JIT_ENTRY+0x240>
// 2ca: 4c 89 ef                      movq    %r13, %rdi
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: ff d0                         callq   *%rax
// 2d9: e9 62 ff ff ff                jmp     0x240 <_JIT_ENTRY+0x240>
// 2de: 48 c1 e3 03                   shlq    $0x3, %rbx
// 2e2: 49 29 de                      subq    %rbx, %r14
// 2e5: e9 69 fe ff ff                jmp     0x153 <_JIT_ENTRY+0x153>
// 2ea: 85 ed                         testl   %ebp, %ebp
// 2ec: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2f1: 4c 8b 2c 24                   movq    (%rsp), %r13
// 2f5: 74 5d                         je      0x354 <_JIT_ENTRY+0x354>
// 2f7: 49 8b 45 00                   movq    (%r13), %rax
// 2fb: 48 85 c0                      testq   %rax, %rax
// 2fe: 7f 22                         jg      0x322 <_JIT_ENTRY+0x322>
// 300: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000302:  R_X86_64_64  .rodata.str1.1
// 30a: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 30f: 4c 89 ea                      movq    %r13, %rdx
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_NegativeRefcount
// 31c: ff d0                         callq   *%rax
// 31e: 49 8b 45 00                   movq    (%r13), %rax
// 322: 85 c0                         testl   %eax, %eax
// 324: 0f 88 2c fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 334: ff d0                         callq   *%rax
// 336: 49 ff 4d 00                   decq    (%r13)
// 33a: 0f 85 16 fe ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 340: 4c 89 ef                      movq    %r13, %rdi
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_Dealloc
// 34d: ff d0                         callq   *%rax
// 34f: e9 02 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _JIT_OPARG
// 35e: 0f b7 c8                      movzwl  %ax, %ecx
// 361: 0f b7 c0                      movzwl  %ax, %eax
// 364: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 368: 48 c1 e2 03                   shlq    $0x3, %rdx
// 36c: 48 f7 da                      negq    %rdx
// 36f: 4d 89 2c 16                   movq    %r13, (%r14,%rdx)
// 373: ba 01 00 00 00                movl    $0x1, %edx
// 378: 29 ca                         subl    %ecx, %edx
// 37a: 48 63 ca                      movslq  %edx, %rcx
// 37d: 48 29 c1                      subq    %rax, %rcx
// 380: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _JIT_CONTINUE
// 38e: 4c 89 ff                      movq    %r15, %rdi
// 391: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 396: 48 83 c4 18                   addq    $0x18, %rsp
// 39a: 5b                            popq    %rbx
// 39b: 41 5c                         popq    %r12
// 39d: 41 5d                         popq    %r13
// 39f: 41 5e                         popq    %r14
// 3a1: 41 5f                         popq    %r15
// 3a3: 5d                            popq    %rbp
// 3a4: ff e0                         jmpq    *%rax
// 3a6: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_SET_code_body[935] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x2c, 0x24, 0x48, 0x01, 0xdb, 0x48, 0xf7, 0xdb, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf8, 0x4d, 0x8d, 0x24, 0xde, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x2c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x31, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x51, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xcf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x8c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x76, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x62, 0xff, 0xff, 0xff, 0x48, 0xc1, 0xe3, 0x03, 0x49, 0x29, 0xde, 0xe9, 0x69, 0xfe, 0xff, 0xff, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x5d, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x2c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x16, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x02, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0x00, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x4d, 0x89, 0x2c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x29, 0xc1, 0x49, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_SET_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_SET_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_SET_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BUILD_SLICE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BUILD_SLICE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 4d: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _JIT_OPARG
// 5c: f7 d0                         notl    %eax
// 5e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 63: 48 98                         cltq
// 65: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 69: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000070:  R_X86_64_64  _JIT_OPARG
// 78: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _PyDict_FromItems
// 86: be 01 00 00 00                movl    $0x1, %esi
// 8b: b9 01 00 00 00                movl    $0x1, %ecx
// 90: 4c 89 ea                      movq    %r13, %rdx
// 93: ff d0                         callq   *%rax
// 95: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 9a: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// a0: 0f 8e dd 00 00 00             jle     0x183 <_JIT_ENTRY+0x183>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: 0f b7 d8                      movzwl  %ax, %ebx
// b3: 48 ff c3                      incq    %rbx
// b6: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: eb 1b                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// d0: 48 ff cb                      decq    %rbx
// d3: 48 83 fb 01                   cmpq    $0x1, %rbx
// d7: 0f 8e a6 00 00 00             jle     0x183 <_JIT_ENTRY+0x183>
// dd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d5                         callq   *%rbp
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 49 29 de                      subq    %rbx, %r14
// 166: 49 83 c6 b8                   addq    $-0x48, %r14
// 16a: 49 c1 ee 03                   shrq    $0x3, %r14
// 16e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 172: 31 c0                         xorl    %eax, %eax
// 174: 48 83 c4 28                   addq    $0x28, %rsp
// 178: 5b                            popq    %rbx
// 179: 41 5c                         popq    %r12
// 17b: 41 5d                         popq    %r13
// 17d: 41 5e                         popq    %r14
// 17f: 41 5f                         popq    %r15
// 181: 5d                            popq    %rbp
// 182: c3                            retq
// 183: 49 8b 04 24                   movq    (%r12), %rax
// 187: 48 85 c0                      testq   %rax, %rax
// 18a: 7f 22                         jg      0x1ae <_JIT_ENTRY+0x1ae>
// 18c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018e:  R_X86_64_64  .rodata.str1.1
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_NegativeRefcount
// 1a0: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a5: 4c 89 e2                      movq    %r12, %rdx
// 1a8: ff d0                         callq   *%rax
// 1aa: 49 8b 04 24                   movq    (%r12), %rax
// 1ae: 85 c0                         testl   %eax, %eax
// 1b0: 78 21                         js      0x1d3 <_JIT_ENTRY+0x1d3>
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bc: ff d0                         callq   *%rax
// 1be: 49 ff 0c 24                   decq    (%r12)
// 1c2: 75 0f                         jne     0x1d3 <_JIT_ENTRY+0x1d3>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_Dealloc
// 1ce: 4c 89 e7                      movq    %r12, %rdi
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 74 2c                         je      0x209 <_JIT_ENTRY+0x209>
// 1dd: 49 89 45 00                   movq    %rax, (%r13)
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 66 83 f8 03                   cmpw    $0x3, %ax
// 1ef: 75 25                         jne     0x216 <_JIT_ENTRY+0x216>
// 1f1: 0f b7 c0                      movzwl  %ax, %eax
// 1f4: 31 c9                         xorl    %ecx, %ecx
// 1f6: 66 83 f8 03                   cmpw    $0x3, %ax
// 1fa: 0f 94 c1                      sete    %cl
// 1fd: 48 01 c1                      addq    %rax, %rcx
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 14 ce                   movq    (%r14,%rcx,8), %rdx
// 207: eb 0f                         jmp     0x218 <_JIT_ENTRY+0x218>
// 209: 4d 89 ee                      movq    %r13, %r14
// 20c: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 211: e9 4d ff ff ff                jmp     0x163 <_JIT_ENTRY+0x163>
// 216: 31 d2                         xorl    %edx, %edx
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _JIT_OPARG
// 222: 0f b7 c0                      movzwl  %ax, %eax
// 225: 31 c9                         xorl    %ecx, %ecx
// 227: 66 83 f8 03                   cmpw    $0x3, %ax
// 22b: 0f 94 c1                      sete    %cl
// 22e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 233: 29 ce                         subl    %ecx, %esi
// 235: f7 d1                         notl    %ecx
// 237: 4c 63 f9                      movslq  %ecx, %r15
// 23a: 49 29 c7                      subq    %rax, %r15
// 23d: 4b 8b 2c fe                   movq    (%r14,%r15,8), %rbp
// 241: 4c 63 e6                      movslq  %esi, %r12
// 244: 49 29 c4                      subq    %rax, %r12
// 247: 4f 8b 2c e6                   movq    (%r14,%r12,8), %r13
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  PySlice_New
// 255: 4c 89 ef                      movq    %r13, %rdi
// 258: 48 89 ee                      movq    %rbp, %rsi
// 25b: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 260: ff d0                         callq   *%rax
// 262: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 267: 49 8b 45 00                   movq    (%r13), %rax
// 26b: 48 85 c0                      testq   %rax, %rax
// 26e: 7f 22                         jg      0x292 <_JIT_ENTRY+0x292>
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_NegativeRefcount
// 284: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 289: 4c 89 ea                      movq    %r13, %rdx
// 28c: ff d0                         callq   *%rax
// 28e: 49 8b 45 00                   movq    (%r13), %rax
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 21                         js      0x2b7 <_JIT_ENTRY+0x2b7>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 ff 4d 00                   decq    (%r13)
// 2a6: 75 0f                         jne     0x2b7 <_JIT_ENTRY+0x2b7>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_Dealloc
// 2b2: 4c 89 ef                      movq    %r13, %rdi
// 2b5: ff d0                         callq   *%rax
// 2b7: 48 8b 45 00                   movq    (%rbp), %rax
// 2bb: 48 85 c0                      testq   %rax, %rax
// 2be: 7f 22                         jg      0x2e2 <_JIT_ENTRY+0x2e2>
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_NegativeRefcount
// 2d4: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 2d9: 48 89 ea                      movq    %rbp, %rdx
// 2dc: ff d0                         callq   *%rax
// 2de: 48 8b 45 00                   movq    (%rbp), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2e9: 78 21                         js      0x30c <_JIT_ENTRY+0x30c>
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f5: ff d0                         callq   *%rax
// 2f7: 48 ff 4d 00                   decq    (%rbp)
// 2fb: 75 0f                         jne     0x30c <_JIT_ENTRY+0x30c>
// 2fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ff:  R_X86_64_64  _Py_Dealloc
// 307: 48 89 ef                      movq    %rbp, %rdi
// 30a: ff d0                         callq   *%rax
// 30c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 311: 48 85 d2                      testq   %rdx, %rdx
// 314: 74 51                         je      0x367 <_JIT_ENTRY+0x367>
// 316: 48 8b 02                      movq    (%rdx), %rax
// 319: 48 85 c0                      testq   %rax, %rax
// 31c: 7f 23                         jg      0x341 <_JIT_ENTRY+0x341>
// 31e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000320:  R_X86_64_64  .rodata.str1.1+0x5f
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _Py_NegativeRefcount
// 332: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 337: ff d0                         callq   *%rax
// 339: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 33e: 48 8b 00                      movq    (%rax), %rax
// 341: 85 c0                         testl   %eax, %eax
// 343: 78 22                         js      0x367 <_JIT_ENTRY+0x367>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34f: ff d0                         callq   *%rax
// 351: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 356: 48 ff 0f                      decq    (%rdi)
// 359: 75 0c                         jne     0x367 <_JIT_ENTRY+0x367>
// 35b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035d:  R_X86_64_64  _Py_Dealloc
// 365: ff d0                         callq   *%rax
// 367: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 36b: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 370: 48 85 c9                      testq   %rcx, %rcx
// 373: 74 29                         je      0x39e <_JIT_ENTRY+0x39e>
// 375: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 379: 48 89 08                      movq    %rcx, (%rax)
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _JIT_CONTINUE
// 386: 48 89 df                      movq    %rbx, %rdi
// 389: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 38e: 48 83 c4 28                   addq    $0x28, %rsp
// 392: 5b                            popq    %rbx
// 393: 41 5c                         popq    %r12
// 395: 41 5d                         popq    %r13
// 397: 41 5e                         popq    %r14
// 399: 41 5f                         popq    %r15
// 39b: 5d                            popq    %rbp
// 39c: ff e0                         jmpq    *%rax
// 39e: 49 89 c6                      movq    %rax, %r14
// 3a1: e9 bd fd ff ff                jmp     0x163 <_JIT_ENTRY+0x163>
// 3a6: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_SLICE_code_body[935] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa6, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x2c, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x25, 0x0f, 0xb7, 0xc0, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0x48, 0x01, 0xc1, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x14, 0xce, 0xeb, 0x0f, 0x4d, 0x89, 0xee, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0xe9, 0x4d, 0xff, 0xff, 0xff, 0x31, 0xd2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0x49, 0x29, 0xc7, 0x4b, 0x8b, 0x2c, 0xfe, 0x4c, 0x63, 0xe6, 0x49, 0x29, 0xc4, 0x4f, 0x8b, 0x2c, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x48, 0x89, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x51, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0xbd, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_SLICE_code_holes[34] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 8f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_SLICE_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_SLICE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BUILD_STRING
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BUILD_STRING.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 4c 8b 3c 24                   movq    (%rsp), %r15
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 ff                      testq   %r15, %r15
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d8                      movzwl  %ax, %ebx
// 1e1: 89 d9                         movl    %ebx, %ecx
// 1e3: f7 d1                         notl    %ecx
// 1e5: 48 63 c9                      movslq  %ecx, %rcx
// 1e8: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1ec: 0f b7 d0                      movzwl  %ax, %edx
// 1ef: 48 8d 04 12                   leaq    (%rdx,%rdx), %rax
// 1f3: 48 c1 e0 03                   shlq    $0x3, %rax
// 1f7: 4d 89 f4                      movq    %r14, %r12
// 1fa: 49 29 c4                      subq    %rax, %r12
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _PyUnicode_JoinArray
// 207: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000209:  R_X86_64_64  _PyRuntime
// 211: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 218: 4c 89 e6                      movq    %r12, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 48 89 04 24                   movq    %rax, (%rsp)
// 221: 85 db                         testl   %ebx, %ebx
// 223: 7e 7e                         jle     0x2a3 <_JIT_ENTRY+0x2a3>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _JIT_OPARG
// 22f: 44 0f b7 e8                   movzwl  %ax, %r13d
// 233: 49 ff c5                      incq    %r13
// 236: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000242:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24a: eb 0d                         jmp     0x259 <_JIT_ENTRY+0x259>
// 24c: 0f 1f 40 00                   nopl    (%rax)
// 250: 49 ff cd                      decq    %r13
// 253: 49 83 fd 01                   cmpq    $0x1, %r13
// 257: 7e 4a                         jle     0x2a3 <_JIT_ENTRY+0x2a3>
// 259: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 25d: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 261: 49 8b 07                      movq    (%r15), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7e 07                         jle     0x270 <_JIT_ENTRY+0x270>
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 e3                         js      0x250 <_JIT_ENTRY+0x250>
// 26d: eb 1c                         jmp     0x28b <_JIT_ENTRY+0x28b>
// 26f: 90                            nop
// 270: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000272:  R_X86_64_64  .rodata.str1.1
// 27a: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 27f: 4c 89 fa                      movq    %r15, %rdx
// 282: ff d5                         callq   *%rbp
// 284: 49 8b 07                      movq    (%r15), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 c5                         js      0x250 <_JIT_ENTRY+0x250>
// 28b: ff d3                         callq   *%rbx
// 28d: 49 ff 0f                      decq    (%r15)
// 290: 75 be                         jne     0x250 <_JIT_ENTRY+0x250>
// 292: 4c 89 ff                      movq    %r15, %rdi
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: ff d0                         callq   *%rax
// 2a1: eb ad                         jmp     0x250 <_JIT_ENTRY+0x250>
// 2a3: 48 8b 34 24                   movq    (%rsp), %rsi
// 2a7: 48 85 f6                      testq   %rsi, %rsi
// 2aa: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2af: 0f 84 a1 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _JIT_OPARG
// 2bf: 0f b7 c8                      movzwl  %ax, %ecx
// 2c2: 0f b7 c0                      movzwl  %ax, %eax
// 2c5: 48 8d 14 00                   leaq    (%rax,%rax), %rdx
// 2c9: 48 c1 e2 03                   shlq    $0x3, %rdx
// 2cd: 48 f7 da                      negq    %rdx
// 2d0: 49 89 34 16                   movq    %rsi, (%r14,%rdx)
// 2d4: ba 01 00 00 00                movl    $0x1, %edx
// 2d9: 29 ca                         subl    %ecx, %edx
// 2db: 48 63 ca                      movslq  %edx, %rcx
// 2de: 48 29 c1                      subq    %rax, %rcx
// 2e1: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _JIT_CONTINUE
// 2ef: 48 89 df                      movq    %rbx, %rdi
// 2f2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2f7: 48 83 c4 18                   addq    $0x18, %rsp
// 2fb: 5b                            popq    %rbx
// 2fc: 41 5c                         popq    %r12
// 2fe: 41 5d                         popq    %r13
// 300: 41 5e                         popq    %r14
// 302: 41 5f                         popq    %r15
// 304: 5d                            popq    %rbp
// 305: ff e0                         jmpq    *%rax
// 307: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_STRING_code_body[776] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x0f, 0xb7, 0xd0, 0x48, 0x8d, 0x04, 0x12, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x85, 0xdb, 0x7e, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0d, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4a, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x1c, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd5, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xc5, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xbe, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xad, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x84, 0xa1, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0x00, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x49, 0x89, 0x34, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x29, 0xc1, 0x49, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_STRING_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_STRING_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_STRING_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_BUILD_TUPLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_BUILD_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 0a 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f3 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 99: 0f 8e e3 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 44 0f b7 f8                   movzwl  %ax, %r15d
// ad: 49 ff c7                      incq    %r15
// b0: eb 1b                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// d5: 48 8b 45 00                   movq    (%rbp), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 12                         jle     0xf0 <_JIT_ENTRY+0xf0>
// de: 85 c0                         testl   %eax, %eax
// e0: 78 de                         js      0xc0 <_JIT_ENTRY+0xc0>
// e2: eb 32                         jmp     0x116 <_JIT_ENTRY+0x116>
// e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f4                      movq    %r14, %r12
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 f0                      movzwl  %ax, %esi
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 8d 04 36                   leaq    (%rsi,%rsi), %rax
// 1fa: 48 c1 e0 03                   shlq    $0x3, %rax
// 1fe: 4d 89 f4                      movq    %r14, %r12
// 201: 49 29 c4                      subq    %rax, %r12
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _PyTuple_FromArraySteal
// 20e: 4c 89 e7                      movq    %r12, %rdi
// 211: ff d0                         callq   *%rax
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 0f 84 46 ff ff ff             je      0x162 <_JIT_ENTRY+0x162>
// 21c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 0f b7 d1                      movzwl  %cx, %edx
// 229: 0f b7 c9                      movzwl  %cx, %ecx
// 22c: 48 8d 34 09                   leaq    (%rcx,%rcx), %rsi
// 230: 48 c1 e6 03                   shlq    $0x3, %rsi
// 234: 48 f7 de                      negq    %rsi
// 237: 49 89 04 36                   movq    %rax, (%r14,%rsi)
// 23b: b8 01 00 00 00                movl    $0x1, %eax
// 240: 29 d0                         subl    %edx, %eax
// 242: 48 98                         cltq
// 244: 48 29 c8                      subq    %rcx, %rax
// 247: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 df                      movq    %rbx, %rdi
// 258: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_TUPLE_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0x36, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x46, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x34, 0x09, 0x48, 0xc1, 0xe6, 0x03, 0x48, 0xf7, 0xde, 0x49, 0x89, 0x04, 0x36, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_TUPLE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_BUILD_TUPLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_BUILD_TUPLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 4c 8b 34 24                   movq    (%rsp), %r14
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 f6                      testq   %r14, %r14
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d0                      movzwl  %ax, %edx
// 1e1: 89 d1                         movl    %edx, %ecx
// 1e3: f7 d1                         notl    %ecx
// 1e5: 4c 63 e9                      movslq  %ecx, %r13
// 1e8: 4f 89 34 ef                   movq    %r14, (%r15,%r13,8)
// 1ec: 0f b7 c8                      movzwl  %ax, %ecx
// 1ef: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1f7: 4c 89 f8                      movq    %r15, %rax
// 1fa: 48 29 f0                      subq    %rsi, %rax
// 1fd: 48 89 cf                      movq    %rcx, %rdi
// 200: 48 f7 df                      negq    %rdi
// 203: 49 29 cd                      subq    %rcx, %r13
// 206: 4b 8b 34 ef                   movq    (%r15,%r13,8), %rsi
// 20a: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// 210: 41 29 d0                      subl    %edx, %r8d
// 213: 4d 63 c8                      movslq  %r8d, %r9
// 216: 49 29 c9                      subq    %rcx, %r9
// 219: 44 8d 72 01                   leal    0x1(%rdx), %r14d
// 21d: 48 85 f6                      testq   %rsi, %rsi
// 220: 48 f7 d1                      notq    %rcx
// 223: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 227: 44 0f 44 f2                   cmovel  %edx, %r14d
// 22b: 4b 8b 3c cf                   movq    (%r15,%r9,8), %rdi
// 22f: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 233: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 23a: 0f 84 f6 00 00 00             je      0x336 <_JIT_ENTRY+0x336>
// 240: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 247: 4d 85 c0                      testq   %r8, %r8
// 24a: 0f 84 e6 00 00 00             je      0x336 <_JIT_ENTRY+0x336>
// 250: 4c 89 0c 24                   movq    %r9, (%rsp)
// 254: 48 8d 2c c8                   leaq    (%rax,%rcx,8), %rbp
// 258: 48 85 f6                      testq   %rsi, %rsi
// 25b: 0f 94 c3                      sete    %bl
// 25e: 44 89 f2                      movl    %r14d, %edx
// 261: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 266: 48 89 ee                      movq    %rbp, %rsi
// 269: 31 c9                         xorl    %ecx, %ecx
// 26b: 41 ff d0                      callq   *%r8
// 26e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_OPARG
// 27d: 66 85 c0                      testw   %ax, %ax
// 280: 0f 94 c0                      sete    %al
// 283: 84 c3                         testb   %al, %bl
// 285: 0f 84 d7 00 00 00             je      0x362 <_JIT_ENTRY+0x362>
// 28b: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7f 22                         jg      0x2bb <_JIT_ENTRY+0x2bb>
// 299: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029b:  R_X86_64_64  .rodata.str1.1
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_NegativeRefcount
// 2ad: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 2b2: 4c 89 e2                      movq    %r12, %rdx
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 8b 04 24                   movq    (%r12), %rax
// 2bb: 85 c0                         testl   %eax, %eax
// 2bd: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2c2: 4c 8b 34 24                   movq    (%rsp), %r14
// 2c6: 78 21                         js      0x2e9 <_JIT_ENTRY+0x2e9>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 ff 0c 24                   decq    (%r12)
// 2d8: 75 0f                         jne     0x2e9 <_JIT_ENTRY+0x2e9>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_Dealloc
// 2e4: 4c 89 e7                      movq    %r12, %rdi
// 2e7: ff d0                         callq   *%rax
// 2e9: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 2ed: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2f2: 48 85 c0                      testq   %rax, %rax
// 2f5: 0f 84 5b fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2fb: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 2ff: 49 89 04 24                   movq    %rax, (%r12)
// 303: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 308: 49 8b 47 10                   movq    0x10(%r15), %rax
// 30c: 48 8b 00                      movq    (%rax), %rax
// 30f: 84 c0                         testb   %al, %al
// 311: 0f 84 d0 00 00 00             je      0x3e7 <_JIT_ENTRY+0x3e7>
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_HandlePending
// 321: 4c 89 ff                      movq    %r15, %rdi
// 324: ff d0                         callq   *%rax
// 326: 85 c0                         testl   %eax, %eax
// 328: 0f 84 b9 00 00 00             je      0x3e7 <_JIT_ENTRY+0x3e7>
// 32e: 4d 89 f4                      movq    %r14, %r12
// 331: e9 20 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 336: 48 29 d8                      subq    %rbx, %rax
// 339: 48 83 c0 b8                   addq    $-0x48, %rax
// 33d: 48 c1 e8 03                   shrq    $0x3, %rax
// 341: 89 43 40                      movl    %eax, 0x40(%rbx)
// 344: 48 8b 03                      movq    (%rbx), %rax
// 347: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000349:  R_X86_64_64  _JIT_TARGET
// 351: 89 c9                         movl    %ecx, %ecx
// 353: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 357: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 35d: e9 05 fe ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 362: 41 83 fe 02                   cmpl    $0x2, %r14d
// 366: bb 01 00 00 00                movl    $0x1, %ebx
// 36b: 41 0f 43 de                   cmovael %r14d, %ebx
// 36f: 45 31 e4                      xorl    %r12d, %r12d
// 372: eb 18                         jmp     0x38c <_JIT_ENTRY+0x38c>
// 374: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 380: 49 ff c4                      incq    %r12
// 383: 4c 39 e3                      cmpq    %r12, %rbx
// 386: 0f 84 ff fe ff ff             je      0x28b <_JIT_ENTRY+0x28b>
// 38c: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 391: 49 8b 06                      movq    (%r14), %rax
// 394: 48 85 c0                      testq   %rax, %rax
// 397: 7e 07                         jle     0x3a0 <_JIT_ENTRY+0x3a0>
// 399: 85 c0                         testl   %eax, %eax
// 39b: 78 e3                         js      0x380 <_JIT_ENTRY+0x380>
// 39d: eb 26                         jmp     0x3c5 <_JIT_ENTRY+0x3c5>
// 39f: 90                            nop
// 3a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a2:  R_X86_64_64  .rodata.str1.1
// 3aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 3af: 4c 89 f2                      movq    %r14, %rdx
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_NegativeRefcount
// 3bc: ff d0                         callq   *%rax
// 3be: 49 8b 06                      movq    (%r14), %rax
// 3c1: 85 c0                         testl   %eax, %eax
// 3c3: 78 bb                         js      0x380 <_JIT_ENTRY+0x380>
// 3c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3cf: ff d0                         callq   *%rax
// 3d1: 49 ff 0e                      decq    (%r14)
// 3d4: 75 aa                         jne     0x380 <_JIT_ENTRY+0x380>
// 3d6: 4c 89 f7                      movq    %r14, %rdi
// 3d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003db:  R_X86_64_64  _Py_Dealloc
// 3e3: ff d0                         callq   *%rax
// 3e5: eb 99                         jmp     0x380 <_JIT_ENTRY+0x380>
// 3e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e9:  R_X86_64_64  _JIT_CONTINUE
// 3f1: 48 89 df                      movq    %rbx, %rdi
// 3f4: 4c 89 f6                      movq    %r14, %rsi
// 3f7: 4c 89 fa                      movq    %r15, %rdx
// 3fa: 48 83 c4 28                   addq    $0x28, %rsp
// 3fe: 5b                            popq    %rbx
// 3ff: 41 5c                         popq    %r12
// 401: 41 5d                         popq    %r13
// 403: 41 5e                         popq    %r14
// 405: 41 5f                         popq    %r15
// 407: 5d                            popq    %rbp
// 408: ff e0                         jmpq    *%rax
// 40a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS_code_body[1035] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4f, 0x89, 0x34, 0xef, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xf0, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x49, 0x29, 0xcd, 0x4b, 0x8b, 0x34, 0xef, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xd0, 0x4d, 0x63, 0xc8, 0x49, 0x29, 0xc9, 0x44, 0x8d, 0x72, 0x01, 0x48, 0x85, 0xf6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf2, 0x4b, 0x8b, 0x3c, 0xcf, 0x48, 0x8b, 0x57, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x8d, 0x2c, 0xc8, 0x48, 0x85, 0xf6, 0x0f, 0x94, 0xc3, 0x44, 0x89, 0xf2, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xf7, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5b, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0xe9, 0x20, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x05, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xe4, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0xff, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 4c 8b 34 24                   movq    (%rsp), %r14
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 f6                      testq   %r14, %r14
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d0                      movzwl  %ax, %edx
// 1e1: 89 d1                         movl    %edx, %ecx
// 1e3: f7 d1                         notl    %ecx
// 1e5: 4c 63 e9                      movslq  %ecx, %r13
// 1e8: 4f 89 34 ef                   movq    %r14, (%r15,%r13,8)
// 1ec: 0f b7 c8                      movzwl  %ax, %ecx
// 1ef: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1f7: 4c 89 f8                      movq    %r15, %rax
// 1fa: 48 29 f0                      subq    %rsi, %rax
// 1fd: 48 89 cf                      movq    %rcx, %rdi
// 200: 48 f7 df                      negq    %rdi
// 203: 49 29 cd                      subq    %rcx, %r13
// 206: 4b 8b 34 ef                   movq    (%r15,%r13,8), %rsi
// 20a: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// 210: 41 29 d0                      subl    %edx, %r8d
// 213: 4d 63 c8                      movslq  %r8d, %r9
// 216: 49 29 c9                      subq    %rcx, %r9
// 219: 44 8d 72 01                   leal    0x1(%rdx), %r14d
// 21d: 48 85 f6                      testq   %rsi, %rsi
// 220: 48 f7 d1                      notq    %rcx
// 223: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 227: 44 0f 44 f2                   cmovel  %edx, %r14d
// 22b: 4b 8b 3c cf                   movq    (%r15,%r9,8), %rdi
// 22f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000231:  R_X86_64_64  PyCFunction_Type
// 239: 48 39 57 08                   cmpq    %rdx, 0x8(%rdi)
// 23d: 0f 85 fb 00 00 00             jne     0x33e <_JIT_ENTRY+0x33e>
// 243: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 247: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 24f: 0f 85 e9 00 00 00             jne     0x33e <_JIT_ENTRY+0x33e>
// 255: 4c 89 0c 24                   movq    %r9, (%rsp)
// 259: 48 8d 2c c8                   leaq    (%rax,%rcx,8), %rbp
// 25d: 48 85 f6                      testq   %rsi, %rsi
// 260: 0f 94 c3                      sete    %bl
// 263: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 268: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 26c: 44 89 f2                      movl    %r14d, %edx
// 26f: 48 89 ee                      movq    %rbp, %rsi
// 272: 41 ff 50 08                   callq   *0x8(%r8)
// 276: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_OPARG
// 285: 66 85 c0                      testw   %ax, %ax
// 288: 0f 94 c0                      sete    %al
// 28b: 84 c3                         testb   %al, %bl
// 28d: 0f 84 d7 00 00 00             je      0x36a <_JIT_ENTRY+0x36a>
// 293: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 7f 22                         jg      0x2c3 <_JIT_ENTRY+0x2c3>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 2ba: 4c 89 e2                      movq    %r12, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 8b 04 24                   movq    (%r12), %rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2ca: 4c 8b 34 24                   movq    (%rsp), %r14
// 2ce: 78 21                         js      0x2f1 <_JIT_ENTRY+0x2f1>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2da: ff d0                         callq   *%rax
// 2dc: 49 ff 0c 24                   decq    (%r12)
// 2e0: 75 0f                         jne     0x2f1 <_JIT_ENTRY+0x2f1>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_Dealloc
// 2ec: 4c 89 e7                      movq    %r12, %rdi
// 2ef: ff d0                         callq   *%rax
// 2f1: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 2f5: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2fa: 48 85 c0                      testq   %rax, %rax
// 2fd: 0f 84 53 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 303: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 307: 49 89 04 24                   movq    %rax, (%r12)
// 30b: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 310: 49 8b 47 10                   movq    0x10(%r15), %rax
// 314: 48 8b 00                      movq    (%rax), %rax
// 317: 84 c0                         testb   %al, %al
// 319: 0f 84 c7 00 00 00             je      0x3e6 <_JIT_ENTRY+0x3e6>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_HandlePending
// 329: 4c 89 ff                      movq    %r15, %rdi
// 32c: ff d0                         callq   *%rax
// 32e: 85 c0                         testl   %eax, %eax
// 330: 0f 84 b0 00 00 00             je      0x3e6 <_JIT_ENTRY+0x3e6>
// 336: 4d 89 f4                      movq    %r14, %r12
// 339: e9 18 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 33e: 48 29 d8                      subq    %rbx, %rax
// 341: 48 83 c0 b8                   addq    $-0x48, %rax
// 345: 48 c1 e8 03                   shrq    $0x3, %rax
// 349: 89 43 40                      movl    %eax, 0x40(%rbx)
// 34c: 48 8b 03                      movq    (%rbx), %rax
// 34f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000351:  R_X86_64_64  _JIT_TARGET
// 359: 89 c9                         movl    %ecx, %ecx
// 35b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 35f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 365: e9 fd fd ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 36a: 41 83 fe 02                   cmpl    $0x2, %r14d
// 36e: bb 01 00 00 00                movl    $0x1, %ebx
// 373: 41 0f 43 de                   cmovael %r14d, %ebx
// 377: 45 31 e4                      xorl    %r12d, %r12d
// 37a: eb 10                         jmp     0x38c <_JIT_ENTRY+0x38c>
// 37c: 0f 1f 40 00                   nopl    (%rax)
// 380: 49 ff c4                      incq    %r12
// 383: 4c 39 e3                      cmpq    %r12, %rbx
// 386: 0f 84 07 ff ff ff             je      0x293 <_JIT_ENTRY+0x293>
// 38c: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 391: 49 8b 06                      movq    (%r14), %rax
// 394: 48 85 c0                      testq   %rax, %rax
// 397: 7e 06                         jle     0x39f <_JIT_ENTRY+0x39f>
// 399: 85 c0                         testl   %eax, %eax
// 39b: 78 e3                         js      0x380 <_JIT_ENTRY+0x380>
// 39d: eb 25                         jmp     0x3c4 <_JIT_ENTRY+0x3c4>
// 39f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a1:  R_X86_64_64  .rodata.str1.1
// 3a9: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 3ae: 4c 89 f2                      movq    %r14, %rdx
// 3b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b3:  R_X86_64_64  _Py_NegativeRefcount
// 3bb: ff d0                         callq   *%rax
// 3bd: 49 8b 06                      movq    (%r14), %rax
// 3c0: 85 c0                         testl   %eax, %eax
// 3c2: 78 bc                         js      0x380 <_JIT_ENTRY+0x380>
// 3c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ce: ff d0                         callq   *%rax
// 3d0: 49 ff 0e                      decq    (%r14)
// 3d3: 75 ab                         jne     0x380 <_JIT_ENTRY+0x380>
// 3d5: 4c 89 f7                      movq    %r14, %rdi
// 3d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003da:  R_X86_64_64  _Py_Dealloc
// 3e2: ff d0                         callq   *%rax
// 3e4: eb 9a                         jmp     0x380 <_JIT_ENTRY+0x380>
// 3e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e8:  R_X86_64_64  _JIT_CONTINUE
// 3f0: 48 89 df                      movq    %rbx, %rdi
// 3f3: 4c 89 f6                      movq    %r14, %rsi
// 3f6: 4c 89 fa                      movq    %r15, %rdx
// 3f9: 48 83 c4 28                   addq    $0x28, %rsp
// 3fd: 5b                            popq    %rbx
// 3fe: 41 5c                         popq    %r12
// 400: 41 5d                         popq    %r13
// 402: 41 5e                         popq    %r14
// 404: 41 5f                         popq    %r15
// 406: 5d                            popq    %rbp
// 407: ff e0                         jmpq    *%rax
// 409: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_code_body[1034] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4f, 0x89, 0x34, 0xef, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xf0, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x49, 0x29, 0xcd, 0x4b, 0x8b, 0x34, 0xef, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xd0, 0x4d, 0x63, 0xc8, 0x49, 0x29, 0xc9, 0x44, 0x8d, 0x72, 0x01, 0x48, 0x85, 0xf6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf2, 0x4b, 0x8b, 0x3c, 0xcf, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x57, 0x08, 0x0f, 0x85, 0xfb, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xe9, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x8d, 0x2c, 0xc8, 0x48, 0x85, 0xf6, 0x0f, 0x94, 0xc3, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xf7, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x53, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0xe9, 0x18, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfd, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xe4, 0xeb, 0x10, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0x07, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xab, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 4c 8b 34 24                   movq    (%rsp), %r14
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 f6                      testq   %r14, %r14
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d0                      movzwl  %ax, %edx
// 1e1: 89 d1                         movl    %edx, %ecx
// 1e3: f7 d1                         notl    %ecx
// 1e5: 4c 63 e9                      movslq  %ecx, %r13
// 1e8: 4f 89 34 ef                   movq    %r14, (%r15,%r13,8)
// 1ec: 0f b7 c8                      movzwl  %ax, %ecx
// 1ef: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 1f7: 4c 89 f8                      movq    %r15, %rax
// 1fa: 48 29 f0                      subq    %rsi, %rax
// 1fd: 48 89 cf                      movq    %rcx, %rdi
// 200: 48 f7 df                      negq    %rdi
// 203: 49 29 cd                      subq    %rcx, %r13
// 206: 4b 8b 34 ef                   movq    (%r15,%r13,8), %rsi
// 20a: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// 210: 41 29 d0                      subl    %edx, %r8d
// 213: 4d 63 c8                      movslq  %r8d, %r9
// 216: 49 29 c9                      subq    %rcx, %r9
// 219: 44 8d 72 01                   leal    0x1(%rdx), %r14d
// 21d: 48 85 f6                      testq   %rsi, %rsi
// 220: 48 f7 d1                      notq    %rcx
// 223: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 227: 44 0f 44 f2                   cmovel  %edx, %r14d
// 22b: 4b 8b 3c cf                   movq    (%r15,%r9,8), %rdi
// 22f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000231:  R_X86_64_64  PyCFunction_Type
// 239: 48 39 57 08                   cmpq    %rdx, 0x8(%rdi)
// 23d: 0f 85 fd 00 00 00             jne     0x340 <_JIT_ENTRY+0x340>
// 243: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 247: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 24f: 0f 85 eb 00 00 00             jne     0x340 <_JIT_ENTRY+0x340>
// 255: 4c 89 0c 24                   movq    %r9, (%rsp)
// 259: 48 8d 2c c8                   leaq    (%rax,%rcx,8), %rbp
// 25d: 48 85 f6                      testq   %rsi, %rsi
// 260: 0f 94 c3                      sete    %bl
// 263: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 268: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 26c: 44 89 f2                      movl    %r14d, %edx
// 26f: 48 89 ee                      movq    %rbp, %rsi
// 272: 31 c9                         xorl    %ecx, %ecx
// 274: 41 ff 50 08                   callq   *0x8(%r8)
// 278: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_OPARG
// 287: 66 85 c0                      testw   %ax, %ax
// 28a: 0f 94 c0                      sete    %al
// 28d: 84 c3                         testb   %al, %bl
// 28f: 0f 84 d7 00 00 00             je      0x36c <_JIT_ENTRY+0x36c>
// 295: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 29a: 49 8b 04 24                   movq    (%r12), %rax
// 29e: 48 85 c0                      testq   %rax, %rax
// 2a1: 7f 22                         jg      0x2c5 <_JIT_ENTRY+0x2c5>
// 2a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a5:  R_X86_64_64  .rodata.str1.1
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_NegativeRefcount
// 2b7: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 2bc: 4c 89 e2                      movq    %r12, %rdx
// 2bf: ff d0                         callq   *%rax
// 2c1: 49 8b 04 24                   movq    (%r12), %rax
// 2c5: 85 c0                         testl   %eax, %eax
// 2c7: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2cc: 4c 8b 34 24                   movq    (%rsp), %r14
// 2d0: 78 21                         js      0x2f3 <_JIT_ENTRY+0x2f3>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2dc: ff d0                         callq   *%rax
// 2de: 49 ff 0c 24                   decq    (%r12)
// 2e2: 75 0f                         jne     0x2f3 <_JIT_ENTRY+0x2f3>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_Dealloc
// 2ee: 4c 89 e7                      movq    %r12, %rdi
// 2f1: ff d0                         callq   *%rax
// 2f3: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 2f7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2fc: 48 85 c0                      testq   %rax, %rax
// 2ff: 0f 84 51 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 305: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 309: 49 89 04 24                   movq    %rax, (%r12)
// 30d: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 312: 49 8b 47 10                   movq    0x10(%r15), %rax
// 316: 48 8b 00                      movq    (%rax), %rax
// 319: 84 c0                         testb   %al, %al
// 31b: 0f 84 c5 00 00 00             je      0x3e6 <_JIT_ENTRY+0x3e6>
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _Py_HandlePending
// 32b: 4c 89 ff                      movq    %r15, %rdi
// 32e: ff d0                         callq   *%rax
// 330: 85 c0                         testl   %eax, %eax
// 332: 0f 84 ae 00 00 00             je      0x3e6 <_JIT_ENTRY+0x3e6>
// 338: 4d 89 f4                      movq    %r14, %r12
// 33b: e9 16 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 340: 48 29 d8                      subq    %rbx, %rax
// 343: 48 83 c0 b8                   addq    $-0x48, %rax
// 347: 48 c1 e8 03                   shrq    $0x3, %rax
// 34b: 89 43 40                      movl    %eax, 0x40(%rbx)
// 34e: 48 8b 03                      movq    (%rbx), %rax
// 351: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000353:  R_X86_64_64  _JIT_TARGET
// 35b: 89 c9                         movl    %ecx, %ecx
// 35d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 361: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 367: e9 fb fd ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 36c: 41 83 fe 02                   cmpl    $0x2, %r14d
// 370: bb 01 00 00 00                movl    $0x1, %ebx
// 375: 41 0f 43 de                   cmovael %r14d, %ebx
// 379: 45 31 e4                      xorl    %r12d, %r12d
// 37c: eb 0e                         jmp     0x38c <_JIT_ENTRY+0x38c>
// 37e: 66 90                         nop
// 380: 49 ff c4                      incq    %r12
// 383: 4c 39 e3                      cmpq    %r12, %rbx
// 386: 0f 84 09 ff ff ff             je      0x295 <_JIT_ENTRY+0x295>
// 38c: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 391: 49 8b 06                      movq    (%r14), %rax
// 394: 48 85 c0                      testq   %rax, %rax
// 397: 7e 06                         jle     0x39f <_JIT_ENTRY+0x39f>
// 399: 85 c0                         testl   %eax, %eax
// 39b: 78 e3                         js      0x380 <_JIT_ENTRY+0x380>
// 39d: eb 25                         jmp     0x3c4 <_JIT_ENTRY+0x3c4>
// 39f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a1:  R_X86_64_64  .rodata.str1.1
// 3a9: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 3ae: 4c 89 f2                      movq    %r14, %rdx
// 3b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b3:  R_X86_64_64  _Py_NegativeRefcount
// 3bb: ff d0                         callq   *%rax
// 3bd: 49 8b 06                      movq    (%r14), %rax
// 3c0: 85 c0                         testl   %eax, %eax
// 3c2: 78 bc                         js      0x380 <_JIT_ENTRY+0x380>
// 3c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ce: ff d0                         callq   *%rax
// 3d0: 49 ff 0e                      decq    (%r14)
// 3d3: 75 ab                         jne     0x380 <_JIT_ENTRY+0x380>
// 3d5: 4c 89 f7                      movq    %r14, %rdi
// 3d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003da:  R_X86_64_64  _Py_Dealloc
// 3e2: ff d0                         callq   *%rax
// 3e4: eb 9a                         jmp     0x380 <_JIT_ENTRY+0x380>
// 3e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e8:  R_X86_64_64  _JIT_CONTINUE
// 3f0: 48 89 df                      movq    %rbx, %rdi
// 3f3: 4c 89 f6                      movq    %r14, %rsi
// 3f6: 4c 89 fa                      movq    %r15, %rdx
// 3f9: 48 83 c4 28                   addq    $0x28, %rsp
// 3fd: 5b                            popq    %rbx
// 3fe: 41 5c                         popq    %r12
// 400: 41 5d                         popq    %r13
// 402: 41 5e                         popq    %r14
// 404: 41 5f                         popq    %r15
// 406: 5d                            popq    %rbp
// 407: ff e0                         jmpq    *%rax
// 409: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[1034] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4f, 0x89, 0x34, 0xef, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xf0, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x49, 0x29, 0xcd, 0x4b, 0x8b, 0x34, 0xef, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xd0, 0x4d, 0x63, 0xc8, 0x49, 0x29, 0xc9, 0x44, 0x8d, 0x72, 0x01, 0x48, 0x85, 0xf6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf2, 0x4b, 0x8b, 0x3c, 0xcf, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x57, 0x08, 0x0f, 0x85, 0xfd, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xeb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x48, 0x8d, 0x2c, 0xc8, 0x48, 0x85, 0xf6, 0x0f, 0x94, 0xc3, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x7f, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xf7, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x51, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0xe9, 0x16, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfb, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xe4, 0xeb, 0x0e, 0x66, 0x90, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x0f, 0x84, 0x09, 0xff, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xab, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 78 21                         js      0x1cb <_JIT_ENTRY+0x1cb>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 ff 4d 00                   decq    (%r13)
// 1ba: 75 0f                         jne     0x1cb <_JIT_ENTRY+0x1cb>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 ef                      movq    %r13, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 34 24                   movq    (%rsp), %rsi
// 1cf: 48 85 f6                      testq   %rsi, %rsi
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 c1                      movzwl  %cx, %eax
// 1e1: 89 c2                         movl    %eax, %edx
// 1e3: f7 d2                         notl    %edx
// 1e5: 4c 63 f2                      movslq  %edx, %r14
// 1e8: 4b 89 34 f7                   movq    %rsi, (%r15,%r14,8)
// 1ec: 0f b7 c9                      movzwl  %cx, %ecx
// 1ef: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1f7: 4d 89 fc                      movq    %r15, %r12
// 1fa: 49 29 d4                      subq    %rdx, %r12
// 1fd: 48 89 ca                      movq    %rcx, %rdx
// 200: 48 f7 da                      negq    %rdx
// 203: 49 29 ce                      subq    %rcx, %r14
// 206: 31 f6                         xorl    %esi, %esi
// 208: 66 85 c9                      testw   %cx, %cx
// 20b: 40 0f 94 c6                   sete    %sil
// 20f: 31 ff                         xorl    %edi, %edi
// 211: 66 83 f9 01                   cmpw    $0x1, %cx
// 215: 40 0f 94 c7                   sete    %dil
// 219: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 21e: 49 89 cd                      movq    %rcx, %r13
// 221: 49 f7 d5                      notq    %r13
// 224: 4c 0f 44 ea                   cmoveq  %rdx, %r13
// 228: 0f 44 f7                      cmovel  %edi, %esi
// 22b: 40 80 fe 01                   cmpb    $0x1, %sil
// 22f: 75 55                         jne     0x286 <_JIT_ENTRY+0x286>
// 231: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 236: 29 c2                         subl    %eax, %edx
// 238: 48 63 ea                      movslq  %edx, %rbp
// 23b: 48 29 cd                      subq    %rcx, %rbp
// 23e: 49 8b 3c ef                   movq    (%r15,%rbp,8), %rdi
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyCFunction_Type
// 24c: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 250: 75 34                         jne     0x286 <_JIT_ENTRY+0x286>
// 252: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 256: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 25a: 75 2a                         jne     0x286 <_JIT_ENTRY+0x286>
// 25c: 48 8b 58 08                   movq    0x8(%rax), %rbx
// 260: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 265: 8b 4e 2c                      movl    0x2c(%rsi), %ecx
// 268: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 26b: 89 56 2c                      movl    %edx, 0x2c(%rsi)
// 26e: 85 c9                         testl   %ecx, %ecx
// 270: 48 89 3c 24                   movq    %rdi, (%rsp)
// 274: 7e 3d                         jle     0x2b3 <_JIT_ENTRY+0x2b3>
// 276: 4f 8b 24 ec                   movq    (%r12,%r13,8), %r12
// 27a: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 27e: 75 6e                         jne     0x2ee <_JIT_ENTRY+0x2ee>
// 280: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 284: eb 6a                         jmp     0x2f0 <_JIT_ENTRY+0x2f0>
// 286: 49 29 dc                      subq    %rbx, %r12
// 289: 49 83 c4 b8                   addq    $-0x48, %r12
// 28d: 49 c1 ec 03                   shrq    $0x3, %r12
// 291: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 295: 48 8b 03                      movq    (%rbx), %rax
// 298: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029a:  R_X86_64_64  _JIT_TARGET
// 2a2: 89 c9                         movl    %ecx, %ecx
// 2a4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2ae: e9 b4 fe ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 2b3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b5:  R_X86_64_64  .rodata.str1.1+0x5f
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_CheckRecursiveCall
// 2c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 74 0a                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2d2: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2d7: e9 7a fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2dc: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2e0: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 2e4: 4f 8b 24 ec                   movq    (%r12,%r13,8), %r12
// 2e8: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 2ec: 74 92                         je      0x280 <_JIT_ENTRY+0x280>
// 2ee: 31 ff                         xorl    %edi, %edi
// 2f0: 4c 89 e6                      movq    %r12, %rsi
// 2f3: ff d3                         callq   *%rbx
// 2f5: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 2fa: ff 41 2c                      incl    0x2c(%rcx)
// 2fd: 49 89 c5                      movq    %rax, %r13
// 300: 49 8b 04 24                   movq    (%r12), %rax
// 304: 48 85 c0                      testq   %rax, %rax
// 307: 7f 22                         jg      0x32b <_JIT_ENTRY+0x32b>
// 309: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030b:  R_X86_64_64  .rodata.str1.1
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_NegativeRefcount
// 31d: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 322: 4c 89 e2                      movq    %r12, %rdx
// 325: ff d0                         callq   *%rax
// 327: 49 8b 04 24                   movq    (%r12), %rax
// 32b: 85 c0                         testl   %eax, %eax
// 32d: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 332: 78 21                         js      0x355 <_JIT_ENTRY+0x355>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 49 ff 0c 24                   decq    (%r12)
// 344: 75 0f                         jne     0x355 <_JIT_ENTRY+0x355>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_Dealloc
// 350: 4c 89 e7                      movq    %r12, %rdi
// 353: ff d0                         callq   *%rax
// 355: 48 8b 14 24                   movq    (%rsp), %rdx
// 359: 48 8b 02                      movq    (%rdx), %rax
// 35c: 48 85 c0                      testq   %rax, %rax
// 35f: 7f 22                         jg      0x383 <_JIT_ENTRY+0x383>
// 361: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000363:  R_X86_64_64  .rodata.str1.1
// 36b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036d:  R_X86_64_64  _Py_NegativeRefcount
// 375: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 37a: ff d0                         callq   *%rax
// 37c: 48 8b 04 24                   movq    (%rsp), %rax
// 380: 48 8b 00                      movq    (%rax), %rax
// 383: 85 c0                         testl   %eax, %eax
// 385: 78 21                         js      0x3a8 <_JIT_ENTRY+0x3a8>
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 391: ff d0                         callq   *%rax
// 393: 48 8b 3c 24                   movq    (%rsp), %rdi
// 397: 48 ff 0f                      decq    (%rdi)
// 39a: 75 0c                         jne     0x3a8 <_JIT_ENTRY+0x3a8>
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_Dealloc
// 3a6: ff d0                         callq   *%rax
// 3a8: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 3ac: 4d 85 ed                      testq   %r13, %r13
// 3af: 0f 84 a1 fd ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 3b5: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 3b9: 4d 89 2c 24                   movq    %r13, (%r12)
// 3bd: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 3c2: 49 8b 47 10                   movq    0x10(%r15), %rax
// 3c6: 48 8b 00                      movq    (%rax), %rax
// 3c9: 84 c0                         testb   %al, %al
// 3cb: 74 1b                         je      0x3e8 <_JIT_ENTRY+0x3e8>
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  _Py_HandlePending
// 3d7: 4c 89 ff                      movq    %r15, %rdi
// 3da: ff d0                         callq   *%rax
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 74 08                         je      0x3e8 <_JIT_ENTRY+0x3e8>
// 3e0: 4d 89 f4                      movq    %r14, %r12
// 3e3: e9 6e fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 3e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ea:  R_X86_64_64  _JIT_CONTINUE
// 3f2: 48 89 df                      movq    %rbx, %rdi
// 3f5: 4c 89 f6                      movq    %r14, %rsi
// 3f8: 4c 89 fa                      movq    %r15, %rdx
// 3fb: 48 83 c4 18                   addq    $0x18, %rsp
// 3ff: 5b                            popq    %rbx
// 400: 41 5c                         popq    %r12
// 402: 41 5d                         popq    %r13
// 404: 41 5e                         popq    %r14
// 406: 41 5f                         popq    %r15
// 408: 5d                            popq    %rbp
// 409: ff e0                         jmpq    *%rax
// 40b: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O_code_body[1036] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x4b, 0x89, 0x34, 0xf7, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xd4, 0x48, 0x89, 0xca, 0x48, 0xf7, 0xda, 0x49, 0x29, 0xce, 0x31, 0xf6, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x49, 0x89, 0xcd, 0x49, 0xf7, 0xd5, 0x4c, 0x0f, 0x44, 0xea, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x55, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xea, 0x48, 0x29, 0xcd, 0x49, 0x8b, 0x3c, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x34, 0x48, 0x8b, 0x47, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2a, 0x48, 0x8b, 0x58, 0x08, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x8b, 0x4e, 0x2c, 0x8d, 0x51, 0xff, 0x89, 0x56, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x3c, 0x24, 0x7e, 0x3d, 0x4f, 0x8b, 0x24, 0xec, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x6e, 0x48, 0x8b, 0x7f, 0x18, 0xeb, 0x6a, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0xfe, 0xff, 0xff, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0a, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0xe9, 0x7a, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x47, 0x10, 0x4f, 0x8b, 0x24, 0xec, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x92, 0x31, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0xff, 0x41, 0x2c, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xef, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa1, 0xfd, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xf7, 0x4d, 0x89, 0x2c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf4, 0xe9, 0x6e, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O_code_holes[33] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00 while calling a Python object\x00'
// 7e: 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _JIT_OPARG
// 5c: f7 d0                         notl    %eax
// 5e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 63: 48 98                         cltq
// 65: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 69: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000070:  R_X86_64_64  _JIT_OPARG
// 78: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _PyDict_FromItems
// 86: be 01 00 00 00                movl    $0x1, %esi
// 8b: b9 01 00 00 00                movl    $0x1, %ecx
// 90: 4c 89 ea                      movq    %r13, %rdx
// 93: ff d0                         callq   *%rax
// 95: 48 89 04 24                   movq    %rax, (%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1bd: 4c 8b 3c 24                   movq    (%rsp), %r15
// 1c1: 78 21                         js      0x1e4 <_JIT_ENTRY+0x1e4>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cd: ff d0                         callq   *%rax
// 1cf: 49 ff 0c 24                   decq    (%r12)
// 1d3: 75 0f                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_Dealloc
// 1df: 4c 89 e7                      movq    %r12, %rdi
// 1e2: ff d0                         callq   *%rax
// 1e4: 4d 85 ff                      testq   %r15, %r15
// 1e7: 0f 84 79 ff ff ff             je      0x166 <_JIT_ENTRY+0x166>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: 0f b7 c8                      movzwl  %ax, %ecx
// 1fa: f7 d0                         notl    %eax
// 1fc: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 201: 48 98                         cltq
// 203: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 207: 4c 8d 3c cd 00 00 00 00       leaq    (,%rcx,8), %r15
// 20f: 4c 89 f8                      movq    %r15, %rax
// 212: 48 f7 d8                      negq    %rax
// 215: 4d 8b 6c 06 f8                movq    -0x8(%r14,%rax), %r13
// 21a: 48 c1 e1 04                   shlq    $0x4, %rcx
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 228: 48 89 ef                      movq    %rbp, %rdi
// 22b: 4c 89 ee                      movq    %r13, %rsi
// 22e: ff 14 01                      callq   *(%rcx,%rax)
// 231: 49 89 c4                      movq    %rax, %r12
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 256: 4c 89 ea                      movq    %r13, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 21                         js      0x284 <_JIT_ENTRY+0x284>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 4d 00                   decq    (%r13)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 ef                      movq    %r13, %rdi
// 282: ff d0                         callq   *%rax
// 284: 4d 85 e4                      testq   %r12, %r12
// 287: 74 3b                         je      0x2c4 <_JIT_ENTRY+0x2c4>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_OPARG
// 293: 0f b7 c0                      movzwl  %ax, %eax
// 296: 48 c1 e0 03                   shlq    $0x3, %rax
// 29a: 49 29 c6                      subq    %rax, %r14
// 29d: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _JIT_CONTINUE
// 2ab: 48 89 df                      movq    %rbx, %rdi
// 2ae: 4c 89 f6                      movq    %r14, %rsi
// 2b1: 48 89 ea                      movq    %rbp, %rdx
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 4d 29 fe                      subq    %r15, %r14
// 2c7: 49 83 c6 f8                   addq    $-0x8, %r14
// 2cb: e9 93 fe ff ff                jmp     0x163 <_JIT_ENTRY+0x163>
// 2d0: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1_code_body[721] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x4c, 0x8d, 0x3c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x06, 0xf8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0x93, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1da: 48 85 d2                      testq   %rdx, %rdx
// 1dd: 74 81                         je      0x160 <_JIT_ENTRY+0x160>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 c8                      movzwl  %ax, %ecx
// 1ec: f7 d0                         notl    %eax
// 1ee: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f3: 48 98                         cltq
// 1f5: 49 89 14 c7                   movq    %rdx, (%r15,%rax,8)
// 1f9: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 201: 4d 89 fc                      movq    %r15, %r12
// 204: 49 29 c4                      subq    %rax, %r12
// 207: 48 f7 d8                      negq    %rax
// 20a: 49 8b 6c 07 f8                movq    -0x8(%r15,%rax), %rbp
// 20f: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 214: 48 c1 e1 04                   shlq    $0x4, %rcx
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 222: 4c 89 f7                      movq    %r14, %rdi
// 225: 4c 89 ee                      movq    %r13, %rsi
// 228: 48 89 ea                      movq    %rbp, %rdx
// 22b: ff 14 01                      callq   *(%rcx,%rax)
// 22e: 49 89 c6                      movq    %rax, %r14
// 231: 49 8b 45 00                   movq    (%r13), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 7f 22                         jg      0x25c <_JIT_ENTRY+0x25c>
// 23a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023c:  R_X86_64_64  .rodata.str1.1
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_NegativeRefcount
// 24e: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 253: 4c 89 ea                      movq    %r13, %rdx
// 256: ff d0                         callq   *%rax
// 258: 49 8b 45 00                   movq    (%r13), %rax
// 25c: 85 c0                         testl   %eax, %eax
// 25e: 78 21                         js      0x281 <_JIT_ENTRY+0x281>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26a: ff d0                         callq   *%rax
// 26c: 49 ff 4d 00                   decq    (%r13)
// 270: 75 0f                         jne     0x281 <_JIT_ENTRY+0x281>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_Dealloc
// 27c: 4c 89 ef                      movq    %r13, %rdi
// 27f: ff d0                         callq   *%rax
// 281: 48 8b 45 00                   movq    (%rbp), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 7f 22                         jg      0x2ac <_JIT_ENTRY+0x2ac>
// 28a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028c:  R_X86_64_64  .rodata.str1.1
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_NegativeRefcount
// 29e: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 2a3: 48 89 ea                      movq    %rbp, %rdx
// 2a6: ff d0                         callq   *%rax
// 2a8: 48 8b 45 00                   movq    (%rbp), %rax
// 2ac: 85 c0                         testl   %eax, %eax
// 2ae: 78 21                         js      0x2d1 <_JIT_ENTRY+0x2d1>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 ff 4d 00                   decq    (%rbp)
// 2c0: 75 0f                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 48 89 ef                      movq    %rbp, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 4d 85 f6                      testq   %r14, %r14
// 2d4: 74 41                         je      0x317 <_JIT_ENTRY+0x317>
// 2d6: 49 83 c4 f8                   addq    $-0x8, %r12
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _JIT_OPARG
// 2e4: 0f b7 c0                      movzwl  %ax, %eax
// 2e7: 48 c1 e0 03                   shlq    $0x3, %rax
// 2eb: 49 29 c7                      subq    %rax, %r15
// 2ee: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _JIT_CONTINUE
// 2fc: 48 89 df                      movq    %rbx, %rdi
// 2ff: 4c 89 e6                      movq    %r12, %rsi
// 302: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 307: 48 83 c4 18                   addq    $0x18, %rsp
// 30b: 5b                            popq    %rbx
// 30c: 41 5c                         popq    %r12
// 30e: 41 5d                         popq    %r13
// 310: 41 5e                         popq    %r14
// 312: 41 5f                         popq    %r15
// 314: 5d                            popq    %rbp
// 315: ff e0                         jmpq    *%rax
// 317: 49 83 c4 f0                   addq    $-0x10, %r12
// 31b: e9 40 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 320: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2_code_body[801] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc7, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x6c, 0x07, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xea, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x40, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1a8: 78 21                         js      0x1cb <_JIT_ENTRY+0x1cb>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 ff 4d 00                   decq    (%r13)
// 1ba: 75 0f                         jne     0x1cb <_JIT_ENTRY+0x1cb>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 ef                      movq    %r13, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 34 24                   movq    (%rsp), %rsi
// 1cf: 48 85 f6                      testq   %rsi, %rsi
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 c1                      movzwl  %cx, %eax
// 1e1: 89 c2                         movl    %eax, %edx
// 1e3: f7 d2                         notl    %edx
// 1e5: 4c 63 f2                      movslq  %edx, %r14
// 1e8: 4b 89 34 f7                   movq    %rsi, (%r15,%r14,8)
// 1ec: 0f b7 c9                      movzwl  %cx, %ecx
// 1ef: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1f7: 4d 89 fc                      movq    %r15, %r12
// 1fa: 49 29 d4                      subq    %rdx, %r12
// 1fd: 48 89 ce                      movq    %rcx, %rsi
// 200: 48 f7 de                      negq    %rsi
// 203: 49 29 ce                      subq    %rcx, %r14
// 206: 31 ff                         xorl    %edi, %edi
// 208: 66 83 f9 01                   cmpw    $0x1, %cx
// 20c: 40 0f 94 c7                   sete    %dil
// 210: 45 31 c0                      xorl    %r8d, %r8d
// 213: 66 83 f9 02                   cmpw    $0x2, %cx
// 217: 41 0f 94 c0                   sete    %r8b
// 21b: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 220: 48 89 ca                      movq    %rcx, %rdx
// 223: 48 f7 d2                      notq    %rdx
// 226: 48 0f 44 d6                   cmoveq  %rsi, %rdx
// 22a: 41 0f 44 f8                   cmovel  %r8d, %edi
// 22e: 40 80 ff 01                   cmpb    $0x1, %dil
// 232: 75 23                         jne     0x257 <_JIT_ENTRY+0x257>
// 234: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 239: 29 c6                         subl    %eax, %esi
// 23b: 4c 63 ee                      movslq  %esi, %r13
// 23e: 49 29 cd                      subq    %rcx, %r13
// 241: 4b 8b 0c ef                   movq    (%r15,%r13,8), %rcx
// 245: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 24a: 48 8b 40 10                   movq    0x10(%rax), %rax
// 24e: 48 3b 88 b8 54 06 00          cmpq    0x654b8(%rax), %rcx
// 255: 74 2d                         je      0x284 <_JIT_ENTRY+0x284>
// 257: 49 29 dc                      subq    %rbx, %r12
// 25a: 49 83 c4 b8                   addq    $-0x48, %r12
// 25e: 49 c1 ec 03                   shrq    $0x3, %r12
// 262: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 266: 48 8b 03                      movq    (%rbx), %rax
// 269: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026b:  R_X86_64_64  _JIT_TARGET
// 273: 89 c9                         movl    %ecx, %ecx
// 275: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 279: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27f: e9 e3 fe ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 284: 48 89 4c 24 18                movq    %rcx, 0x18(%rsp)
// 289: 49 8b 2c d4                   movq    (%r12,%rdx,8), %rbp
// 28d: 49 8b 74 d4 08                movq    0x8(%r12,%rdx,8), %rsi
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  PyObject_IsInstance
// 29c: 48 89 ef                      movq    %rbp, %rdi
// 29f: 48 89 34 24                   movq    %rsi, (%rsp)
// 2a3: ff d0                         callq   *%rax
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 0f 88 a9 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 2ad: 89 c7                         movl    %eax, %edi
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  PyBool_FromLong
// 2b9: ff d0                         callq   *%rax
// 2bb: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2c0: 48 8b 45 00                   movq    (%rbp), %rax
// 2c4: 48 85 c0                      testq   %rax, %rax
// 2c7: 7f 22                         jg      0x2eb <_JIT_ENTRY+0x2eb>
// 2c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cb:  R_X86_64_64  .rodata.str1.1
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_NegativeRefcount
// 2dd: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 2e2: 48 89 ea                      movq    %rbp, %rdx
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 8b 45 00                   movq    (%rbp), %rax
// 2eb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000002ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 78 18                         js      0x311 <_JIT_ENTRY+0x311>
// 2f9: 41 ff d4                      callq   *%r12
// 2fc: 48 ff 4d 00                   decq    (%rbp)
// 300: 75 0f                         jne     0x311 <_JIT_ENTRY+0x311>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_Dealloc
// 30c: 48 89 ef                      movq    %rbp, %rdi
// 30f: ff d0                         callq   *%rax
// 311: 48 8b 04 24                   movq    (%rsp), %rax
// 315: 48 8b 00                      movq    (%rax), %rax
// 318: 48 85 c0                      testq   %rax, %rax
// 31b: 7f 26                         jg      0x343 <_JIT_ENTRY+0x343>
// 31d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031f:  R_X86_64_64  .rodata.str1.1
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_NegativeRefcount
// 331: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 336: 48 8b 2c 24                   movq    (%rsp), %rbp
// 33a: 48 89 ea                      movq    %rbp, %rdx
// 33d: ff d0                         callq   *%rax
// 33f: 48 8b 45 00                   movq    (%rbp), %rax
// 343: 85 c0                         testl   %eax, %eax
// 345: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 34a: 78 1c                         js      0x368 <_JIT_ENTRY+0x368>
// 34c: 41 ff d4                      callq   *%r12
// 34f: 48 8b 04 24                   movq    (%rsp), %rax
// 353: 48 ff 08                      decq    (%rax)
// 356: 75 10                         jne     0x368 <_JIT_ENTRY+0x368>
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_Dealloc
// 362: 48 8b 3c 24                   movq    (%rsp), %rdi
// 366: ff d0                         callq   *%rax
// 368: 48 8b 45 00                   movq    (%rbp), %rax
// 36c: 48 85 c0                      testq   %rax, %rax
// 36f: 7f 22                         jg      0x393 <_JIT_ENTRY+0x393>
// 371: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000373:  R_X86_64_64  .rodata.str1.1
// 37b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037d:  R_X86_64_64  _Py_NegativeRefcount
// 385: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 38a: 48 89 ea                      movq    %rbp, %rdx
// 38d: ff d0                         callq   *%rax
// 38f: 48 8b 45 00                   movq    (%rbp), %rax
// 393: 85 c0                         testl   %eax, %eax
// 395: 78 18                         js      0x3af <_JIT_ENTRY+0x3af>
// 397: 41 ff d4                      callq   *%r12
// 39a: 48 ff 4d 00                   decq    (%rbp)
// 39e: 75 0f                         jne     0x3af <_JIT_ENTRY+0x3af>
// 3a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a2:  R_X86_64_64  _Py_Dealloc
// 3aa: 48 89 ef                      movq    %rbp, %rdi
// 3ad: ff d0                         callq   *%rax
// 3af: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 3b3: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 3b8: 48 85 c0                      testq   %rax, %rax
// 3bb: 0f 84 95 fd ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 3c1: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 3c5: 49 89 04 24                   movq    %rax, (%r12)
// 3c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cb:  R_X86_64_64  _JIT_CONTINUE
// 3d3: 48 89 df                      movq    %rbx, %rdi
// 3d6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3db: 48 83 c4 28                   addq    $0x28, %rsp
// 3df: 5b                            popq    %rbx
// 3e0: 41 5c                         popq    %r12
// 3e2: 41 5d                         popq    %r13
// 3e4: 41 5e                         popq    %r14
// 3e6: 41 5f                         popq    %r15
// 3e8: 5d                            popq    %rbp
// 3e9: ff e0                         jmpq    *%rax
// 3eb: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE_code_body[1004] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x4b, 0x89, 0x34, 0xf7, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xd4, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x49, 0x29, 0xce, 0x31, 0xff, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf9, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x48, 0x89, 0xca, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x23, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xee, 0x49, 0x29, 0xcd, 0x4b, 0x8b, 0x0c, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x88, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe3, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x4c, 0x24, 0x18, 0x49, 0x8b, 0x2c, 0xd4, 0x49, 0x8b, 0x74, 0xd4, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x34, 0x24, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xa9, 0xfe, 0xff, 0xff, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x1c, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0xfd, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xf7, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE_code_holes[33] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_LEN
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_LEN.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 78 21                         js      0x1cb <_JIT_ENTRY+0x1cb>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 ff 4d 00                   decq    (%r13)
// 1ba: 75 0f                         jne     0x1cb <_JIT_ENTRY+0x1cb>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 ef                      movq    %r13, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8b 34 24                   movq    (%rsp), %rsi
// 1cf: 48 85 f6                      testq   %rsi, %rsi
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 c1                      movzwl  %cx, %eax
// 1e1: 89 c2                         movl    %eax, %edx
// 1e3: f7 d2                         notl    %edx
// 1e5: 4c 63 f2                      movslq  %edx, %r14
// 1e8: 4b 89 34 f7                   movq    %rsi, (%r15,%r14,8)
// 1ec: 0f b7 c9                      movzwl  %cx, %ecx
// 1ef: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1f7: 4d 89 fc                      movq    %r15, %r12
// 1fa: 49 29 d4                      subq    %rdx, %r12
// 1fd: 48 89 ce                      movq    %rcx, %rsi
// 200: 48 f7 de                      negq    %rsi
// 203: 49 29 ce                      subq    %rcx, %r14
// 206: 31 ff                         xorl    %edi, %edi
// 208: 66 85 c9                      testw   %cx, %cx
// 20b: 40 0f 94 c7                   sete    %dil
// 20f: 45 31 c0                      xorl    %r8d, %r8d
// 212: 66 83 f9 01                   cmpw    $0x1, %cx
// 216: 41 0f 94 c0                   sete    %r8b
// 21a: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 21f: 48 89 ca                      movq    %rcx, %rdx
// 222: 48 f7 d2                      notq    %rdx
// 225: 48 0f 44 d6                   cmoveq  %rsi, %rdx
// 229: 41 0f 44 f8                   cmovel  %r8d, %edi
// 22d: 40 80 ff 01                   cmpb    $0x1, %dil
// 231: 75 23                         jne     0x256 <_JIT_ENTRY+0x256>
// 233: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 238: 29 c6                         subl    %eax, %esi
// 23a: 4c 63 ee                      movslq  %esi, %r13
// 23d: 49 29 cd                      subq    %rcx, %r13
// 240: 4b 8b 2c ef                   movq    (%r15,%r13,8), %rbp
// 244: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 249: 48 8b 40 10                   movq    0x10(%rax), %rax
// 24d: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 254: 74 2d                         je      0x283 <_JIT_ENTRY+0x283>
// 256: 49 29 dc                      subq    %rbx, %r12
// 259: 49 83 c4 b8                   addq    $-0x48, %r12
// 25d: 49 c1 ec 03                   shrq    $0x3, %r12
// 261: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 265: 48 8b 03                      movq    (%rbx), %rax
// 268: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026a:  R_X86_64_64  _JIT_TARGET
// 272: 89 c9                         movl    %ecx, %ecx
// 274: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 278: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27e: e9 e4 fe ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 283: 49 8b 3c d4                   movq    (%r12,%rdx,8), %rdi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  PyObject_Size
// 291: 48 89 3c 24                   movq    %rdi, (%rsp)
// 295: ff d0                         callq   *%rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 0f 88 b6 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 2a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a2:  R_X86_64_64  PyLong_FromSsize_t
// 2aa: 48 89 c7                      movq    %rax, %rdi
// 2ad: ff d1                         callq   *%rcx
// 2af: 48 89 c3                      movq    %rax, %rbx
// 2b2: 48 8b 45 00                   movq    (%rbp), %rax
// 2b6: 48 85 c0                      testq   %rax, %rax
// 2b9: 7f 22                         jg      0x2dd <_JIT_ENTRY+0x2dd>
// 2bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bd:  R_X86_64_64  .rodata.str1.1
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_NegativeRefcount
// 2cf: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 2d4: 48 89 ea                      movq    %rbp, %rdx
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 8b 45 00                   movq    (%rbp), %rax
// 2dd: 85 c0                         testl   %eax, %eax
// 2df: 4c 8b 24 24                   movq    (%rsp), %r12
// 2e3: 78 21                         js      0x306 <_JIT_ENTRY+0x306>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 48 ff 4d 00                   decq    (%rbp)
// 2f5: 75 0f                         jne     0x306 <_JIT_ENTRY+0x306>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 48 89 ef                      movq    %rbp, %rdi
// 304: ff d0                         callq   *%rax
// 306: 49 8b 04 24                   movq    (%r12), %rax
// 30a: 48 85 c0                      testq   %rax, %rax
// 30d: 7f 22                         jg      0x331 <_JIT_ENTRY+0x331>
// 30f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000311:  R_X86_64_64  .rodata.str1.1
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _Py_NegativeRefcount
// 323: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 328: 4c 89 e2                      movq    %r12, %rdx
// 32b: ff d0                         callq   *%rax
// 32d: 49 8b 04 24                   movq    (%r12), %rax
// 331: 85 c0                         testl   %eax, %eax
// 333: 78 21                         js      0x356 <_JIT_ENTRY+0x356>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33f: ff d0                         callq   *%rax
// 341: 49 ff 0c 24                   decq    (%r12)
// 345: 75 0f                         jne     0x356 <_JIT_ENTRY+0x356>
// 347: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000349:  R_X86_64_64  _Py_Dealloc
// 351: 4c 89 e7                      movq    %r12, %rdi
// 354: ff d0                         callq   *%rax
// 356: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 35a: 48 85 db                      testq   %rbx, %rbx
// 35d: 74 2c                         je      0x38b <_JIT_ENTRY+0x38b>
// 35f: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 363: 49 89 1c 24                   movq    %rbx, (%r12)
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _JIT_CONTINUE
// 371: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 376: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 37b: 48 83 c4 18                   addq    $0x18, %rsp
// 37f: 5b                            popq    %rbx
// 380: 41 5c                         popq    %r12
// 382: 41 5d                         popq    %r13
// 384: 41 5e                         popq    %r14
// 386: 41 5f                         popq    %r15
// 388: 5d                            popq    %rbp
// 389: ff e0                         jmpq    *%rax
// 38b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 390: e9 c1 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 395: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_LEN_code_body[918] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x4b, 0x89, 0x34, 0xf7, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xd4, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x49, 0x29, 0xce, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf9, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x48, 0x89, 0xca, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x23, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x4c, 0x63, 0xee, 0x49, 0x29, 0xcd, 0x4b, 0x8b, 0x2c, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x3c, 0xd4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xb6, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x24, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x85, 0xdb, 0x74, 0x2c, 0x4b, 0x8d, 0x34, 0xf7, 0x49, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0xe9, 0xc1, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_LEN_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_LEN_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_LEN_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 4c 8b 34 24                   movq    (%rsp), %r14
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 f6                      testq   %r14, %r14
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 f0                      movzwl  %ax, %esi
// 1e1: 89 f1                         movl    %esi, %ecx
// 1e3: f7 d1                         notl    %ecx
// 1e5: 4c 63 e9                      movslq  %ecx, %r13
// 1e8: 4f 89 34 ef                   movq    %r14, (%r15,%r13,8)
// 1ec: 0f b7 c8                      movzwl  %ax, %ecx
// 1ef: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1f7: 4c 89 f8                      movq    %r15, %rax
// 1fa: 48 29 d0                      subq    %rdx, %rax
// 1fd: 48 89 cf                      movq    %rcx, %rdi
// 200: 48 f7 df                      negq    %rdi
// 203: 49 29 cd                      subq    %rcx, %r13
// 206: 4b 8b 14 ef                   movq    (%r15,%r13,8), %rdx
// 20a: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// 210: 41 29 f0                      subl    %esi, %r8d
// 213: 49 63 e8                      movslq  %r8d, %rbp
// 216: 48 29 cd                      subq    %rcx, %rbp
// 219: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 21d: 48 85 d2                      testq   %rdx, %rdx
// 220: 48 f7 d1                      notq    %rcx
// 223: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 227: 44 0f 44 f6                   cmovel  %esi, %r14d
// 22b: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 22f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000231:  R_X86_64_64  PyMethodDescr_Type
// 239: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 23e: 75 21                         jne     0x261 <_JIT_ENTRY+0x261>
// 240: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 245: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 24d: 75 12                         jne     0x261 <_JIT_ENTRY+0x261>
// 24f: 48 8d 34 c8                   leaq    (%rax,%rcx,8), %rsi
// 253: 48 8b 3e                      movq    (%rsi), %rdi
// 256: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 25a: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 25f: 74 2c                         je      0x28d <_JIT_ENTRY+0x28d>
// 261: 48 29 d8                      subq    %rbx, %rax
// 264: 48 83 c0 b8                   addq    $-0x48, %rax
// 268: 48 c1 e8 03                   shrq    $0x3, %rax
// 26c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 26f: 48 8b 03                      movq    (%rbx), %rax
// 272: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000274:  R_X86_64_64  _JIT_TARGET
// 27c: 89 c9                         movl    %ecx, %ecx
// 27e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 282: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 288: e9 da fe ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 28d: 48 85 d2                      testq   %rdx, %rdx
// 290: 0f 94 c3                      sete    %bl
// 293: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 297: 48 89 34 24                   movq    %rsi, (%rsp)
// 29b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 29f: 48 8d 71 08                   leaq    0x8(%rcx), %rsi
// 2a3: 48 63 d0                      movslq  %eax, %rdx
// 2a6: 41 ff 50 08                   callq   *0x8(%r8)
// 2aa: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2ae: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _JIT_OPARG
// 2bd: 66 85 c0                      testw   %ax, %ax
// 2c0: 0f 94 c0                      sete    %al
// 2c3: 84 c3                         testb   %al, %bl
// 2c5: 0f 84 a2 00 00 00             je      0x36d <_JIT_ENTRY+0x36d>
// 2cb: 49 8b 04 24                   movq    (%r12), %rax
// 2cf: 48 85 c0                      testq   %rax, %rax
// 2d2: 7f 22                         jg      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d6:  R_X86_64_64  .rodata.str1.1
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_NegativeRefcount
// 2e8: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 2ed: 4c 89 e2                      movq    %r12, %rdx
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 8b 04 24                   movq    (%r12), %rax
// 2f6: 85 c0                         testl   %eax, %eax
// 2f8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2fd: 78 21                         js      0x320 <_JIT_ENTRY+0x320>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 309: ff d0                         callq   *%rax
// 30b: 49 ff 0c 24                   decq    (%r12)
// 30f: 75 0f                         jne     0x320 <_JIT_ENTRY+0x320>
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _Py_Dealloc
// 31b: 4c 89 e7                      movq    %r12, %rdi
// 31e: ff d0                         callq   *%rax
// 320: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 324: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 329: 48 85 c0                      testq   %rax, %rax
// 32c: 0f 84 24 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 332: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 336: 49 89 04 24                   movq    %rax, (%r12)
// 33a: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 33f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 343: 48 8b 00                      movq    (%rax), %rax
// 346: 84 c0                         testb   %al, %al
// 348: 0f 84 a2 00 00 00             je      0x3f0 <_JIT_ENTRY+0x3f0>
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_HandlePending
// 358: 4c 89 ff                      movq    %r15, %rdi
// 35b: ff d0                         callq   *%rax
// 35d: 85 c0                         testl   %eax, %eax
// 35f: 0f 84 8b 00 00 00             je      0x3f0 <_JIT_ENTRY+0x3f0>
// 365: 4d 89 f4                      movq    %r14, %r12
// 368: e9 e9 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 36d: 41 83 fe 02                   cmpl    $0x2, %r14d
// 371: b8 01 00 00 00                movl    $0x1, %eax
// 376: 41 0f 43 c6                   cmovael %r14d, %eax
// 37a: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 37f: 31 db                         xorl    %ebx, %ebx
// 381: eb 0e                         jmp     0x391 <_JIT_ENTRY+0x391>
// 383: 48 ff c3                      incq    %rbx
// 386: 48 39 5c 24 18                cmpq    %rbx, 0x18(%rsp)
// 38b: 0f 84 3a ff ff ff             je      0x2cb <_JIT_ENTRY+0x2cb>
// 391: 4c 8b 34 d9                   movq    (%rcx,%rbx,8), %r14
// 395: 49 8b 06                      movq    (%r14), %rax
// 398: 48 85 c0                      testq   %rax, %rax
// 39b: 7f 25                         jg      0x3c2 <_JIT_ENTRY+0x3c2>
// 39d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000039f:  R_X86_64_64  .rodata.str1.1
// 3a7: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 3ac: 4c 89 f2                      movq    %r14, %rdx
// 3af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b1:  R_X86_64_64  _Py_NegativeRefcount
// 3b9: ff d0                         callq   *%rax
// 3bb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3bf: 49 8b 06                      movq    (%r14), %rax
// 3c2: 85 c0                         testl   %eax, %eax
// 3c4: 78 bd                         js      0x383 <_JIT_ENTRY+0x383>
// 3c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3d0: ff d0                         callq   *%rax
// 3d2: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3d6: 49 ff 0e                      decq    (%r14)
// 3d9: 75 a8                         jne     0x383 <_JIT_ENTRY+0x383>
// 3db: 4c 89 f7                      movq    %r14, %rdi
// 3de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e0:  R_X86_64_64  _Py_Dealloc
// 3e8: ff d0                         callq   *%rax
// 3ea: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3ee: eb 93                         jmp     0x383 <_JIT_ENTRY+0x383>
// 3f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f2:  R_X86_64_64  _JIT_CONTINUE
// 3fa: 48 89 df                      movq    %rbx, %rdi
// 3fd: 4c 89 f6                      movq    %r14, %rsi
// 400: 4c 89 fa                      movq    %r15, %rdx
// 403: 48 83 c4 28                   addq    $0x28, %rsp
// 407: 5b                            popq    %rbx
// 408: 41 5c                         popq    %r12
// 40a: 41 5d                         popq    %r13
// 40c: 41 5e                         popq    %r14
// 40e: 41 5f                         popq    %r15
// 410: 5d                            popq    %rbp
// 411: ff e0                         jmpq    *%rax
// 413: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[1044] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4f, 0x89, 0x34, 0xef, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd0, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x49, 0x29, 0xcd, 0x4b, 0x8b, 0x14, 0xef, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf0, 0x49, 0x63, 0xe8, 0x48, 0x29, 0xcd, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf6, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x48, 0x8d, 0x34, 0xc8, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x2c, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xda, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xd2, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x71, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x24, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0xe9, 0xe9, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc6, 0x48, 0x89, 0x44, 0x24, 0x18, 0x31, 0xdb, 0xeb, 0x0e, 0x48, 0xff, 0xc3, 0x48, 0x39, 0x5c, 0x24, 0x18, 0x0f, 0x84, 0x3a, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x34, 0xd9, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0e, 0x75, 0xa8, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3f2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 4b: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1a8: 4c 8b 34 24                   movq    (%rsp), %r14
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 4d 00                   decq    (%r13)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 ef                      movq    %r13, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 f6                      testq   %r14, %r14
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 f0                      movzwl  %ax, %esi
// 1e1: 89 f1                         movl    %esi, %ecx
// 1e3: f7 d1                         notl    %ecx
// 1e5: 4c 63 e9                      movslq  %ecx, %r13
// 1e8: 4f 89 34 ef                   movq    %r14, (%r15,%r13,8)
// 1ec: 0f b7 c8                      movzwl  %ax, %ecx
// 1ef: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1f7: 4c 89 f8                      movq    %r15, %rax
// 1fa: 48 29 d0                      subq    %rdx, %rax
// 1fd: 48 89 cf                      movq    %rcx, %rdi
// 200: 48 f7 df                      negq    %rdi
// 203: 49 29 cd                      subq    %rcx, %r13
// 206: 4b 8b 14 ef                   movq    (%r15,%r13,8), %rdx
// 20a: 41 b8 fe ff ff ff             movl    $0xfffffffe, %r8d       # imm = 0xFFFFFFFE
// 210: 41 29 f0                      subl    %esi, %r8d
// 213: 49 63 e8                      movslq  %r8d, %rbp
// 216: 48 29 cd                      subq    %rcx, %rbp
// 219: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 21d: 48 85 d2                      testq   %rdx, %rdx
// 220: 48 f7 d1                      notq    %rcx
// 223: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 227: 44 0f 44 f6                   cmovel  %esi, %r14d
// 22b: 4d 8b 24 ef                   movq    (%r15,%rbp,8), %r12
// 22f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000231:  R_X86_64_64  PyMethodDescr_Type
// 239: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 23e: 75 21                         jne     0x261 <_JIT_ENTRY+0x261>
// 240: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 245: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 24d: 75 12                         jne     0x261 <_JIT_ENTRY+0x261>
// 24f: 48 8d 34 c8                   leaq    (%rax,%rcx,8), %rsi
// 253: 48 8b 3e                      movq    (%rsi), %rdi
// 256: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 25a: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 25f: 74 2c                         je      0x28d <_JIT_ENTRY+0x28d>
// 261: 48 29 d8                      subq    %rbx, %rax
// 264: 48 83 c0 b8                   addq    $-0x48, %rax
// 268: 48 c1 e8 03                   shrq    $0x3, %rax
// 26c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 26f: 48 8b 03                      movq    (%rbx), %rax
// 272: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000274:  R_X86_64_64  _JIT_TARGET
// 27c: 89 c9                         movl    %ecx, %ecx
// 27e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 282: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 288: e9 da fe ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 28d: 48 85 d2                      testq   %rdx, %rdx
// 290: 0f 94 c3                      sete    %bl
// 293: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 297: 48 89 34 24                   movq    %rsi, (%rsp)
// 29b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 29f: 48 8d 71 08                   leaq    0x8(%rcx), %rsi
// 2a3: 48 63 d0                      movslq  %eax, %rdx
// 2a6: 31 c9                         xorl    %ecx, %ecx
// 2a8: 41 ff 50 08                   callq   *0x8(%r8)
// 2ac: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2b0: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _JIT_OPARG
// 2bf: 66 85 c0                      testw   %ax, %ax
// 2c2: 0f 94 c0                      sete    %al
// 2c5: 84 c3                         testb   %al, %bl
// 2c7: 0f 84 a2 00 00 00             je      0x36f <_JIT_ENTRY+0x36f>
// 2cd: 49 8b 04 24                   movq    (%r12), %rax
// 2d1: 48 85 c0                      testq   %rax, %rax
// 2d4: 7f 22                         jg      0x2f8 <_JIT_ENTRY+0x2f8>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 2ef: 4c 89 e2                      movq    %r12, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 49 8b 04 24                   movq    (%r12), %rax
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2ff: 78 21                         js      0x322 <_JIT_ENTRY+0x322>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30b: ff d0                         callq   *%rax
// 30d: 49 ff 0c 24                   decq    (%r12)
// 311: 75 0f                         jne     0x322 <_JIT_ENTRY+0x322>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_Dealloc
// 31d: 4c 89 e7                      movq    %r12, %rdi
// 320: ff d0                         callq   *%rax
// 322: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 326: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 32b: 48 85 c0                      testq   %rax, %rax
// 32e: 0f 84 22 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 334: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 338: 49 89 04 24                   movq    %rax, (%r12)
// 33c: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 341: 49 8b 47 10                   movq    0x10(%r15), %rax
// 345: 48 8b 00                      movq    (%rax), %rax
// 348: 84 c0                         testb   %al, %al
// 34a: 0f 84 a2 00 00 00             je      0x3f2 <_JIT_ENTRY+0x3f2>
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_HandlePending
// 35a: 4c 89 ff                      movq    %r15, %rdi
// 35d: ff d0                         callq   *%rax
// 35f: 85 c0                         testl   %eax, %eax
// 361: 0f 84 8b 00 00 00             je      0x3f2 <_JIT_ENTRY+0x3f2>
// 367: 4d 89 f4                      movq    %r14, %r12
// 36a: e9 e7 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 36f: 41 83 fe 02                   cmpl    $0x2, %r14d
// 373: b8 01 00 00 00                movl    $0x1, %eax
// 378: 41 0f 43 c6                   cmovael %r14d, %eax
// 37c: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 381: 31 db                         xorl    %ebx, %ebx
// 383: eb 0e                         jmp     0x393 <_JIT_ENTRY+0x393>
// 385: 48 ff c3                      incq    %rbx
// 388: 48 39 5c 24 18                cmpq    %rbx, 0x18(%rsp)
// 38d: 0f 84 3a ff ff ff             je      0x2cd <_JIT_ENTRY+0x2cd>
// 393: 4c 8b 34 d9                   movq    (%rcx,%rbx,8), %r14
// 397: 49 8b 06                      movq    (%r14), %rax
// 39a: 48 85 c0                      testq   %rax, %rax
// 39d: 7f 25                         jg      0x3c4 <_JIT_ENTRY+0x3c4>
// 39f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a1:  R_X86_64_64  .rodata.str1.1
// 3a9: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 3ae: 4c 89 f2                      movq    %r14, %rdx
// 3b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b3:  R_X86_64_64  _Py_NegativeRefcount
// 3bb: ff d0                         callq   *%rax
// 3bd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3c1: 49 8b 06                      movq    (%r14), %rax
// 3c4: 85 c0                         testl   %eax, %eax
// 3c6: 78 bd                         js      0x385 <_JIT_ENTRY+0x385>
// 3c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3d2: ff d0                         callq   *%rax
// 3d4: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3d8: 49 ff 0e                      decq    (%r14)
// 3db: 75 a8                         jne     0x385 <_JIT_ENTRY+0x385>
// 3dd: 4c 89 f7                      movq    %r14, %rdi
// 3e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e2:  R_X86_64_64  _Py_Dealloc
// 3ea: ff d0                         callq   *%rax
// 3ec: 48 8b 0c 24                   movq    (%rsp), %rcx
// 3f0: eb 93                         jmp     0x385 <_JIT_ENTRY+0x385>
// 3f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f4:  R_X86_64_64  _JIT_CONTINUE
// 3fc: 48 89 df                      movq    %rbx, %rdi
// 3ff: 4c 89 f6                      movq    %r14, %rsi
// 402: 4c 89 fa                      movq    %r15, %rdx
// 405: 48 83 c4 28                   addq    $0x28, %rsp
// 409: 5b                            popq    %rbx
// 40a: 41 5c                         popq    %r12
// 40c: 41 5d                         popq    %r13
// 40e: 41 5e                         popq    %r14
// 410: 41 5f                         popq    %r15
// 412: 5d                            popq    %rbp
// 413: ff e0                         jmpq    *%rax
// 415: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[1046] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x89, 0xf1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4f, 0x89, 0x34, 0xef, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd0, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x49, 0x29, 0xcd, 0x4b, 0x8b, 0x14, 0xef, 0x41, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf0, 0x49, 0x63, 0xe8, 0x48, 0x29, 0xcd, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x44, 0x0f, 0x44, 0xf6, 0x4d, 0x8b, 0x24, 0xef, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x12, 0x48, 0x8d, 0x34, 0xc8, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x2c, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xda, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xd2, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x71, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x22, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0xe9, 0xe7, 0xfd, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc6, 0x48, 0x89, 0x44, 0x24, 0x18, 0x31, 0xdb, 0xeb, 0x0e, 0x48, 0xff, 0xc3, 0x48, 0x39, 0x5c, 0x24, 0x18, 0x0f, 0x84, 0x3a, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x34, 0xd9, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0xff, 0x0e, 0x75, 0xa8, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 f8 00 00 00             jne     0x127 <_JIT_ENTRY+0x127>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e1 00 00 00             jne     0x127 <_JIT_ENTRY+0x127>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 04 24                   movq    %rax, (%rsp)
// 91: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 98: 0f 8e d2 00 00 00             jle     0x170 <_JIT_ENTRY+0x170>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _JIT_OPARG
// a8: 0f b7 e8                      movzwl  %ax, %ebp
// ab: 48 ff c5                      incq    %rbp
// ae: eb 0d                         jmp     0xbd <_JIT_ENTRY+0xbd>
// b0: 48 ff cd                      decq    %rbp
// b3: 48 83 fd 01                   cmpq    $0x1, %rbp
// b7: 0f 8e b3 00 00 00             jle     0x170 <_JIT_ENTRY+0x170>
// bd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// c0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 14                         jle     0xe0 <_JIT_ENTRY+0xe0>
// cc: 85 c0                         testl   %eax, %eax
// ce: 78 e0                         js      0xb0 <_JIT_ENTRY+0xb0>
// d0: eb 33                         jmp     0x105 <_JIT_ENTRY+0x105>
// d2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ef: 4c 89 f2                      movq    %r14, %rdx
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_NegativeRefcount
// fc: ff d0                         callq   *%rax
// fe: 49 8b 06                      movq    (%r14), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 ab                         js      0xb0 <_JIT_ENTRY+0xb0>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 0e                      decq    (%r14)
// 114: 75 9a                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 116: 4c 89 f7                      movq    %r14, %rdi
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _Py_Dealloc
// 123: ff d0                         callq   *%rax
// 125: eb 89                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  PyExc_SystemError
// 131: 48 8b 30                      movq    (%rax), %rsi
// 134: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000136:  R_X86_64_64  .rodata.str1.1+0x39
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _PyErr_SetString
// 148: 48 89 cf                      movq    %rcx, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 4d 89 fc                      movq    %r15, %r12
// 150: 49 29 dc                      subq    %rbx, %r12
// 153: 49 83 c4 b8                   addq    $-0x48, %r12
// 157: 49 c1 ec 03                   shrq    $0x3, %r12
// 15b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 15f: 31 c0                         xorl    %eax, %eax
// 161: 48 83 c4 18                   addq    $0x18, %rsp
// 165: 5b                            popq    %rbx
// 166: 41 5c                         popq    %r12
// 168: 41 5d                         popq    %r13
// 16a: 41 5e                         popq    %r14
// 16c: 41 5f                         popq    %r15
// 16e: 5d                            popq    %rbp
// 16f: c3                            retq
// 170: 49 8b 45 00                   movq    (%r13), %rax
// 174: 48 85 c0                      testq   %rax, %rax
// 177: 7f 22                         jg      0x19b <_JIT_ENTRY+0x19b>
// 179: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017b:  R_X86_64_64  .rodata.str1.1
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_NegativeRefcount
// 18d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 192: 4c 89 ea                      movq    %r13, %rdx
// 195: ff d0                         callq   *%rax
// 197: 49 8b 45 00                   movq    (%r13), %rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 78 21                         js      0x1c0 <_JIT_ENTRY+0x1c0>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 ff 4d 00                   decq    (%r13)
// 1af: 75 0f                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_Dealloc
// 1bb: 4c 89 ef                      movq    %r13, %rdi
// 1be: ff d0                         callq   *%rax
// 1c0: 48 8b 34 24                   movq    (%rsp), %rsi
// 1c4: 48 85 f6                      testq   %rsi, %rsi
// 1c7: 74 87                         je      0x150 <_JIT_ENTRY+0x150>
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  _JIT_OPARG
// 1d3: 0f b7 c1                      movzwl  %cx, %eax
// 1d6: 89 c2                         movl    %eax, %edx
// 1d8: f7 d2                         notl    %edx
// 1da: 4c 63 f2                      movslq  %edx, %r14
// 1dd: 4b 89 34 f7                   movq    %rsi, (%r15,%r14,8)
// 1e1: 0f b7 c9                      movzwl  %cx, %ecx
// 1e4: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1ec: 4d 89 fc                      movq    %r15, %r12
// 1ef: 49 29 d4                      subq    %rdx, %r12
// 1f2: 48 89 ce                      movq    %rcx, %rsi
// 1f5: 48 f7 de                      negq    %rsi
// 1f8: 49 29 ce                      subq    %rcx, %r14
// 1fb: 31 ff                         xorl    %edi, %edi
// 1fd: 66 85 c9                      testw   %cx, %cx
// 200: 40 0f 94 c7                   sete    %dil
// 204: 45 31 c0                      xorl    %r8d, %r8d
// 207: 66 83 f9 01                   cmpw    $0x1, %cx
// 20b: 41 0f 94 c0                   sete    %r8b
// 20f: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 214: 48 89 ca                      movq    %rcx, %rdx
// 217: 48 f7 d2                      notq    %rdx
// 21a: 48 0f 44 d6                   cmoveq  %rsi, %rdx
// 21e: 41 0f 44 f8                   cmovel  %r8d, %edi
// 222: 40 80 ff 01                   cmpb    $0x1, %dil
// 226: 0f 85 fe 00 00 00             jne     0x32a <_JIT_ENTRY+0x32a>
// 22c: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 231: 29 c6                         subl    %eax, %esi
// 233: 48 63 ee                      movslq  %esi, %rbp
// 236: 48 29 cd                      subq    %rcx, %rbp
// 239: 4d 8b 2c ef                   movq    (%r15,%rbp,8), %r13
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  PyMethodDescr_Type
// 247: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 24b: 0f 85 d9 00 00 00             jne     0x32a <_JIT_ENTRY+0x32a>
// 251: 49 8b 3c d4                   movq    (%r12,%rdx,8), %rdi
// 255: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 259: 49 3b 45 10                   cmpq    0x10(%r13), %rax
// 25d: 0f 85 c7 00 00 00             jne     0x32a <_JIT_ENTRY+0x32a>
// 263: 49 8b 45 28                   movq    0x28(%r13), %rax
// 267: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 26b: 0f 85 b9 00 00 00             jne     0x32a <_JIT_ENTRY+0x32a>
// 271: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 275: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 27a: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 27d: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 280: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 283: 85 c0                         testl   %eax, %eax
// 285: 0f 8e cc 00 00 00             jle     0x357 <_JIT_ENTRY+0x357>
// 28b: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 28f: 48 89 fd                      movq    %rdi, %rbp
// 292: 31 f6                         xorl    %esi, %esi
// 294: 41 ff d0                      callq   *%r8
// 297: 48 89 04 24                   movq    %rax, (%rsp)
// 29b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2a0: ff 40 2c                      incl    0x2c(%rax)
// 2a3: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 2a8: 48 89 ee                      movq    %rbp, %rsi
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  .text+0x3a0
// 2b5: ff d0                         callq   *%rax
// 2b7: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 2bc: 4c 89 ee                      movq    %r13, %rsi
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  .text+0x3a0
// 2c9: ff d0                         callq   *%rax
// 2cb: 48 8b 04 24                   movq    (%rsp), %rax
// 2cf: 48 85 c0                      testq   %rax, %rax
// 2d2: 0f 84 78 fe ff ff             je      0x150 <_JIT_ENTRY+0x150>
// 2d8: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 2dc: 49 89 04 24                   movq    %rax, (%r12)
// 2e0: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2e5: 49 8b 46 10                   movq    0x10(%r14), %rax
// 2e9: 48 8b 00                      movq    (%rax), %rax
// 2ec: 84 c0                         testb   %al, %al
// 2ee: 74 17                         je      0x307 <_JIT_ENTRY+0x307>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_HandlePending
// 2fa: 4c 89 f7                      movq    %r14, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 85 c0                         testl   %eax, %eax
// 301: 0f 85 46 fe ff ff             jne     0x14d <_JIT_ENTRY+0x14d>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 48 89 df                      movq    %rbx, %rdi
// 314: 4c 89 fe                      movq    %r15, %rsi
// 317: 4c 89 f2                      movq    %r14, %rdx
// 31a: 48 83 c4 18                   addq    $0x18, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 49 29 dc                      subq    %rbx, %r12
// 32d: 49 83 c4 b8                   addq    $-0x48, %r12
// 331: 49 c1 ec 03                   shrq    $0x3, %r12
// 335: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 339: 48 8b 03                      movq    (%rbx), %rax
// 33c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033e:  R_X86_64_64  _JIT_TARGET
// 346: 89 c9                         movl    %ecx, %ecx
// 348: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 34c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 352: e9 0a fe ff ff                jmp     0x161 <_JIT_ENTRY+0x161>
// 357: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000359:  R_X86_64_64  .rodata.str1.1+0x5f
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  _Py_CheckRecursiveCall
// 36b: 48 89 3c 24                   movq    %rdi, (%rsp)
// 36f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 374: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 379: ff d0                         callq   *%rax
// 37b: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 380: 48 8b 3c 24                   movq    (%rsp), %rdi
// 384: 85 c0                         testl   %eax, %eax
// 386: 0f 85 c4 fd ff ff             jne     0x150 <_JIT_ENTRY+0x150>
// 38c: e9 fa fe ff ff                jmp     0x28b <_JIT_ENTRY+0x28b>
// 391: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 
// 00000000000003a0 <Py_DECREF>:
// 3a0: 53                            pushq   %rbx
// 3a1: 48 89 f3                      movq    %rsi, %rbx
// 3a4: 48 8b 06                      movq    (%rsi), %rax
// 3a7: 48 85 c0                      testq   %rax, %rax
// 3aa: 7e 06                         jle     0x3b2 <Py_DECREF+0x12>
// 3ac: 85 c0                         testl   %eax, %eax
// 3ae: 79 24                         jns     0x3d4 <Py_DECREF+0x34>
// 3b0: eb 33                         jmp     0x3e5 <Py_DECREF+0x45>
// 3b2: 89 fe                         movl    %edi, %esi
// 3b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b6:  R_X86_64_64  .rodata.str1.1
// 3be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c0:  R_X86_64_64  _Py_NegativeRefcount
// 3c8: 48 89 da                      movq    %rbx, %rdx
// 3cb: ff d0                         callq   *%rax
// 3cd: 48 8b 03                      movq    (%rbx), %rax
// 3d0: 85 c0                         testl   %eax, %eax
// 3d2: 78 11                         js      0x3e5 <Py_DECREF+0x45>
// 3d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3de: ff d0                         callq   *%rax
// 3e0: 48 ff 0b                      decq    (%rbx)
// 3e3: 74 02                         je      0x3e7 <Py_DECREF+0x47>
// 3e5: 5b                            popq    %rbx
// 3e6: c3                            retq
// 3e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e9:  R_X86_64_64  _Py_Dealloc
// 3f1: 48 89 df                      movq    %rbx, %rdi
// 3f4: 5b                            popq    %rbx
// 3f5: ff e0                         jmpq    *%rax
// 3f7: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[1016] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x0d, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x87, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x4b, 0x89, 0x34, 0xf7, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xd4, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x49, 0x29, 0xce, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf9, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x48, 0x89, 0xca, 0x48, 0xf7, 0xd2, 0x48, 0x0f, 0x44, 0xd6, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x48, 0x63, 0xee, 0x48, 0x29, 0xcd, 0x4d, 0x8b, 0x2c, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x3c, 0xd4, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x45, 0x10, 0x0f, 0x85, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xb9, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xcc, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x89, 0xfd, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x78, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x46, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x0a, 0xfe, 0xff, 0xff, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x3c, 0x24, 0x85, 0xc0, 0x0f, 0x85, 0xc4, 0xfd, 0xff, 0xff, 0xe9, 0xfa, 0xfe, 0xff, 0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3a0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3a0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x363, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00 while calling a Python object\x00'
// 7e: 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 28                   addq    $0x28, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 1d5: 48 85 f6                      testq   %rsi, %rsi
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c1                      movzwl  %cx, %eax
// 1e7: 89 c2                         movl    %eax, %edx
// 1e9: f7 d2                         notl    %edx
// 1eb: 4c 63 f2                      movslq  %edx, %r14
// 1ee: 4b 89 34 f7                   movq    %rsi, (%r15,%r14,8)
// 1f2: 0f b7 d1                      movzwl  %cx, %edx
// 1f5: 48 8d 0c d5 00 00 00 00       leaq    (,%rdx,8), %rcx
// 1fd: 4d 89 fc                      movq    %r15, %r12
// 200: 49 29 cc                      subq    %rcx, %r12
// 203: 48 89 d6                      movq    %rdx, %rsi
// 206: 48 f7 de                      negq    %rsi
// 209: 49 29 d6                      subq    %rdx, %r14
// 20c: 31 ff                         xorl    %edi, %edi
// 20e: 66 83 fa 01                   cmpw    $0x1, %dx
// 212: 40 0f 94 c7                   sete    %dil
// 216: 45 31 c0                      xorl    %r8d, %r8d
// 219: 66 83 fa 02                   cmpw    $0x2, %dx
// 21d: 41 0f 94 c0                   sete    %r8b
// 221: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 226: 48 89 d1                      movq    %rdx, %rcx
// 229: 48 f7 d1                      notq    %rcx
// 22c: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 230: 41 0f 44 f8                   cmovel  %r8d, %edi
// 234: 40 80 ff 01                   cmpb    $0x1, %dil
// 238: 75 39                         jne     0x273 <_JIT_ENTRY+0x273>
// 23a: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 23f: 29 c6                         subl    %eax, %esi
// 241: 48 63 ee                      movslq  %esi, %rbp
// 244: 48 29 d5                      subq    %rdx, %rbp
// 247: 4d 8b 2c ef                   movq    (%r15,%rbp,8), %r13
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  PyMethodDescr_Type
// 255: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 259: 75 18                         jne     0x273 <_JIT_ENTRY+0x273>
// 25b: 49 8b 45 28                   movq    0x28(%r13), %rax
// 25f: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 263: 75 0e                         jne     0x273 <_JIT_ENTRY+0x273>
// 265: 49 8b 3c cc                   movq    (%r12,%rcx,8), %rdi
// 269: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 26d: 49 3b 55 10                   cmpq    0x10(%r13), %rdx
// 271: 74 2d                         je      0x2a0 <_JIT_ENTRY+0x2a0>
// 273: 49 29 dc                      subq    %rbx, %r12
// 276: 49 83 c4 b8                   addq    $-0x48, %r12
// 27a: 49 c1 ec 03                   shrq    $0x3, %r12
// 27e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 282: 48 8b 03                      movq    (%rbx), %rax
// 285: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000287:  R_X86_64_64  _JIT_TARGET
// 28f: 89 c9                         movl    %ecx, %ecx
// 291: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 295: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29b: e9 d1 fe ff ff                jmp     0x171 <_JIT_ENTRY+0x171>
// 2a0: 49 8b 74 cc 08                movq    0x8(%r12,%rcx,8), %rsi
// 2a5: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 2a9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ae: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 2b1: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 2b4: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 2be: 0f 8e ab 00 00 00             jle     0x36f <_JIT_ENTRY+0x36f>
// 2c4: 4d 8d 24 ef                   leaq    (%r15,%rbp,8), %r12
// 2c8: 48 89 fd                      movq    %rdi, %rbp
// 2cb: 41 ff d0                      callq   *%r8
// 2ce: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 2d3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2d8: ff 40 2c                      incl    0x2c(%rax)
// 2db: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 2e0: 48 89 ee                      movq    %rbp, %rsi
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  .text+0x3b0
// 2ed: ff d0                         callq   *%rax
// 2ef: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 2f4: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 2f9: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000002fb:  R_X86_64_64  .text+0x3b0
// 303: ff d5                         callq   *%rbp
// 305: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 30a: 4c 89 ee                      movq    %r13, %rsi
// 30d: ff d5                         callq   *%rbp
// 30f: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 314: 48 85 c0                      testq   %rax, %rax
// 317: 0f 84 43 fe ff ff             je      0x160 <_JIT_ENTRY+0x160>
// 31d: 4f 8d 3c f7                   leaq    (%r15,%r14,8), %r15
// 321: 49 89 04 24                   movq    %rax, (%r12)
// 325: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 32a: 49 8b 46 10                   movq    0x10(%r14), %rax
// 32e: 48 8b 00                      movq    (%rax), %rax
// 331: 84 c0                         testb   %al, %al
// 333: 74 17                         je      0x34c <_JIT_ENTRY+0x34c>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_HandlePending
// 33f: 4c 89 f7                      movq    %r14, %rdi
// 342: ff d0                         callq   *%rax
// 344: 85 c0                         testl   %eax, %eax
// 346: 0f 85 11 fe ff ff             jne     0x15d <_JIT_ENTRY+0x15d>
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _JIT_CONTINUE
// 356: 48 89 df                      movq    %rbx, %rdi
// 359: 4c 89 fe                      movq    %r15, %rsi
// 35c: 4c 89 f2                      movq    %r14, %rdx
// 35f: 48 83 c4 28                   addq    $0x28, %rsp
// 363: 5b                            popq    %rbx
// 364: 41 5c                         popq    %r12
// 366: 41 5d                         popq    %r13
// 368: 41 5e                         popq    %r14
// 36a: 41 5f                         popq    %r15
// 36c: 5d                            popq    %rbp
// 36d: ff e0                         jmpq    *%rax
// 36f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000371:  R_X86_64_64  .rodata.str1.1+0x5f
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _Py_CheckRecursiveCall
// 383: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 388: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 38d: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// 392: ff d0                         callq   *%rax
// 394: 4c 8b 44 24 20                movq    0x20(%rsp), %r8
// 399: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 39e: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 3a3: 85 c0                         testl   %eax, %eax
// 3a5: 0f 85 b5 fd ff ff             jne     0x160 <_JIT_ENTRY+0x160>
// 3ab: e9 14 ff ff ff                jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 
// 00000000000003b0 <Py_DECREF>:
// 3b0: 53                            pushq   %rbx
// 3b1: 48 89 f3                      movq    %rsi, %rbx
// 3b4: 48 8b 06                      movq    (%rsi), %rax
// 3b7: 48 85 c0                      testq   %rax, %rax
// 3ba: 7e 06                         jle     0x3c2 <Py_DECREF+0x12>
// 3bc: 85 c0                         testl   %eax, %eax
// 3be: 79 24                         jns     0x3e4 <Py_DECREF+0x34>
// 3c0: eb 33                         jmp     0x3f5 <Py_DECREF+0x45>
// 3c2: 89 fe                         movl    %edi, %esi
// 3c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c6:  R_X86_64_64  .rodata.str1.1
// 3ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d0:  R_X86_64_64  _Py_NegativeRefcount
// 3d8: 48 89 da                      movq    %rbx, %rdx
// 3db: ff d0                         callq   *%rax
// 3dd: 48 8b 03                      movq    (%rbx), %rax
// 3e0: 85 c0                         testl   %eax, %eax
// 3e2: 78 11                         js      0x3f5 <Py_DECREF+0x45>
// 3e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ee: ff d0                         callq   *%rax
// 3f0: 48 ff 0b                      decq    (%rbx)
// 3f3: 74 02                         je      0x3f7 <Py_DECREF+0x47>
// 3f5: 5b                            popq    %rbx
// 3f6: c3                            retq
// 3f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f9:  R_X86_64_64  _Py_Dealloc
// 401: 48 89 df                      movq    %rbx, %rdi
// 404: 5b                            popq    %rbx
// 405: ff e0                         jmpq    *%rax
// 407: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O_code_body[1032] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x4b, 0x89, 0x34, 0xf7, 0x0f, 0xb7, 0xd1, 0x48, 0x8d, 0x0c, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xde, 0x49, 0x29, 0xd6, 0x31, 0xff, 0x66, 0x83, 0xfa, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xfa, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x48, 0x89, 0xd1, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x39, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x48, 0x63, 0xee, 0x48, 0x29, 0xd5, 0x4d, 0x8b, 0x2c, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x18, 0x49, 0x8b, 0x45, 0x28, 0x83, 0x78, 0x10, 0x08, 0x75, 0x0e, 0x49, 0x8b, 0x3c, 0xcc, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x55, 0x10, 0x74, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd1, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x74, 0xcc, 0x08, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x74, 0x24, 0x10, 0x0f, 0x8e, 0xab, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x24, 0xef, 0x48, 0x89, 0xfd, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x43, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xf7, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x11, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x20, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x85, 0xc0, 0x0f, 0x85, 0xb5, 0xfd, 0xff, 0xff, 0xe9, 0x14, 0xff, 0xff, 0xff, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3b0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x3b0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00 while calling a Python object\x00'
// 7e: 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_STR_1
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_STR_1.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1a7: 78 21                         js      0x1ca <_JIT_ENTRY+0x1ca>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 ff 4d 00                   decq    (%r13)
// 1b9: 75 0f                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: 4c 89 ef                      movq    %r13, %rdi
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 1cf: 48 85 f6                      testq   %rsi, %rsi
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 c8                      movzwl  %ax, %ecx
// 1e1: 89 ca                         movl    %ecx, %edx
// 1e3: f7 d2                         notl    %edx
// 1e5: 4c 63 f2                      movslq  %edx, %r14
// 1e8: 4b 89 34 f7                   movq    %rsi, (%r15,%r14,8)
// 1ec: 0f b7 c0                      movzwl  %ax, %eax
// 1ef: 49 29 c6                      subq    %rax, %r14
// 1f2: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 1f7: 75 21                         jne     0x21a <_JIT_ENTRY+0x21a>
// 1f9: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1fe: 29 ca                         subl    %ecx, %edx
// 200: 48 63 ca                      movslq  %edx, %rcx
// 203: 48 29 c1                      subq    %rax, %rcx
// 206: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 20a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000020c:  R_X86_64_64  PyUnicode_Type
// 214: 4d 39 2c 24                   cmpq    %r13, (%r12)
// 218: 74 34                         je      0x24e <_JIT_ENTRY+0x24e>
// 21a: 48 c1 e0 03                   shlq    $0x3, %rax
// 21e: 49 29 c7                      subq    %rax, %r15
// 221: 49 29 df                      subq    %rbx, %r15
// 224: 49 83 c7 b8                   addq    $-0x48, %r15
// 228: 49 c1 ef 03                   shrq    $0x3, %r15
// 22c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 230: 48 8b 03                      movq    (%rbx), %rax
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_TARGET
// 23d: 89 c9                         movl    %ecx, %ecx
// 23f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 243: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 249: e9 19 ff ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: 0f b7 c0                      movzwl  %ax, %eax
// 25b: 48 01 c0                      addq    %rax, %rax
// 25e: 48 c1 e0 03                   shlq    $0x3, %rax
// 262: 4c 89 f9                      movq    %r15, %rcx
// 265: 48 29 c1                      subq    %rax, %rcx
// 268: 48 8b 29                      movq    (%rcx), %rbp
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PyObject_Str
// 275: 48 89 ef                      movq    %rbp, %rdi
// 278: ff d0                         callq   *%rax
// 27a: 48 89 c3                      movq    %rax, %rbx
// 27d: 48 8b 45 00                   movq    (%rbp), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 7f 22                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 286: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000288:  R_X86_64_64  .rodata.str1.1
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_NegativeRefcount
// 29a: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 29f: 48 89 ea                      movq    %rbp, %rdx
// 2a2: ff d0                         callq   *%rax
// 2a4: 48 8b 45 00                   movq    (%rbp), %rax
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 78 21                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b6: ff d0                         callq   *%rax
// 2b8: 48 ff 4d 00                   decq    (%rbp)
// 2bc: 75 0f                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 48 89 ef                      movq    %rbp, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 45 00                   movq    (%r13), %rax
// 2d1: 48 85 c0                      testq   %rax, %rax
// 2d4: 7f 22                         jg      0x2f8 <_JIT_ENTRY+0x2f8>
// 2d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d8:  R_X86_64_64  .rodata.str1.1
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_NegativeRefcount
// 2ea: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 2ef: 4c 89 ea                      movq    %r13, %rdx
// 2f2: ff d0                         callq   *%rax
// 2f4: 49 8b 45 00                   movq    (%r13), %rax
// 2f8: 85 c0                         testl   %eax, %eax
// 2fa: 78 28                         js      0x324 <_JIT_ENTRY+0x324>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 306: ff d0                         callq   *%rax
// 308: 49 ff 4d 00                   decq    (%r13)
// 30c: 75 16                         jne     0x324 <_JIT_ENTRY+0x324>
// 30e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000310:  R_X86_64_64  PyUnicode_Type
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_Dealloc
// 322: ff d0                         callq   *%rax
// 324: 48 85 db                      testq   %rbx, %rbx
// 327: 74 2e                         je      0x357 <_JIT_ENTRY+0x357>
// 329: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 32d: 49 89 1c 24                   movq    %rbx, (%r12)
// 331: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 336: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 33a: 48 8b 00                      movq    (%rax), %rax
// 33d: 84 c0                         testb   %al, %al
// 33f: 74 1f                         je      0x360 <_JIT_ENTRY+0x360>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_HandlePending
// 34b: 48 89 df                      movq    %rbx, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 85 c0                         testl   %eax, %eax
// 352: 74 0c                         je      0x360 <_JIT_ENTRY+0x360>
// 354: 4d 89 f4                      movq    %r14, %r12
// 357: 48 8b 1c 24                   movq    (%rsp), %rbx
// 35b: e9 f6 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _JIT_CONTINUE
// 36a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 36e: 4c 89 f6                      movq    %r14, %rsi
// 371: 48 89 da                      movq    %rbx, %rdx
// 374: 48 83 c4 18                   addq    $0x18, %rsp
// 378: 5b                            popq    %rbx
// 379: 41 5c                         popq    %r12
// 37b: 41 5d                         popq    %r13
// 37d: 41 5e                         popq    %r14
// 37f: 41 5f                         popq    %r15
// 381: 5d                            popq    %rbp
// 382: ff e0                         jmpq    *%rax
// 384: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_STR_1_code_body[901] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x4b, 0x89, 0x34, 0xf7, 0x0f, 0xb7, 0xc0, 0x49, 0x29, 0xc6, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x75, 0x21, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x29, 0xc1, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x2c, 0x24, 0x74, 0x34, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x19, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x2e, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x89, 0x1c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0c, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0xf6, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_STR_1_code_holes[34] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_STR_1_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_STR_1_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 48 39 45 10                   cmpq    %rax, 0x10(%rbp)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 89 1c 24                   movq    %rbx, (%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 66: 48 8d 7d 18                   leaq    0x18(%rbp), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 ea                      movq    %r13, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 e0                   movzwl  %ax, %r12d
// b0: 49 ff c4                      incq    %r12
// b3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 49 ff cc                      decq    %r12
// c3: 49 83 fc 01                   cmpq    $0x1, %r12
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 41 8d 44 24 fe                leal    -0x2(%r12), %eax
// d2: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// d7: 49 8b 06                      movq    (%r14), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 30                         jmp     0x115 <_JIT_ENTRY+0x115>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fd                      movq    %r15, %r13
// 156: 49 29 dd                      subq    %rbx, %r13
// 159: 49 83 c5 b8                   addq    $-0x48, %r13
// 15d: 49 c1 ed 03                   shrq    $0x3, %r13
// 161: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 48 8b 45 00                   movq    (%rbp), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 48 89 ea                      movq    %rbp, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 48 8b 45 00                   movq    (%rbp), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1a7: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 ff 4d 00                   decq    (%rbp)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 48 89 ef                      movq    %rbp, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 4d 85 e4                      testq   %r12, %r12
// 1d2: 74 82                         je      0x156 <_JIT_ENTRY+0x156>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 c8                      movzwl  %ax, %ecx
// 1e1: 89 ca                         movl    %ecx, %edx
// 1e3: f7 d2                         notl    %edx
// 1e5: 4c 63 f2                      movslq  %edx, %r14
// 1e8: 4f 89 24 f7                   movq    %r12, (%r15,%r14,8)
// 1ec: 0f b7 c0                      movzwl  %ax, %eax
// 1ef: 49 29 c6                      subq    %rax, %r14
// 1f2: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 1f7: 75 21                         jne     0x21a <_JIT_ENTRY+0x21a>
// 1f9: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1fe: 29 ca                         subl    %ecx, %edx
// 200: 48 63 ca                      movslq  %edx, %rcx
// 203: 48 29 c1                      subq    %rax, %rcx
// 206: 4d 8d 2c cf                   leaq    (%r15,%rcx,8), %r13
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  PyTuple_Type
// 214: 49 39 4d 00                   cmpq    %rcx, (%r13)
// 218: 74 34                         je      0x24e <_JIT_ENTRY+0x24e>
// 21a: 48 c1 e0 03                   shlq    $0x3, %rax
// 21e: 49 29 c7                      subq    %rax, %r15
// 221: 49 29 df                      subq    %rbx, %r15
// 224: 49 83 c7 b8                   addq    $-0x48, %r15
// 228: 49 c1 ef 03                   shrq    $0x3, %r15
// 22c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 230: 48 8b 03                      movq    (%rbx), %rax
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_TARGET
// 23d: 89 c9                         movl    %ecx, %ecx
// 23f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 243: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 249: e9 19 ff ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: 0f b7 c0                      movzwl  %ax, %eax
// 25b: 48 01 c0                      addq    %rax, %rax
// 25e: 48 c1 e0 03                   shlq    $0x3, %rax
// 262: 4c 89 f9                      movq    %r15, %rcx
// 265: 48 29 c1                      subq    %rax, %rcx
// 268: 4c 8b 21                      movq    (%rcx), %r12
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  PySequence_Tuple
// 275: 4c 89 e7                      movq    %r12, %rdi
// 278: ff d0                         callq   *%rax
// 27a: 48 89 c5                      movq    %rax, %rbp
// 27d: 49 8b 04 24                   movq    (%r12), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 7f 22                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 286: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000288:  R_X86_64_64  .rodata.str1.1
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_NegativeRefcount
// 29a: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 29f: 4c 89 e2                      movq    %r12, %rdx
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 8b 04 24                   movq    (%r12), %rax
// 2a8: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 17                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2b6: ff d3                         callq   *%rbx
// 2b8: 49 ff 0c 24                   decq    (%r12)
// 2bc: 75 0f                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 4c 89 e7                      movq    %r12, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cf:  R_X86_64_64  PyTuple_Type
// 2d7: 48 8b 01                      movq    (%rcx), %rax
// 2da: 48 85 c0                      testq   %rax, %rax
// 2dd: 7f 32                         jg      0x311 <_JIT_ENTRY+0x311>
// 2df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e1:  R_X86_64_64  .rodata.str1.1
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_NegativeRefcount
// 2f3: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 2f8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002fa:  R_X86_64_64  PyTuple_Type
// 302: ff d0                         callq   *%rax
// 304: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000306:  R_X86_64_64  PyTuple_Type
// 30e: 48 8b 01                      movq    (%rcx), %rax
// 311: 85 c0                         testl   %eax, %eax
// 313: 78 21                         js      0x336 <_JIT_ENTRY+0x336>
// 315: 49 89 cc                      movq    %rcx, %r12
// 318: ff d3                         callq   *%rbx
// 31a: 49 ff 0c 24                   decq    (%r12)
// 31e: 75 16                         jne     0x336 <_JIT_ENTRY+0x336>
// 320: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000322:  R_X86_64_64  PyTuple_Type
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_Dealloc
// 334: ff d0                         callq   *%rax
// 336: 48 85 ed                      testq   %rbp, %rbp
// 339: 74 2e                         je      0x369 <_JIT_ENTRY+0x369>
// 33b: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 33f: 49 89 6d 00                   movq    %rbp, (%r13)
// 343: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 348: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 34c: 48 8b 00                      movq    (%rax), %rax
// 34f: 84 c0                         testb   %al, %al
// 351: 74 1f                         je      0x372 <_JIT_ENTRY+0x372>
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _Py_HandlePending
// 35d: 48 89 df                      movq    %rbx, %rdi
// 360: ff d0                         callq   *%rax
// 362: 85 c0                         testl   %eax, %eax
// 364: 74 0c                         je      0x372 <_JIT_ENTRY+0x372>
// 366: 4d 89 f5                      movq    %r14, %r13
// 369: 48 8b 1c 24                   movq    (%rsp), %rbx
// 36d: e9 e4 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  _JIT_CONTINUE
// 37c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 380: 4c 89 f6                      movq    %r14, %rsi
// 383: 48 89 da                      movq    %rbx, %rdx
// 386: 48 83 c4 18                   addq    $0x18, %rsp
// 38a: 5b                            popq    %rbx
// 38b: 41 5c                         popq    %r12
// 38d: 41 5d                         popq    %r13
// 38f: 41 5e                         popq    %r14
// 391: 41 5f                         popq    %r15
// 393: 5d                            popq    %rbp
// 394: ff e0                         jmpq    *%rax
// 396: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1_code_body[919] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x48, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe0, 0x49, 0xff, 0xc4, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x49, 0xff, 0xcc, 0x49, 0x83, 0xfc, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x44, 0x24, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x30, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x4f, 0x89, 0x24, 0xf7, 0x0f, 0xb7, 0xc0, 0x49, 0x29, 0xc6, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x75, 0x21, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x29, 0xc1, 0x4d, 0x8d, 0x2c, 0xcf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x00, 0x74, 0x34, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x19, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x01, 0x48, 0x85, 0xc0, 0x7f, 0x32, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x21, 0x49, 0x89, 0xcc, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x2e, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x89, 0x6d, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x0c, 0x4d, 0x89, 0xf5, 0x48, 0x8b, 0x1c, 0x24, 0xe9, 0xe4, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1_code_holes[36] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CALL_TYPE_1
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CALL_TYPE_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 89 1c 24                   movq    %rbx, (%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 ff 0c 24                   decq    (%r12)
// 1c9: 75 0f                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1df: 48 85 d2                      testq   %rdx, %rdx
// 1e2: 74 82                         je      0x166 <_JIT_ENTRY+0x166>
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_OPARG
// 1ee: 0f b7 c1                      movzwl  %cx, %eax
// 1f1: f7 d1                         notl    %ecx
// 1f3: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1f9: 4c 63 f9                      movslq  %ecx, %r15
// 1fc: 4b 89 14 fe                   movq    %rdx, (%r14,%r15,8)
// 200: 49 29 c7                      subq    %rax, %r15
// 203: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 208: 75 2d                         jne     0x237 <_JIT_ENTRY+0x237>
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  _JIT_OPARG
// 214: 0f b7 d1                      movzwl  %cx, %edx
// 217: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 21c: 29 d6                         subl    %edx, %esi
// 21e: 48 63 d6                      movslq  %esi, %rdx
// 221: 0f b7 c9                      movzwl  %cx, %ecx
// 224: 48 29 ca                      subq    %rcx, %rdx
// 227: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000229:  R_X86_64_64  PyType_Type
// 231: 4d 39 24 d6                   cmpq    %r12, (%r14,%rdx,8)
// 235: 74 34                         je      0x26b <_JIT_ENTRY+0x26b>
// 237: 48 c1 e0 03                   shlq    $0x3, %rax
// 23b: 49 29 c6                      subq    %rax, %r14
// 23e: 49 29 de                      subq    %rbx, %r14
// 241: 49 83 c6 b8                   addq    $-0x48, %r14
// 245: 49 c1 ee 03                   shrq    $0x3, %r14
// 249: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 24d: 48 8b 03                      movq    (%rbx), %rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_TARGET
// 25a: 89 c9                         movl    %ecx, %ecx
// 25c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 260: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 266: e9 0c ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_OPARG
// 275: 0f b7 c0                      movzwl  %ax, %eax
// 278: 48 01 c0                      addq    %rax, %rax
// 27b: 48 c1 e0 03                   shlq    $0x3, %rax
// 27f: 4c 89 f1                      movq    %r14, %rcx
// 282: 48 29 c1                      subq    %rax, %rcx
// 285: 4c 8b 29                      movq    (%rcx), %r13
// 288: 49 8b 6d 08                   movq    0x8(%r13), %rbp
// 28c: 8b 45 00                      movl    (%rbp), %eax
// 28f: ff c0                         incl    %eax
// 291: 75 19                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 293: 49 8b 45 00                   movq    (%r13), %rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 7e 28                         jle     0x2c4 <_JIT_ENTRY+0x2c4>
// 29c: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000029e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a6: 85 c0                         testl   %eax, %eax
// 2a8: 79 4a                         jns     0x2f4 <_JIT_ENTRY+0x2f4>
// 2aa: eb 5f                         jmp     0x30b <_JIT_ENTRY+0x30b>
// 2ac: 89 45 00                      movl    %eax, (%rbp)
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 45 00                   movq    (%r13), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 7f d8                         jg      0x29c <_JIT_ENTRY+0x29c>
// 2c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c6:  R_X86_64_64  .rodata.str1.1
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_NegativeRefcount
// 2d8: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 2dd: 4c 89 ea                      movq    %r13, %rdx
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 8b 45 00                   movq    (%r13), %rax
// 2e6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: 85 c0                         testl   %eax, %eax
// 2f2: 78 17                         js      0x30b <_JIT_ENTRY+0x30b>
// 2f4: ff d3                         callq   *%rbx
// 2f6: 49 ff 4d 00                   decq    (%r13)
// 2fa: 75 0f                         jne     0x30b <_JIT_ENTRY+0x30b>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_Dealloc
// 306: 4c 89 ef                      movq    %r13, %rdi
// 309: ff d0                         callq   *%rax
// 30b: 49 8b 04 24                   movq    (%r12), %rax
// 30f: 48 85 c0                      testq   %rax, %rax
// 312: 7f 22                         jg      0x336 <_JIT_ENTRY+0x336>
// 314: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000316:  R_X86_64_64  .rodata.str1.1
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_NegativeRefcount
// 328: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 32d: 4c 89 e2                      movq    %r12, %rdx
// 330: ff d0                         callq   *%rax
// 332: 49 8b 04 24                   movq    (%r12), %rax
// 336: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 33a: 85 c0                         testl   %eax, %eax
// 33c: 78 1e                         js      0x35c <_JIT_ENTRY+0x35c>
// 33e: ff d3                         callq   *%rbx
// 340: 49 ff 0c 24                   decq    (%r12)
// 344: 75 16                         jne     0x35c <_JIT_ENTRY+0x35c>
// 346: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000348:  R_X86_64_64  PyType_Type
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_Dealloc
// 35a: ff d0                         callq   *%rax
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _JIT_OPARG
// 366: 0f b7 c8                      movzwl  %ax, %ecx
// 369: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 36e: 29 ca                         subl    %ecx, %edx
// 370: 48 63 ca                      movslq  %edx, %rcx
// 373: 0f b7 c0                      movzwl  %ax, %eax
// 376: 48 29 c1                      subq    %rax, %rcx
// 379: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 37d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037f:  R_X86_64_64  _JIT_CONTINUE
// 387: 48 8b 3c 24                   movq    (%rsp), %rdi
// 38b: 4c 89 ee                      movq    %r13, %rsi
// 38e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 393: 48 83 c4 18                   addq    $0x18, %rsp
// 397: 5b                            popq    %rbx
// 398: 41 5c                         popq    %r12
// 39a: 41 5d                         popq    %r13
// 39c: 41 5e                         popq    %r14
// 39e: 41 5f                         popq    %r15
// 3a0: 5d                            popq    %rbp
// 3a1: ff e0                         jmpq    *%rax
// 3a3: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_TYPE_1_code_body[932] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x82, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf9, 0x4b, 0x89, 0x14, 0xfe, 0x49, 0x29, 0xc7, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x75, 0x2d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x29, 0xca, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xd6, 0x74, 0x34, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x0c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x29, 0x49, 0x8b, 0x6d, 0x08, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x19, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x28, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x5f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xfe, 0x85, 0xc0, 0x78, 0x1e, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x49, 0x89, 0x2c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_TYPE_1_code_holes[35] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CALL_TYPE_1_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CALL_TYPE_1_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 20c: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 213: 74 34                         je      0x249 <_JIT_ENTRY+0x249>
// 215: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000217:  R_X86_64_64  _JIT_OPERAND
// 21f: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 225: 75 22                         jne     0x249 <_JIT_ENTRY+0x249>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_CONTINUE
// 231: 48 89 df                      movq    %rbx, %rdi
// 234: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 239: 48 83 c4 18                   addq    $0x18, %rsp
// 23d: 5b                            popq    %rbx
// 23e: 41 5c                         popq    %r12
// 240: 41 5d                         popq    %r13
// 242: 41 5e                         popq    %r14
// 244: 41 5f                         popq    %r15
// 246: 5d                            popq    %rbp
// 247: ff e0                         jmpq    *%rax
// 249: 48 29 de                      subq    %rbx, %rsi
// 24c: 48 83 c6 b8                   addq    $-0x48, %rsi
// 250: 48 c1 ee 03                   shrq    $0x3, %rsi
// 254: 89 73 40                      movl    %esi, 0x40(%rbx)
// 257: 48 8b 03                      movq    (%rbx), %rax
// 25a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025c:  R_X86_64_64  _JIT_TARGET
// 264: 89 c9                         movl    %ecx, %ecx
// 266: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 270: e9 fe fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 275: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS_code_body[630] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfe, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 20c: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 213: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 218: 74 2c                         je      0x246 <_JIT_ENTRY+0x246>
// 21a: 48 29 de                      subq    %rbx, %rsi
// 21d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 221: 48 c1 ee 03                   shrq    $0x3, %rsi
// 225: 89 73 40                      movl    %esi, 0x40(%rbx)
// 228: 48 8b 03                      movq    (%rbx), %rax
// 22b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022d:  R_X86_64_64  _JIT_TARGET
// 235: 89 c9                         movl    %ecx, %ecx
// 237: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 23b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 241: e9 2d ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_CONTINUE
// 250: 48 89 df                      movq    %rbx, %rdi
// 253: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 258: 48 83 c4 18                   addq    $0x18, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020a:  R_X86_64_64  PyModule_Type
// 212: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 216: 75 39                         jne     0x251 <_JIT_ENTRY+0x251>
// 218: 48 8b 40 10                   movq    0x10(%rax), %rax
// 21c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  _JIT_OPERAND
// 22a: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 22d: 75 22                         jne     0x251 <_JIT_ENTRY+0x251>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_CONTINUE
// 239: 48 89 df                      movq    %rbx, %rdi
// 23c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 241: 48 83 c4 18                   addq    $0x18, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: ff e0                         jmpq    *%rax
// 251: 48 29 de                      subq    %rbx, %rsi
// 254: 48 83 c6 b8                   addq    $-0x48, %rsi
// 258: 48 c1 ee 03                   shrq    $0x3, %rsi
// 25c: 89 73 40                      movl    %esi, 0x40(%rbx)
// 25f: 48 8b 03                      movq    (%rbx), %rax
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  _JIT_TARGET
// 26c: 89 c9                         movl    %ecx, %ecx
// 26e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 272: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 278: e9 f6 fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 27d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf6, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 20c: a8 01                         testb   $0x1, %al
// 20e: 75 27                         jne     0x237 <_JIT_ENTRY+0x237>
// 210: 48 85 c0                      testq   %rax, %rax
// 213: 74 22                         je      0x237 <_JIT_ENTRY+0x237>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 48 89 df                      movq    %rbx, %rdi
// 222: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 227: 48 83 c4 18                   addq    $0x18, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: ff e0                         jmpq    *%rax
// 237: 48 29 de                      subq    %rbx, %rsi
// 23a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 242: 89 73 40                      movl    %esi, 0x40(%rbx)
// 245: 48 8b 03                      movq    (%rbx), %rax
// 248: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024a:  R_X86_64_64  _JIT_TARGET
// 252: 89 c9                         movl    %ecx, %ecx
// 254: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 258: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25e: e9 10 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 263: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT_code_body[612] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x27, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x10, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1fe: 4c 89 fe                      movq    %r15, %rsi
// 201: 48 29 d6                      subq    %rdx, %rsi
// 204: 48 29 c8                      subq    %rcx, %rax
// 207: 49 83 3c c7 00                cmpq    $0x0, (%r15,%rax,8)
// 20c: 75 31                         jne     0x23f <_JIT_ENTRY+0x23f>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: 0f b7 c8                      movzwl  %ax, %ecx
// 21b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 220: 29 ca                         subl    %ecx, %edx
// 222: 48 63 ca                      movslq  %edx, %rcx
// 225: 0f b7 c0                      movzwl  %ax, %eax
// 228: 48 29 c1                      subq    %rax, %rcx
// 22b: 49 8b 04 cf                   movq    (%r15,%rcx,8), %rax
// 22f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000231:  R_X86_64_64  PyMethod_Type
// 239: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 23d: 74 2c                         je      0x26b <_JIT_ENTRY+0x26b>
// 23f: 48 29 de                      subq    %rbx, %rsi
// 242: 48 83 c6 b8                   addq    $-0x48, %rsi
// 246: 48 c1 ee 03                   shrq    $0x3, %rsi
// 24a: 89 73 40                      movl    %esi, 0x40(%rbx)
// 24d: 48 8b 03                      movq    (%rbx), %rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_TARGET
// 25a: 89 c9                         movl    %ecx, %ecx
// 25c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 260: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 266: e9 08 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_CONTINUE
// 275: 48 89 df                      movq    %rbx, %rdi
// 278: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 27d: 48 83 c4 18                   addq    $0x18, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: ff e0                         jmpq    *%rax
// 28d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[654] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xd6, 0x48, 0x29, 0xc8, 0x49, 0x83, 0x3c, 0xc7, 0x00, 0x75, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x04, 0xcf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x08, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 00 01 00 00             jne     0x12f <_JIT_ENTRY+0x12f>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e9 00 00 00             jne     0x12f <_JIT_ENTRY+0x12f>
// 46: 48 89 4c 24 18                movq    %rcx, 0x18(%rsp)
// 4b: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 f2                      movq    %r14, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d6 00 00 00             jle     0x178 <_JIT_ENTRY+0x178>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e ab 00 00 00             jle     0x178 <_JIT_ENTRY+0x178>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// d4: 49 8b 04 24                   movq    (%r12), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 33                         jmp     0x116 <_JIT_ENTRY+0x116>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 e2                      movq    %r12, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 04 24                   movq    (%r12), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: ff d5                         callq   *%rbp
// 118: 49 ff 0c 24                   decq    (%r12)
// 11c: 75 a2                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _Py_Dealloc
// 12b: ff d0                         callq   *%rax
// 12d: eb 91                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  PyExc_SystemError
// 139: 48 8b 30                      movq    (%rax), %rsi
// 13c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013e:  R_X86_64_64  .rodata.str1.1+0x39
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _PyErr_SetString
// 150: 48 89 cf                      movq    %rcx, %rdi
// 153: ff d0                         callq   *%rax
// 155: 4d 89 fe                      movq    %r15, %r14
// 158: 49 29 de                      subq    %rbx, %r14
// 15b: 49 83 c6 b8                   addq    $-0x48, %r14
// 15f: 49 c1 ee 03                   shrq    $0x3, %r14
// 163: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 167: 31 c0                         xorl    %eax, %eax
// 169: 48 83 c4 28                   addq    $0x28, %rsp
// 16d: 5b                            popq    %rbx
// 16e: 41 5c                         popq    %r12
// 170: 41 5d                         popq    %r13
// 172: 41 5e                         popq    %r14
// 174: 41 5f                         popq    %r15
// 176: 5d                            popq    %rbp
// 177: c3                            retq
// 178: 49 8b 45 00                   movq    (%r13), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 22                         jg      0x1a3 <_JIT_ENTRY+0x1a3>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 19a: 4c 89 ea                      movq    %r13, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 45 00                   movq    (%r13), %rax
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1aa: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 4d 00                   decq    (%r13)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 ef                      movq    %r13, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d6: 48 85 d2                      testq   %rdx, %rdx
// 1d9: 0f 84 79 ff ff ff             je      0x158 <_JIT_ENTRY+0x158>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 c8                      movzwl  %ax, %ecx
// 1ec: f7 d0                         notl    %eax
// 1ee: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f3: 48 98                         cltq
// 1f5: 49 89 14 c7                   movq    %rdx, (%r15,%rax,8)
// 1f9: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fd: 4d 89 fe                      movq    %r15, %r14
// 200: 49 29 ce                      subq    %rcx, %r14
// 203: 48 f7 d9                      negq    %rcx
// 206: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 20b: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 219: 4c 89 e7                      movq    %r12, %rdi
// 21c: 4c 89 ee                      movq    %r13, %rsi
// 21f: ff d0                         callq   *%rax
// 221: 85 c0                         testl   %eax, %eax
// 223: 0f 88 4d 01 00 00             js      0x376 <_JIT_ENTRY+0x376>
// 229: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 232: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 245: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 24a: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 24f: 48 89 ef                      movq    %rbp, %rdi
// 252: 4c 89 ee                      movq    %r13, %rsi
// 255: ff d0                         callq   *%rax
// 257: 89 04 24                      movl    %eax, (%rsp)
// 25a: 48 8b 45 00                   movq    (%rbp), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f 22                         jg      0x285 <_JIT_ENTRY+0x285>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 27c: 48 89 ea                      movq    %rbp, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 48 8b 45 00                   movq    (%rbp), %rax
// 285: 85 c0                         testl   %eax, %eax
// 287: 78 21                         js      0x2aa <_JIT_ENTRY+0x2aa>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 293: ff d0                         callq   *%rax
// 295: 48 ff 4d 00                   decq    (%rbp)
// 299: 75 0f                         jne     0x2aa <_JIT_ENTRY+0x2aa>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 48 89 ef                      movq    %rbp, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 45 00                   movq    (%r13), %rax
// 2ae: 48 85 c0                      testq   %rax, %rax
// 2b1: 7f 22                         jg      0x2d5 <_JIT_ENTRY+0x2d5>
// 2b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b5:  R_X86_64_64  .rodata.str1.1
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_NegativeRefcount
// 2c7: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 2cc: 4c 89 ea                      movq    %r13, %rdx
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 8b 45 00                   movq    (%r13), %rax
// 2d5: 85 c0                         testl   %eax, %eax
// 2d7: 78 21                         js      0x2fa <_JIT_ENTRY+0x2fa>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e3: ff d0                         callq   *%rax
// 2e5: 49 ff 4d 00                   decq    (%r13)
// 2e9: 75 0f                         jne     0x2fa <_JIT_ENTRY+0x2fa>
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_Dealloc
// 2f5: 4c 89 ef                      movq    %r13, %rdi
// 2f8: ff d0                         callq   *%rax
// 2fa: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 2fe: 0f 88 12 01 00 00             js      0x416 <_JIT_ENTRY+0x416>
// 304: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 309: 48 85 ff                      testq   %rdi, %rdi
// 30c: 0f 84 04 01 00 00             je      0x416 <_JIT_ENTRY+0x416>
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_NoneStruct
// 31c: 48 39 c7                      cmpq    %rax, %rdi
// 31f: 74 11                         je      0x332 <_JIT_ENTRY+0x332>
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  PyErr_SetHandledException
// 32b: ff d0                         callq   *%rax
// 32d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 332: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000334:  R_X86_64_64  _JIT_OPARG
// 33c: 0f b7 c9                      movzwl  %cx, %ecx
// 33f: 48 c1 e1 03                   shlq    $0x3, %rcx
// 343: 49 29 cf                      subq    %rcx, %r15
// 346: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 34b: 49 89 4f f0                   movq    %rcx, -0x10(%r15)
// 34f: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _JIT_CONTINUE
// 35d: 48 89 df                      movq    %rbx, %rdi
// 360: 4c 89 fe                      movq    %r15, %rsi
// 363: 4c 89 e2                      movq    %r12, %rdx
// 366: 48 83 c4 28                   addq    $0x28, %rsp
// 36a: 5b                            popq    %rbx
// 36b: 41 5c                         popq    %r12
// 36d: 41 5d                         popq    %r13
// 36f: 41 5e                         popq    %r14
// 371: 41 5f                         popq    %r15
// 373: 5d                            popq    %rbp
// 374: ff e0                         jmpq    *%rax
// 376: 48 8b 45 00                   movq    (%rbp), %rax
// 37a: 48 85 c0                      testq   %rax, %rax
// 37d: 7f 22                         jg      0x3a1 <_JIT_ENTRY+0x3a1>
// 37f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000381:  R_X86_64_64  .rodata.str1.1
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_NegativeRefcount
// 393: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 398: 48 89 ea                      movq    %rbp, %rdx
// 39b: ff d0                         callq   *%rax
// 39d: 48 8b 45 00                   movq    (%rbp), %rax
// 3a1: 85 c0                         testl   %eax, %eax
// 3a3: 78 21                         js      0x3c6 <_JIT_ENTRY+0x3c6>
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3af: ff d0                         callq   *%rax
// 3b1: 48 ff 4d 00                   decq    (%rbp)
// 3b5: 75 0f                         jne     0x3c6 <_JIT_ENTRY+0x3c6>
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_Dealloc
// 3c1: 48 89 ef                      movq    %rbp, %rdi
// 3c4: ff d0                         callq   *%rax
// 3c6: 49 8b 45 00                   movq    (%r13), %rax
// 3ca: 48 85 c0                      testq   %rax, %rax
// 3cd: 7f 22                         jg      0x3f1 <_JIT_ENTRY+0x3f1>
// 3cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d1:  R_X86_64_64  .rodata.str1.1
// 3d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003db:  R_X86_64_64  _Py_NegativeRefcount
// 3e3: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3e8: 4c 89 ea                      movq    %r13, %rdx
// 3eb: ff d0                         callq   *%rax
// 3ed: 49 8b 45 00                   movq    (%r13), %rax
// 3f1: 85 c0                         testl   %eax, %eax
// 3f3: 78 21                         js      0x416 <_JIT_ENTRY+0x416>
// 3f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ff: ff d0                         callq   *%rax
// 401: 49 ff 4d 00                   decq    (%r13)
// 405: 75 0f                         jne     0x416 <_JIT_ENTRY+0x416>
// 407: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000409:  R_X86_64_64  _Py_Dealloc
// 411: 4c 89 ef                      movq    %r13, %rdi
// 414: ff d0                         callq   *%rax
// 416: 49 83 c6 f0                   addq    $-0x10, %r14
// 41a: e9 39 fd ff ff                jmp     0x158 <_JIT_ENTRY+0x158>
// 41f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH_code_body[1056] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe9, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xab, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0xaa, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0xa2, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x91, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x4d, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x88, 0x12, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4f, 0xf0, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0xe9, 0x39, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH_code_holes[41] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x409, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 f4                      movq    %r14, %r12
// 1f6: 49 29 cc                      subq    %rcx, %r12
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 4d 8b 6c 0e f8                movq    -0x8(%r14,%rcx), %r13
// 201: 4d 8b 7c 24 f0                movq    -0x10(%r12), %r15
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 210: 48 8b 3c 24                   movq    (%rsp), %rdi
// 214: 4c 89 ee                      movq    %r13, %rsi
// 217: ff d0                         callq   *%rax
// 219: 85 c0                         testl   %eax, %eax
// 21b: 0f 88 ba 00 00 00             js      0x2db <_JIT_ENTRY+0x2db>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  PyErr_GivenExceptionMatches
// 22b: 4c 89 ff                      movq    %r15, %rdi
// 22e: 4c 89 ee                      movq    %r13, %rsi
// 231: ff d0                         callq   *%rax
// 233: 89 c5                         movl    %eax, %ebp
// 235: 49 8b 45 00                   movq    (%r13), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 7f 22                         jg      0x260 <_JIT_ENTRY+0x260>
// 23e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_NegativeRefcount
// 252: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 257: 4c 89 ea                      movq    %r13, %rdx
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 45 00                   movq    (%r13), %rax
// 260: 85 c0                         testl   %eax, %eax
// 262: 78 21                         js      0x285 <_JIT_ENTRY+0x285>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26e: ff d0                         callq   *%rax
// 270: 49 ff 4d 00                   decq    (%r13)
// 274: 75 0f                         jne     0x285 <_JIT_ENTRY+0x285>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_Dealloc
// 280: 4c 89 ef                      movq    %r13, %rdi
// 283: ff d0                         callq   *%rax
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _JIT_OPARG
// 28f: 0f b7 c0                      movzwl  %ax, %eax
// 292: 48 c1 e0 03                   shlq    $0x3, %rax
// 296: 49 29 c6                      subq    %rax, %r14
// 299: 85 ed                         testl   %ebp, %ebp
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_FalseStruct
// 2a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a7:  R_X86_64_64  _Py_TrueStruct
// 2af: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2b3: 49 89 4e f8                   movq    %rcx, -0x8(%r14)
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _JIT_CONTINUE
// 2c1: 48 89 df                      movq    %rbx, %rdi
// 2c4: 4c 89 f6                      movq    %r14, %rsi
// 2c7: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cb: 48 83 c4 18                   addq    $0x18, %rsp
// 2cf: 5b                            popq    %rbx
// 2d0: 41 5c                         popq    %r12
// 2d2: 41 5d                         popq    %r13
// 2d4: 41 5e                         popq    %r14
// 2d6: 41 5f                         popq    %r15
// 2d8: 5d                            popq    %rbp
// 2d9: ff e0                         jmpq    *%rax
// 2db: 49 8b 45 00                   movq    (%r13), %rax
// 2df: 48 85 c0                      testq   %rax, %rax
// 2e2: 7f 22                         jg      0x306 <_JIT_ENTRY+0x306>
// 2e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e6:  R_X86_64_64  .rodata.str1.1
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_NegativeRefcount
// 2f8: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 2fd: 4c 89 ea                      movq    %r13, %rdx
// 300: ff d0                         callq   *%rax
// 302: 49 8b 45 00                   movq    (%r13), %rax
// 306: 49 83 c4 f8                   addq    $-0x8, %r12
// 30a: 85 c0                         testl   %eax, %eax
// 30c: 0f 88 44 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31c: ff d0                         callq   *%rax
// 31e: 49 ff 4d 00                   decq    (%r13)
// 322: 0f 85 2e fe ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _Py_Dealloc
// 332: 4c 89 ef                      movq    %r13, %rdi
// 335: ff d0                         callq   *%rax
// 337: e9 1a fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 33c: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH_code_body[829] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0e, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x0f, 0x88, 0x44, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x2e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x1a, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH_code_holes[33] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c1                      movzwl  %cx, %eax
// 1e9: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1ee: 29 c2                         subl    %eax, %edx
// 1f0: f7 d0                         notl    %eax
// 1f2: 48 98                         cltq
// 1f4: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f8: 0f b7 c9                      movzwl  %cx, %ecx
// 1fb: 48 8d 3c cd 00 00 00 00       leaq    (,%rcx,8), %rdi
// 203: 4c 89 fe                      movq    %r15, %rsi
// 206: 48 29 fe                      subq    %rdi, %rsi
// 209: 48 63 d2                      movslq  %edx, %rdx
// 20c: 48 29 ca                      subq    %rcx, %rdx
// 20f: 49 8b 14 d7                   movq    (%r15,%rdx,8), %rdx
// 213: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000215:  R_X86_64_64  PyFunction_Type
// 21d: 48 39 7a 08                   cmpq    %rdi, 0x8(%rdx)
// 221: 75 55                         jne     0x278 <_JIT_ENTRY+0x278>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  _JIT_OPERAND
// 22d: 39 ba 88 00 00 00             cmpl    %edi, 0x88(%rdx)
// 233: 75 43                         jne     0x278 <_JIT_ENTRY+0x278>
// 235: 48 29 c8                      subq    %rcx, %rax
// 238: 48 8b 4a 30                   movq    0x30(%rdx), %rcx
// 23c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000023e:  R_X86_64_64  _JIT_OPARG
// 246: 0f b7 d2                      movzwl  %dx, %edx
// 249: 49 83 3c c7 01                cmpq    $0x1, (%r15,%rax,8)
// 24e: 83 da ff                      sbbl    $-0x1, %edx
// 251: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 254: 75 22                         jne     0x278 <_JIT_ENTRY+0x278>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _JIT_CONTINUE
// 260: 48 89 df                      movq    %rbx, %rdi
// 263: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 268: 48 83 c4 18                   addq    $0x18, %rsp
// 26c: 5b                            popq    %rbx
// 26d: 41 5c                         popq    %r12
// 26f: 41 5d                         popq    %r13
// 271: 41 5e                         popq    %r14
// 273: 41 5f                         popq    %r15
// 275: 5d                            popq    %rbp
// 276: ff e0                         jmpq    *%rax
// 278: 48 29 de                      subq    %rbx, %rsi
// 27b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 27f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 283: 89 73 40                      movl    %esi, 0x40(%rbx)
// 286: 48 8b 03                      movq    (%rbx), %rax
// 289: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028b:  R_X86_64_64  _JIT_TARGET
// 293: 89 c9                         movl    %ecx, %ecx
// 295: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 299: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 29f: e9 cf fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 2a4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS_code_body[677] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x3c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xfe, 0x48, 0x63, 0xd2, 0x48, 0x29, 0xca, 0x49, 0x8b, 0x14, 0xd7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x7a, 0x08, 0x75, 0x55, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xba, 0x88, 0x00, 0x00, 0x00, 0x75, 0x43, 0x48, 0x29, 0xc8, 0x48, 0x8b, 0x4a, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x3c, 0xc7, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xcf, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4d 89 fc                      movq    %r15, %r12
// 1fd: 49 29 cc                      subq    %rcx, %r12
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 7c 0f f8                movq    -0x8(%r15,%rcx), %rdi
// 208: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 20c: 75 14                         jne     0x222 <_JIT_ENTRY+0x222>
// 20e: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 21c: ff d0                         callq   *%rax
// 21e: 84 c0                         testb   %al, %al
// 220: 74 25                         je      0x247 <_JIT_ENTRY+0x247>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: 4c 89 e6                      movq    %r12, %rsi
// 232: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 237: 48 83 c4 18                   addq    $0x18, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: ff e0                         jmpq    *%rax
// 247: 49 29 dc                      subq    %rbx, %r12
// 24a: 49 83 c4 b8                   addq    $-0x48, %r12
// 24e: 49 c1 ec 03                   shrq    $0x3, %r12
// 252: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 256: 48 8b 03                      movq    (%rbx), %rax
// 259: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025b:  R_X86_64_64  _JIT_TARGET
// 263: 89 c9                         movl    %ecx, %ecx
// 265: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 269: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26f: e9 ff fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 274: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[629] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x7c, 0x0f, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xff, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_PEP_523
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_PEP_523.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 49 29 ce                      subq    %rcx, %r14
// 1fd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 202: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 206: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 20e: 74 2d                         je      0x23d <_JIT_ENTRY+0x23d>
// 210: 49 29 de                      subq    %rbx, %r14
// 213: 49 83 c6 b8                   addq    $-0x48, %r14
// 217: 49 c1 ee 03                   shrq    $0x3, %r14
// 21b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21f: 48 8b 03                      movq    (%rbx), %rax
// 222: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000224:  R_X86_64_64  _JIT_TARGET
// 22c: 89 c9                         movl    %ecx, %ecx
// 22e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 232: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 238: e9 36 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_CONTINUE
// 247: 48 89 df                      movq    %rbx, %rdi
// 24a: 4c 89 f6                      movq    %r14, %rsi
// 24d: 48 83 c4 18                   addq    $0x18, %rsp
// 251: 5b                            popq    %rbx
// 252: 41 5c                         popq    %r12
// 254: 41 5d                         popq    %r13
// 256: 41 5e                         popq    %r14
// 258: 41 5f                         popq    %r15
// 25a: 5d                            popq    %rbp
// 25b: ff e0                         jmpq    *%rax
// 25d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_PEP_523_code_body[606] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x36, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_PEP_523_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_PEP_523_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_PEP_523_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 205: 48 8b 82 00 01 00 00          movq    0x100(%rdx), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 74 44                         je      0x255 <_JIT_ENTRY+0x255>
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  _JIT_OPARG
// 21b: 44 0f b7 c1                   movzwl  %cx, %r8d
// 21f: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 224: 44 29 c7                      subl    %r8d, %edi
// 227: 48 63 ff                      movslq  %edi, %rdi
// 22a: 0f b7 c9                      movzwl  %cx, %ecx
// 22d: 48 29 cf                      subq    %rcx, %rdi
// 230: 49 8b 0c ff                   movq    (%r15,%rdi,8), %rcx
// 234: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 238: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 23c: 48 8b ba 08 01 00 00          movq    0x108(%rdx), %rdi
// 243: 48 29 c7                      subq    %rax, %rdi
// 246: 48 c1 ff 03                   sarq    $0x3, %rdi
// 24a: 48 39 cf                      cmpq    %rcx, %rdi
// 24d: 7e 06                         jle     0x255 <_JIT_ENTRY+0x255>
// 24f: 83 7a 24 02                   cmpl    $0x2, 0x24(%rdx)
// 253: 7d 2c                         jge     0x281 <_JIT_ENTRY+0x281>
// 255: 48 29 de                      subq    %rbx, %rsi
// 258: 48 83 c6 b8                   addq    $-0x48, %rsi
// 25c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 260: 89 73 40                      movl    %esi, 0x40(%rbx)
// 263: 48 8b 03                      movq    (%rbx), %rax
// 266: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000268:  R_X86_64_64  _JIT_TARGET
// 270: 89 c9                         movl    %ecx, %ecx
// 272: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 276: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27c: e9 f2 fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _JIT_CONTINUE
// 28b: 48 89 df                      movq    %rbx, %rdi
// 28e: 48 83 c4 18                   addq    $0x18, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x82, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc1, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc7, 0x48, 0x63, 0xff, 0x0f, 0xb7, 0xc9, 0x48, 0x29, 0xcf, 0x49, 0x8b, 0x0c, 0xff, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x48, 0x8b, 0xba, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc7, 0x48, 0xc1, 0xff, 0x03, 0x48, 0x39, 0xcf, 0x7e, 0x06, 0x83, 0x7a, 0x24, 0x02, 0x7d, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf2, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 49 29 ce                      subq    %rcx, %r14
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_EXECUTOR
// 207: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 20b: 74 25                         je      0x232 <_JIT_ENTRY+0x232>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_CONTINUE
// 217: 48 89 df                      movq    %rbx, %rdi
// 21a: 4c 89 f6                      movq    %r14, %rsi
// 21d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 222: 48 83 c4 18                   addq    $0x18, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: ff e0                         jmpq    *%rax
// 232: 49 29 de                      subq    %rbx, %r14
// 235: 49 83 c6 b8                   addq    $-0x48, %r14
// 239: 49 c1 ee 03                   shrq    $0x3, %r14
// 23d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 241: 48 8b 03                      movq    (%rbx), %rax
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  _JIT_TARGET
// 24e: 89 c9                         movl    %ecx, %ecx
// 250: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 254: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25a: e9 14 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 25f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY_code_body[608] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x14, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_COMPARE_OP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_COMPARE_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 f6                      testq   %r14, %r14
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 d0                      movzwl  %ax, %edx
// 1e2: 89 d1                         movl    %edx, %ecx
// 1e4: f7 d1                         notl    %ecx
// 1e6: 48 63 c9                      movslq  %ecx, %rcx
// 1e9: 4d 89 34 cf                   movq    %r14, (%r15,%rcx,8)
// 1ed: 0f b7 c0                      movzwl  %ax, %eax
// 1f0: 48 c1 e0 03                   shlq    $0x3, %rax
// 1f4: 4d 89 fc                      movq    %r15, %r12
// 1f7: 49 29 c4                      subq    %rax, %r12
// 1fa: 48 f7 d8                      negq    %rax
// 1fd: 49 8b 6c 07 f8                movq    -0x8(%r15,%rax), %rbp
// 202: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 207: c1 ea 05                      shrl    $0x5, %edx
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyObject_RichCompare
// 214: 4c 89 ef                      movq    %r13, %rdi
// 217: 48 89 ee                      movq    %rbp, %rsi
// 21a: ff d0                         callq   *%rax
// 21c: 49 89 c6                      movq    %rax, %r14
// 21f: 49 8b 45 00                   movq    (%r13), %rax
// 223: 48 85 c0                      testq   %rax, %rax
// 226: 7f 22                         jg      0x24a <_JIT_ENTRY+0x24a>
// 228: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022a:  R_X86_64_64  .rodata.str1.1
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NegativeRefcount
// 23c: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 241: 4c 89 ea                      movq    %r13, %rdx
// 244: ff d0                         callq   *%rax
// 246: 49 8b 45 00                   movq    (%r13), %rax
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 21                         js      0x26f <_JIT_ENTRY+0x26f>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 49 ff 4d 00                   decq    (%r13)
// 25e: 75 0f                         jne     0x26f <_JIT_ENTRY+0x26f>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_Dealloc
// 26a: 4c 89 ef                      movq    %r13, %rdi
// 26d: ff d0                         callq   *%rax
// 26f: 48 8b 45 00                   movq    (%rbp), %rax
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 7f 22                         jg      0x29a <_JIT_ENTRY+0x29a>
// 278: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 291: 48 89 ea                      movq    %rbp, %rdx
// 294: ff d0                         callq   *%rax
// 296: 48 8b 45 00                   movq    (%rbp), %rax
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 21                         js      0x2bf <_JIT_ENTRY+0x2bf>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a8: ff d0                         callq   *%rax
// 2aa: 48 ff 4d 00                   decq    (%rbp)
// 2ae: 75 0f                         jne     0x2bf <_JIT_ENTRY+0x2bf>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_Dealloc
// 2ba: 48 89 ef                      movq    %rbp, %rdi
// 2bd: ff d0                         callq   *%rax
// 2bf: 4d 85 f6                      testq   %r14, %r14
// 2c2: 0f 84 c8 00 00 00             je      0x390 <_JIT_ENTRY+0x390>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _JIT_OPARG
// 2d2: a8 10                         testb   $0x10, %al
// 2d4: 74 7a                         je      0x350 <_JIT_ENTRY+0x350>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  PyObject_IsTrue
// 2e0: 4c 89 f7                      movq    %r14, %rdi
// 2e3: ff d0                         callq   *%rax
// 2e5: 89 c5                         movl    %eax, %ebp
// 2e7: 49 8b 06                      movq    (%r14), %rax
// 2ea: 48 85 c0                      testq   %rax, %rax
// 2ed: 7f 21                         jg      0x310 <_JIT_ENTRY+0x310>
// 2ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_NegativeRefcount
// 303: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 308: 4c 89 f2                      movq    %r14, %rdx
// 30b: ff d0                         callq   *%rax
// 30d: 49 8b 06                      movq    (%r14), %rax
// 310: 85 c0                         testl   %eax, %eax
// 312: 78 20                         js      0x334 <_JIT_ENTRY+0x334>
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31e: ff d0                         callq   *%rax
// 320: 49 ff 0e                      decq    (%r14)
// 323: 75 0f                         jne     0x334 <_JIT_ENTRY+0x334>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_Dealloc
// 32f: 4c 89 f7                      movq    %r14, %rdi
// 332: ff d0                         callq   *%rax
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_FalseStruct
// 33e: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000340:  R_X86_64_64  _Py_TrueStruct
// 348: 85 ed                         testl   %ebp, %ebp
// 34a: 4c 0f 44 f0                   cmoveq  %rax, %r14
// 34e: 78 40                         js      0x390 <_JIT_ENTRY+0x390>
// 350: 49 83 c4 f8                   addq    $-0x8, %r12
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _JIT_OPARG
// 35e: 0f b7 c0                      movzwl  %ax, %eax
// 361: 48 c1 e0 03                   shlq    $0x3, %rax
// 365: 49 29 c7                      subq    %rax, %r15
// 368: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 36c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036e:  R_X86_64_64  _JIT_CONTINUE
// 376: 48 89 df                      movq    %rbx, %rdi
// 379: 4c 89 e6                      movq    %r12, %rsi
// 37c: 48 8b 14 24                   movq    (%rsp), %rdx
// 380: 48 83 c4 18                   addq    $0x18, %rsp
// 384: 5b                            popq    %rbx
// 385: 41 5c                         popq    %r12
// 387: 41 5d                         popq    %r13
// 389: 41 5e                         popq    %r14
// 38b: 41 5f                         popq    %r15
// 38d: 5d                            popq    %rbp
// 38e: ff e0                         jmpq    *%rax
// 390: 49 83 c4 f0                   addq    $-0x10, %r12
// 394: e9 bd fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 399: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_code_body[922] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x34, 0xcf, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x6c, 0x07, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xf0, 0x78, 0x40, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0xbd, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_code_holes[38] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 4c 24 18                movq    %rcx, 0x18(%rsp)
// 4d: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _JIT_OPARG
// 5c: f7 d0                         notl    %eax
// 5e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 63: 48 98                         cltq
// 65: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 69: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000070:  R_X86_64_64  _JIT_OPARG
// 78: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _PyDict_FromItems
// 86: be 01 00 00 00                movl    $0x1, %esi
// 8b: b9 01 00 00 00                movl    $0x1, %ecx
// 90: 4c 89 ea                      movq    %r13, %rdx
// 93: ff d0                         callq   *%rax
// 95: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 9a: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// a0: 0f 8e e0 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: 0f b7 e8                      movzwl  %ax, %ebp
// b3: 48 ff c5                      incq    %rbp
// b6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: eb 1b                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 4d 29 f5                      subq    %r14, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 45 89 6e 40                   movl    %r13d, 0x40(%r14)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 28                   addq    $0x28, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 1b8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 db                      testq   %rbx, %rbx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c1                      movzwl  %cx, %eax
// 1f2: f7 d1                         notl    %ecx
// 1f4: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1fa: 48 63 c9                      movslq  %ecx, %rcx
// 1fd: 49 89 1c cf                   movq    %rbx, (%r15,%rcx,8)
// 201: 48 c1 e0 03                   shlq    $0x3, %rax
// 205: 4d 89 fc                      movq    %r15, %r12
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 210: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000212:  R_X86_64_64  PyFloat_Type
// 21a: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 21e: 75 0e                         jne     0x22e <_JIT_ENTRY+0x22e>
// 220: 48 f7 d8                      negq    %rax
// 223: 4d 8b 6c 07 f8                movq    -0x8(%r15,%rax), %r13
// 228: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 22c: 74 2d                         je      0x25b <_JIT_ENTRY+0x25b>
// 22e: 4d 29 f4                      subq    %r14, %r12
// 231: 49 83 c4 b8                   addq    $-0x48, %r12
// 235: 49 c1 ec 03                   shrq    $0x3, %r12
// 239: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 23d: 49 8b 06                      movq    (%r14), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: e9 1c ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 25b: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 260: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 266: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 26c: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 272: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 276: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000278:  R_X86_64_64  PyInterpreterState_Get
// 280: 75 1e                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 282: ff d3                         callq   *%rbx
// 284: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 28b: 48 ff 4d 00                   decq    (%rbp)
// 28f: 75 0f                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _PyFloat_ExactDealloc
// 29b: 48 89 ef                      movq    %rbp, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 49 83 c4 f8                   addq    $-0x8, %r12
// 2a4: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2a9: 75 1e                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ab: ff d3                         callq   *%rbx
// 2ad: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2b4: 49 ff 4d 00                   decq    (%r13)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _PyFloat_ExactDealloc
// 2c4: 4c 89 ef                      movq    %r13, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 31 c0                         xorl    %eax, %eax
// 2cb: f2 0f 10 44 24 08             movsd   0x8(%rsp), %xmm0        # xmm0 = mem[0],zero
// 2d1: f2 0f 10 4c 24 10             movsd   0x10(%rsp), %xmm1       # xmm1 = mem[0],zero
// 2d7: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 2db: 0f 93 c0                      setae   %al
// 2de: 01 c0                         addl    %eax, %eax
// 2e0: 31 c9                         xorl    %ecx, %ecx
// 2e2: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 2e6: 0f 93 c1                      setae   %cl
// 2e9: 09 c1                         orl     %eax, %ecx
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _JIT_OPARG
// 2f5: 0f a3 c8                      btl     %ecx, %eax
// 2f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fa:  R_X86_64_64  _Py_FalseStruct
// 302: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000304:  R_X86_64_64  _Py_TrueStruct
// 30c: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 310: 0f b7 c0                      movzwl  %ax, %eax
// 313: 48 c1 e0 03                   shlq    $0x3, %rax
// 317: 49 29 c7                      subq    %rax, %r15
// 31a: 49 89 57 f0                   movq    %rdx, -0x10(%r15)
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _JIT_CONTINUE
// 328: 4c 89 f7                      movq    %r14, %rdi
// 32b: 4c 89 e6                      movq    %r12, %rsi
// 32e: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 333: 48 83 c4 28                   addq    $0x28, %rsp
// 337: 5b                            popq    %rbx
// 338: 41 5c                         popq    %r12
// 33a: 41 5d                         popq    %r13
// 33c: 41 5e                         popq    %r14
// 33e: 41 5f                         popq    %r15
// 340: 5d                            popq    %rbp
// 341: ff e0                         jmpq    *%rax
// 343: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT_code_body[836] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x4d, 0x29, 0xf5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x1c, 0xcf, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4d, 0x08, 0x75, 0x0e, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x07, 0xf8, 0x49, 0x39, 0x4d, 0x08, 0x74, 0x2d, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1c, 0xff, 0xff, 0xff, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd3, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x08, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x10, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x57, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 4d: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _JIT_OPARG
// 5c: f7 d0                         notl    %eax
// 5e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 63: 48 98                         cltq
// 65: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 69: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000070:  R_X86_64_64  _JIT_OPARG
// 78: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _PyDict_FromItems
// 86: be 01 00 00 00                movl    $0x1, %esi
// 8b: b9 01 00 00 00                movl    $0x1, %ecx
// 90: 4c 89 ea                      movq    %r13, %rdx
// 93: ff d0                         callq   *%rax
// 95: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 9a: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// a0: 0f 8e e0 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _JIT_OPARG
// b0: 0f b7 e8                      movzwl  %ax, %ebp
// b3: 48 ff c5                      incq    %rbp
// b6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: eb 1b                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 28                   addq    $0x28, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c1                      movzwl  %cx, %eax
// 1f2: f7 d1                         notl    %ecx
// 1f4: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1fa: 48 63 c9                      movslq  %ecx, %rcx
// 1fd: 4d 89 34 cf                   movq    %r14, (%r15,%rcx,8)
// 201: 48 c1 e0 03                   shlq    $0x3, %rax
// 205: 4d 89 fc                      movq    %r15, %r12
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 210: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000212:  R_X86_64_64  PyLong_Type
// 21a: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 21e: 75 22                         jne     0x242 <_JIT_ENTRY+0x242>
// 220: 48 f7 d8                      negq    %rax
// 223: 4d 8b 6c 07 f8                movq    -0x8(%r15,%rax), %r13
// 228: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 22c: 75 14                         jne     0x242 <_JIT_ENTRY+0x242>
// 22e: 4c 8b 75 10                   movq    0x10(%rbp), %r14
// 232: 49 83 fe 0f                   cmpq    $0xf, %r14
// 236: 77 0a                         ja      0x242 <_JIT_ENTRY+0x242>
// 238: 49 8b 45 10                   movq    0x10(%r13), %rax
// 23c: 48 83 f8 0f                   cmpq    $0xf, %rax
// 240: 76 2d                         jbe     0x26f <_JIT_ENTRY+0x26f>
// 242: 49 29 dc                      subq    %rbx, %r12
// 245: 49 83 c4 b8                   addq    $-0x48, %r12
// 249: 49 c1 ec 03                   shrq    $0x3, %r12
// 24d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 251: 48 8b 03                      movq    (%rbx), %rax
// 254: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000256:  R_X86_64_64  _JIT_TARGET
// 25e: 89 c9                         movl    %ecx, %ecx
// 260: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 264: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26a: e9 08 ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 26f: 48 89 c3                      movq    %rax, %rbx
// 272: 8b 45 18                      movl    0x18(%rbp), %eax
// 275: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 27a: 41 8b 45 18                   movl    0x18(%r13), %eax
// 27e: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 283: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 287: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000289:  R_X86_64_64  PyInterpreterState_Get
// 291: 75 3c                         jne     0x2cf <_JIT_ENTRY+0x2cf>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  PyInterpreterState_Get
// 29d: ff d0                         callq   *%rax
// 29f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a8:  R_X86_64_64  PyInterpreterState_Get
// 2b0: 48 ff 4d 00                   decq    (%rbp)
// 2b4: 75 19                         jne     0x2cf <_JIT_ENTRY+0x2cf>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  PyObject_Free
// 2c0: 48 89 ef                      movq    %rbp, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c7:  R_X86_64_64  PyInterpreterState_Get
// 2cf: 49 83 c4 f8                   addq    $-0x8, %r12
// 2d3: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2d8: 75 1e                         jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 2da: ff d1                         callq   *%rcx
// 2dc: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2e3: 49 ff 4d 00                   decq    (%r13)
// 2e7: 75 0f                         jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  PyObject_Free
// 2f3: 4c 89 ef                      movq    %r13, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 41 83 e6 03                   andl    $0x3, %r14d
// 2fc: b8 01 00 00 00                movl    $0x1, %eax
// 301: b9 01 00 00 00                movl    $0x1, %ecx
// 306: 4c 29 f1                      subq    %r14, %rcx
// 309: 48 0f af 4c 24 18             imulq   0x18(%rsp), %rcx
// 30f: 83 e3 03                      andl    $0x3, %ebx
// 312: 48 29 d8                      subq    %rbx, %rax
// 315: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 31b: 31 d2                         xorl    %edx, %edx
// 31d: 31 f6                         xorl    %esi, %esi
// 31f: 48 39 c1                      cmpq    %rax, %rcx
// 322: 0f 9d c2                      setge   %dl
// 325: 40 0f 9e c6                   setle   %sil
// 329: 01 d2                         addl    %edx, %edx
// 32b: 09 d6                         orl     %edx, %esi
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _JIT_OPARG
// 337: 0f a3 f0                      btl     %esi, %eax
// 33a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033c:  R_X86_64_64  _Py_FalseStruct
// 344: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000346:  R_X86_64_64  _Py_TrueStruct
// 34e: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 352: 0f b7 c0                      movzwl  %ax, %eax
// 355: 48 c1 e0 03                   shlq    $0x3, %rax
// 359: 49 29 c7                      subq    %rax, %r15
// 35c: 49 89 57 f0                   movq    %rdx, -0x10(%r15)
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _JIT_CONTINUE
// 36a: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 36f: 4c 89 e6                      movq    %r12, %rsi
// 372: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 377: 48 83 c4 28                   addq    $0x28, %rsp
// 37b: 5b                            popq    %rbx
// 37c: 41 5c                         popq    %r12
// 37e: 41 5d                         popq    %r13
// 380: 41 5e                         popq    %r14
// 382: 41 5f                         popq    %r15
// 384: 5d                            popq    %rbp
// 385: ff e0                         jmpq    *%rax
// 387: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT_code_body[904] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x34, 0xcf, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4d, 0x08, 0x75, 0x22, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x07, 0xf8, 0x49, 0x39, 0x4d, 0x08, 0x75, 0x14, 0x4c, 0x8b, 0x75, 0x10, 0x49, 0x83, 0xfe, 0x0f, 0x77, 0x0a, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x83, 0xf8, 0x0f, 0x76, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x08, 0xff, 0xff, 0xff, 0x48, 0x89, 0xc3, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0x83, 0xe6, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf1, 0x48, 0x0f, 0xaf, 0x4c, 0x24, 0x18, 0x83, 0xe3, 0x03, 0x48, 0x29, 0xd8, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x57, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 4d 29 f5                      subq    %r14, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 45 89 6e 40                   movl    %r13d, 0x40(%r14)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 db                      testq   %rbx, %rbx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c1                      movzwl  %cx, %eax
// 1f2: f7 d1                         notl    %ecx
// 1f4: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1fa: 48 63 c9                      movslq  %ecx, %rcx
// 1fd: 49 89 1c cf                   movq    %rbx, (%r15,%rcx,8)
// 201: 48 c1 e0 03                   shlq    $0x3, %rax
// 205: 4d 89 fc                      movq    %r15, %r12
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 210: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000212:  R_X86_64_64  PyUnicode_Type
// 21a: 48 39 4d 08                   cmpq    %rcx, 0x8(%rbp)
// 21e: 75 0e                         jne     0x22e <_JIT_ENTRY+0x22e>
// 220: 48 f7 d8                      negq    %rax
// 223: 4d 8b 6c 07 f8                movq    -0x8(%r15,%rax), %r13
// 228: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 22c: 74 2d                         je      0x25b <_JIT_ENTRY+0x25b>
// 22e: 4d 29 f4                      subq    %r14, %r12
// 231: 49 83 c4 b8                   addq    $-0x48, %r12
// 235: 49 c1 ec 03                   shrq    $0x3, %r12
// 239: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 23d: 49 8b 06                      movq    (%r14), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: e9 1c ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _PyUnicode_Equal
// 265: 48 89 ef                      movq    %rbp, %rdi
// 268: 4c 89 ee                      movq    %r13, %rsi
// 26b: ff d0                         callq   *%rax
// 26d: 89 c3                         movl    %eax, %ebx
// 26f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 273: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: 75 3c                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  PyInterpreterState_Get
// 289: ff d0                         callq   *%rax
// 28b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 292: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000294:  R_X86_64_64  PyInterpreterState_Get
// 29c: 48 ff 4d 00                   decq    (%rbp)
// 2a0: 75 19                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2ac: 48 89 ef                      movq    %rbp, %rdi
// 2af: ff d0                         callq   *%rax
// 2b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b3:  R_X86_64_64  PyInterpreterState_Get
// 2bb: 49 83 c4 f8                   addq    $-0x8, %r12
// 2bf: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2c4: 75 1e                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2c6: ff d1                         callq   *%rcx
// 2c8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2cf: 49 ff 4d 00                   decq    (%r13)
// 2d3: 75 0f                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2df: 4c 89 ef                      movq    %r13, %rdi
// 2e2: ff d0                         callq   *%rax
// 2e4: 83 c3 07                      addl    $0x7, %ebx
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_OPARG
// 2f1: 66 85 d8                      testw   %bx, %ax
// 2f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f6:  R_X86_64_64  _Py_FalseStruct
// 2fe: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000300:  R_X86_64_64  _Py_TrueStruct
// 308: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 30c: 0f b7 c0                      movzwl  %ax, %eax
// 30f: 48 c1 e0 03                   shlq    $0x3, %rax
// 313: 49 29 c7                      subq    %rax, %r15
// 316: 49 89 57 f0                   movq    %rdx, -0x10(%r15)
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _JIT_CONTINUE
// 324: 4c 89 f7                      movq    %r14, %rdi
// 327: 4c 89 e6                      movq    %r12, %rsi
// 32a: 48 8b 14 24                   movq    (%rsp), %rdx
// 32e: 48 83 c4 18                   addq    $0x18, %rsp
// 332: 5b                            popq    %rbx
// 333: 41 5c                         popq    %r12
// 335: 41 5d                         popq    %r13
// 337: 41 5e                         popq    %r14
// 339: 41 5f                         popq    %r15
// 33b: 5d                            popq    %rbp
// 33c: ff e0                         jmpq    *%rax
// 33e: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR_code_body[831] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x4d, 0x29, 0xf5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x1c, 0xcf, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4d, 0x08, 0x75, 0x0e, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x07, 0xf8, 0x49, 0x39, 0x4d, 0x08, 0x74, 0x2d, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1c, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc3, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0xc3, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xd8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x57, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CONTAINS_OP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CONTAINS_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 206: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  PySequence_Contains
// 215: 4c 89 ef                      movq    %r13, %rdi
// 218: 48 89 ee                      movq    %rbp, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 41 89 c6                      movl    %eax, %r14d
// 220: 48 8b 45 00                   movq    (%rbp), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 242: 48 89 ea                      movq    %rbp, %rdx
// 245: ff d0                         callq   *%rax
// 247: 48 8b 45 00                   movq    (%rbp), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 78 21                         js      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 259: ff d0                         callq   *%rax
// 25b: 48 ff 4d 00                   decq    (%rbp)
// 25f: 75 0f                         jne     0x270 <_JIT_ENTRY+0x270>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 48 89 ef                      movq    %rbp, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 49 8b 45 00                   movq    (%r13), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 22                         jg      0x29b <_JIT_ENTRY+0x29b>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 292: 4c 89 ea                      movq    %r13, %rdx
// 295: ff d0                         callq   *%rax
// 297: 49 8b 45 00                   movq    (%r13), %rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 21                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 ff 4d 00                   decq    (%r13)
// 2af: 75 0f                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 ef                      movq    %r13, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 45 85 f6                      testl   %r14d, %r14d
// 2c3: 78 5f                         js      0x324 <_JIT_ENTRY+0x324>
// 2c5: 49 83 c4 f8                   addq    $-0x8, %r12
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _JIT_OPARG
// 2d3: 0f b7 c8                      movzwl  %ax, %ecx
// 2d6: 41 39 ce                      cmpl    %ecx, %r14d
// 2d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002db:  R_X86_64_64  _Py_FalseStruct
// 2e3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e5:  R_X86_64_64  _Py_TrueStruct
// 2ed: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 2f1: 0f b7 c0                      movzwl  %ax, %eax
// 2f4: 48 c1 e0 03                   shlq    $0x3, %rax
// 2f8: 49 29 c7                      subq    %rax, %r15
// 2fb: 49 89 57 f0                   movq    %rdx, -0x10(%r15)
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _JIT_CONTINUE
// 309: 48 89 df                      movq    %rbx, %rdi
// 30c: 4c 89 e6                      movq    %r12, %rsi
// 30f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 314: 48 83 c4 18                   addq    $0x18, %rsp
// 318: 5b                            popq    %rbx
// 319: 41 5c                         popq    %r12
// 31b: 41 5d                         popq    %r13
// 31d: 41 5e                         popq    %r14
// 31f: 41 5f                         popq    %r15
// 321: 5d                            popq    %rbp
// 322: ff e0                         jmpq    *%rax
// 324: 49 83 c4 f0                   addq    $-0x10, %r12
// 328: e9 33 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 32d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CONTAINS_OP_code_body[814] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x78, 0x5f, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x41, 0x39, 0xce, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x57, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x33, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CONTAINS_OP_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CONTAINS_OP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CONTAINS_OP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_CONVERT_VALUE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_CONVERT_VALUE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 4c 8d 3c cd 00 00 00 00       leaq    (,%rcx,8), %r15
// 1fc: 4c 89 f8                      movq    %r15, %rax
// 1ff: 48 f7 d8                      negq    %rax
// 202: 4d 8b 6c 06 f8                movq    -0x8(%r14,%rax), %r13
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  .rodata
// 211: 4c 89 ef                      movq    %r13, %rdi
// 214: ff 14 c8                      callq   *(%rax,%rcx,8)
// 217: 49 89 c4                      movq    %rax, %r12
// 21a: 49 8b 45 00                   movq    (%r13), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 7f 22                         jg      0x245 <_JIT_ENTRY+0x245>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 23c: 4c 89 ea                      movq    %r13, %rdx
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 21                         js      0x26a <_JIT_ENTRY+0x26a>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 4d 00                   decq    (%r13)
// 259: 75 0f                         jne     0x26a <_JIT_ENTRY+0x26a>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 ef                      movq    %r13, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 4d 85 e4                      testq   %r12, %r12
// 26d: 74 3d                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _JIT_OPARG
// 279: 0f b7 c0                      movzwl  %ax, %eax
// 27c: 48 c1 e0 03                   shlq    $0x3, %rax
// 280: 49 29 c6                      subq    %rax, %r14
// 283: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 f6                      movq    %r14, %rsi
// 297: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: ff e0                         jmpq    *%rax
// 2ac: 4d 29 fe                      subq    %r15, %r14
// 2af: 49 83 c6 f8                   addq    $-0x8, %r14
// 2b3: e9 a5 fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2b8: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_CONVERT_VALUE_code_body[697] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x4c, 0x8d, 0x3c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x06, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0x14, 0xc8, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0xa5, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_CONVERT_VALUE_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 7f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_CONVERT_VALUE_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_CONVERT_VALUE_data_holes[4] = {
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _BUILD_CONST_KEY_MAPplus_COPY
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_COPY.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 01 c9                      addq    %rcx, %rcx
// 1f9: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fd: 48 f7 d9                      negq    %rcx
// 200: 4d 8b 3c 0e                   movq    (%r14,%rcx), %r15
// 204: 41 8b 07                      movl    (%r15), %eax
// 207: ff c0                         incl    %eax
// 209: 74 0f                         je      0x21a <_JIT_ENTRY+0x21a>
// 20b: 41 89 07                      movl    %eax, (%r15)
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 218: ff d0                         callq   *%rax
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_OPARG
// 224: 0f b7 c0                      movzwl  %ax, %eax
// 227: 48 c1 e0 03                   shlq    $0x3, %rax
// 22b: 49 29 c6                      subq    %rax, %r14
// 22e: 4d 89 3e                      movq    %r15, (%r14)
// 231: 49 83 c6 08                   addq    $0x8, %r14
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 f6                      movq    %r14, %rsi
// 245: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 24a: 48 83 c4 18                   addq    $0x18, %rsp
// 24e: 5b                            popq    %rbx
// 24f: 41 5c                         popq    %r12
// 251: 41 5d                         popq    %r13
// 253: 41 5e                         popq    %r14
// 255: 41 5f                         popq    %r15
// 257: 5d                            popq    %rbp
// 258: ff e0                         jmpq    *%rax
// 25a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_COPY_code_body[603] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x01, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x3c, 0x0e, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_COPY_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_COPY_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_COPY_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 10 01 00 00             jne     0x140 <_JIT_ENTRY+0x140>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f8 00 00 00             jne     0x140 <_JIT_ENTRY+0x140>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 4c 89 34 24                   movq    %r14, (%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4c 8d 2c c3                   leaq    (%rbx,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a3: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// aa: 49 89 c6                      movq    %rax, %r14
// ad: 0f 8e d3 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _JIT_OPARG
// bd: 44 0f b7 f8                   movzwl  %ax, %r15d
// c1: 49 ff c7                      incq    %r15
// c4: eb 17                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// d0: 49 ff cf                      decq    %r15
// d3: 49 83 ff 01                   cmpq    $0x1, %r15
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// e1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// e6: 48 8b 45 00                   movq    (%rbp), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 11                         jle     0x100 <_JIT_ENTRY+0x100>
// ef: 85 c0                         testl   %eax, %eax
// f1: 78 dd                         js      0xd0 <_JIT_ENTRY+0xd0>
// f3: eb 31                         jmp     0x126 <_JIT_ENTRY+0x126>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 48 89 ea                      movq    %rbp, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 48 8b 45 00                   movq    (%rbp), %rax
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 aa                         js      0xd0 <_JIT_ENTRY+0xd0>
// 126: 41 ff d6                      callq   *%r14
// 129: 48 ff 4d 00                   decq    (%rbp)
// 12d: 75 a1                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12f: 48 89 ef                      movq    %rbp, %rdi
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_Dealloc
// 13c: ff d0                         callq   *%rax
// 13e: eb 90                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  PyExc_SystemError
// 14a: 48 8b 30                      movq    (%rax), %rsi
// 14d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014f:  R_X86_64_64  .rodata.str1.1+0x39
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _PyErr_SetString
// 161: 48 89 cf                      movq    %rcx, %rdi
// 164: ff d0                         callq   *%rax
// 166: 4c 29 f3                      subq    %r14, %rbx
// 169: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 171: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 78 18                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1b5: 41 ff d6                      callq   *%r14
// 1b8: 49 ff 0c 24                   decq    (%r12)
// 1bc: 75 0f                         jne     0x1cd <_JIT_ENTRY+0x1cd>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_Dealloc
// 1c8: 4c 89 e7                      movq    %r12, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 0f 84 b9 00 00 00             je      0x294 <_JIT_ENTRY+0x294>
// 1db: 49 89 45 00                   movq    %rax, (%r13)
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 66 85 c0                      testw   %ax, %ax
// 1ec: 74 6c                         je      0x25a <_JIT_ENTRY+0x25a>
// 1ee: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f2: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1f6: 4c 8b 78 48                   movq    0x48(%rax), %r15
// 1fa: 48 8b 02                      movq    (%rdx), %rax
// 1fd: 8b 40 48                      movl    0x48(%rax), %eax
// 200: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: 0f b7 c9                      movzwl  %cx, %ecx
// 20d: 29 c8                         subl    %ecx, %eax
// 20f: 83 f9 02                      cmpl    $0x2, %ecx
// 212: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 218: 44 0f 43 e1                   cmovael %ecx, %r12d
// 21c: 48 98                         cltq
// 21e: 4c 8d 2c c2                   leaq    (%rdx,%rax,8), %r13
// 222: 49 83 c5 48                   addq    $0x48, %r13
// 226: 31 ed                         xorl    %ebp, %ebp
// 228: eb 13                         jmp     0x23d <_JIT_ENTRY+0x23d>
// 22a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 230: 4d 89 74 ed 00                movq    %r14, (%r13,%rbp,8)
// 235: 48 ff c5                      incq    %rbp
// 238: 49 39 ec                      cmpq    %rbp, %r12
// 23b: 74 1d                         je      0x25a <_JIT_ENTRY+0x25a>
// 23d: 4d 8b 74 ef 18                movq    0x18(%r15,%rbp,8), %r14
// 242: 41 8b 06                      movl    (%r14), %eax
// 245: ff c0                         incl    %eax
// 247: 74 e7                         je      0x230 <_JIT_ENTRY+0x230>
// 249: 41 89 06                      movl    %eax, (%r14)
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 256: ff d0                         callq   *%rax
// 258: eb d6                         jmp     0x230 <_JIT_ENTRY+0x230>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _JIT_OPARG
// 264: 0f b7 c0                      movzwl  %ax, %eax
// 267: 48 c1 e0 03                   shlq    $0x3, %rax
// 26b: 48 29 c3                      subq    %rax, %rbx
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_CONTINUE
// 278: 48 8b 3c 24                   movq    (%rsp), %rdi
// 27c: 48 89 de                      movq    %rbx, %rsi
// 27f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 284: 48 83 c4 18                   addq    $0x18, %rsp
// 288: 5b                            popq    %rbx
// 289: 41 5c                         popq    %r12
// 28b: 41 5d                         popq    %r13
// 28d: 41 5e                         popq    %r14
// 28f: 41 5f                         popq    %r15
// 291: 5d                            popq    %rbp
// 292: ff e0                         jmpq    *%rax
// 294: 4c 89 eb                      movq    %r13, %rbx
// 297: 4c 8b 34 24                   movq    (%rsp), %r14
// 29b: e9 c6 fe ff ff                jmp     0x166 <_JIT_ENTRY+0x166>
// 2a0: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x10, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x8d, 0x2c, 0xc3, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x17, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xa1, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x90, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x6c, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x8b, 0x78, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe1, 0x48, 0x98, 0x4c, 0x8d, 0x2c, 0xc2, 0x49, 0x83, 0xc5, 0x48, 0x31, 0xed, 0xeb, 0x13, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x4d, 0x89, 0x74, 0xed, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xec, 0x74, 0x1d, 0x4d, 0x8b, 0x74, 0xef, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0xe7, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x29, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xeb, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xc6, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DELETE_ATTR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DELETE_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 e7                      movq    %r12, %r15
// 160: 49 29 df                      subq    %rbx, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 4d 89 e7                      movq    %r12, %r15
// 1ff: 49 29 c7                      subq    %rax, %r15
// 202: 48 f7 d8                      negq    %rax
// 205: 4d 8b 64 04 f8                movq    -0x8(%r12,%rax), %r12
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 211: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyObject_DelAttr
// 220: 4c 89 e7                      movq    %r12, %rdi
// 223: ff d0                         callq   *%rax
// 225: 89 c5                         movl    %eax, %ebp
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 7f 22                         jg      0x252 <_JIT_ENTRY+0x252>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_NegativeRefcount
// 244: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 249: 4c 89 e2                      movq    %r12, %rdx
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 04 24                   movq    (%r12), %rax
// 252: 4d 8d 77 f8                   leaq    -0x8(%r15), %r14
// 256: 85 c0                         testl   %eax, %eax
// 258: 78 21                         js      0x27b <_JIT_ENTRY+0x27b>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 264: ff d0                         callq   *%rax
// 266: 49 ff 0c 24                   decq    (%r12)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 e7                      movq    %r12, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 85 ed                         testl   %ebp, %ebp
// 27d: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 281: 74 09                         je      0x28c <_JIT_ENTRY+0x28c>
// 283: 49 83 c7 f8                   addq    $-0x8, %r15
// 287: e9 d4 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_CONTINUE
// 296: 48 89 df                      movq    %rbx, %rdi
// 299: 4c 89 fe                      movq    %r15, %rsi
// 29c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a1: 48 83 c4 18                   addq    $0x18, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_ATTR_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc4, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xc7, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x04, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x09, 0x49, 0x83, 0xc7, 0xf8, 0xe9, 0xd4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_ATTR_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_ATTR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_ATTR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DELETE_DEREF
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DELETE_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 49 29 c6                      subq    %rax, %r14
// 1ff: 48 8b 44 cb 48                movq    0x48(%rbx,%rcx,8), %rax
// 204: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 208: 4d 85 e4                      testq   %r12, %r12
// 20b: 74 7d                         je      0x28a <_JIT_ENTRY+0x28a>
// 20d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 215: 49 8b 04 24                   movq    (%r12), %rax
// 219: 48 85 c0                      testq   %rax, %rax
// 21c: 7f 22                         jg      0x240 <_JIT_ENTRY+0x240>
// 21e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000220:  R_X86_64_64  .rodata.str1.1
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_NegativeRefcount
// 232: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 237: 4c 89 e2                      movq    %r12, %rdx
// 23a: ff d0                         callq   *%rax
// 23c: 49 8b 04 24                   movq    (%r12), %rax
// 240: 85 c0                         testl   %eax, %eax
// 242: 78 21                         js      0x265 <_JIT_ENTRY+0x265>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 49 ff 0c 24                   decq    (%r12)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_Dealloc
// 260: 4c 89 e7                      movq    %r12, %rdi
// 263: ff d0                         callq   *%rax
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_CONTINUE
// 26f: 48 89 df                      movq    %rbx, %rdi
// 272: 4c 89 f6                      movq    %r14, %rsi
// 275: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 27a: 48 83 c4 18                   addq    $0x18, %rsp
// 27e: 5b                            popq    %rbx
// 27f: 41 5c                         popq    %r12
// 281: 41 5d                         popq    %r13
// 283: 41 5e                         popq    %r14
// 285: 41 5f                         popq    %r15
// 287: 5d                            popq    %rbp
// 288: ff e0                         jmpq    *%rax
// 28a: 48 8b 33                      movq    (%rbx), %rsi
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_OPARG
// 297: 0f b7 d0                      movzwl  %ax, %edx
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 2a4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2a9: ff d0                         callq   *%rax
// 2ab: e9 ad fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2b0: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_DEREF_code_body[689] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x48, 0x8b, 0x44, 0xcb, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x7d, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0xe9, 0xad, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_DEREF_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_DEREF_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_DEREF_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DELETE_FAST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DELETE_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 49 29 c6                      subq    %rax, %r14
// 1ff: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 204: 4d 85 e4                      testq   %r12, %r12
// 207: 0f 84 8b 00 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_OPARG
// 217: 0f b7 c0                      movzwl  %ax, %eax
// 21a: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 223: 49 8b 04 24                   movq    (%r12), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 22                         jg      0x24e <_JIT_ENTRY+0x24e>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1+0xa9
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 245: 4c 89 e2                      movq    %r12, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 04 24                   movq    (%r12), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 21                         js      0x273 <_JIT_ENTRY+0x273>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0c 24                   decq    (%r12)
// 262: 75 0f                         jne     0x273 <_JIT_ENTRY+0x273>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 e7                      movq    %r12, %rdi
// 271: ff d0                         callq   *%rax
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_CONTINUE
// 27d: 48 89 df                      movq    %rbx, %rdi
// 280: 4c 89 f6                      movq    %r14, %rsi
// 283: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 288: 48 83 c4 18                   addq    $0x18, %rsp
// 28c: 5b                            popq    %rbx
// 28d: 41 5c                         popq    %r12
// 28f: 41 5d                         popq    %r13
// 291: 41 5e                         popq    %r14
// 293: 41 5f                         popq    %r15
// 295: 5d                            popq    %rbp
// 296: ff e0                         jmpq    *%rax
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  PyExc_UnboundLocalError
// 2a2: 4c 8b 38                      movq    (%rax), %r15
// 2a5: 48 8b 03                      movq    (%rbx), %rax
// 2a8: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _JIT_OPARG
// 2b6: 0f b7 f0                      movzwl  %ax, %esi
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  PyTuple_GetItem
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1+0x5f
// 2cf: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002d1:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2d9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2de: 4c 89 fe                      movq    %r15, %rsi
// 2e1: 48 89 c1                      movq    %rax, %rcx
// 2e4: 41 ff d0                      callq   *%r8
// 2e7: e9 71 fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2ec: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_FAST_code_body[749] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0xe9, 0x71, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_FAST_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa9},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// d9: 00 00 00 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_FAST_data_body[225] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_FAST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 0a 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f3 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 92: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 99: 0f 8e e3 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 44 0f b7 f8                   movzwl  %ax, %r15d
// ad: 49 ff c7                      incq    %r15
// b0: eb 1b                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// d5: 48 8b 45 00                   movq    (%rbp), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 12                         jle     0xf0 <_JIT_ENTRY+0xf0>
// de: 85 c0                         testl   %eax, %eax
// e0: 78 de                         js      0xc0 <_JIT_ENTRY+0xc0>
// e2: eb 32                         jmp     0x116 <_JIT_ENTRY+0x116>
// e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x56
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f4                      movq    %r14, %r12
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1dc: 48 85 d2                      testq   %rdx, %rdx
// 1df: 74 81                         je      0x162 <_JIT_ENTRY+0x162>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c8                      movzwl  %ax, %ecx
// 1ee: f7 d0                         notl    %eax
// 1f0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f5: 48 98                         cltq
// 1f7: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 1fb: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 203: 49 29 c6                      subq    %rax, %r14
// 206: 48 8b 03                      movq    (%rbx), %rax
// 209: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 20d: 48 8b 40 20                   movq    0x20(%rax), %rax
// 211: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyDict_DelItem
// 220: 4c 89 e6                      movq    %r12, %rsi
// 223: ff d0                         callq   *%rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 74 52                         je      0x27b <_JIT_ENTRY+0x27b>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyExc_KeyError
// 233: 48 8b 30                      movq    (%rax), %rsi
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _PyErr_ExceptionMatches
// 240: 4c 89 ff                      movq    %r15, %rdi
// 243: ff d0                         callq   *%rax
// 245: 85 c0                         testl   %eax, %eax
// 247: 0f 84 12 ff ff ff             je      0x15f <_JIT_ENTRY+0x15f>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  PyExc_NameError
// 257: 48 8b 30                      movq    (%rax), %rsi
// 25a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000025c:  R_X86_64_64  .rodata.str1.1+0x39
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 26e: 4c 89 ff                      movq    %r15, %rdi
// 271: 4c 89 e1                      movq    %r12, %rcx
// 274: ff d0                         callq   *%rax
// 276: e9 e4 fe ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 48 89 df                      movq    %rbx, %rdi
// 288: 4c 89 f6                      movq    %r14, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 18                   addq    $0x18, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x12, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0xe4, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00bad BUILD_CONST_KEY_MAP keys argument\x00"
// 7c: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DELETE_NAME
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DELETE_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 0a 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f3 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 99: 0f 8e e3 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 44 0f b7 f8                   movzwl  %ax, %r15d
// ad: 49 ff c7                      incq    %r15
// b0: eb 1b                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// d5: 48 8b 45 00                   movq    (%rbp), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 12                         jle     0xf0 <_JIT_ENTRY+0xf0>
// de: 85 c0                         testl   %eax, %eax
// e0: 78 de                         js      0xc0 <_JIT_ENTRY+0xc0>
// e2: eb 32                         jmp     0x116 <_JIT_ENTRY+0x116>
// e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x71
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f4                      movq    %r14, %r12
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fe: 49 29 c6                      subq    %rax, %r14
// 201: 48 8b 03                      movq    (%rbx), %rax
// 204: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 208: 48 8b 40 20                   movq    0x20(%rax), %rax
// 20c: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 211: 48 85 ff                      testq   %rdi, %rdi
// 214: 74 43                         je      0x259 <_JIT_ENTRY+0x259>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyObject_DelItem
// 220: 4c 89 e6                      movq    %r12, %rsi
// 223: ff d0                         callq   *%rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 74 63                         je      0x28c <_JIT_ENTRY+0x28c>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyExc_NameError
// 233: 48 8b 30                      movq    (%rax), %rsi
// 236: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000238:  R_X86_64_64  .rodata.str1.1+0x54
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 24a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 24f: 4c 89 e1                      movq    %r12, %rcx
// 252: ff d0                         callq   *%rax
// 254: e9 06 ff ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  PyExc_SystemError
// 263: 48 8b 30                      movq    (%rax), %rsi
// 266: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000268:  R_X86_64_64  .rodata.str1.1+0x39
// 270: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000272:  R_X86_64_64  _PyErr_Format
// 27a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 27f: 4c 89 e1                      movq    %r12, %rcx
// 282: 31 c0                         xorl    %eax, %eax
// 284: 41 ff d0                      callq   *%r8
// 287: e9 d3 fe ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_CONTINUE
// 296: 48 89 df                      movq    %rbx, %rdi
// 299: 4c 89 f6                      movq    %r14, %rsi
// 29c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a1: 48 83 c4 18                   addq    $0x18, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_NAME_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x06, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xd3, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_NAME_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x71},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00bad BUILD_CONST_KEY_MAP keys argument\x00"
// 97: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_NAME_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_NAME_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 e7                      movq    %r12, %r15
// 160: 49 29 df                      subq    %rbx, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 e7                      movq    %r12, %r15
// 1fb: 49 29 cf                      subq    %rcx, %r15
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 64 0c f8                movq    -0x8(%r12,%rcx), %r12
// 206: 4d 8b 6f f0                   movq    -0x10(%r15), %r13
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyObject_DelItem
// 214: 4c 89 ef                      movq    %r13, %rdi
// 217: 4c 89 e6                      movq    %r12, %rsi
// 21a: ff d0                         callq   *%rax
// 21c: 89 c5                         movl    %eax, %ebp
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 7f 22                         jg      0x249 <_JIT_ENTRY+0x249>
// 227: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000229:  R_X86_64_64  .rodata.str1.1
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_NegativeRefcount
// 23b: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 240: 4c 89 ea                      movq    %r13, %rdx
// 243: ff d0                         callq   *%rax
// 245: 49 8b 45 00                   movq    (%r13), %rax
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 21                         js      0x26e <_JIT_ENTRY+0x26e>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 257: ff d0                         callq   *%rax
// 259: 49 ff 4d 00                   decq    (%r13)
// 25d: 75 0f                         jne     0x26e <_JIT_ENTRY+0x26e>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_Dealloc
// 269: 4c 89 ef                      movq    %r13, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 04 24                   movq    (%r12), %rax
// 272: 48 85 c0                      testq   %rax, %rax
// 275: 7f 22                         jg      0x299 <_JIT_ENTRY+0x299>
// 277: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000279:  R_X86_64_64  .rodata.str1.1
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_NegativeRefcount
// 28b: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 290: 4c 89 e2                      movq    %r12, %rdx
// 293: ff d0                         callq   *%rax
// 295: 49 8b 04 24                   movq    (%r12), %rax
// 299: 4d 8d 77 f0                   leaq    -0x10(%r15), %r14
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 78 21                         js      0x2c2 <_JIT_ENTRY+0x2c2>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ab: ff d0                         callq   *%rax
// 2ad: 49 ff 0c 24                   decq    (%r12)
// 2b1: 75 0f                         jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_Dealloc
// 2bd: 4c 89 e7                      movq    %r12, %rdi
// 2c0: ff d0                         callq   *%rax
// 2c2: 85 ed                         testl   %ebp, %ebp
// 2c4: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 2c8: 74 09                         je      0x2d3 <_JIT_ENTRY+0x2d3>
// 2ca: 49 83 c7 f0                   addq    $-0x10, %r15
// 2ce: e9 8d fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _JIT_CONTINUE
// 2dd: 48 89 df                      movq    %rbx, %rdi
// 2e0: 4c 89 fe                      movq    %r15, %rsi
// 2e3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2e8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ec: 5b                            popq    %rbx
// 2ed: 41 5c                         popq    %r12
// 2ef: 41 5d                         popq    %r13
// 2f1: 41 5e                         popq    %r14
// 2f3: 41 5f                         popq    %r15
// 2f5: 5d                            popq    %rbp
// 2f6: ff e0                         jmpq    *%rax
// 2f8: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0c, 0xf8, 0x4d, 0x8b, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x09, 0x49, 0x83, 0xc7, 0xf0, 0xe9, 0x8d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DICT_MERGE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DICT_MERGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 fa                      movq    %r15, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e7                      movq    %r12, %r15
// 156: 49 29 df                      subq    %rbx, %r15
// 159: 49 83 c7 b8                   addq    $-0x48, %r15
// 15d: 49 c1 ef 03                   shrq    $0x3, %r15
// 161: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 f6                      testq   %r14, %r14
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: ba fc ff ff ff                movl    $0xfffffffc, %edx       # imm = 0xFFFFFFFC
// 1e7: 29 ca                         subl    %ecx, %edx
// 1e9: f7 d1                         notl    %ecx
// 1eb: 48 63 c9                      movslq  %ecx, %rcx
// 1ee: 4d 89 34 cc                   movq    %r14, (%r12,%rcx,8)
// 1f2: 0f b7 c0                      movzwl  %ax, %eax
// 1f5: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1fd: 4d 89 e7                      movq    %r12, %r15
// 200: 49 29 f7                      subq    %rsi, %r15
// 203: 49 83 c7 f8                   addq    $-0x8, %r15
// 207: 48 f7 de                      negq    %rsi
// 20a: 4d 8b 6c 34 f8                movq    -0x8(%r12,%rsi), %r13
// 20f: 48 29 c1                      subq    %rax, %rcx
// 212: 49 8b 3c cc                   movq    (%r12,%rcx,8), %rdi
// 216: 48 63 ca                      movslq  %edx, %rcx
// 219: 48 29 c1                      subq    %rax, %rcx
// 21c: 4d 8b 34 cc                   movq    (%r12,%rcx,8), %r14
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _PyDict_MergeEx
// 22a: 4c 89 ee                      movq    %r13, %rsi
// 22d: ba 02 00 00 00                movl    $0x2, %edx
// 232: ff d0                         callq   *%rax
// 234: 85 c0                         testl   %eax, %eax
// 236: 78 77                         js      0x2af <_JIT_ENTRY+0x2af>
// 238: 49 8b 45 00                   movq    (%r13), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 7f 22                         jg      0x263 <_JIT_ENTRY+0x263>
// 241: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000243:  R_X86_64_64  .rodata.str1.1
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_NegativeRefcount
// 255: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 25a: 4c 89 ea                      movq    %r13, %rdx
// 25d: ff d0                         callq   *%rax
// 25f: 49 8b 45 00                   movq    (%r13), %rax
// 263: 85 c0                         testl   %eax, %eax
// 265: 4c 8b 34 24                   movq    (%rsp), %r14
// 269: 78 21                         js      0x28c <_JIT_ENTRY+0x28c>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 49 ff 4d 00                   decq    (%r13)
// 27b: 75 0f                         jne     0x28c <_JIT_ENTRY+0x28c>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_Dealloc
// 287: 4c 89 ef                      movq    %r13, %rdi
// 28a: ff d0                         callq   *%rax
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_CONTINUE
// 296: 48 89 df                      movq    %rbx, %rdi
// 299: 4c 89 fe                      movq    %r15, %rsi
// 29c: 4c 89 f2                      movq    %r14, %rdx
// 29f: 48 83 c4 18                   addq    $0x18, %rsp
// 2a3: 5b                            popq    %rbx
// 2a4: 41 5c                         popq    %r12
// 2a6: 41 5d                         popq    %r13
// 2a8: 41 5e                         popq    %r14
// 2aa: 41 5f                         popq    %r15
// 2ac: 5d                            popq    %rbp
// 2ad: ff e0                         jmpq    *%rax
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _PyEval_FormatKwargsError
// 2b9: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2bd: 4c 89 f6                      movq    %r14, %rsi
// 2c0: 4c 89 ea                      movq    %r13, %rdx
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 8b 45 00                   movq    (%r13), %rax
// 2c9: 48 85 c0                      testq   %rax, %rax
// 2cc: 7f 22                         jg      0x2f0 <_JIT_ENTRY+0x2f0>
// 2ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d0:  R_X86_64_64  .rodata.str1.1
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_NegativeRefcount
// 2e2: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 2e7: 4c 89 ea                      movq    %r13, %rdx
// 2ea: ff d0                         callq   *%rax
// 2ec: 49 8b 45 00                   movq    (%r13), %rax
// 2f0: 85 c0                         testl   %eax, %eax
// 2f2: 0f 88 5e fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 302: ff d0                         callq   *%rax
// 304: 49 ff 4d 00                   decq    (%r13)
// 308: 0f 85 48 fe ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_Dealloc
// 318: 4c 89 ef                      movq    %r13, %rdi
// 31b: ff d0                         callq   *%rax
// 31d: e9 34 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 322: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DICT_MERGE_code_body[803] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xca, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x34, 0xcc, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xf7, 0xde, 0x4d, 0x8b, 0x6c, 0x34, 0xf8, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x3c, 0xcc, 0x48, 0x63, 0xca, 0x48, 0x29, 0xc1, 0x4d, 0x8b, 0x34, 0xcc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x77, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x5e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x48, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x34, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_DICT_MERGE_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_DICT_MERGE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DICT_MERGE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_DICT_UPDATE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_DICT_UPDATE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 34 c4                   leaq    (%r12,%rax,8), %r14
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 f2                      movq    %r14, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e6                      movq    %r12, %r14
// 156: 49 29 de                      subq    %rbx, %r14
// 159: 49 83 c6 b8                   addq    $-0x48, %r14
// 15d: 49 c1 ee 03                   shrq    $0x3, %r14
// 161: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c4                   movq    %r15, (%r12,%rax,8)
// 1ef: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1f7: 4d 89 e6                      movq    %r12, %r14
// 1fa: 49 29 d6                      subq    %rdx, %r14
// 1fd: 49 83 c6 f8                   addq    $-0x8, %r14
// 201: 48 f7 da                      negq    %rdx
// 204: 4d 8b 6c 14 f8                movq    -0x8(%r12,%rdx), %r13
// 209: 48 29 c8                      subq    %rcx, %rax
// 20c: 49 8b 3c c4                   movq    (%r12,%rax,8), %rdi
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PyDict_Update
// 21a: 4c 89 ee                      movq    %r13, %rsi
// 21d: ff d0                         callq   *%rax
// 21f: 85 c0                         testl   %eax, %eax
// 221: 78 74                         js      0x297 <_JIT_ENTRY+0x297>
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7f 22                         jg      0x24e <_JIT_ENTRY+0x24e>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 245: 4c 89 ea                      movq    %r13, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 45 00                   movq    (%r13), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 21                         js      0x273 <_JIT_ENTRY+0x273>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 4d 00                   decq    (%r13)
// 262: 75 0f                         jne     0x273 <_JIT_ENTRY+0x273>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 ef                      movq    %r13, %rdi
// 271: ff d0                         callq   *%rax
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_CONTINUE
// 27d: 48 89 df                      movq    %rbx, %rdi
// 280: 4c 89 f6                      movq    %r14, %rsi
// 283: 48 8b 14 24                   movq    (%rsp), %rdx
// 287: 48 83 c4 18                   addq    $0x18, %rsp
// 28b: 5b                            popq    %rbx
// 28c: 41 5c                         popq    %r12
// 28e: 41 5d                         popq    %r13
// 290: 41 5e                         popq    %r14
// 292: 41 5f                         popq    %r15
// 294: 5d                            popq    %rbp
// 295: ff e0                         jmpq    *%rax
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  PyExc_AttributeError
// 2a1: 48 8b 30                      movq    (%rax), %rsi
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _PyErr_ExceptionMatches
// 2ae: 4c 8b 3c 24                   movq    (%rsp), %r15
// 2b2: 4c 89 ff                      movq    %r15, %rdi
// 2b5: ff d0                         callq   *%rax
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 74 31                         je      0x2ec <_JIT_ENTRY+0x2ec>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  PyExc_TypeError
// 2c5: 48 8b 30                      movq    (%rax), %rsi
// 2c8: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2cc: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2d0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1+0x5f
// 2da: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002dc:  R_X86_64_64  _PyErr_Format
// 2e4: 4c 89 ff                      movq    %r15, %rdi
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 41 ff d0                      callq   *%r8
// 2ec: 49 8b 45 00                   movq    (%r13), %rax
// 2f0: 48 85 c0                      testq   %rax, %rax
// 2f3: 7f 22                         jg      0x317 <_JIT_ENTRY+0x317>
// 2f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f7:  R_X86_64_64  .rodata.str1.1
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_NegativeRefcount
// 309: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 30e: 4c 89 ea                      movq    %r13, %rdx
// 311: ff d0                         callq   *%rax
// 313: 49 8b 45 00                   movq    (%r13), %rax
// 317: 85 c0                         testl   %eax, %eax
// 319: 0f 88 37 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 31f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000321:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 329: ff d0                         callq   *%rax
// 32b: 49 ff 4d 00                   decq    (%r13)
// 32f: 0f 85 21 fe ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_Dealloc
// 33f: 4c 89 ef                      movq    %r13, %rdi
// 342: ff d0                         callq   *%rax
// 344: e9 0d fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 349: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DICT_UPDATE_code_body[842] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc4, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xd6, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xf7, 0xda, 0x4d, 0x8b, 0x6c, 0x14, 0xf8, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x3c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x74, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x37, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x21, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x0d, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_DICT_UPDATE_code_holes[34] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'%.200s' object is not a mapping\x00"
// 80: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_DICT_UPDATE_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_DICT_UPDATE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_END_SEND
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_END_SEND.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// d5: 49 8b 06                      movq    (%r14), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fd                      movq    %r15, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 74 0f f8                movq    -0x8(%r15,%rcx), %r14
// 206: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 20b: 49 8b 45 00                   movq    (%r13), %rax
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 7f 22                         jg      0x236 <_JIT_ENTRY+0x236>
// 214: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000216:  R_X86_64_64  .rodata.str1.1
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: be 66 00 00 00                movl    $0x66, %esi
// 22d: 4c 89 ea                      movq    %r13, %rdx
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 49 83 c4 f8                   addq    $-0x8, %r12
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 21                         js      0x25f <_JIT_ENTRY+0x25f>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 49 ff 4d 00                   decq    (%r13)
// 24e: 75 0f                         jne     0x25f <_JIT_ENTRY+0x25f>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 4c 89 ef                      movq    %r13, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_OPARG
// 269: 0f b7 c0                      movzwl  %ax, %eax
// 26c: 48 c1 e0 03                   shlq    $0x3, %rax
// 270: 49 29 c7                      subq    %rax, %r15
// 273: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 e6                      movq    %r12, %rsi
// 287: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 28c: 48 83 c4 18                   addq    $0x18, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: ff e0                         jmpq    *%rax
// 29c: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_END_SEND_code_body[669] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x74, 0x0f, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_END_SEND_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_END_SEND_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_END_SEND_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 48 89 c8                      movq    %rcx, %rax
// 1fd: 48 f7 d8                      negq    %rax
// 200: 49 8b 44 06 f8                movq    -0x8(%r14,%rax), %rax
// 205: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000207:  R_X86_64_64  _Py_NoneStruct
// 20f: 48 39 d0                      cmpq    %rdx, %rax
// 212: 74 46                         je      0x25a <_JIT_ENTRY+0x25a>
// 214: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: 0f b7 c9                      movzwl  %cx, %ecx
// 221: 48 c1 e1 03                   shlq    $0x3, %rcx
// 225: 49 29 ce                      subq    %rcx, %r14
// 228: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022a:  R_X86_64_64  PyExc_TypeError
// 232: 48 8b 39                      movq    (%rcx), %rdi
// 235: 48 8b 40 08                   movq    0x8(%rax), %rax
// 239: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 23d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1+0x5f
// 247: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000249:  R_X86_64_64  PyErr_Format
// 251: 31 c0                         xorl    %eax, %eax
// 253: ff d1                         callq   *%rcx
// 255: e9 05 ff ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 25a: 49 29 ce                      subq    %rcx, %r14
// 25d: 49 83 c6 f8                   addq    $-0x8, %r14
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_CONTINUE
// 26b: 48 89 df                      movq    %rbx, %rdi
// 26e: 4c 89 f6                      movq    %r14, %rsi
// 271: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 276: 48 83 c4 18                   addq    $0x18, %rsp
// 27a: 5b                            popq    %rbx
// 27b: 41 5c                         popq    %r12
// 27d: 41 5d                         popq    %r13
// 27f: 41 5e                         popq    %r14
// 281: 41 5f                         popq    %r15
// 283: 5d                            popq    %rbp
// 284: ff e0                         jmpq    *%rax
// 286: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK_code_body[647] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0x89, 0xc8, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x44, 0x06, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd0, 0x74, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0xe9, 0x05, 0xff, 0xff, 0xff, 0x49, 0x29, 0xce, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00__init__() should return None, not '%.200s'\x00"
// 8b: 00 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_EXIT_TRACE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_EXIT_TRACE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyTuple_Type
// 1f: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 23: 0f 85 00 01 00 00             jne     0x129 <_JIT_ENTRY+0x129>
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  _JIT_OPARG
// 33: 0f b7 c0                      movzwl  %ax, %eax
// 36: 49 39 47 10                   cmpq    %rax, 0x10(%r15)
// 3a: 0f 85 e9 00 00 00             jne     0x129 <_JIT_ENTRY+0x129>
// 40: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000042:  R_X86_64_64  _JIT_OPARG
// 4a: f7 d0                         notl    %eax
// 4c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 51: 48 98                         cltq
// 53: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 57: 49 8d 7f 18                   leaq    0x18(%r15), %rdi
// 5b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000005d:  R_X86_64_64  _JIT_OPARG
// 65: 45 0f b7 c5                   movzwl  %r13w, %r8d
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _PyDict_FromItems
// 73: be 01 00 00 00                movl    $0x1, %esi
// 78: b9 01 00 00 00                movl    $0x1, %ecx
// 7d: 4c 89 e2                      movq    %r12, %rdx
// 80: ff d0                         callq   *%rax
// 82: 48 89 04 24                   movq    %rax, (%rsp)
// 86: 41 f7 c5 ff ff 00 00          testl   $0xffff, %r13d          # imm = 0xFFFF
// 8d: 0f 8e e2 00 00 00             jle     0x175 <_JIT_ENTRY+0x175>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _JIT_OPARG
// 9d: 0f b7 e8                      movzwl  %ax, %ebp
// a0: 48 ff c5                      incq    %rbp
// a3: eb 18                         jmp     0xbd <_JIT_ENTRY+0xbd>
// a5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// b0: 48 ff cd                      decq    %rbp
// b3: 48 83 fd 01                   cmpq    $0x1, %rbp
// b7: 0f 8e b8 00 00 00             jle     0x175 <_JIT_ENTRY+0x175>
// bd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// c0: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// c4: 49 8b 45 00                   movq    (%r13), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 13                         jle     0xe0 <_JIT_ENTRY+0xe0>
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 df                         js      0xb0 <_JIT_ENTRY+0xb0>
// d1: eb 33                         jmp     0x106 <_JIT_ENTRY+0x106>
// d3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ef: 4c 89 ea                      movq    %r13, %rdx
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_NegativeRefcount
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 aa                         js      0xb0 <_JIT_ENTRY+0xb0>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 98                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 118: 4c 89 ef                      movq    %r13, %rdi
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: ff d0                         callq   *%rax
// 127: eb 87                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  PyExc_SystemError
// 133: 48 8b 30                      movq    (%rax), %rsi
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  .rodata.str1.1+0x39
// 140: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000142:  R_X86_64_64  _PyErr_SetString
// 14a: 48 89 d7                      movq    %rdx, %rdi
// 14d: 48 89 c2                      movq    %rax, %rdx
// 150: ff d1                         callq   *%rcx
// 152: 4d 89 f4                      movq    %r14, %r12
// 155: 49 29 dc                      subq    %rbx, %r12
// 158: 49 83 c4 b8                   addq    $-0x48, %r12
// 15c: 49 c1 ec 03                   shrq    $0x3, %r12
// 160: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 08                   addq    $0x8, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 49 8b 07                      movq    (%r15), %rax
// 178: 48 85 c0                      testq   %rax, %rax
// 17b: 7f 21                         jg      0x19e <_JIT_ENTRY+0x19e>
// 17d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017f:  R_X86_64_64  .rodata.str1.1
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_NegativeRefcount
// 191: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 196: 4c 89 fa                      movq    %r15, %rdx
// 199: ff d0                         callq   *%rax
// 19b: 49 8b 07                      movq    (%r15), %rax
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 78 20                         js      0x1c2 <_JIT_ENTRY+0x1c2>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 ff 0f                      decq    (%r15)
// 1b1: 75 0f                         jne     0x1c2 <_JIT_ENTRY+0x1c2>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_Dealloc
// 1bd: 4c 89 ff                      movq    %r15, %rdi
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c6: 48 85 d2                      testq   %rdx, %rdx
// 1c9: 74 8a                         je      0x155 <_JIT_ENTRY+0x155>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_OPARG
// 1d5: 0f b7 c0                      movzwl  %ax, %eax
// 1d8: 89 c1                         movl    %eax, %ecx
// 1da: f7 d1                         notl    %ecx
// 1dc: 48 63 c9                      movslq  %ecx, %rcx
// 1df: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 1e3: f7 d8                         negl    %eax
// 1e5: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1e9: 48 29 d8                      subq    %rbx, %rax
// 1ec: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1f7: 48 8b 03                      movq    (%rbx), %rax
// 1fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fc:  R_X86_64_64  _JIT_TARGET
// 204: 89 c9                         movl    %ecx, %ecx
// 206: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 210: e9 51 ff ff ff                jmp     0x166 <_JIT_ENTRY+0x166>
// 215: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_EXIT_TRACE_code_body[534] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x47, 0x10, 0x0f, 0x85, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7f, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x41, 0xf7, 0xc5, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb8, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x74, 0x8a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0xf7, 0xd8, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x51, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_EXIT_TRACE_code_holes[20] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_EXIT_TRACE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_EXIT_TRACE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 78 21                         js      0x1db <_JIT_ENTRY+0x1db>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 ff 0c 24                   decq    (%r12)
// 1ca: 75 0f                         jne     0x1db <_JIT_ENTRY+0x1db>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e0: 48 85 c9                      testq   %rcx, %rcx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 200: 49 c1 e7 03                   shlq    $0x3, %r15
// 204: 4c 89 f8                      movq    %r15, %rax
// 207: 48 f7 d8                      negq    %rax
// 20a: 4d 8b 64 06 f8                movq    -0x8(%r14,%rax), %r12
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  PyUnicode_Type
// 219: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 21e: 74 6c                         je      0x28c <_JIT_ENTRY+0x28c>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  PyObject_Format
// 22a: 4c 89 e7                      movq    %r12, %rdi
// 22d: 31 f6                         xorl    %esi, %esi
// 22f: ff d0                         callq   *%rax
// 231: 49 89 c5                      movq    %rax, %r13
// 234: 49 8b 04 24                   movq    (%r12), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 256: 4c 89 e2                      movq    %r12, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 04 24                   movq    (%r12), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 21                         js      0x284 <_JIT_ENTRY+0x284>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 0c 24                   decq    (%r12)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 e7                      movq    %r12, %rdi
// 282: ff d0                         callq   *%rax
// 284: 4d 89 ec                      movq    %r13, %r12
// 287: 4d 85 ed                      testq   %r13, %r13
// 28a: 74 3c                         je      0x2c8 <_JIT_ENTRY+0x2c8>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _JIT_OPARG
// 296: 0f b7 c0                      movzwl  %ax, %eax
// 299: 48 c1 e0 03                   shlq    $0x3, %rax
// 29d: 49 29 c6                      subq    %rax, %r14
// 2a0: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 89 df                      movq    %rbx, %rdi
// 2b1: 4c 89 f6                      movq    %r14, %rsi
// 2b4: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b8: 48 83 c4 18                   addq    $0x18, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 4d 29 fe                      subq    %r15, %r14
// 2cb: 49 83 c6 f8                   addq    $-0x8, %r14
// 2cf: e9 8f fe ff ff                jmp     0x163 <_JIT_ENTRY+0x163>
// 2d4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE_code_body[725] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0xc1, 0xe7, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x06, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0x8f, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 49 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %rbp
// 206: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  PyObject_Format
// 215: 4c 89 ef                      movq    %r13, %rdi
// 218: 48 89 ee                      movq    %rbp, %rsi
// 21b: ff d0                         callq   *%rax
// 21d: 49 89 c6                      movq    %rax, %r14
// 220: 49 8b 45 00                   movq    (%r13), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 242: 4c 89 ea                      movq    %r13, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 45 00                   movq    (%r13), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 78 21                         js      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 259: ff d0                         callq   *%rax
// 25b: 49 ff 4d 00                   decq    (%r13)
// 25f: 75 0f                         jne     0x270 <_JIT_ENTRY+0x270>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ef                      movq    %r13, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 48 8b 45 00                   movq    (%rbp), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 7f 22                         jg      0x29b <_JIT_ENTRY+0x29b>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 292: 48 89 ea                      movq    %rbp, %rdx
// 295: ff d0                         callq   *%rax
// 297: 48 8b 45 00                   movq    (%rbp), %rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 21                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 ff 4d 00                   decq    (%rbp)
// 2af: 75 0f                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 48 89 ef                      movq    %rbp, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 4d 85 f6                      testq   %r14, %r14
// 2c3: 74 41                         je      0x306 <_JIT_ENTRY+0x306>
// 2c5: 49 83 c4 f8                   addq    $-0x8, %r12
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _JIT_OPARG
// 2d3: 0f b7 c0                      movzwl  %ax, %eax
// 2d6: 48 c1 e0 03                   shlq    $0x3, %rax
// 2da: 49 29 c7                      subq    %rax, %r15
// 2dd: 4d 89 77 f0                   movq    %r14, -0x10(%r15)
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _JIT_CONTINUE
// 2eb: 48 89 df                      movq    %rbx, %rdi
// 2ee: 4c 89 e6                      movq    %r12, %rsi
// 2f1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2f6: 48 83 c4 18                   addq    $0x18, %rsp
// 2fa: 5b                            popq    %rbx
// 2fb: 41 5c                         popq    %r12
// 2fd: 41 5d                         popq    %r13
// 2ff: 41 5e                         popq    %r14
// 301: 41 5f                         popq    %r15
// 303: 5d                            popq    %rbp
// 304: ff e0                         jmpq    *%rax
// 306: 49 83 c4 f0                   addq    $-0x10, %r12
// 30a: e9 51 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 30f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0f, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x41, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x77, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x51, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0f 01 00 00             jne     0x13f <_JIT_ENTRY+0x13f>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f7 00 00 00             jne     0x13f <_JIT_ENTRY+0x13f>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e3 00 00 00             jle     0x188 <_JIT_ENTRY+0x188>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 44 0f b7 f8                   movzwl  %ax, %r15d
// b3: 49 ff c7                      incq    %r15
// b6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: eb 1b                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// d0: 49 ff cf                      decq    %r15
// d3: 49 83 ff 01                   cmpq    $0x1, %r15
// d7: 0f 8e ab 00 00 00             jle     0x188 <_JIT_ENTRY+0x188>
// dd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// e1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// e6: 48 8b 45 00                   movq    (%rbp), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 11                         jle     0x100 <_JIT_ENTRY+0x100>
// ef: 85 c0                         testl   %eax, %eax
// f1: 78 dd                         js      0xd0 <_JIT_ENTRY+0xd0>
// f3: eb 31                         jmp     0x126 <_JIT_ENTRY+0x126>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 48 89 ea                      movq    %rbp, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 48 8b 45 00                   movq    (%rbp), %rax
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 aa                         js      0xd0 <_JIT_ENTRY+0xd0>
// 126: ff d3                         callq   *%rbx
// 128: 48 ff 4d 00                   decq    (%rbp)
// 12c: 75 a2                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12e: 48 89 ef                      movq    %rbp, %rdi
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_Dealloc
// 13b: ff d0                         callq   *%rax
// 13d: eb 91                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  PyExc_SystemError
// 149: 48 8b 30                      movq    (%rax), %rsi
// 14c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014e:  R_X86_64_64  .rodata.str1.1+0x39
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _PyErr_SetString
// 160: 48 89 cf                      movq    %rcx, %rdi
// 163: ff d0                         callq   *%rax
// 165: 4d 89 f5                      movq    %r14, %r13
// 168: 4d 29 fd                      subq    %r15, %r13
// 16b: 49 83 c5 b8                   addq    $-0x48, %r13
// 16f: 49 c1 ed 03                   shrq    $0x3, %r13
// 173: 45 89 6f 40                   movl    %r13d, 0x40(%r15)
// 177: 31 c0                         xorl    %eax, %eax
// 179: 48 83 c4 18                   addq    $0x18, %rsp
// 17d: 5b                            popq    %rbx
// 17e: 41 5c                         popq    %r12
// 180: 41 5d                         popq    %r13
// 182: 41 5e                         popq    %r14
// 184: 41 5f                         popq    %r15
// 186: 5d                            popq    %rbp
// 187: c3                            retq
// 188: 49 8b 04 24                   movq    (%r12), %rax
// 18c: 48 85 c0                      testq   %rax, %rax
// 18f: 7f 22                         jg      0x1b3 <_JIT_ENTRY+0x1b3>
// 191: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000193:  R_X86_64_64  .rodata.str1.1
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_NegativeRefcount
// 1a5: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1aa: 4c 89 e2                      movq    %r12, %rdx
// 1ad: ff d0                         callq   *%rax
// 1af: 49 8b 04 24                   movq    (%r12), %rax
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1ba: 78 21                         js      0x1dd <_JIT_ENTRY+0x1dd>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 ff 0c 24                   decq    (%r12)
// 1cc: 75 0f                         jne     0x1dd <_JIT_ENTRY+0x1dd>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_Dealloc
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: ff d0                         callq   *%rax
// 1dd: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e2: 48 85 c9                      testq   %rcx, %rcx
// 1e5: 74 81                         je      0x168 <_JIT_ENTRY+0x168>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: 0f b7 d8                      movzwl  %ax, %ebx
// 1f4: f7 d0                         notl    %eax
// 1f6: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fb: 48 98                         cltq
// 1fd: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 201: 48 c1 e3 03                   shlq    $0x3, %rbx
// 205: 48 89 d8                      movq    %rbx, %rax
// 208: 48 f7 d8                      negq    %rax
// 20b: 4d 8b 64 06 f8                movq    -0x8(%r14,%rax), %r12
// 210: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 215: 4c 89 e7                      movq    %r12, %rdi
// 218: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 74 3f                         je      0x262 <_JIT_ENTRY+0x262>
// 223: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000225:  R_X86_64_64  _JIT_OPARG
// 22d: 0f b7 c9                      movzwl  %cx, %ecx
// 230: 48 c1 e1 03                   shlq    $0x3, %rcx
// 234: 49 29 ce                      subq    %rcx, %r14
// 237: 49 89 06                      movq    %rax, (%r14)
// 23a: 49 83 c6 08                   addq    $0x8, %r14
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_CONTINUE
// 248: 4c 89 ff                      movq    %r15, %rdi
// 24b: 4c 89 f6                      movq    %r14, %rsi
// 24e: 48 8b 14 24                   movq    (%rsp), %rdx
// 252: 48 83 c4 18                   addq    $0x18, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: ff e0                         jmpq    *%rax
// 262: 49 29 de                      subq    %rbx, %r14
// 265: 48 8b 1c 24                   movq    (%rsp), %rbx
// 269: 48 8b 43 68                   movq    0x68(%rbx), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 74 3a                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 272: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 277: 74 33                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  PyExc_StopIteration
// 283: 48 8b 30                      movq    (%rax), %rsi
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _PyErr_ExceptionMatches
// 290: 48 89 df                      movq    %rbx, %rdi
// 293: ff d0                         callq   *%rax
// 295: 85 c0                         testl   %eax, %eax
// 297: 0f 84 c8 fe ff ff             je      0x165 <_JIT_ENTRY+0x165>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _PyErr_Clear
// 2a7: 48 89 df                      movq    %rbx, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 04 24                   movq    (%r12), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 2ce: 4c 89 e2                      movq    %r12, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 04 24                   movq    (%r12), %rax
// 2d7: 49 83 c6 f8                   addq    $-0x8, %r14
// 2db: 85 c0                         testl   %eax, %eax
// 2dd: 78 21                         js      0x300 <_JIT_ENTRY+0x300>
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e9: ff d0                         callq   *%rax
// 2eb: 49 ff 0c 24                   decq    (%r12)
// 2ef: 75 0f                         jne     0x300 <_JIT_ENTRY+0x300>
// 2f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f3:  R_X86_64_64  _Py_Dealloc
// 2fb: 4c 89 e7                      movq    %r12, %rdi
// 2fe: ff d0                         callq   *%rax
// 300: 4d 29 fe                      subq    %r15, %r14
// 303: 49 83 c6 b8                   addq    $-0x48, %r14
// 307: 49 c1 ee 03                   shrq    $0x3, %r14
// 30b: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 30f: 49 8b 07                      movq    (%r15), %rax
// 312: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000314:  R_X86_64_64  _JIT_TARGET
// 31c: 89 c9                         movl    %ecx, %ecx
// 31e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 322: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 328: e9 4c fe ff ff                jmp     0x179 <_JIT_ENTRY+0x179>
// 32d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO_code_body[814] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xab, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0xff, 0xd3, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xa2, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x91, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x4d, 0x29, 0xfd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6f, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0xc1, 0xe3, 0x03, 0x48, 0x89, 0xd8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x06, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x3f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x48, 0x8b, 0x1c, 0x24, 0x48, 0x8b, 0x43, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x4c, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GET_AITER
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GET_AITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 34 c4                   leaq    (%r12,%rax,8), %r14
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 f2                      movq    %r14, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0xd2
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e6                      movq    %r12, %r14
// 156: 49 29 de                      subq    %rbx, %r14
// 159: 49 83 c6 b8                   addq    $-0x48, %r14
// 15d: 49 c1 ee 03                   shrq    $0x3, %r14
// 161: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c4                   movq    %r15, (%r12,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 e6                      movq    %r12, %r14
// 1f6: 49 29 ce                      subq    %rcx, %r14
// 1f9: 49 83 c6 f8                   addq    $-0x8, %r14
// 1fd: 48 f7 d9                      negq    %rcx
// 200: 49 8b 6c 0c f8                movq    -0x8(%r12,%rcx), %rbp
// 205: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 209: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 20d: 48 85 c9                      testq   %rcx, %rcx
// 210: 0f 84 c7 00 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 216: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 21a: 48 85 c9                      testq   %rcx, %rcx
// 21d: 0f 84 ba 00 00 00             je      0x2dd <_JIT_ENTRY+0x2dd>
// 223: 48 89 ef                      movq    %rbp, %rdi
// 226: ff d1                         callq   *%rcx
// 228: 49 89 c5                      movq    %rax, %r13
// 22b: 48 8b 45 00                   movq    (%rbp), %rax
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 7f 22                         jg      0x256 <_JIT_ENTRY+0x256>
// 234: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000236:  R_X86_64_64  .rodata.str1.1
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_NegativeRefcount
// 248: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 24d: 48 89 ea                      movq    %rbp, %rdx
// 250: ff d0                         callq   *%rax
// 252: 48 8b 45 00                   movq    (%rbp), %rax
// 256: 85 c0                         testl   %eax, %eax
// 258: 78 21                         js      0x27b <_JIT_ENTRY+0x27b>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 264: ff d0                         callq   *%rax
// 266: 48 ff 4d 00                   decq    (%rbp)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 48 89 ef                      movq    %rbp, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 4d 85 ed                      testq   %r13, %r13
// 27e: 0f 84 d2 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 284: 49 8b 45 08                   movq    0x8(%r13), %rax
// 288: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 28c: 48 85 c9                      testq   %rcx, %rcx
// 28f: 0f 84 d1 00 00 00             je      0x366 <_JIT_ENTRY+0x366>
// 295: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 29a: 0f 84 c6 00 00 00             je      0x366 <_JIT_ENTRY+0x366>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_OPARG
// 2aa: 0f b7 c0                      movzwl  %ax, %eax
// 2ad: 48 c1 e0 03                   shlq    $0x3, %rax
// 2b1: 49 29 c4                      subq    %rax, %r12
// 2b4: 4d 89 6c 24 f8                movq    %r13, -0x8(%r12)
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 48 89 df                      movq    %rbx, %rdi
// 2c6: 4c 89 e6                      movq    %r12, %rsi
// 2c9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cd: 48 83 c4 18                   addq    $0x18, %rsp
// 2d1: 5b                            popq    %rbx
// 2d2: 41 5c                         popq    %r12
// 2d4: 41 5d                         popq    %r13
// 2d6: 41 5e                         popq    %r14
// 2d8: 41 5f                         popq    %r15
// 2da: 5d                            popq    %rbp
// 2db: ff e0                         jmpq    *%rax
// 2dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002df:  R_X86_64_64  PyExc_TypeError
// 2e7: 48 8b 31                      movq    (%rcx), %rsi
// 2ea: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ee: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f0:  R_X86_64_64  .rodata.str1.1+0x39
// 2f8: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002fa:  R_X86_64_64  _PyErr_Format
// 302: 48 8b 3c 24                   movq    (%rsp), %rdi
// 306: 31 c0                         xorl    %eax, %eax
// 308: 41 ff d0                      callq   *%r8
// 30b: 48 8b 45 00                   movq    (%rbp), %rax
// 30f: 48 85 c0                      testq   %rax, %rax
// 312: 7f 22                         jg      0x336 <_JIT_ENTRY+0x336>
// 314: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000316:  R_X86_64_64  .rodata.str1.1
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_NegativeRefcount
// 328: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 32d: 48 89 ea                      movq    %rbp, %rdx
// 330: ff d0                         callq   *%rax
// 332: 48 8b 45 00                   movq    (%rbp), %rax
// 336: 85 c0                         testl   %eax, %eax
// 338: 0f 88 18 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 348: ff d0                         callq   *%rax
// 34a: 48 ff 4d 00                   decq    (%rbp)
// 34e: 0f 85 02 fe ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _Py_Dealloc
// 35e: 48 89 ef                      movq    %rbp, %rdi
// 361: e9 84 00 00 00                jmp     0x3ea <_JIT_ENTRY+0x3ea>
// 366: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000368:  R_X86_64_64  PyExc_TypeError
// 370: 48 8b 31                      movq    (%rcx), %rsi
// 373: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 377: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000379:  R_X86_64_64  .rodata.str1.1+0x7a
// 381: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000383:  R_X86_64_64  _PyErr_Format
// 38b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 38f: 31 c0                         xorl    %eax, %eax
// 391: 41 ff d0                      callq   *%r8
// 394: 49 8b 45 00                   movq    (%r13), %rax
// 398: 48 85 c0                      testq   %rax, %rax
// 39b: 7f 22                         jg      0x3bf <_JIT_ENTRY+0x3bf>
// 39d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000039f:  R_X86_64_64  .rodata.str1.1
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_NegativeRefcount
// 3b1: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 3b6: 4c 89 ea                      movq    %r13, %rdx
// 3b9: ff d0                         callq   *%rax
// 3bb: 49 8b 45 00                   movq    (%r13), %rax
// 3bf: 85 c0                         testl   %eax, %eax
// 3c1: 0f 88 8f fd ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3d1: ff d0                         callq   *%rax
// 3d3: 49 ff 4d 00                   decq    (%r13)
// 3d7: 0f 85 79 fd ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 3dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003df:  R_X86_64_64  _Py_Dealloc
// 3e7: 4c 89 ef                      movq    %r13, %rdi
// 3ea: ff d0                         callq   *%rax
// 3ec: e9 65 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 3f1: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_AITER_code_body[1010] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xce, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0c, 0xf8, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xd2, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc4, 0x4d, 0x89, 0x6c, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x02, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x8f, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x79, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x65, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_AITER_code_holes[39] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd2},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x383, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00bad BUILD_CONST_KEY_MAP keys argument\x00"
// f8: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_AITER_data_body[249] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_AITER_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GET_ANEXT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GET_ANEXT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 e2                      movq    %r12, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d5                         callq   *%rbp
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0xba
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 f6                      testq   %r14, %r14
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 fc                      movq    %r15, %r12
// 1f6: 49 29 cc                      subq    %rcx, %r12
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 49 8b 7c 0f f8                movq    -0x8(%r15,%rcx), %rdi
// 201: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  PyAsyncGen_Type
// 20f: 48 39 c8                      cmpq    %rcx, %rax
// 212: 0f 84 c4 00 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 218: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 21c: 48 85 c9                      testq   %rcx, %rcx
// 21f: 0f 84 84 00 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 225: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 229: 48 85 c9                      testq   %rcx, %rcx
// 22c: 74 7b                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 22e: ff d1                         callq   *%rcx
// 230: 48 85 c0                      testq   %rax, %rax
// 233: 0f 84 1d ff ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 239: 49 89 c5                      movq    %rax, %r13
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 246: 4c 89 ef                      movq    %r13, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 0f 84 da 00 00 00             je      0x32e <_JIT_ENTRY+0x32e>
// 254: 48 89 c5                      movq    %rax, %rbp
// 257: 49 8b 45 00                   movq    (%r13), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 7f 22                         jg      0x282 <_JIT_ENTRY+0x282>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_NegativeRefcount
// 274: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 279: 4c 89 ea                      movq    %r13, %rdx
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 69                         js      0x2ef <_JIT_ENTRY+0x2ef>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 4d 00                   decq    (%r13)
// 296: 75 57                         jne     0x2ef <_JIT_ENTRY+0x2ef>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ef                      movq    %r13, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: eb 46                         jmp     0x2ef <_JIT_ENTRY+0x2ef>
// 2a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ab:  R_X86_64_64  PyExc_TypeError
// 2b3: 48 8b 31                      movq    (%rcx), %rsi
// 2b6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ba: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002bc:  R_X86_64_64  .rodata.str1.1+0x39
// 2c4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002c6:  R_X86_64_64  _PyErr_Format
// 2ce: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2d2: 31 c0                         xorl    %eax, %eax
// 2d4: 41 ff d0                      callq   *%r8
// 2d7: e9 7a fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2dc: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 2e0: ff 50 10                      callq   *0x10(%rax)
// 2e3: 48 89 c5                      movq    %rax, %rbp
// 2e6: 48 85 c0                      testq   %rax, %rax
// 2e9: 0f 84 67 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _JIT_OPARG
// 2f9: 0f b7 c0                      movzwl  %ax, %eax
// 2fc: 48 c1 e0 03                   shlq    $0x3, %rax
// 300: 49 29 c7                      subq    %rax, %r15
// 303: 49 89 2f                      movq    %rbp, (%r15)
// 306: 49 83 c7 08                   addq    $0x8, %r15
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _JIT_CONTINUE
// 314: 48 89 df                      movq    %rbx, %rdi
// 317: 4c 89 fe                      movq    %r15, %rsi
// 31a: 48 8b 14 24                   movq    (%rsp), %rdx
// 31e: 48 83 c4 18                   addq    $0x18, %rsp
// 322: 5b                            popq    %rbx
// 323: 41 5c                         popq    %r12
// 325: 41 5d                         popq    %r13
// 327: 41 5e                         popq    %r14
// 329: 41 5f                         popq    %r15
// 32b: 5d                            popq    %rbp
// 32c: ff e0                         jmpq    *%rax
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  PyExc_TypeError
// 338: 48 8b 38                      movq    (%rax), %rdi
// 33b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 33f: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 343: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000345:  R_X86_64_64  .rodata.str1.1+0x7c
// 34d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000034f:  R_X86_64_64  _PyErr_FormatFromCause
// 357: 31 c0                         xorl    %eax, %eax
// 359: ff d1                         callq   *%rcx
// 35b: 49 8b 45 00                   movq    (%r13), %rax
// 35f: 48 85 c0                      testq   %rax, %rax
// 362: 7f 22                         jg      0x386 <_JIT_ENTRY+0x386>
// 364: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000366:  R_X86_64_64  .rodata.str1.1
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_NegativeRefcount
// 378: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 37d: 4c 89 ea                      movq    %r13, %rdx
// 380: ff d0                         callq   *%rax
// 382: 49 8b 45 00                   movq    (%r13), %rax
// 386: 85 c0                         testl   %eax, %eax
// 388: 0f 88 c8 fd ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 398: ff d0                         callq   *%rax
// 39a: 49 ff 4d 00                   decq    (%r13)
// 39e: 0f 85 b2 fd ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  _Py_Dealloc
// 3ae: 4c 89 ef                      movq    %r13, %rdi
// 3b1: ff d0                         callq   *%rax
// 3b3: e9 9e fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 3b8: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_ANEXT_code_body[953] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x7c, 0x0f, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7b, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x1d, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x57, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x7a, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x48, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x67, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xc8, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xb2, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x9e, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_ANEXT_code_holes[37] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xba},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00bad BUILD_CONST_KEY_MAP keys argument\x00"
// e0: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_ANEXT_data_body[225] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_ANEXT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GET_AWAITABLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GET_AWAITABLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f4                      movq    %rsi, %r12
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000001a:  R_X86_64_64  .rodata.str1.1+0x5c
// 22: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000024:  R_X86_64_64  PyExc_SystemError
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  PyTuple_Type
// 36: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 3a: 0f 85 fd 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 40: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000042:  R_X86_64_64  _JIT_OPARG
// 4a: 0f b7 c0                      movzwl  %ax, %eax
// 4d: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 51: 0f 85 e6 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 57: 48 89 14 24                   movq    %rdx, (%rsp)
// 5b: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: f7 d0                         notl    %eax
// 6c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 71: 48 98                         cltq
// 73: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 77: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 7b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000007d:  R_X86_64_64  _JIT_OPARG
// 85: 44 0f b7 c3                   movzwl  %bx, %r8d
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _PyDict_FromItems
// 93: be 01 00 00 00                movl    $0x1, %esi
// 98: b9 01 00 00 00                movl    $0x1, %ecx
// 9d: 4c 89 fa                      movq    %r15, %rdx
// a0: ff d0                         callq   *%rax
// a2: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a7: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// ad: 0f 8e c2 00 00 00             jle     0x175 <_JIT_ENTRY+0x175>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _JIT_OPARG
// bd: 0f b7 d8                      movzwl  %ax, %ebx
// c0: 48 ff c3                      incq    %rbx
// c3: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000c5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cd: eb 0e                         jmp     0xdd <_JIT_ENTRY+0xdd>
// cf: 90                            nop
// d0: 48 ff cb                      decq    %rbx
// d3: 48 83 fb 01                   cmpq    $0x1, %rbx
// d7: 0f 8e 98 00 00 00             jle     0x175 <_JIT_ENTRY+0x175>
// dd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// e0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// e4: 49 8b 06                      movq    (%r14), %rax
// e7: 48 85 c0                      testq   %rax, %rax
// ea: 7e 14                         jle     0x100 <_JIT_ENTRY+0x100>
// ec: 85 c0                         testl   %eax, %eax
// ee: 78 e0                         js      0xd0 <_JIT_ENTRY+0xd0>
// f0: eb 33                         jmp     0x125 <_JIT_ENTRY+0x125>
// f2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d5                         callq   *%rbp
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 4d 89 e7                      movq    %r12, %r15
// 140: 48 8b 33                      movq    (%rbx), %rsi
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _PyErr_SetString
// 14d: 48 89 d7                      movq    %rdx, %rdi
// 150: 48 89 ea                      movq    %rbp, %rdx
// 153: ff d0                         callq   *%rax
// 155: 4d 29 f7                      subq    %r14, %r15
// 158: 49 83 c7 b8                   addq    $-0x48, %r15
// 15c: 49 c1 ef 03                   shrq    $0x3, %r15
// 160: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 49 8b 45 00                   movq    (%r13), %rax
// 179: 48 85 c0                      testq   %rax, %rax
// 17c: 7f 22                         jg      0x1a0 <_JIT_ENTRY+0x1a0>
// 17e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000180:  R_X86_64_64  .rodata.str1.1
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _Py_NegativeRefcount
// 192: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 197: 4c 89 ea                      movq    %r13, %rdx
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 45 00                   movq    (%r13), %rax
// 1a0: 85 c0                         testl   %eax, %eax
// 1a2: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1a7: 78 21                         js      0x1ca <_JIT_ENTRY+0x1ca>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 ff 4d 00                   decq    (%r13)
// 1b9: 75 0f                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: 4c 89 ef                      movq    %r13, %rdi
// 1c8: ff d0                         callq   *%rax
// 1ca: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1cf: 48 85 c9                      testq   %rcx, %rcx
// 1d2: 74 81                         je      0x155 <_JIT_ENTRY+0x155>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _JIT_OPARG
// 1de: 0f b7 d8                      movzwl  %ax, %ebx
// 1e1: f7 d0                         notl    %eax
// 1e3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e8: 48 98                         cltq
// 1ea: 49 89 0c c4                   movq    %rcx, (%r12,%rax,8)
// 1ee: 48 c1 e3 03                   shlq    $0x3, %rbx
// 1f2: 48 89 d8                      movq    %rbx, %rax
// 1f5: 48 f7 d8                      negq    %rax
// 1f8: 49 8b 6c 04 f8                movq    -0x8(%r12,%rax), %rbp
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 207: 48 89 ef                      movq    %rbp, %rdi
// 20a: ff d0                         callq   *%rax
// 20c: 49 89 c5                      movq    %rax, %r13
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 74 15                         je      0x229 <_JIT_ENTRY+0x229>
// 214: 48 8b 45 00                   movq    (%rbp), %rax
// 218: 48 85 c0                      testq   %rax, %rax
// 21b: 7e 36                         jle     0x253 <_JIT_ENTRY+0x253>
// 21d: 4d 89 e7                      movq    %r12, %r15
// 220: 49 29 df                      subq    %rbx, %r15
// 223: 85 c0                         testl   %eax, %eax
// 225: 79 58                         jns     0x27f <_JIT_ENTRY+0x27f>
// 227: eb 77                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 229: 48 8b 75 08                   movq    0x8(%rbp), %rsi
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_OPARG
// 237: 0f b7 d0                      movzwl  %ax, %edx
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _PyEval_FormatAwaitableError
// 244: 48 8b 3c 24                   movq    (%rsp), %rdi
// 248: ff d0                         callq   *%rax
// 24a: 48 8b 45 00                   movq    (%rbp), %rax
// 24e: 48 85 c0                      testq   %rax, %rax
// 251: 7f ca                         jg      0x21d <_JIT_ENTRY+0x21d>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 26c: 48 89 ea                      movq    %rbp, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 48 8b 45 00                   movq    (%rbp), %rax
// 275: 4d 89 e7                      movq    %r12, %r15
// 278: 49 29 df                      subq    %rbx, %r15
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 78 21                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 48 ff 4d 00                   decq    (%rbp)
// 28f: 75 0f                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_Dealloc
// 29b: 48 89 ef                      movq    %rbp, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 49 83 c7 f8                   addq    $-0x8, %r15
// 2a4: 4d 85 ed                      testq   %r13, %r13
// 2a7: 0f 84 a8 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  PyCoro_Type
// 2b7: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 2bb: 74 3d                         je      0x2fa <_JIT_ENTRY+0x2fa>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _JIT_OPARG
// 2c7: 0f b7 c0                      movzwl  %ax, %eax
// 2ca: 48 c1 e0 03                   shlq    $0x3, %rax
// 2ce: 49 29 c4                      subq    %rax, %r12
// 2d1: 4d 89 6c 24 f8                movq    %r13, -0x8(%r12)
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _JIT_CONTINUE
// 2e0: 4c 89 f7                      movq    %r14, %rdi
// 2e3: 4c 89 e6                      movq    %r12, %rsi
// 2e6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ea: 48 83 c4 18                   addq    $0x18, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: ff e0                         jmpq    *%rax
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _PyGen_yf
// 304: 4c 89 ef                      movq    %r13, %rdi
// 307: ff d0                         callq   *%rax
// 309: 48 85 c0                      testq   %rax, %rax
// 30c: 74 af                         je      0x2bd <_JIT_ENTRY+0x2bd>
// 30e: 48 89 c5                      movq    %rax, %rbp
// 311: 48 8b 00                      movq    (%rax), %rax
// 314: 48 85 c0                      testq   %rax, %rax
// 317: 7f 22                         jg      0x33b <_JIT_ENTRY+0x33b>
// 319: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031b:  R_X86_64_64  .rodata.str1.1
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _Py_NegativeRefcount
// 32d: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 332: 48 89 ea                      movq    %rbp, %rdx
// 335: ff d0                         callq   *%rax
// 337: 48 8b 45 00                   movq    (%rbp), %rax
// 33b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000033d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 345: 85 c0                         testl   %eax, %eax
// 347: 78 18                         js      0x361 <_JIT_ENTRY+0x361>
// 349: 41 ff d6                      callq   *%r14
// 34c: 48 ff 4d 00                   decq    (%rbp)
// 350: 75 0f                         jne     0x361 <_JIT_ENTRY+0x361>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_Dealloc
// 35c: 48 89 ef                      movq    %rbp, %rdi
// 35f: ff d0                         callq   *%rax
// 361: 49 8b 45 00                   movq    (%r13), %rax
// 365: 48 85 c0                      testq   %rax, %rax
// 368: 7f 22                         jg      0x38c <_JIT_ENTRY+0x38c>
// 36a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036c:  R_X86_64_64  .rodata.str1.1
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_NegativeRefcount
// 37e: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 383: 4c 89 ea                      movq    %r13, %rdx
// 386: ff d0                         callq   *%rax
// 388: 49 8b 45 00                   movq    (%r13), %rax
// 38c: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000038e:  R_X86_64_64  .rodata.str1.1+0x39
// 396: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000398:  R_X86_64_64  PyExc_RuntimeError
// 3a0: 85 c0                         testl   %eax, %eax
// 3a2: 78 18                         js      0x3bc <_JIT_ENTRY+0x3bc>
// 3a4: 41 ff d6                      callq   *%r14
// 3a7: 49 ff 4d 00                   decq    (%r13)
// 3ab: 75 0f                         jne     0x3bc <_JIT_ENTRY+0x3bc>
// 3ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003af:  R_X86_64_64  _Py_Dealloc
// 3b7: 4c 89 ef                      movq    %r13, %rdi
// 3ba: ff d0                         callq   *%rax
// 3bc: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 3c1: 48 8b 14 24                   movq    (%rsp), %rdx
// 3c5: e9 76 fd ff ff                jmp     0x140 <_JIT_ENTRY+0x140>
// 3ca: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_AWAITABLE_code_body[971] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf4, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0x98, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x4d, 0x89, 0xe7, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc4, 0x48, 0xc1, 0xe3, 0x03, 0x48, 0x89, 0xd8, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x6c, 0x04, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x74, 0x15, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x36, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x85, 0xc0, 0x79, 0x58, 0xeb, 0x77, 0x48, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xca, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc4, 0x4d, 0x89, 0x6c, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xaf, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x14, 0x24, 0xe9, 0x76, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_AWAITABLE_code_holes[39] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5c},
    {0x24, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x398, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x3af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 82: 00 00 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_AWAITABLE_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_AWAITABLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GET_ITER
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GET_ITER.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1e8: f7 d0                         notl    %eax
// 1ea: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ef: 48 98                         cltq
// 1f1: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1f5: 49 c1 e7 03                   shlq    $0x3, %r15
// 1f9: 4c 89 f8                      movq    %r15, %rax
// 1fc: 48 f7 d8                      negq    %rax
// 1ff: 4d 8b 6c 06 f8                movq    -0x8(%r14,%rax), %r13
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  PyObject_GetIter
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: ff d0                         callq   *%rax
// 213: 49 89 c4                      movq    %rax, %r12
// 216: 49 8b 45 00                   movq    (%r13), %rax
// 21a: 48 85 c0                      testq   %rax, %rax
// 21d: 7f 22                         jg      0x241 <_JIT_ENTRY+0x241>
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_NegativeRefcount
// 233: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 238: 4c 89 ea                      movq    %r13, %rdx
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 45 00                   movq    (%r13), %rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 78 21                         js      0x266 <_JIT_ENTRY+0x266>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24f: ff d0                         callq   *%rax
// 251: 49 ff 4d 00                   decq    (%r13)
// 255: 75 0f                         jne     0x266 <_JIT_ENTRY+0x266>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 ef                      movq    %r13, %rdi
// 264: ff d0                         callq   *%rax
// 266: 4d 85 e4                      testq   %r12, %r12
// 269: 74 3d                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_OPARG
// 275: 0f b7 c0                      movzwl  %ax, %eax
// 278: 48 c1 e0 03                   shlq    $0x3, %rax
// 27c: 49 29 c6                      subq    %rax, %r14
// 27f: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 4c 89 f6                      movq    %r14, %rsi
// 293: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 298: 48 83 c4 18                   addq    $0x18, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: ff e0                         jmpq    *%rax
// 2a8: 4d 29 fe                      subq    %r15, %r14
// 2ab: 49 83 c6 f8                   addq    $-0x8, %r14
// 2af: e9 a9 fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2b4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_ITER_code_body[693] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0xc1, 0xe7, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x06, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0xa9, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_ITER_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_ITER_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_ITER_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GET_LEN
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GET_LEN.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 0a 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f3 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 99: 0f 8e e3 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 44 0f b7 f8                   movzwl  %ax, %r15d
// ad: 49 ff c7                      incq    %r15
// b0: eb 1b                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// d5: 48 8b 45 00                   movq    (%rbp), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 12                         jle     0xf0 <_JIT_ENTRY+0xf0>
// de: 85 c0                         testl   %eax, %eax
// e0: 78 de                         js      0xc0 <_JIT_ENTRY+0xc0>
// e2: eb 32                         jmp     0x116 <_JIT_ENTRY+0x116>
// e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f4                      movq    %r14, %r12
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4d 89 f4                      movq    %r14, %r12
// 1fd: 49 29 cc                      subq    %rcx, %r12
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 7c 0e f8                movq    -0x8(%r14,%rcx), %rdi
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PyObject_Size
// 212: ff d0                         callq   *%rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 0f 88 45 ff ff ff             js      0x162 <_JIT_ENTRY+0x162>
// 21d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021f:  R_X86_64_64  PyLong_FromSsize_t
// 227: 48 89 c7                      movq    %rax, %rdi
// 22a: ff d1                         callq   *%rcx
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 0f 84 2d ff ff ff             je      0x162 <_JIT_ENTRY+0x162>
// 235: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: 0f b7 c9                      movzwl  %cx, %ecx
// 242: 48 c1 e1 03                   shlq    $0x3, %rcx
// 246: 49 29 ce                      subq    %rcx, %r14
// 249: 49 89 06                      movq    %rax, (%r14)
// 24c: 49 83 c6 08                   addq    $0x8, %r14
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 89 df                      movq    %rbx, %rdi
// 25d: 4c 89 f6                      movq    %r14, %rsi
// 260: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 265: 48 83 c4 18                   addq    $0x18, %rsp
// 269: 5b                            popq    %rbx
// 26a: 41 5c                         popq    %r12
// 26c: 41 5d                         popq    %r13
// 26e: 41 5e                         popq    %r14
// 270: 41 5f                         popq    %r15
// 272: 5d                            popq    %rbp
// 273: ff e0                         jmpq    *%rax
// 275: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_LEN_code_body[630] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x7c, 0x0e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x45, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x2d, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_LEN_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_LEN_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_LEN_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000001d:  R_X86_64_64  .rodata.str1.1+0x39
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyExc_SystemError
// 2f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000031:  R_X86_64_64  PyTuple_Type
// 39: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 3d: 0f 85 0a 01 00 00             jne     0x14d <_JIT_ENTRY+0x14d>
// 43: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000045:  R_X86_64_64  _JIT_OPARG
// 4d: 0f b7 c9                      movzwl  %cx, %ecx
// 50: 49 39 4d 10                   cmpq    %rcx, 0x10(%r13)
// 54: 0f 85 f3 00 00 00             jne     0x14d <_JIT_ENTRY+0x14d>
// 5a: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 5f: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 64: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000066:  R_X86_64_64  _JIT_OPARG
// 6e: f7 d0                         notl    %eax
// 70: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 75: 48 98                         cltq
// 77: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 7b: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 7f: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000081:  R_X86_64_64  _JIT_OPARG
// 89: 44 0f b7 c3                   movzwl  %bx, %r8d
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _PyDict_FromItems
// 97: be 01 00 00 00                movl    $0x1, %esi
// 9c: b9 01 00 00 00                movl    $0x1, %ecx
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 48 89 04 24                   movq    %rax, (%rsp)
// aa: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// b0: 0f 8e cc 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _JIT_OPARG
// c0: 0f b7 e8                      movzwl  %ax, %ebp
// c3: 48 ff c5                      incq    %rbp
// c6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d0: eb 1b                         jmp     0xed <_JIT_ENTRY+0xed>
// d2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// e0: 48 ff cd                      decq    %rbp
// e3: 48 83 fd 01                   cmpq    $0x1, %rbp
// e7: 0f 8e 95 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// ed: 8d 45 fe                      leal    -0x2(%rbp), %eax
// f0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// f4: 49 8b 06                      movq    (%r14), %rax
// f7: 48 85 c0                      testq   %rax, %rax
// fa: 7e 14                         jle     0x110 <_JIT_ENTRY+0x110>
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 e0                         js      0xe0 <_JIT_ENTRY+0xe0>
// 100: eb 33                         jmp     0x135 <_JIT_ENTRY+0x135>
// 102: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 11f: 4c 89 f2                      movq    %r14, %rdx
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_NegativeRefcount
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 06                      movq    (%r14), %rax
// 131: 85 c0                         testl   %eax, %eax
// 133: 78 ab                         js      0xe0 <_JIT_ENTRY+0xe0>
// 135: ff d3                         callq   *%rbx
// 137: 49 ff 0e                      decq    (%r14)
// 13a: 75 a4                         jne     0xe0 <_JIT_ENTRY+0xe0>
// 13c: 4c 89 f7                      movq    %r14, %rdi
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_Dealloc
// 149: ff d0                         callq   *%rax
// 14b: eb 93                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 14d: 4d 89 fc                      movq    %r15, %r12
// 150: 48 8b 30                      movq    (%rax), %rsi
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _PyErr_SetString
// 15d: 4c 89 f7                      movq    %r14, %rdi
// 160: ff d0                         callq   *%rax
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b4: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1b9: 78 21                         js      0x1dc <_JIT_ENTRY+0x1dc>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 ff 4d 00                   decq    (%r13)
// 1cb: 75 0f                         jne     0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_Dealloc
// 1d7: 4c 89 ef                      movq    %r13, %rdi
// 1da: ff d0                         callq   *%rax
// 1dc: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e0: 48 85 d2                      testq   %rdx, %rdx
// 1e3: 0f 84 79 ff ff ff             je      0x162 <_JIT_ENTRY+0x162>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 c8                      movzwl  %ax, %ecx
// 1f6: f7 d0                         notl    %eax
// 1f8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fd: 48 98                         cltq
// 1ff: 49 89 14 c7                   movq    %rdx, (%r15,%rax,8)
// 203: 48 c1 e1 03                   shlq    $0x3, %rcx
// 207: 4d 89 fc                      movq    %r15, %r12
// 20a: 49 29 cc                      subq    %rcx, %r12
// 20d: 48 f7 d9                      negq    %rcx
// 210: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 215: 49 8b 45 08                   movq    0x8(%r13), %rax
// 219: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021b:  R_X86_64_64  PyCoro_Type
// 223: 48 39 c8                      cmpq    %rcx, %rax
// 226: 74 7f                         je      0x2a7 <_JIT_ENTRY+0x2a7>
// 228: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022a:  R_X86_64_64  PyGen_Type
// 232: 48 39 c8                      cmpq    %rcx, %rax
// 235: 74 7e                         je      0x2b5 <_JIT_ENTRY+0x2b5>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  PyObject_GetIter
// 241: 4c 89 ef                      movq    %r13, %rdi
// 244: ff d0                         callq   *%rax
// 246: 48 85 c0                      testq   %rax, %rax
// 249: 0f 84 13 ff ff ff             je      0x162 <_JIT_ENTRY+0x162>
// 24f: 48 89 c5                      movq    %rax, %rbp
// 252: 49 8b 45 00                   movq    (%r13), %rax
// 256: 48 85 c0                      testq   %rax, %rax
// 259: 7f 22                         jg      0x27d <_JIT_ENTRY+0x27d>
// 25b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025d:  R_X86_64_64  .rodata.str1.1
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_NegativeRefcount
// 26f: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 274: 4c 89 ea                      movq    %r13, %rdx
// 277: ff d0                         callq   *%rax
// 279: 49 8b 45 00                   movq    (%r13), %rax
// 27d: 85 c0                         testl   %eax, %eax
// 27f: 78 21                         js      0x2a2 <_JIT_ENTRY+0x2a2>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28b: ff d0                         callq   *%rax
// 28d: 49 ff 4d 00                   decq    (%r13)
// 291: 75 0f                         jne     0x2a2 <_JIT_ENTRY+0x2a2>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_Dealloc
// 29d: 4c 89 ef                      movq    %r13, %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 89 ed                      movq    %rbp, %r13
// 2a5: eb 0e                         jmp     0x2b5 <_JIT_ENTRY+0x2b5>
// 2a7: 48 8b 03                      movq    (%rbx), %rax
// 2aa: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 2ae: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 2b3: 74 3b                         je      0x2f0 <_JIT_ENTRY+0x2f0>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _JIT_OPARG
// 2bf: 0f b7 c0                      movzwl  %ax, %eax
// 2c2: 48 c1 e0 03                   shlq    $0x3, %rax
// 2c6: 49 29 c7                      subq    %rax, %r15
// 2c9: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_CONTINUE
// 2d7: 48 89 df                      movq    %rbx, %rdi
// 2da: 4c 89 e6                      movq    %r12, %rsi
// 2dd: 4c 89 f2                      movq    %r14, %rdx
// 2e0: 48 83 c4 18                   addq    $0x18, %rsp
// 2e4: 5b                            popq    %rbx
// 2e5: 41 5c                         popq    %r12
// 2e7: 41 5d                         popq    %r13
// 2e9: 41 5e                         popq    %r14
// 2eb: 41 5f                         popq    %r15
// 2ed: 5d                            popq    %rbp
// 2ee: ff e0                         jmpq    *%rax
// 2f0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1+0x5f
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  PyExc_TypeError
// 304: e9 47 fe ff ff                jmp     0x150 <_JIT_ENTRY+0x150>
// 309: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER_code_body[778] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4d, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xcc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0x95, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x4d, 0x89, 0xfc, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x13, 0xff, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0xeb, 0x0e, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x47, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// a3: 00 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER_data_body[169] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 4c 0f f0                movq    -0x10(%r15,%rcx), %rcx
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PyFloat_Type
// 212: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 216: 75 1e                         jne     0x236 <_JIT_ENTRY+0x236>
// 218: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021a:  R_X86_64_64  _JIT_OPARG
// 222: 0f b7 c9                      movzwl  %cx, %ecx
// 225: 48 c1 e1 03                   shlq    $0x3, %rcx
// 229: 49 29 cf                      subq    %rcx, %r15
// 22c: 49 8b 4f f8                   movq    -0x8(%r15), %rcx
// 230: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 234: 74 2c                         je      0x262 <_JIT_ENTRY+0x262>
// 236: 48 29 de                      subq    %rbx, %rsi
// 239: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 241: 89 73 40                      movl    %esi, 0x40(%rbx)
// 244: 48 8b 03                      movq    (%rbx), %rax
// 247: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000249:  R_X86_64_64  _JIT_TARGET
// 251: 89 c9                         movl    %ecx, %ecx
// 253: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 257: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25d: e9 11 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_CONTINUE
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT_code_body[645] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x4c, 0x0f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x1e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x49, 0x8b, 0x4f, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x11, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 4c 0f f0                movq    -0x10(%r15,%rcx), %rcx
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PyLong_Type
// 212: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 216: 75 1e                         jne     0x236 <_JIT_ENTRY+0x236>
// 218: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021a:  R_X86_64_64  _JIT_OPARG
// 222: 0f b7 c9                      movzwl  %cx, %ecx
// 225: 48 c1 e1 03                   shlq    $0x3, %rcx
// 229: 49 29 cf                      subq    %rcx, %r15
// 22c: 49 8b 4f f8                   movq    -0x8(%r15), %rcx
// 230: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 234: 74 2c                         je      0x262 <_JIT_ENTRY+0x262>
// 236: 48 29 de                      subq    %rbx, %rsi
// 239: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 241: 89 73 40                      movl    %esi, 0x40(%rbx)
// 244: 48 8b 03                      movq    (%rbx), %rax
// 247: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000249:  R_X86_64_64  _JIT_TARGET
// 251: 89 c9                         movl    %ecx, %ecx
// 253: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 257: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25d: e9 11 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_CONTINUE
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT_code_body[645] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x4c, 0x0f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x1e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x49, 0x8b, 0x4f, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x11, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 4c 0f f0                movq    -0x10(%r15,%rcx), %rcx
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PyUnicode_Type
// 212: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 216: 75 1e                         jne     0x236 <_JIT_ENTRY+0x236>
// 218: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021a:  R_X86_64_64  _JIT_OPARG
// 222: 0f b7 c9                      movzwl  %cx, %ecx
// 225: 48 c1 e1 03                   shlq    $0x3, %rcx
// 229: 49 29 cf                      subq    %rcx, %r15
// 22c: 49 8b 4f f8                   movq    -0x8(%r15), %rcx
// 230: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 234: 74 2c                         je      0x262 <_JIT_ENTRY+0x262>
// 236: 48 29 de                      subq    %rbx, %rsi
// 239: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 241: 89 73 40                      movl    %esi, 0x40(%rbx)
// 244: 48 8b 03                      movq    (%rbx), %rax
// 247: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000249:  R_X86_64_64  _JIT_TARGET
// 251: 89 c9                         movl    %ecx, %ecx
// 253: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 257: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25d: e9 11 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_CONTINUE
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE_code_body[645] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x4c, 0x0f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x1e, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x49, 0x8b, 0x4f, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x11, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 49 29 ce                      subq    %rcx, %r14
// 1fd: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 201: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000203:  R_X86_64_64  PyDict_Type
// 20b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20f: 75 3b                         jne     0x24c <_JIT_ENTRY+0x24c>
// 211: 48 8b 40 20                   movq    0x20(%rax), %rax
// 215: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000217:  R_X86_64_64  _JIT_OPERAND
// 21f: 0f b7 c9                      movzwl  %cx, %ecx
// 222: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 225: 75 25                         jne     0x24c <_JIT_ENTRY+0x24c>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_CONTINUE
// 231: 48 89 df                      movq    %rbx, %rdi
// 234: 4c 89 f6                      movq    %r14, %rsi
// 237: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 23c: 48 83 c4 18                   addq    $0x18, %rsp
// 240: 5b                            popq    %rbx
// 241: 41 5c                         popq    %r12
// 243: 41 5d                         popq    %r13
// 245: 41 5e                         popq    %r14
// 247: 41 5f                         popq    %r15
// 249: 5d                            popq    %rbp
// 24a: ff e0                         jmpq    *%rax
// 24c: 49 29 de                      subq    %rbx, %r14
// 24f: 49 83 c6 b8                   addq    $-0x48, %r14
// 253: 49 c1 ee 03                   shrq    $0x3, %r14
// 257: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 25b: 48 8b 03                      movq    (%rbx), %rax
// 25e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000260:  R_X86_64_64  _JIT_TARGET
// 268: 89 c9                         movl    %ecx, %ecx
// 26a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 274: e9 fa fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 279: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION_code_body[634] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0x8b, 0x43, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3b, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfa, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 20c: 75 2c                         jne     0x23a <_JIT_ENTRY+0x23a>
// 20e: 48 29 de                      subq    %rbx, %rsi
// 211: 48 83 c6 b8                   addq    $-0x48, %rsi
// 215: 48 c1 ee 03                   shrq    $0x3, %rsi
// 219: 89 73 40                      movl    %esi, 0x40(%rbx)
// 21c: 48 8b 03                      movq    (%rbx), %rax
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  _JIT_TARGET
// 229: 89 c9                         movl    %ecx, %ecx
// 22b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 235: e9 39 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _JIT_CONTINUE
// 244: 48 89 df                      movq    %rbx, %rdi
// 247: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 24c: 48 83 c4 18                   addq    $0x18, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: ff e0                         jmpq    *%rax
// 25c: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_code_body[605] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x39, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4d 89 fc                      movq    %r15, %r12
// 1fd: 49 29 cc                      subq    %rcx, %r12
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 7c 0f f8                movq    -0x8(%r15,%rcx), %rdi
// 208: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 20c: 75 14                         jne     0x222 <_JIT_ENTRY+0x222>
// 20e: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 21c: ff d0                         callq   *%rax
// 21e: 84 c0                         testb   %al, %al
// 220: 74 25                         je      0x247 <_JIT_ENTRY+0x247>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: 4c 89 e6                      movq    %r12, %rsi
// 232: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 237: 48 83 c4 18                   addq    $0x18, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: ff e0                         jmpq    *%rax
// 247: 49 29 dc                      subq    %rbx, %r12
// 24a: 49 83 c4 b8                   addq    $-0x48, %r12
// 24e: 49 c1 ec 03                   shrq    $0x3, %r12
// 252: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 256: 48 8b 03                      movq    (%rbx), %rax
// 259: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025b:  R_X86_64_64  _JIT_TARGET
// 263: 89 c9                         movl    %ecx, %ecx
// 265: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 269: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26f: e9 ff fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 274: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[629] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x7c, 0x0f, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xff, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 49 29 ce                      subq    %rcx, %r14
// 1fd: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 201: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000203:  R_X86_64_64  PyDict_Type
// 20b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20f: 75 3b                         jne     0x24c <_JIT_ENTRY+0x24c>
// 211: 48 8b 40 20                   movq    0x20(%rax), %rax
// 215: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000217:  R_X86_64_64  _JIT_OPERAND
// 21f: 0f b7 c9                      movzwl  %cx, %ecx
// 222: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 225: 75 25                         jne     0x24c <_JIT_ENTRY+0x24c>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_CONTINUE
// 231: 48 89 df                      movq    %rbx, %rdi
// 234: 4c 89 f6                      movq    %r14, %rsi
// 237: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 23c: 48 83 c4 18                   addq    $0x18, %rsp
// 240: 5b                            popq    %rbx
// 241: 41 5c                         popq    %r12
// 243: 41 5d                         popq    %r13
// 245: 41 5e                         popq    %r14
// 247: 41 5f                         popq    %r15
// 249: 5d                            popq    %rbp
// 24a: ff e0                         jmpq    *%rax
// 24c: 49 29 de                      subq    %rbx, %r14
// 24f: 49 83 c6 b8                   addq    $-0x48, %r14
// 253: 49 c1 ee 03                   shrq    $0x3, %r14
// 257: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 25b: 48 8b 03                      movq    (%rbx), %rax
// 25e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000260:  R_X86_64_64  _JIT_TARGET
// 268: 89 c9                         movl    %ecx, %ecx
// 26a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 26e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 274: e9 fa fe ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 279: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION_code_body[634] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0x8b, 0x43, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3b, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xfa, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 f8                      movq    %r15, %rax
// 1fd: 48 29 c8                      subq    %rcx, %rax
// 200: 48 8d 70 f8                   leaq    -0x8(%rax), %rsi
// 204: 48 f7 d9                      negq    %rcx
// 207: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000209:  R_X86_64_64  _Py_TrueStruct
// 211: 49 39 54 0f f8                cmpq    %rdx, -0x8(%r15,%rcx)
// 216: 48 0f 44 f0                   cmoveq  %rax, %rsi
// 21a: 74 22                         je      0x23e <_JIT_ENTRY+0x23e>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22e: 48 83 c4 18                   addq    $0x18, %rsp
// 232: 5b                            popq    %rbx
// 233: 41 5c                         popq    %r12
// 235: 41 5d                         popq    %r13
// 237: 41 5e                         popq    %r14
// 239: 41 5f                         popq    %r15
// 23b: 5d                            popq    %rbp
// 23c: ff e0                         jmpq    *%rax
// 23e: 48 29 de                      subq    %rbx, %rsi
// 241: 48 83 c6 b8                   addq    $-0x48, %rsi
// 245: 48 c1 ee 03                   shrq    $0x3, %rsi
// 249: 89 73 40                      movl    %esi, 0x40(%rbx)
// 24c: 48 8b 03                      movq    (%rbx), %rax
// 24f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000251:  R_X86_64_64  _JIT_TARGET
// 259: 89 c9                         movl    %ecx, %ecx
// 25b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 265: e9 09 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 26a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xc8, 0x48, 0x8d, 0x70, 0xf8, 0x48, 0xf7, 0xd9, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x0f, 0xf8, 0x48, 0x0f, 0x44, 0xf0, 0x74, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x09, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 f8                      movq    %r15, %rax
// 1fd: 48 29 c8                      subq    %rcx, %rax
// 200: 48 8d 70 f8                   leaq    -0x8(%rax), %rsi
// 204: 48 f7 d9                      negq    %rcx
// 207: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000209:  R_X86_64_64  _Py_NoneStruct
// 211: 49 39 54 0f f8                cmpq    %rdx, -0x8(%r15,%rcx)
// 216: 48 0f 45 f0                   cmovneq %rax, %rsi
// 21a: 74 2c                         je      0x248 <_JIT_ENTRY+0x248>
// 21c: 48 29 de                      subq    %rbx, %rsi
// 21f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 223: 48 c1 ee 03                   shrq    $0x3, %rsi
// 227: 89 73 40                      movl    %esi, 0x40(%rbx)
// 22a: 48 8b 03                      movq    (%rbx), %rax
// 22d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022f:  R_X86_64_64  _JIT_TARGET
// 237: 89 c9                         movl    %ecx, %ecx
// 239: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 23d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 243: e9 2b ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_CONTINUE
// 252: 48 89 df                      movq    %rbx, %rdi
// 255: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 25a: 48 83 c4 18                   addq    $0x18, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: ff e0                         jmpq    *%rax
// 26a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xc8, 0x48, 0x8d, 0x70, 0xf8, 0x48, 0xf7, 0xd9, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x0f, 0xf8, 0x48, 0x0f, 0x45, 0xf0, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c1                      movzwl  %cx, %eax
// 1e7: f7 d1                         notl    %ecx
// 1e9: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ef: 48 63 c9                      movslq  %ecx, %rcx
// 1f2: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1f6: 48 c1 e0 03                   shlq    $0x3, %rax
// 1fa: 48 89 c1                      movq    %rax, %rcx
// 1fd: 48 f7 d9                      negq    %rcx
// 200: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  _Py_NoneStruct
// 20f: 49 39 cc                      cmpq    %rcx, %r12
// 212: 74 7c                         je      0x290 <_JIT_ENTRY+0x290>
// 214: 49 29 c6                      subq    %rax, %r14
// 217: 49 8b 04 24                   movq    (%r12), %rax
// 21b: 48 85 c0                      testq   %rax, %rax
// 21e: 7f 22                         jg      0x242 <_JIT_ENTRY+0x242>
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_NegativeRefcount
// 234: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 239: 4c 89 e2                      movq    %r12, %rdx
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 04 24                   movq    (%r12), %rax
// 242: 49 83 c6 f8                   addq    $-0x8, %r14
// 246: 85 c0                         testl   %eax, %eax
// 248: 78 21                         js      0x26b <_JIT_ENTRY+0x26b>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 254: ff d0                         callq   *%rax
// 256: 49 ff 0c 24                   decq    (%r12)
// 25a: 75 0f                         jne     0x26b <_JIT_ENTRY+0x26b>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_Dealloc
// 266: 4c 89 e7                      movq    %r12, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_CONTINUE
// 275: 48 89 df                      movq    %rbx, %rdi
// 278: 4c 89 f6                      movq    %r14, %rsi
// 27b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 280: 48 83 c4 18                   addq    $0x18, %rsp
// 284: 5b                            popq    %rbx
// 285: 41 5c                         popq    %r12
// 287: 41 5d                         popq    %r13
// 289: 41 5e                         popq    %r14
// 28b: 41 5f                         popq    %r15
// 28d: 5d                            popq    %rbp
// 28e: ff e0                         jmpq    *%rax
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _JIT_OPARG
// 29a: 0f b7 c0                      movzwl  %ax, %eax
// 29d: f7 d8                         negl    %eax
// 29f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2a3: 48 29 d8                      subq    %rbx, %rax
// 2a6: 48 83 c0 b8                   addq    $-0x48, %rax
// 2aa: 48 c1 e8 03                   shrq    $0x3, %rax
// 2ae: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2b1: 48 8b 03                      movq    (%rbx), %rax
// 2b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b6:  R_X86_64_64  _JIT_TARGET
// 2be: 89 c9                         movl    %ecx, %ecx
// 2c0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2c4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2ca: e9 a2 fe ff ff                jmp     0x171 <_JIT_ENTRY+0x171>
// 2cf: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP_code_body[720] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0xc1, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xcc, 0x74, 0x7c, 0x49, 0x29, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xf7, 0xd8, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 f8                      movq    %r15, %rax
// 1fd: 48 29 c8                      subq    %rcx, %rax
// 200: 48 8d 70 f8                   leaq    -0x8(%rax), %rsi
// 204: 48 f7 d9                      negq    %rcx
// 207: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000209:  R_X86_64_64  _Py_FalseStruct
// 211: 49 39 54 0f f8                cmpq    %rdx, -0x8(%r15,%rcx)
// 216: 48 0f 44 f0                   cmoveq  %rax, %rsi
// 21a: 74 22                         je      0x23e <_JIT_ENTRY+0x23e>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22e: 48 83 c4 18                   addq    $0x18, %rsp
// 232: 5b                            popq    %rbx
// 233: 41 5c                         popq    %r12
// 235: 41 5d                         popq    %r13
// 237: 41 5e                         popq    %r14
// 239: 41 5f                         popq    %r15
// 23b: 5d                            popq    %rbp
// 23c: ff e0                         jmpq    *%rax
// 23e: 48 29 de                      subq    %rbx, %rsi
// 241: 48 83 c6 b8                   addq    $-0x48, %rsi
// 245: 48 c1 ee 03                   shrq    $0x3, %rsi
// 249: 89 73 40                      movl    %esi, 0x40(%rbx)
// 24c: 48 8b 03                      movq    (%rbx), %rax
// 24f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000251:  R_X86_64_64  _JIT_TARGET
// 259: 89 c9                         movl    %ecx, %ecx
// 25b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 265: e9 09 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 26a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP_code_body[619] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xc8, 0x48, 0x8d, 0x70, 0xf8, 0x48, 0xf7, 0xd9, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x0f, 0xf8, 0x48, 0x0f, 0x44, 0xf0, 0x74, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x09, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 8b 40 08                   movq    0x8(%rax), %rax
// 20c: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 213: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000215:  R_X86_64_64  _JIT_OPERAND
// 21d: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 220: 75 22                         jne     0x244 <_JIT_ENTRY+0x244>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 234: 48 83 c4 18                   addq    $0x18, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 48 29 de                      subq    %rbx, %rsi
// 247: 48 83 c6 b8                   addq    $-0x48, %rsi
// 24b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 24f: 89 73 40                      movl    %esi, 0x40(%rbx)
// 252: 48 8b 03                      movq    (%rbx), %rax
// 255: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000257:  R_X86_64_64  _JIT_TARGET
// 25f: 89 c9                         movl    %ecx, %ecx
// 261: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 265: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26b: e9 03 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 270: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION_code_body[625] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x03, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 20c: 48 85 c9                      testq   %rcx, %rcx
// 20f: 74 2c                         je      0x23d <_JIT_ENTRY+0x23d>
// 211: 48 8b 40 10                   movq    0x10(%rax), %rax
// 215: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 219: 7d 22                         jge     0x23d <_JIT_ENTRY+0x23d>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 48 89 df                      movq    %rbx, %rdi
// 228: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22d: 48 83 c4 18                   addq    $0x18, %rsp
// 231: 5b                            popq    %rbx
// 232: 41 5c                         popq    %r12
// 234: 41 5d                         popq    %r13
// 236: 41 5e                         popq    %r14
// 238: 41 5f                         popq    %r15
// 23a: 5d                            popq    %rbp
// 23b: ff e0                         jmpq    *%rax
// 23d: 48 29 de                      subq    %rbx, %rsi
// 240: 48 83 c6 b8                   addq    $-0x48, %rsi
// 244: 48 c1 ee 03                   shrq    $0x3, %rsi
// 248: 89 73 40                      movl    %esi, 0x40(%rbx)
// 24b: 48 8b 03                      movq    (%rbx), %rax
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_TARGET
// 258: 89 c9                         movl    %ecx, %ecx
// 25a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 264: e9 0a ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 269: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST_code_body[618] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2c, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x0a, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 20d: 7e 22                         jle     0x231 <_JIT_ENTRY+0x231>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_CONTINUE
// 219: 48 89 df                      movq    %rbx, %rdi
// 21c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 48 29 de                      subq    %rbx, %rsi
// 234: 48 83 c6 b8                   addq    $-0x48, %rsi
// 238: 48 c1 ee 03                   shrq    $0x3, %rsi
// 23c: 89 73 40                      movl    %esi, 0x40(%rbx)
// 23f: 48 8b 03                      movq    (%rbx), %rax
// 242: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000244:  R_X86_64_64  _JIT_TARGET
// 24c: 89 c9                         movl    %ecx, %ecx
// 24e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 252: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 258: e9 16 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 25d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[606] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x16, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 20c: 48 85 c9                      testq   %rcx, %rcx
// 20f: 74 2c                         je      0x23d <_JIT_ENTRY+0x23d>
// 211: 48 8b 40 10                   movq    0x10(%rax), %rax
// 215: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 219: 7d 22                         jge     0x23d <_JIT_ENTRY+0x23d>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 48 89 df                      movq    %rbx, %rdi
// 228: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22d: 48 83 c4 18                   addq    $0x18, %rsp
// 231: 5b                            popq    %rbx
// 232: 41 5c                         popq    %r12
// 234: 41 5d                         popq    %r13
// 236: 41 5e                         popq    %r14
// 238: 41 5f                         popq    %r15
// 23a: 5d                            popq    %rbp
// 23b: ff e0                         jmpq    *%rax
// 23d: 48 29 de                      subq    %rbx, %rsi
// 240: 48 83 c6 b8                   addq    $-0x48, %rsi
// 244: 48 c1 ee 03                   shrq    $0x3, %rsi
// 248: 89 73 40                      movl    %esi, 0x40(%rbx)
// 24b: 48 8b 03                      movq    (%rbx), %rax
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_TARGET
// 258: 89 c9                         movl    %ecx, %ecx
// 25a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 264: e9 0a ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 269: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[618] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2c, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x0a, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 8b 40 08                   movq    0x8(%rax), %rax
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  _JIT_OPERAND
// 216: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 21c: 75 22                         jne     0x240 <_JIT_ENTRY+0x240>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_CONTINUE
// 228: 48 89 df                      movq    %rbx, %rdi
// 22b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 230: 48 83 c4 18                   addq    $0x18, %rsp
// 234: 5b                            popq    %rbx
// 235: 41 5c                         popq    %r12
// 237: 41 5d                         popq    %r13
// 239: 41 5e                         popq    %r14
// 23b: 41 5f                         popq    %r15
// 23d: 5d                            popq    %rbp
// 23e: ff e0                         jmpq    *%rax
// 240: 48 29 de                      subq    %rbx, %rsi
// 243: 48 83 c6 b8                   addq    $-0x48, %rsi
// 247: 48 c1 ee 03                   shrq    $0x3, %rsi
// 24b: 89 73 40                      movl    %esi, 0x40(%rbx)
// 24e: 48 8b 03                      movq    (%rbx), %rax
// 251: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000253:  R_X86_64_64  _JIT_TARGET
// 25b: 89 c9                         movl    %ecx, %ecx
// 25d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 261: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 267: e9 07 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 26c: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION_code_body[621] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x07, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 ed                      subq    %rbp, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6d 40                   movl    %r13d, 0x40(%rbp)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1b8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 db                      testq   %rbx, %rbx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1f7: 29 ca                         subl    %ecx, %edx
// 1f9: f7 d1                         notl    %ecx
// 1fb: 48 63 c9                      movslq  %ecx, %rcx
// 1fe: 49 89 1c ce                   movq    %rbx, (%r14,%rcx,8)
// 202: 48 63 ca                      movslq  %edx, %rcx
// 205: 0f b7 c0                      movzwl  %ax, %eax
// 208: 48 29 c1                      subq    %rax, %rcx
// 20b: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 20f: 4d 8b 7c 24 18                movq    0x18(%r12), %r15
// 214: 41 8b 07                      movl    (%r15), %eax
// 217: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000219:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 221: ff c0                         incl    %eax
// 223: 74 05                         je      0x22a <_JIT_ENTRY+0x22a>
// 225: 41 89 07                      movl    %eax, (%r15)
// 228: ff d3                         callq   *%rbx
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _JIT_OPARG
// 234: 0f b7 c8                      movzwl  %ax, %ecx
// 237: f7 d0                         notl    %eax
// 239: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 23e: 48 98                         cltq
// 240: 48 29 c8                      subq    %rcx, %rax
// 243: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 247: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 24c: 41 8b 45 00                   movl    (%r13), %eax
// 250: ff c0                         incl    %eax
// 252: 74 06                         je      0x25a <_JIT_ENTRY+0x25a>
// 254: 41 89 45 00                   movl    %eax, (%r13)
// 258: ff d3                         callq   *%rbx
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _JIT_OPARG
// 264: 0f b7 c8                      movzwl  %ax, %ecx
// 267: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 26c: 29 ca                         subl    %ecx, %edx
// 26e: 48 63 ca                      movslq  %edx, %rcx
// 271: 0f b7 c0                      movzwl  %ax, %eax
// 274: 48 29 c1                      subq    %rax, %rcx
// 277: 4d 89 2c ce                   movq    %r13, (%r14,%rcx,8)
// 27b: 49 8b 04 24                   movq    (%r12), %rax
// 27f: 48 85 c0                      testq   %rax, %rax
// 282: 7f 22                         jg      0x2a6 <_JIT_ENTRY+0x2a6>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 29d: 4c 89 e2                      movq    %r12, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 04 24                   movq    (%r12), %rax
// 2a6: 85 c0                         testl   %eax, %eax
// 2a8: 78 21                         js      0x2cb <_JIT_ENTRY+0x2cb>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b4: ff d0                         callq   *%rax
// 2b6: 49 ff 0c 24                   decq    (%r12)
// 2ba: 75 0f                         jne     0x2cb <_JIT_ENTRY+0x2cb>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_Dealloc
// 2c6: 4c 89 e7                      movq    %r12, %rdi
// 2c9: ff d0                         callq   *%rax
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_OPARG
// 2d5: 0f b7 c8                      movzwl  %ax, %ecx
// 2d8: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 2e0: 4c 89 f6                      movq    %r14, %rsi
// 2e3: 48 29 d6                      subq    %rdx, %rsi
// 2e6: 0f b7 c0                      movzwl  %ax, %eax
// 2e9: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 2ee: 29 c2                         subl    %eax, %edx
// 2f0: 48 63 d2                      movslq  %edx, %rdx
// 2f3: 48 29 ca                      subq    %rcx, %rdx
// 2f6: 4d 89 2c d6                   movq    %r13, (%r14,%rdx,8)
// 2fa: f7 d0                         notl    %eax
// 2fc: 48 98                         cltq
// 2fe: 48 29 c8                      subq    %rcx, %rax
// 301: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  _JIT_CONTINUE
// 30f: 48 89 ef                      movq    %rbp, %rdi
// 312: 48 8b 14 24                   movq    (%rsp), %rdx
// 316: 48 83 c4 18                   addq    $0x18, %rsp
// 31a: 5b                            popq    %rbx
// 31b: 41 5c                         popq    %r12
// 31d: 41 5d                         popq    %r13
// 31f: 41 5e                         popq    %r14
// 321: 41 5f                         popq    %r15
// 323: 5d                            popq    %rbp
// 324: ff e0                         jmpq    *%rax
// 326: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[807] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xed, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x1c, 0xce, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x4d, 0x8b, 0x24, 0xce, 0x4d, 0x8b, 0x7c, 0x24, 0x18, 0x41, 0x8b, 0x07, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x05, 0x41, 0x89, 0x07, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x4d, 0x89, 0x2c, 0xce, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0x48, 0x29, 0xd6, 0x0f, 0xb7, 0xc0, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x48, 0x29, 0xca, 0x4d, 0x89, 0x2c, 0xd6, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x29, 0xc8, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 16 01 00 00             jne     0x146 <_JIT_ENTRY+0x146>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 fe 00 00 00             jne     0x146 <_JIT_ENTRY+0x146>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 89 5c 24 18                movq    %rbx, 0x18(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _JIT_OPARG
// 5c: f7 d0                         notl    %eax
// 5e: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 63: 48 98                         cltq
// 65: 4c 89 6c 24 10                movq    %r13, 0x10(%rsp)
// 6a: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
// 6f: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 74: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000076:  R_X86_64_64  _JIT_OPARG
// 7e: 44 0f b7 c3                   movzwl  %bx, %r8d
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _PyDict_FromItems
// 8c: be 01 00 00 00                movl    $0x1, %esi
// 91: b9 01 00 00 00                movl    $0x1, %ecx
// 96: 4c 89 ea                      movq    %r13, %rdx
// 99: ff d0                         callq   *%rax
// 9b: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// a0: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// a6: 0f 8e e0 00 00 00             jle     0x18c <_JIT_ENTRY+0x18c>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_OPARG
// b6: 44 0f b7 f0                   movzwl  %ax, %r14d
// ba: 49 ff c6                      incq    %r14
// bd: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000bf:  R_X86_64_64  .rodata.str1.1
// c7: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000c9:  R_X86_64_64  _Py_NegativeRefcount
// d1: eb 1a                         jmp     0xed <_JIT_ENTRY+0xed>
// d3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// e0: 49 ff ce                      decq    %r14
// e3: 49 83 fe 01                   cmpq    $0x1, %r14
// e7: 0f 8e 9f 00 00 00             jle     0x18c <_JIT_ENTRY+0x18c>
// ed: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// f1: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// f6: 49 8b 07                      movq    (%r15), %rax
// f9: 48 85 c0                      testq   %rax, %rax
// fc: 7e 12                         jle     0x110 <_JIT_ENTRY+0x110>
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 de                         js      0xe0 <_JIT_ENTRY+0xe0>
// 102: eb 20                         jmp     0x124 <_JIT_ENTRY+0x124>
// 104: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 110: 48 89 ef                      movq    %rbp, %rdi
// 113: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 118: 4c 89 fa                      movq    %r15, %rdx
// 11b: ff d3                         callq   *%rbx
// 11d: 49 8b 07                      movq    (%r15), %rax
// 120: 85 c0                         testl   %eax, %eax
// 122: 78 bc                         js      0xe0 <_JIT_ENTRY+0xe0>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12e: ff d0                         callq   *%rax
// 130: 49 ff 0f                      decq    (%r15)
// 133: 75 ab                         jne     0xe0 <_JIT_ENTRY+0xe0>
// 135: 4c 89 ff                      movq    %r15, %rdi
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_Dealloc
// 142: ff d0                         callq   *%rax
// 144: eb 9a                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  PyExc_SystemError
// 150: 48 8b 30                      movq    (%rax), %rsi
// 153: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000155:  R_X86_64_64  .rodata.str1.1+0x39
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _PyErr_SetString
// 167: 48 89 cf                      movq    %rcx, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 49 29 dd                      subq    %rbx, %r13
// 16f: 49 83 c5 b8                   addq    $-0x48, %r13
// 173: 49 c1 ed 03                   shrq    $0x3, %r13
// 177: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 17b: 31 c0                         xorl    %eax, %eax
// 17d: 48 83 c4 28                   addq    $0x28, %rsp
// 181: 5b                            popq    %rbx
// 182: 41 5c                         popq    %r12
// 184: 41 5d                         popq    %r13
// 186: 41 5e                         popq    %r14
// 188: 41 5f                         popq    %r15
// 18a: 5d                            popq    %rbp
// 18b: c3                            retq
// 18c: 49 8b 04 24                   movq    (%r12), %rax
// 190: 48 85 c0                      testq   %rax, %rax
// 193: 7f 22                         jg      0x1b7 <_JIT_ENTRY+0x1b7>
// 195: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000197:  R_X86_64_64  .rodata.str1.1
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_NegativeRefcount
// 1a9: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1ae: 4c 89 e2                      movq    %r12, %rdx
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 8b 04 24                   movq    (%r12), %rax
// 1b7: 85 c0                         testl   %eax, %eax
// 1b9: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 1be: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 1c3: 78 21                         js      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 0f                         jne     0x1e6 <_JIT_ENTRY+0x1e6>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 4d 85 f6                      testq   %r14, %r14
// 1e9: 74 81                         je      0x16c <_JIT_ENTRY+0x16c>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_OPARG
// 1f5: 0f b7 c8                      movzwl  %ax, %ecx
// 1f8: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1fd: 29 ca                         subl    %ecx, %edx
// 1ff: f7 d1                         notl    %ecx
// 201: 48 63 c9                      movslq  %ecx, %rcx
// 204: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 209: 4c 89 34 ce                   movq    %r14, (%rsi,%rcx,8)
// 20d: 0f b7 e8                      movzwl  %ax, %ebp
// 210: 48 29 e9                      subq    %rbp, %rcx
// 213: 48 63 c2                      movslq  %edx, %rax
// 216: 48 29 e8                      subq    %rbp, %rax
// 219: 4c 8b 34 c6                   movq    (%rsi,%rax,8), %r14
// 21d: 48 8b 14 ce                   movq    (%rsi,%rcx,8), %rdx
// 221: 49 8b 5e 30                   movq    0x30(%r14), %rbx
// 225: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 22a: 4c 8b bf 00 01 00 00          movq    0x100(%rdi), %r15
// 231: 48 63 43 4c                   movslq  0x4c(%rbx), %rax
// 235: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 239: 48 89 87 00 01 00 00          movq    %rax, 0x100(%rdi)
// 240: 4d 89 77 10                   movq    %r14, 0x10(%r15)
// 244: 8b 03                         movl    (%rbx), %eax
// 246: ff c0                         incl    %eax
// 248: 4c 8d 24 ce                   leaq    (%rsi,%rcx,8), %r12
// 24c: 48 85 d2                      testq   %rdx, %rdx
// 24f: 0f 84 d2 00 00 00             je      0x327 <_JIT_ENTRY+0x327>
// 255: 85 c0                         testl   %eax, %eax
// 257: 74 0e                         je      0x267 <_JIT_ENTRY+0x267>
// 259: 89 03                         movl    %eax, (%rbx)
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 265: ff d0                         callq   *%rax
// 267: 49 89 1f                      movq    %rbx, (%r15)
// 26a: 41 0f 10 46 10                movups  0x10(%r14), %xmm0
// 26f: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 274: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 27c: 8b 4b 48                      movl    0x48(%rbx), %ecx
// 27f: 41 89 4f 40                   movl    %ecx, 0x40(%r15)
// 283: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 28b: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 292: 49 89 5f 38                   movq    %rbx, 0x38(%r15)
// 296: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 29d: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_OPARG
// 2ac: 44 0f b7 e8                   movzwl  %ax, %r13d
// 2b0: 41 ff c5                      incl    %r13d
// 2b3: 45 85 ed                      testl   %r13d, %r13d
// 2b6: 40 0f 9f c6                   setg    %sil
// 2ba: 44 39 e9                      cmpl    %r13d, %ecx
// 2bd: 0f 8e 1b 01 00 00             jle     0x3de <_JIT_ENTRY+0x3de>
// 2c3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002c5:  R_X86_64_64  _JIT_OPARG
// 2cd: 44 0f b7 eb                   movzwl  %bx, %r13d
// 2d1: 41 ff c5                      incl    %r13d
// 2d4: 4b 8d 3c ef                   leaq    (%r15,%r13,8), %rdi
// 2d8: 48 83 c7 48                   addq    $0x48, %rdi
// 2dc: 44 89 e8                      movl    %r13d, %eax
// 2df: f7 d0                         notl    %eax
// 2e1: 01 c1                         addl    %eax, %ecx
// 2e3: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  memset
// 2f5: 31 f6                         xorl    %esi, %esi
// 2f7: ff d0                         callq   *%rax
// 2f9: 45 85 ed                      testl   %r13d, %r13d
// 2fc: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 301: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 306: 0f 8e db 01 00 00             jle     0x4e7 <_JIT_ENTRY+0x4e7>
// 30c: 0f b7 cb                      movzwl  %bx, %ecx
// 30f: 48 01 c9                      addq    %rcx, %rcx
// 312: 48 c1 e1 03                   shlq    $0x3, %rcx
// 316: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 31b: 48 29 c8                      subq    %rcx, %rax
// 31e: 48 83 c0 f8                   addq    $-0x8, %rax
// 322: e9 fe 00 00 00                jmp     0x425 <_JIT_ENTRY+0x425>
// 327: 85 c0                         testl   %eax, %eax
// 329: 74 0e                         je      0x339 <_JIT_ENTRY+0x339>
// 32b: 89 03                         movl    %eax, (%rbx)
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 337: ff d0                         callq   *%rax
// 339: 49 89 1f                      movq    %rbx, (%r15)
// 33c: 41 0f 10 46 10                movups  0x10(%r14), %xmm0
// 341: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 346: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 34e: 8b 43 48                      movl    0x48(%rbx), %eax
// 351: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 355: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 35d: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 364: 49 89 5f 38                   movq    %rbx, 0x38(%r15)
// 368: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 36f: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 374: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000376:  R_X86_64_64  _JIT_OPARG
// 37e: 44 0f b7 e9                   movzwl  %cx, %r13d
// 382: 45 85 ed                      testl   %r13d, %r13d
// 385: 40 0f 9f c6                   setg    %sil
// 389: 44 39 e8                      cmpl    %r13d, %eax
// 38c: 7e 6d                         jle     0x3fb <_JIT_ENTRY+0x3fb>
// 38e: 0f b7 d9                      movzwl  %cx, %ebx
// 391: 49 8d 3c df                   leaq    (%r15,%rbx,8), %rdi
// 395: 48 83 c7 48                   addq    $0x48, %rdi
// 399: 44 0f b7 e9                   movzwl  %cx, %r13d
// 39d: 44 89 e9                      movl    %r13d, %ecx
// 3a0: f7 d1                         notl    %ecx
// 3a2: 01 c8                         addl    %ecx, %eax
// 3a4: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 3ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ae:  R_X86_64_64  memset
// 3b6: 31 f6                         xorl    %esi, %esi
// 3b8: ff d0                         callq   *%rax
// 3ba: 45 85 ed                      testl   %r13d, %r13d
// 3bd: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 3c2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3c7: 0f 8e 1a 01 00 00             jle     0x4e7 <_JIT_ENTRY+0x4e7>
// 3cd: 48 01 db                      addq    %rbx, %rbx
// 3d0: 48 c1 e3 03                   shlq    $0x3, %rbx
// 3d4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 3d9: 48 29 d8                      subq    %rbx, %rax
// 3dc: eb 47                         jmp     0x425 <_JIT_ENTRY+0x425>
// 3de: f7 d0                         notl    %eax
// 3e0: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 3e6: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 3eb: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 3f0: 40 f6 c6 01                   testb   $0x1, %sil
// 3f4: 75 1f                         jne     0x415 <_JIT_ENTRY+0x415>
// 3f6: e9 ec 00 00 00                jmp     0x4e7 <_JIT_ENTRY+0x4e7>
// 3fb: 0f b7 c1                      movzwl  %cx, %eax
// 3fe: 48 f7 d8                      negq    %rax
// 401: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 406: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 40b: 40 f6 c6 01                   testb   $0x1, %sil
// 40f: 0f 84 d2 00 00 00             je      0x4e7 <_JIT_ENTRY+0x4e7>
// 415: 48 c1 e5 03                   shlq    $0x3, %rbp
// 419: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 41e: 48 29 e9                      subq    %rbp, %rcx
// 421: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 425: 41 83 fd 02                   cmpl    $0x2, %r13d
// 429: b9 01 00 00 00                movl    $0x1, %ecx
// 42e: 41 0f 4d cd                   cmovgel %r13d, %ecx
// 432: 83 f9 08                      cmpl    $0x8, %ecx
// 435: 72 10                         jb      0x447 <_JIT_ENTRY+0x447>
// 437: 4c 89 fe                      movq    %r15, %rsi
// 43a: 48 29 c6                      subq    %rax, %rsi
// 43d: 48 83 c6 48                   addq    $0x48, %rsi
// 441: 48 83 fe 20                   cmpq    $0x20, %rsi
// 445: 73 6b                         jae     0x4b2 <_JIT_ENTRY+0x4b2>
// 447: 45 31 d2                      xorl    %r10d, %r10d
// 44a: 4c 89 d6                      movq    %r10, %rsi
// 44d: 48 f7 d6                      notq    %rsi
// 450: 48 01 ce                      addq    %rcx, %rsi
// 453: 49 89 c9                      movq    %rcx, %r9
// 456: 49 83 e1 03                   andq    $0x3, %r9
// 45a: 74 15                         je      0x471 <_JIT_ENTRY+0x471>
// 45c: 0f 1f 40 00                   nopl    (%rax)
// 460: 4e 8b 04 d0                   movq    (%rax,%r10,8), %r8
// 464: 4f 89 44 d7 48                movq    %r8, 0x48(%r15,%r10,8)
// 469: 49 ff c2                      incq    %r10
// 46c: 49 ff c9                      decq    %r9
// 46f: 75 ef                         jne     0x460 <_JIT_ENTRY+0x460>
// 471: 48 83 fe 03                   cmpq    $0x3, %rsi
// 475: 72 70                         jb      0x4e7 <_JIT_ENTRY+0x4e7>
// 477: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 480: 4a 8b 34 d0                   movq    (%rax,%r10,8), %rsi
// 484: 4b 89 74 d7 48                movq    %rsi, 0x48(%r15,%r10,8)
// 489: 4a 8b 74 d0 08                movq    0x8(%rax,%r10,8), %rsi
// 48e: 4b 89 74 d7 50                movq    %rsi, 0x50(%r15,%r10,8)
// 493: 4a 8b 74 d0 10                movq    0x10(%rax,%r10,8), %rsi
// 498: 4b 89 74 d7 58                movq    %rsi, 0x58(%r15,%r10,8)
// 49d: 4a 8b 74 d0 18                movq    0x18(%rax,%r10,8), %rsi
// 4a2: 4b 89 74 d7 60                movq    %rsi, 0x60(%r15,%r10,8)
// 4a7: 49 83 c2 04                   addq    $0x4, %r10
// 4ab: 4c 39 d1                      cmpq    %r10, %rcx
// 4ae: 75 d0                         jne     0x480 <_JIT_ENTRY+0x480>
// 4b0: eb 35                         jmp     0x4e7 <_JIT_ENTRY+0x4e7>
// 4b2: 41 89 ca                      movl    %ecx, %r10d
// 4b5: 41 81 e2 fc ff ff 7f          andl    $0x7ffffffc, %r10d      # imm = 0x7FFFFFFC
// 4bc: 31 f6                         xorl    %esi, %esi
// 4be: 66 90                         nop
// 4c0: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 4c4: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 4c9: 41 0f 11 44 f7 48             movups  %xmm0, 0x48(%r15,%rsi,8)
// 4cf: 41 0f 11 4c f7 58             movups  %xmm1, 0x58(%r15,%rsi,8)
// 4d5: 48 83 c6 04                   addq    $0x4, %rsi
// 4d9: 49 39 f2                      cmpq    %rsi, %r10
// 4dc: 75 e2                         jne     0x4c0 <_JIT_ENTRY+0x4c0>
// 4de: 49 39 ca                      cmpq    %rcx, %r10
// 4e1: 0f 85 63 ff ff ff             jne     0x44a <_JIT_ENTRY+0x44a>
// 4e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004e9:  R_X86_64_64  _JIT_OPARG
// 4f1: 0f b7 c8                      movzwl  %ax, %ecx
// 4f4: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 4f9: 29 ce                         subl    %ecx, %esi
// 4fb: 48 63 ce                      movslq  %esi, %rcx
// 4fe: 0f b7 c0                      movzwl  %ax, %eax
// 501: 48 29 c1                      subq    %rax, %rcx
// 504: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 509: 4c 89 3c c8                   movq    %r15, (%rax,%rcx,8)
// 50d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000050f:  R_X86_64_64  _JIT_CONTINUE
// 517: 4c 89 e6                      movq    %r12, %rsi
// 51a: 48 83 c4 28                   addq    $0x28, %rsp
// 51e: 5b                            popq    %rbx
// 51f: 41 5c                         popq    %r12
// 521: 41 5d                         popq    %r13
// 523: 41 5e                         popq    %r14
// 525: 41 5f                         popq    %r15
// 527: 5d                            popq    %rbp
// 528: ff e0                         jmpq    *%rax
// 52a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS_code_body[1323] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x16, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x89, 0x6c, 0x24, 0x10, 0x4d, 0x8d, 0x6c, 0xc5, 0x00, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0x9f, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x20, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xab, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x9a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0x34, 0xce, 0x0f, 0xb7, 0xe8, 0x48, 0x29, 0xe9, 0x48, 0x63, 0xc2, 0x48, 0x29, 0xe8, 0x4c, 0x8b, 0x34, 0xc6, 0x48, 0x8b, 0x14, 0xce, 0x49, 0x8b, 0x5e, 0x30, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0xbf, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x43, 0x4c, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x89, 0x87, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x77, 0x10, 0x8b, 0x03, 0xff, 0xc0, 0x4c, 0x8d, 0x24, 0xce, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1f, 0x41, 0x0f, 0x10, 0x46, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4b, 0x48, 0x41, 0x89, 0x4f, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x41, 0xff, 0xc5, 0x45, 0x85, 0xed, 0x40, 0x0f, 0x9f, 0xc6, 0x44, 0x39, 0xe9, 0x0f, 0x8e, 0x1b, 0x01, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xeb, 0x41, 0xff, 0xc5, 0x4b, 0x8d, 0x3c, 0xef, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x0f, 0x8e, 0xdb, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xcb, 0x48, 0x01, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0xfe, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1f, 0x41, 0x0f, 0x10, 0x46, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x43, 0x48, 0x41, 0x89, 0x47, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe9, 0x45, 0x85, 0xed, 0x40, 0x0f, 0x9f, 0xc6, 0x44, 0x39, 0xe8, 0x7e, 0x6d, 0x0f, 0xb7, 0xd9, 0x49, 0x8d, 0x3c, 0xdf, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x0f, 0xb7, 0xe9, 0x44, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x0f, 0x8e, 0x1a, 0x01, 0x00, 0x00, 0x48, 0x01, 0xdb, 0x48, 0xc1, 0xe3, 0x03, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x29, 0xd8, 0xeb, 0x47, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x40, 0xf6, 0xc6, 0x01, 0x75, 0x1f, 0xe9, 0xec, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x40, 0xf6, 0xc6, 0x01, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xc1, 0xe5, 0x03, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x29, 0xe9, 0x48, 0x8d, 0x04, 0xc1, 0x41, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0x48, 0x48, 0x83, 0xfe, 0x20, 0x73, 0x6b, 0x45, 0x31, 0xd2, 0x4c, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x49, 0x89, 0xc9, 0x49, 0x83, 0xe1, 0x03, 0x74, 0x15, 0x0f, 0x1f, 0x40, 0x00, 0x4e, 0x8b, 0x04, 0xd0, 0x4f, 0x89, 0x44, 0xd7, 0x48, 0x49, 0xff, 0xc2, 0x49, 0xff, 0xc9, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x8b, 0x34, 0xd0, 0x4b, 0x89, 0x74, 0xd7, 0x48, 0x4a, 0x8b, 0x74, 0xd0, 0x08, 0x4b, 0x89, 0x74, 0xd7, 0x50, 0x4a, 0x8b, 0x74, 0xd0, 0x10, 0x4b, 0x89, 0x74, 0xd7, 0x58, 0x4a, 0x8b, 0x74, 0xd0, 0x18, 0x4b, 0x89, 0x74, 0xd7, 0x60, 0x49, 0x83, 0xc2, 0x04, 0x4c, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x41, 0x89, 0xca, 0x41, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x66, 0x90, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf7, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf7, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x49, 0x39, 0xf2, 0x75, 0xe2, 0x49, 0x39, 0xca, 0x0f, 0x85, 0x63, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xce, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x89, 0x3c, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x4e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x50f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_INSERT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_INSERT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 0c 24                   decq    (%r12)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1d7: 48 85 d2                      testq   %rdx, %rdx
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 4c 63 f8                      movslq  %eax, %r15
// 1f3: 4b 89 14 fe                   movq    %rdx, (%r14,%r15,8)
// 1f7: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1ff: 4d 89 f4                      movq    %r14, %r12
// 202: 49 29 d4                      subq    %rdx, %r12
// 205: 4d 8b 6c 24 f8                movq    -0x8(%r12), %r13
// 20a: 49 29 cf                      subq    %rcx, %r15
// 20d: 4b 8d 3c fe                   leaq    (%r14,%r15,8), %rdi
// 211: 48 01 c9                      addq    %rcx, %rcx
// 214: 48 f7 d9                      negq    %rcx
// 217: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  memmove
// 225: ff d0                         callq   *%rax
// 227: 4f 89 2c fe                   movq    %r13, (%r14,%r15,8)
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 48 89 df                      movq    %rbx, %rdi
// 238: 4c 89 e6                      movq    %r12, %rsi
// 23b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 240: 48 83 c4 18                   addq    $0x18, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_INSERT_code_body[593] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x89, 0x14, 0xfe, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xd4, 0x4d, 0x8b, 0x6c, 0x24, 0xf8, 0x49, 0x29, 0xcf, 0x4b, 0x8d, 0x3c, 0xfe, 0x48, 0x01, 0xc9, 0x48, 0xf7, 0xd9, 0x49, 0x8d, 0x34, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4f, 0x89, 0x2c, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_INSERT_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_INSERT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_INSERT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_IS_NONE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_IS_NONE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 4d 29 fd                      subq    %r15, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 45 89 6f 40                   movl    %r13d, 0x40(%r15)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 db                      testq   %rbx, %rbx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 48 f7 d9                      negq    %rcx
// 206: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_NoneStruct
// 215: 49 39 c4                      cmpq    %rax, %r12
// 218: 74 5c                         je      0x276 <_JIT_ENTRY+0x276>
// 21a: 49 8b 04 24                   movq    (%r12), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 7f 22                         jg      0x245 <_JIT_ENTRY+0x245>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 23c: 4c 89 e2                      movq    %r12, %rdx
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 04 24                   movq    (%r12), %rax
// 245: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000247:  R_X86_64_64  _Py_FalseStruct
// 24f: 85 c0                         testl   %eax, %eax
// 251: 78 2d                         js      0x280 <_JIT_ENTRY+0x280>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25d: ff d0                         callq   *%rax
// 25f: 49 ff 0c 24                   decq    (%r12)
// 263: 75 1b                         jne     0x280 <_JIT_ENTRY+0x280>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_Dealloc
// 26f: 4c 89 e7                      movq    %r12, %rdi
// 272: ff d0                         callq   *%rax
// 274: eb 0a                         jmp     0x280 <_JIT_ENTRY+0x280>
// 276: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000278:  R_X86_64_64  _Py_TrueStruct
// 280: 48 8b 14 24                   movq    (%rsp), %rdx
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_OPARG
// 28e: 0f b7 c0                      movzwl  %ax, %eax
// 291: 48 c1 e0 03                   shlq    $0x3, %rax
// 295: 49 29 c6                      subq    %rax, %r14
// 298: 49 89 5e f8                   movq    %rbx, -0x8(%r14)
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_CONTINUE
// 2a6: 4c 89 ff                      movq    %r15, %rdi
// 2a9: 4c 89 f6                      movq    %r14, %rsi
// 2ac: 48 83 c4 18                   addq    $0x18, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_IS_NONE_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x4d, 0x29, 0xfd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6f, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x49, 0x89, 0x5e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_IS_NONE_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_IS_NONE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_IS_NONE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_IS_OP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_IS_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// d5: 49 8b 06                      movq    (%r14), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fd                      movq    %r15, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 206: 49 8b 6c 24 f0                movq    -0x10(%r12), %rbp
// 20b: 48 8b 45 00                   movq    (%rbp), %rax
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 7f 22                         jg      0x236 <_JIT_ENTRY+0x236>
// 214: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000216:  R_X86_64_64  .rodata.str1.1
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 22d: 48 89 ea                      movq    %rbp, %rdx
// 230: ff d0                         callq   *%rax
// 232: 48 8b 45 00                   movq    (%rbp), %rax
// 236: 85 c0                         testl   %eax, %eax
// 238: 78 21                         js      0x25b <_JIT_ENTRY+0x25b>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 244: ff d0                         callq   *%rax
// 246: 48 ff 4d 00                   decq    (%rbp)
// 24a: 75 0f                         jne     0x25b <_JIT_ENTRY+0x25b>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 48 89 ef                      movq    %rbp, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 7f 22                         jg      0x286 <_JIT_ENTRY+0x286>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 27d: 4c 89 ea                      movq    %r13, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 45 00                   movq    (%r13), %rax
// 286: 49 83 c4 f8                   addq    $-0x8, %r12
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 21                         js      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 49 ff 4d 00                   decq    (%r13)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 4c 89 ef                      movq    %r13, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 31 c0                         xorl    %eax, %eax
// 2b1: 4c 39 ed                      cmpq    %r13, %rbp
// 2b4: 0f 94 c0                      sete    %al
// 2b7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b9:  R_X86_64_64  _JIT_OPARG
// 2c1: 66 39 c8                      cmpw    %cx, %ax
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_FalseStruct
// 2ce: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002d0:  R_X86_64_64  _Py_TrueStruct
// 2d8: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 2dc: 0f b7 c1                      movzwl  %cx, %eax
// 2df: 48 c1 e0 03                   shlq    $0x3, %rax
// 2e3: 49 29 c7                      subq    %rax, %r15
// 2e6: 49 89 57 f0                   movq    %rdx, -0x10(%r15)
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _JIT_CONTINUE
// 2f4: 48 89 df                      movq    %rbx, %rdi
// 2f7: 4c 89 e6                      movq    %r12, %rsi
// 2fa: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ff: 48 83 c4 18                   addq    $0x18, %rsp
// 303: 5b                            popq    %rbx
// 304: 41 5c                         popq    %r12
// 306: 41 5d                         popq    %r13
// 308: 41 5e                         popq    %r14
// 30a: 41 5f                         popq    %r15
// 30c: 5d                            popq    %rbp
// 30d: ff e0                         jmpq    *%rax
// 30f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_IS_OP_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4c, 0x39, 0xed, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0x0f, 0xb7, 0xc1, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x57, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_IS_OP_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_IS_OP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_IS_OP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020a:  R_X86_64_64  PyListIter_Type
// 212: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 216: 74 2c                         je      0x244 <_JIT_ENTRY+0x244>
// 218: 48 29 de                      subq    %rbx, %rsi
// 21b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 21f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 223: 89 73 40                      movl    %esi, 0x40(%rbx)
// 226: 48 8b 03                      movq    (%rbx), %rax
// 229: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022b:  R_X86_64_64  _JIT_TARGET
// 233: 89 c9                         movl    %ecx, %ecx
// 235: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 239: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23f: e9 2f ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_CONTINUE
// 24e: 48 89 df                      movq    %rbx, %rdi
// 251: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020a:  R_X86_64_64  PyRangeIter_Type
// 212: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 216: 74 2c                         je      0x244 <_JIT_ENTRY+0x244>
// 218: 48 29 de                      subq    %rbx, %rsi
// 21b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 21f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 223: 89 73 40                      movl    %esi, 0x40(%rbx)
// 226: 48 8b 03                      movq    (%rbx), %rax
// 229: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022b:  R_X86_64_64  _JIT_TARGET
// 233: 89 c9                         movl    %ecx, %ecx
// 235: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 239: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23f: e9 2f ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_CONTINUE
// 24e: 48 89 df                      movq    %rbx, %rdi
// 251: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020a:  R_X86_64_64  PyTupleIter_Type
// 212: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 216: 74 2c                         je      0x244 <_JIT_ENTRY+0x244>
// 218: 48 29 de                      subq    %rbx, %rsi
// 21b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 21f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 223: 89 73 40                      movl    %esi, 0x40(%rbx)
// 226: 48 8b 03                      movq    (%rbx), %rax
// 229: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022b:  R_X86_64_64  _JIT_TARGET
// 233: 89 c9                         movl    %ecx, %ecx
// 235: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 239: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23f: e9 2f ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_CONTINUE
// 24e: 48 89 df                      movq    %rbx, %rdi
// 251: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 48 f7 d9                      negq    %rcx
// 1fd: 49 8b 44 0e f8                movq    -0x8(%r14,%rcx), %rax
// 202: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 206: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 20a: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 20e: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 212: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 216: 4c 8b 3c ca                   movq    (%rdx,%rcx,8), %r15
// 21a: 41 8b 07                      movl    (%r15), %eax
// 21d: ff c0                         incl    %eax
// 21f: 74 0f                         je      0x230 <_JIT_ENTRY+0x230>
// 221: 41 89 07                      movl    %eax, (%r15)
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 22e: ff d0                         callq   *%rax
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_OPARG
// 23a: 0f b7 c0                      movzwl  %ax, %eax
// 23d: 48 c1 e0 03                   shlq    $0x3, %rax
// 241: 49 29 c6                      subq    %rax, %r14
// 244: 4d 89 3e                      movq    %r15, (%r14)
// 247: 49 83 c6 08                   addq    $0x8, %r14
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 48 89 df                      movq    %rbx, %rdi
// 258: 4c 89 f6                      movq    %r14, %rsi
// 25b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 260: 48 83 c4 18                   addq    $0x18, %rsp
// 264: 5b                            popq    %rbx
// 265: 41 5c                         popq    %r12
// 267: 41 5d                         popq    %r13
// 269: 41 5e                         popq    %r14
// 26b: 41 5f                         popq    %r15
// 26d: 5d                            popq    %rbp
// 26e: ff e0                         jmpq    *%rax
// 270: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST_code_body[625] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0e, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x3c, 0xca, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 0c 24                   decq    (%r12)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d7: 48 85 c9                      testq   %rcx, %rcx
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1ea: f7 d0                         notl    %eax
// 1ec: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f1: 48 98                         cltq
// 1f3: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1f7: 49 c1 e7 03                   shlq    $0x3, %r15
// 1fb: 4c 89 f8                      movq    %r15, %rax
// 1fe: 48 f7 d8                      negq    %rax
// 201: 49 8b 44 06 f8                movq    -0x8(%r14,%rax), %rax
// 206: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 20a: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 20e: 48 01 f9                      addq    %rdi, %rcx
// 211: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 215: 48 ff 48 20                   decq    0x20(%rax)
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  PyLong_FromLong
// 223: ff d0                         callq   *%rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 74 40                         je      0x26a <_JIT_ENTRY+0x26a>
// 22a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022c:  R_X86_64_64  _JIT_OPARG
// 234: 0f b7 c9                      movzwl  %cx, %ecx
// 237: 48 c1 e1 03                   shlq    $0x3, %rcx
// 23b: 49 29 ce                      subq    %rcx, %r14
// 23e: 49 89 06                      movq    %rax, (%r14)
// 241: 49 83 c6 08                   addq    $0x8, %r14
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 f6                      movq    %r14, %rsi
// 255: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 25a: 48 83 c4 18                   addq    $0x18, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: ff e0                         jmpq    *%rax
// 26a: 4d 29 fe                      subq    %r15, %r14
// 26d: e9 ed fe ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 272: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE_code_body[627] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0xc1, 0xe7, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x44, 0x06, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0xe9, 0xed, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 48 f7 d9                      negq    %rcx
// 1fd: 49 8b 44 0e f8                movq    -0x8(%r14,%rcx), %rax
// 202: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 206: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 20a: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 20e: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 212: 4c 8b 7c ca 18                movq    0x18(%rdx,%rcx,8), %r15
// 217: 41 8b 07                      movl    (%r15), %eax
// 21a: ff c0                         incl    %eax
// 21c: 74 0f                         je      0x22d <_JIT_ENTRY+0x22d>
// 21e: 41 89 07                      movl    %eax, (%r15)
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_OPARG
// 237: 0f b7 c0                      movzwl  %ax, %eax
// 23a: 48 c1 e0 03                   shlq    $0x3, %rax
// 23e: 49 29 c6                      subq    %rax, %r14
// 241: 4d 89 3e                      movq    %r15, (%r14)
// 244: 49 83 c6 08                   addq    $0x8, %r14
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_CONTINUE
// 252: 48 89 df                      movq    %rbx, %rdi
// 255: 4c 89 f6                      movq    %r14, %rsi
// 258: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 25d: 48 83 c4 18                   addq    $0x18, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0e, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x7c, 0xca, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 49 29 ce                      subq    %rcx, %r14
// 1fd: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 202: 49 8b 47 10                   movq    0x10(%r15), %rax
// 206: 48 8b 00                      movq    (%rax), %rax
// 209: 84 c0                         testb   %al, %al
// 20b: 74 17                         je      0x224 <_JIT_ENTRY+0x224>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_HandlePending
// 217: 4c 89 ff                      movq    %r15, %rdi
// 21a: ff d0                         callq   *%rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 0f 85 3b ff ff ff             jne     0x15f <_JIT_ENTRY+0x15f>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_CONTINUE
// 22e: 48 89 df                      movq    %rbx, %rdi
// 231: 4c 89 f6                      movq    %r14, %rsi
// 234: 4c 89 fa                      movq    %r15, %rdx
// 237: 48 83 c4 18                   addq    $0x18, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: ff e0                         jmpq    *%rax
// 247: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP_code_body[584] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x3b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LIST_APPEND
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LIST_APPEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 4c 8d 3c cd 00 00 00 00       leaq    (,%rcx,8), %r15
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 f7 da                      negq    %rdx
// 204: 49 8b 74 16 f8                movq    -0x8(%r14,%rdx), %rsi
// 209: 48 29 c8                      subq    %rcx, %rax
// 20c: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 210: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 214: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 218: 7e 11                         jle     0x22b <_JIT_ENTRY+0x22b>
// 21a: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 21e: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 222: 48 ff c0                      incq    %rax
// 225: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 229: eb 10                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 235: ff d0                         callq   *%rax
// 237: 85 c0                         testl   %eax, %eax
// 239: 78 2c                         js      0x267 <_JIT_ENTRY+0x267>
// 23b: 4d 29 fe                      subq    %r15, %r14
// 23e: 49 83 c6 f8                   addq    $-0x8, %r14
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_CONTINUE
// 24c: 48 89 df                      movq    %rbx, %rdi
// 24f: 4c 89 f6                      movq    %r14, %rsi
// 252: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 257: 48 83 c4 18                   addq    $0x18, %rsp
// 25b: 5b                            popq    %rbx
// 25c: 41 5c                         popq    %r12
// 25e: 41 5d                         popq    %r13
// 260: 41 5e                         popq    %r14
// 262: 41 5f                         popq    %r15
// 264: 5d                            popq    %rbp
// 265: ff e0                         jmpq    *%rax
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_OPARG
// 271: 0f b7 c0                      movzwl  %ax, %eax
// 274: 48 c1 e0 03                   shlq    $0x3, %rax
// 278: 49 29 c6                      subq    %rax, %r14
// 27b: 49 83 c6 f8                   addq    $-0x8, %r14
// 27f: e9 db fe ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 284: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LIST_APPEND_code_body[645] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x4c, 0x8d, 0x3c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xf7, 0xda, 0x49, 0x8b, 0x74, 0x16, 0xf8, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x2c, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0xdb, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LIST_APPEND_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LIST_APPEND_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LIST_APPEND_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LIST_EXTEND
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LIST_EXTEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 34 c4                   leaq    (%r12,%rax,8), %r14
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 f2                      movq    %r14, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x67
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e6                      movq    %r12, %r14
// 156: 4d 29 fe                      subq    %r15, %r14
// 159: 49 83 c6 b8                   addq    $-0x48, %r14
// 15d: 49 c1 ee 03                   shrq    $0x3, %r14
// 161: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1a8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 85 db                      testq   %rbx, %rbx
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 49 89 1c c4                   movq    %rbx, (%r12,%rax,8)
// 1ef: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1f7: 4d 89 e6                      movq    %r12, %r14
// 1fa: 49 29 d6                      subq    %rdx, %r14
// 1fd: 49 83 c6 f8                   addq    $-0x8, %r14
// 201: 48 f7 da                      negq    %rdx
// 204: 4d 8b 6c 14 f8                movq    -0x8(%r12,%rdx), %r13
// 209: 48 29 c8                      subq    %rcx, %rax
// 20c: 49 8b 3c c4                   movq    (%r12,%rax,8), %rdi
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _PyList_Extend
// 21a: 4c 89 ee                      movq    %r13, %rsi
// 21d: ff d0                         callq   *%rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 74 77                         je      0x29b <_JIT_ENTRY+0x29b>
// 224: 49 8b 45 00                   movq    (%r13), %rax
// 228: 48 85 c0                      testq   %rax, %rax
// 22b: 7f 22                         jg      0x24f <_JIT_ENTRY+0x24f>
// 22d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022f:  R_X86_64_64  .rodata.str1.1
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_NegativeRefcount
// 241: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 246: 4c 89 ea                      movq    %r13, %rdx
// 249: ff d0                         callq   *%rax
// 24b: 49 8b 45 00                   movq    (%r13), %rax
// 24f: 85 c0                         testl   %eax, %eax
// 251: 48 8b 1c 24                   movq    (%rsp), %rbx
// 255: 78 21                         js      0x278 <_JIT_ENTRY+0x278>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 4d 00                   decq    (%r13)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 ef                      movq    %r13, %rdi
// 276: ff d0                         callq   *%rax
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _JIT_CONTINUE
// 282: 4c 89 ff                      movq    %r15, %rdi
// 285: 4c 89 f6                      movq    %r14, %rsi
// 288: 48 89 da                      movq    %rbx, %rdx
// 28b: 48 83 c4 18                   addq    $0x18, %rsp
// 28f: 5b                            popq    %rbx
// 290: 41 5c                         popq    %r12
// 292: 41 5d                         popq    %r13
// 294: 41 5e                         popq    %r14
// 296: 41 5f                         popq    %r15
// 298: 5d                            popq    %rbp
// 299: ff e0                         jmpq    *%rax
// 29b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000029d:  R_X86_64_64  PyExc_TypeError
// 2a5: 48 8b 33                      movq    (%rbx), %rsi
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _PyErr_ExceptionMatches
// 2b2: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 85 c0                         testl   %eax, %eax
// 2ba: 74 5b                         je      0x317 <_JIT_ENTRY+0x317>
// 2bc: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2c0: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 2c8: 75 4d                         jne     0x317 <_JIT_ENTRY+0x317>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  PySequence_Check
// 2d4: 4c 89 ef                      movq    %r13, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 75 3a                         jne     0x317 <_JIT_ENTRY+0x317>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _PyErr_Clear
// 2e7: 4c 8b 24 24                   movq    (%rsp), %r12
// 2eb: 4c 89 e7                      movq    %r12, %rdi
// 2ee: ff d0                         callq   *%rax
// 2f0: 48 8b 33                      movq    (%rbx), %rsi
// 2f3: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2f7: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2fb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002fd:  R_X86_64_64  .rodata.str1.1+0x39
// 305: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000307:  R_X86_64_64  _PyErr_Format
// 30f: 4c 89 e7                      movq    %r12, %rdi
// 312: 31 c0                         xorl    %eax, %eax
// 314: 41 ff d0                      callq   *%r8
// 317: 49 8b 45 00                   movq    (%r13), %rax
// 31b: 48 85 c0                      testq   %rax, %rax
// 31e: 7f 22                         jg      0x342 <_JIT_ENTRY+0x342>
// 320: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000322:  R_X86_64_64  .rodata.str1.1
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_NegativeRefcount
// 334: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 339: 4c 89 ea                      movq    %r13, %rdx
// 33c: ff d0                         callq   *%rax
// 33e: 49 8b 45 00                   movq    (%r13), %rax
// 342: 85 c0                         testl   %eax, %eax
// 344: 0f 88 0c fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 354: ff d0                         callq   *%rax
// 356: 49 ff 4d 00                   decq    (%r13)
// 35a: 0f 85 f6 fd ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_Dealloc
// 36a: 4c 89 ef                      movq    %r13, %rdi
// 36d: ff d0                         callq   *%rax
// 36f: e9 e2 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 374: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LIST_EXTEND_code_body[885] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe6, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc4, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xd6, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xf7, 0xda, 0x4d, 0x8b, 0x6c, 0x14, 0xf8, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x3c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x77, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5b, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x33, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x0c, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xf6, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0xe2, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LIST_EXTEND_code_holes[35] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x67},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 8d: 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LIST_EXTEND_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LIST_EXTEND_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4c 8d 2c c3                   leaq    (%rbx,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e dd 00 00 00             jle     0x17f <_JIT_ENTRY+0x17f>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b2 00 00 00             jle     0x17f <_JIT_ENTRY+0x17f>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4c 29 f3                      subq    %r14, %rbx
// 162: 48 83 c3 b8                   addq    $-0x48, %rbx
// 166: 48 c1 eb 03                   shrq    $0x3, %rbx
// 16a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 16e: 31 c0                         xorl    %eax, %eax
// 170: 48 83 c4 18                   addq    $0x18, %rsp
// 174: 5b                            popq    %rbx
// 175: 41 5c                         popq    %r12
// 177: 41 5d                         popq    %r13
// 179: 41 5e                         popq    %r14
// 17b: 41 5f                         popq    %r15
// 17d: 5d                            popq    %rbp
// 17e: c3                            retq
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 48 85 c0                      testq   %rax, %rax
// 186: 7f 22                         jg      0x1aa <_JIT_ENTRY+0x1aa>
// 188: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018a:  R_X86_64_64  .rodata.str1.1
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_NegativeRefcount
// 19c: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a1: 4c 89 e2                      movq    %r12, %rdx
// 1a4: ff d0                         callq   *%rax
// 1a6: 49 8b 04 24                   movq    (%r12), %rax
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 0c 24                   decq    (%r12)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 e7                      movq    %r12, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 74 67                         je      0x240 <_JIT_ENTRY+0x240>
// 1d9: 49 89 45 00                   movq    %rax, (%r13)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  PyExc_AssertionError
// 1e7: 4c 8b 38                      movq    (%rax), %r15
// 1ea: 41 8b 07                      movl    (%r15), %eax
// 1ed: ff c0                         incl    %eax
// 1ef: 74 0f                         je      0x200 <_JIT_ENTRY+0x200>
// 1f1: 41 89 07                      movl    %eax, (%r15)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_OPARG
// 20a: 0f b7 c0                      movzwl  %ax, %eax
// 20d: 48 c1 e0 03                   shlq    $0x3, %rax
// 211: 48 29 c3                      subq    %rax, %rbx
// 214: 4c 89 3b                      movq    %r15, (%rbx)
// 217: 48 83 c3 08                   addq    $0x8, %rbx
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 4c 89 f7                      movq    %r14, %rdi
// 228: 48 89 de                      movq    %rbx, %rsi
// 22b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 230: 48 83 c4 18                   addq    $0x18, %rsp
// 234: 5b                            popq    %rbx
// 235: 41 5c                         popq    %r12
// 237: 41 5d                         popq    %r13
// 239: 41 5e                         popq    %r14
// 23b: 41 5f                         popq    %r15
// 23d: 5d                            popq    %rbp
// 23e: ff e0                         jmpq    *%rax
// 240: 4c 89 eb                      movq    %r13, %rbx
// 243: e9 17 ff ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 248: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR_code_body[585] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x8d, 0x2c, 0xc3, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb2, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x29, 0xc3, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xeb, 0xe9, 0x17, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 97: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9d: 0f 8e d3 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 0f b7 e8                      movzwl  %ax, %ebp
// b0: 48 ff c5                      incq    %rbp
// b3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1a8: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 89 c1                         movl    %eax, %ecx
// 1e1: f7 d1                         notl    %ecx
// 1e3: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1e9: 48 63 c9                      movslq  %ecx, %rcx
// 1ec: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1f0: 0f b7 c8                      movzwl  %ax, %ecx
// 1f3: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f7: 4d 89 f4                      movq    %r14, %r12
// 1fa: 49 29 cc                      subq    %rcx, %r12
// 1fd: 49 83 c4 f8                   addq    $-0x8, %r12
// 201: 48 f7 d9                      negq    %rcx
// 204: 4d 8b 6c 0e f8                movq    -0x8(%r14,%rcx), %r13
// 209: 48 8b 0b                      movq    (%rbx), %rcx
// 20c: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 210: 89 c2                         movl    %eax, %edx
// 212: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 218: 48 8b 74 91 18                movq    0x18(%rcx,%rdx,4), %rsi
// 21d: a8 01                         testb   $0x1, %al
// 21f: 74 2b                         je      0x24c <_JIT_ENTRY+0x24c>
// 221: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _PyObject_GetMethod
// 234: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 239: 4c 89 ef                      movq    %r13, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 85 c0                         testl   %eax, %eax
// 240: 74 42                         je      0x284 <_JIT_ENTRY+0x284>
// 242: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 247: e9 99 00 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  PyObject_GetAttr
// 256: 4c 89 ef                      movq    %r13, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 260: 49 8b 45 00                   movq    (%r13), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7f 46                         jg      0x2af <_JIT_ENTRY+0x2af>
// 269: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_NegativeRefcount
// 27d: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 282: eb 22                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 284: 49 8b 45 00                   movq    (%r13), %rax
// 288: 48 85 c0                      testq   %rax, %rax
// 28b: 7f 22                         jg      0x2af <_JIT_ENTRY+0x2af>
// 28d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028f:  R_X86_64_64  .rodata.str1.1
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_NegativeRefcount
// 2a1: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 2a6: 4c 89 ea                      movq    %r13, %rdx
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 8b 45 00                   movq    (%r13), %rax
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 78 21                         js      0x2d4 <_JIT_ENTRY+0x2d4>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 ff 4d 00                   decq    (%r13)
// 2c3: 75 0f                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_Dealloc
// 2cf: 4c 89 ef                      movq    %r13, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2d9: 48 85 c0                      testq   %rax, %rax
// 2dc: 0f 84 74 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2e2: 45 31 ed                      xorl    %r13d, %r13d
// 2e5: 49 89 04 24                   movq    %rax, (%r12)
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _JIT_OPARG
// 2f3: a8 01                         testb   $0x1, %al
// 2f5: 74 10                         je      0x307 <_JIT_ENTRY+0x307>
// 2f7: 0f b7 c0                      movzwl  %ax, %eax
// 2fa: 48 c1 e0 03                   shlq    $0x3, %rax
// 2fe: 4c 89 f1                      movq    %r14, %rcx
// 301: 48 29 c1                      subq    %rax, %rcx
// 304: 4c 89 29                      movq    %r13, (%rcx)
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_OPARG
// 311: 0f b7 c8                      movzwl  %ax, %ecx
// 314: 83 e0 01                      andl    $0x1, %eax
// 317: 48 29 c8                      subq    %rcx, %rax
// 31a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _JIT_CONTINUE
// 328: 48 89 df                      movq    %rbx, %rdi
// 32b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 330: 48 83 c4 28                   addq    $0x28, %rsp
// 334: 5b                            popq    %rbx
// 335: 41 5c                         popq    %r12
// 337: 41 5d                         popq    %r13
// 339: 41 5e                         popq    %r14
// 33b: 41 5f                         popq    %r15
// 33d: 5d                            popq    %rbp
// 33e: ff e0                         jmpq    *%rax
// 340: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_code_body[833] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0e, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x89, 0xc2, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x91, 0x18, 0xa8, 0x01, 0x74, 0x2b, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x42, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x74, 0xfe, 0xff, 0xff, 0x45, 0x31, 0xed, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x89, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 ff                      testq   %r15, %r15
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 48 f7 d9                      negq    %rcx
// 206: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 20b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000020d:  R_X86_64_64  _JIT_OPERAND
// 215: 41 8b 07                      movl    (%r15), %eax
// 218: ff c0                         incl    %eax
// 21a: 75 0f                         jne     0x22b <_JIT_ENTRY+0x22b>
// 21c: 49 8b 04 24                   movq    (%r12), %rax
// 220: 48 85 c0                      testq   %rax, %rax
// 223: 7e 1e                         jle     0x243 <_JIT_ENTRY+0x243>
// 225: 85 c0                         testl   %eax, %eax
// 227: 79 40                         jns     0x269 <_JIT_ENTRY+0x269>
// 229: eb 5f                         jmp     0x28a <_JIT_ENTRY+0x28a>
// 22b: 41 89 07                      movl    %eax, (%r15)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 238: ff d0                         callq   *%rax
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f e2                         jg      0x225 <_JIT_ENTRY+0x225>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 e7                      movq    %r12, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_OPARG
// 294: 0f b7 c8                      movzwl  %ax, %ecx
// 297: 48 c1 e1 03                   shlq    $0x3, %rcx
// 29b: 4c 89 f2                      movq    %r14, %rdx
// 29e: 48 29 ca                      subq    %rcx, %rdx
// 2a1: 4c 89 7a f8                   movq    %r15, -0x8(%rdx)
// 2a5: a8 01                         testb   $0x1, %al
// 2a7: 74 14                         je      0x2bd <_JIT_ENTRY+0x2bd>
// 2a9: 0f b7 c0                      movzwl  %ax, %eax
// 2ac: 48 c1 e0 03                   shlq    $0x3, %rax
// 2b0: 4c 89 f1                      movq    %r14, %rcx
// 2b3: 48 29 c1                      subq    %rax, %rcx
// 2b6: 48 c7 01 00 00 00 00          movq    $0x0, (%rcx)
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _JIT_OPARG
// 2c7: 0f b7 c8                      movzwl  %ax, %ecx
// 2ca: 83 e0 01                      andl    $0x1, %eax
// 2cd: 48 29 c8                      subq    %rcx, %rax
// 2d0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _JIT_CONTINUE
// 2de: 48 89 df                      movq    %rbx, %rdi
// 2e1: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e5: 48 83 c4 18                   addq    $0x18, %rsp
// 2e9: 5b                            popq    %rbx
// 2ea: 41 5c                         popq    %r12
// 2ec: 41 5d                         popq    %r13
// 2ee: 41 5e                         popq    %r14
// 2f0: 41 5f                         popq    %r15
// 2f2: 5d                            popq    %rbp
// 2f3: ff e0                         jmpq    *%rax
// 2f5: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS_code_body[758] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x4c, 0x89, 0x7a, 0xf8, 0xa8, 0x01, 0x74, 0x14, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xc7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 ff                      testq   %r15, %r15
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 f7                      movq    %r14, %r15
// 206: 49 29 cf                      subq    %rcx, %r15
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 211: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  _JIT_OPERAND
// 220: 0f b7 c9                      movzwl  %cx, %ecx
// 223: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// 228: 4d 85 ed                      testq   %r13, %r13
// 22b: 74 1a                         je      0x247 <_JIT_ENTRY+0x247>
// 22d: 41 8b 45 00                   movl    (%r13), %eax
// 231: ff c0                         incl    %eax
// 233: 75 3f                         jne     0x274 <_JIT_ENTRY+0x274>
// 235: 49 8b 04 24                   movq    (%r12), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 7e 4f                         jle     0x28d <_JIT_ENTRY+0x28d>
// 23e: 85 c0                         testl   %eax, %eax
// 240: 79 71                         jns     0x2b3 <_JIT_ENTRY+0x2b3>
// 242: e9 8d 00 00 00                jmp     0x2d4 <_JIT_ENTRY+0x2d4>
// 247: 49 29 df                      subq    %rbx, %r15
// 24a: 49 83 c7 b8                   addq    $-0x48, %r15
// 24e: 49 c1 ef 03                   shrq    $0x3, %r15
// 252: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 256: 48 8b 03                      movq    (%rbx), %rax
// 259: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025b:  R_X86_64_64  _JIT_TARGET
// 263: 89 c9                         movl    %ecx, %ecx
// 265: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 269: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26f: e9 03 ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 274: 41 89 45 00                   movl    %eax, (%r13)
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 8b 04 24                   movq    (%r12), %rax
// 288: 48 85 c0                      testq   %rax, %rax
// 28b: 7f b1                         jg      0x23e <_JIT_ENTRY+0x23e>
// 28d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028f:  R_X86_64_64  .rodata.str1.1
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_NegativeRefcount
// 2a1: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 2a6: 4c 89 e2                      movq    %r12, %rdx
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 8b 04 24                   movq    (%r12), %rax
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 78 21                         js      0x2d4 <_JIT_ENTRY+0x2d4>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 ff 0c 24                   decq    (%r12)
// 2c3: 75 0f                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_Dealloc
// 2cf: 4c 89 e7                      movq    %r12, %rdi
// 2d2: ff d0                         callq   *%rax
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _JIT_OPARG
// 2de: 0f b7 c8                      movzwl  %ax, %ecx
// 2e1: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2e5: 4c 89 f2                      movq    %r14, %rdx
// 2e8: 48 29 ca                      subq    %rcx, %rdx
// 2eb: 4c 89 6a f8                   movq    %r13, -0x8(%rdx)
// 2ef: a8 01                         testb   $0x1, %al
// 2f1: 74 07                         je      0x2fa <_JIT_ENTRY+0x2fa>
// 2f3: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 2fa: 0f b7 c8                      movzwl  %ax, %ecx
// 2fd: 83 e0 01                      andl    $0x1, %eax
// 300: 48 29 c8                      subq    %rcx, %rax
// 303: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 48 89 df                      movq    %rbx, %rdi
// 314: 48 8b 14 24                   movq    (%rsp), %rdx
// 318: 48 83 c4 18                   addq    $0x18, %rsp
// 31c: 5b                            popq    %rbx
// 31d: 41 5c                         popq    %r12
// 31f: 41 5d                         popq    %r13
// 321: 41 5e                         popq    %r14
// 323: 41 5f                         popq    %r15
// 325: 5d                            popq    %rbp
// 326: ff e0                         jmpq    *%rax
// 328: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE_code_body[809] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x03, 0xff, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x4c, 0x89, 0x6a, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 48 f7 d9                      negq    %rcx
// 1fd: 4d 8b 7c 0e f8                movq    -0x8(%r14,%rcx), %r15
// 202: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000204:  R_X86_64_64  _JIT_OPERAND
// 20c: 41 8b 04 24                   movl    (%r12), %eax
// 210: ff c0                         incl    %eax
// 212: 74 10                         je      0x224 <_JIT_ENTRY+0x224>
// 214: 41 89 04 24                   movl    %eax, (%r12)
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 222: ff d0                         callq   *%rax
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_OPARG
// 22e: 0f b7 c0                      movzwl  %ax, %eax
// 231: 48 c1 e0 03                   shlq    $0x3, %rax
// 235: 49 29 c6                      subq    %rax, %r14
// 238: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 23c: 4d 89 3e                      movq    %r15, (%r14)
// 23f: 49 83 c6 08                   addq    $0x8, %r14
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 48 89 df                      movq    %rbx, %rdi
// 250: 4c 89 f6                      movq    %r14, %rsi
// 253: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 258: 48 83 c4 18                   addq    $0x18, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x7c, 0x0e, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 48 f7 d9                      negq    %rcx
// 1fd: 4d 8b 7c 0e f8                movq    -0x8(%r14,%rcx), %r15
// 202: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000204:  R_X86_64_64  _JIT_OPERAND
// 20c: 41 8b 04 24                   movl    (%r12), %eax
// 210: ff c0                         incl    %eax
// 212: 74 10                         je      0x224 <_JIT_ENTRY+0x224>
// 214: 41 89 04 24                   movl    %eax, (%r12)
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 222: ff d0                         callq   *%rax
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_OPARG
// 22e: 0f b7 c0                      movzwl  %ax, %eax
// 231: 48 c1 e0 03                   shlq    $0x3, %rax
// 235: 49 29 c6                      subq    %rax, %r14
// 238: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 23c: 4d 89 3e                      movq    %r15, (%r14)
// 23f: 49 83 c6 08                   addq    $0x8, %r14
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 48 89 df                      movq    %rbx, %rdi
// 250: 4c 89 f6                      movq    %r14, %rsi
// 253: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 258: 48 83 c4 18                   addq    $0x18, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x7c, 0x0e, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 48 f7 d9                      negq    %rcx
// 1fd: 4d 8b 7c 0e f8                movq    -0x8(%r14,%rcx), %r15
// 202: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000204:  R_X86_64_64  _JIT_OPERAND
// 20c: 41 8b 04 24                   movl    (%r12), %eax
// 210: ff c0                         incl    %eax
// 212: 74 10                         je      0x224 <_JIT_ENTRY+0x224>
// 214: 41 89 04 24                   movl    %eax, (%r12)
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 222: ff d0                         callq   *%rax
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_OPARG
// 22e: 0f b7 c0                      movzwl  %ax, %eax
// 231: 48 c1 e0 03                   shlq    $0x3, %rax
// 235: 49 29 c6                      subq    %rax, %r14
// 238: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 23c: 4d 89 3e                      movq    %r15, (%r14)
// 23f: 49 83 c6 08                   addq    $0x8, %r14
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 48 89 df                      movq    %rbx, %rdi
// 250: 4c 89 f6                      movq    %r14, %rsi
// 253: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 258: 48 83 c4 18                   addq    $0x18, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x7c, 0x0e, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 ff                      testq   %r15, %r15
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 f7                      movq    %r14, %r15
// 206: 49 29 cf                      subq    %rcx, %r15
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 211: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 216: 48 8b 40 20                   movq    0x20(%rax), %rax
// 21a: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 21e: ba 01 00 00 00                movl    $0x1, %edx
// 223: 48 d3 e2                      shlq    %cl, %rdx
// 226: 48 01 c2                      addq    %rax, %rdx
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPERAND
// 233: 0f b7 c0                      movzwl  %ax, %eax
// 236: 48 c1 e0 04                   shlq    $0x4, %rax
// 23a: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 23f: 4d 85 ed                      testq   %r13, %r13
// 242: 74 1a                         je      0x25e <_JIT_ENTRY+0x25e>
// 244: 41 8b 45 00                   movl    (%r13), %eax
// 248: ff c0                         incl    %eax
// 24a: 75 3f                         jne     0x28b <_JIT_ENTRY+0x28b>
// 24c: 49 8b 04 24                   movq    (%r12), %rax
// 250: 48 85 c0                      testq   %rax, %rax
// 253: 7e 4f                         jle     0x2a4 <_JIT_ENTRY+0x2a4>
// 255: 85 c0                         testl   %eax, %eax
// 257: 79 71                         jns     0x2ca <_JIT_ENTRY+0x2ca>
// 259: e9 8d 00 00 00                jmp     0x2eb <_JIT_ENTRY+0x2eb>
// 25e: 49 29 df                      subq    %rbx, %r15
// 261: 49 83 c7 b8                   addq    $-0x48, %r15
// 265: 49 c1 ef 03                   shrq    $0x3, %r15
// 269: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 26d: 48 8b 03                      movq    (%rbx), %rax
// 270: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000272:  R_X86_64_64  _JIT_TARGET
// 27a: 89 c9                         movl    %ecx, %ecx
// 27c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 280: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 286: e9 ec fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 28b: 41 89 45 00                   movl    %eax, (%r13)
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 299: ff d0                         callq   *%rax
// 29b: 49 8b 04 24                   movq    (%r12), %rax
// 29f: 48 85 c0                      testq   %rax, %rax
// 2a2: 7f b1                         jg      0x255 <_JIT_ENTRY+0x255>
// 2a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a6:  R_X86_64_64  .rodata.str1.1
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_NegativeRefcount
// 2b8: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 2bd: 4c 89 e2                      movq    %r12, %rdx
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 8b 04 24                   movq    (%r12), %rax
// 2c6: 85 c0                         testl   %eax, %eax
// 2c8: 78 21                         js      0x2eb <_JIT_ENTRY+0x2eb>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 ff 0c 24                   decq    (%r12)
// 2da: 75 0f                         jne     0x2eb <_JIT_ENTRY+0x2eb>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_Dealloc
// 2e6: 4c 89 e7                      movq    %r12, %rdi
// 2e9: ff d0                         callq   *%rax
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _JIT_OPARG
// 2f5: 0f b7 c8                      movzwl  %ax, %ecx
// 2f8: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2fc: 4c 89 f2                      movq    %r14, %rdx
// 2ff: 48 29 ca                      subq    %rcx, %rdx
// 302: 4c 89 6a f8                   movq    %r13, -0x8(%rdx)
// 306: a8 01                         testb   $0x1, %al
// 308: 74 07                         je      0x311 <_JIT_ENTRY+0x311>
// 30a: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 311: 0f b7 c8                      movzwl  %ax, %ecx
// 314: 83 e0 01                      andl    $0x1, %eax
// 317: 48 29 c8                      subq    %rcx, %rax
// 31a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _JIT_CONTINUE
// 328: 48 89 df                      movq    %rbx, %rdi
// 32b: 48 8b 14 24                   movq    (%rsp), %rdx
// 32f: 48 83 c4 18                   addq    $0x18, %rsp
// 333: 5b                            popq    %rbx
// 334: 41 5c                         popq    %r12
// 336: 41 5d                         popq    %r13
// 338: 41 5e                         popq    %r14
// 33a: 41 5f                         popq    %r15
// 33c: 5d                            popq    %rbp
// 33d: ff e0                         jmpq    *%rax
// 33f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xec, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x4c, 0x89, 0x6a, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 48 f7 d9                      negq    %rcx
// 1fb: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 200: 49 8b 04 24                   movq    (%r12), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7f 22                         jg      0x22b <_JIT_ENTRY+0x22b>
// 209: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020b:  R_X86_64_64  .rodata.str1.1
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_NegativeRefcount
// 21d: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 222: 4c 89 e2                      movq    %r12, %rdx
// 225: ff d0                         callq   *%rax
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 78 21                         js      0x250 <_JIT_ENTRY+0x250>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 239: ff d0                         callq   *%rax
// 23b: 49 ff 0c 24                   decq    (%r12)
// 23f: 75 0f                         jne     0x250 <_JIT_ENTRY+0x250>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 e7                      movq    %r12, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000252:  R_X86_64_64  _JIT_OPERAND
// 25a: 41 8b 07                      movl    (%r15), %eax
// 25d: ff c0                         incl    %eax
// 25f: 74 0f                         je      0x270 <_JIT_ENTRY+0x270>
// 261: 41 89 07                      movl    %eax, (%r15)
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 26e: ff d0                         callq   *%rax
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 0f b7 c0                      movzwl  %ax, %eax
// 27d: 48 c1 e0 03                   shlq    $0x3, %rax
// 281: 49 29 c6                      subq    %rax, %r14
// 284: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_CONTINUE
// 292: 48 89 df                      movq    %rbx, %rdi
// 295: 4c 89 f6                      movq    %r14, %rsi
// 298: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 29d: 48 83 c4 18                   addq    $0x18, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 48 f7 d9                      negq    %rcx
// 1fb: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 200: 49 8b 04 24                   movq    (%r12), %rax
// 204: 48 85 c0                      testq   %rax, %rax
// 207: 7f 22                         jg      0x22b <_JIT_ENTRY+0x22b>
// 209: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020b:  R_X86_64_64  .rodata.str1.1
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_NegativeRefcount
// 21d: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 222: 4c 89 e2                      movq    %r12, %rdx
// 225: ff d0                         callq   *%rax
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 78 21                         js      0x250 <_JIT_ENTRY+0x250>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 239: ff d0                         callq   *%rax
// 23b: 49 ff 0c 24                   decq    (%r12)
// 23f: 75 0f                         jne     0x250 <_JIT_ENTRY+0x250>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 e7                      movq    %r12, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000252:  R_X86_64_64  _JIT_OPERAND
// 25a: 41 8b 07                      movl    (%r15), %eax
// 25d: ff c0                         incl    %eax
// 25f: 74 0f                         je      0x270 <_JIT_ENTRY+0x270>
// 261: 41 89 07                      movl    %eax, (%r15)
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 26e: ff d0                         callq   *%rax
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 0f b7 c0                      movzwl  %ax, %eax
// 27d: 48 c1 e0 03                   shlq    $0x3, %rax
// 281: 49 29 c6                      subq    %rax, %r14
// 284: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _JIT_CONTINUE
// 292: 48 89 df                      movq    %rbx, %rdi
// 295: 4c 89 f6                      movq    %r14, %rsi
// 298: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 29d: 48 83 c4 18                   addq    $0x18, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 ff                      testq   %r15, %r15
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 f7                      movq    %r14, %r15
// 206: 49 29 cf                      subq    %rcx, %r15
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_OPERAND
// 21b: 0f b7 c0                      movzwl  %ax, %eax
// 21e: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 222: 4d 85 ed                      testq   %r13, %r13
// 225: 74 1a                         je      0x241 <_JIT_ENTRY+0x241>
// 227: 41 8b 45 00                   movl    (%r13), %eax
// 22b: ff c0                         incl    %eax
// 22d: 75 3f                         jne     0x26e <_JIT_ENTRY+0x26e>
// 22f: 49 8b 04 24                   movq    (%r12), %rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 7e 4f                         jle     0x287 <_JIT_ENTRY+0x287>
// 238: 85 c0                         testl   %eax, %eax
// 23a: 79 71                         jns     0x2ad <_JIT_ENTRY+0x2ad>
// 23c: e9 8d 00 00 00                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 241: 49 29 df                      subq    %rbx, %r15
// 244: 49 83 c7 b8                   addq    $-0x48, %r15
// 248: 49 c1 ef 03                   shrq    $0x3, %r15
// 24c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 250: 48 8b 03                      movq    (%rbx), %rax
// 253: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000255:  R_X86_64_64  _JIT_TARGET
// 25d: 89 c9                         movl    %ecx, %ecx
// 25f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 263: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 269: e9 09 ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 26e: 41 89 45 00                   movl    %eax, (%r13)
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 04 24                   movq    (%r12), %rax
// 282: 48 85 c0                      testq   %rax, %rax
// 285: 7f b1                         jg      0x238 <_JIT_ENTRY+0x238>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 2a0: 4c 89 e2                      movq    %r12, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 04 24                   movq    (%r12), %rax
// 2a9: 85 c0                         testl   %eax, %eax
// 2ab: 78 21                         js      0x2ce <_JIT_ENTRY+0x2ce>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b7: ff d0                         callq   *%rax
// 2b9: 49 ff 0c 24                   decq    (%r12)
// 2bd: 75 0f                         jne     0x2ce <_JIT_ENTRY+0x2ce>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_Dealloc
// 2c9: 4c 89 e7                      movq    %r12, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_OPARG
// 2d8: 0f b7 c8                      movzwl  %ax, %ecx
// 2db: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2df: 4c 89 f2                      movq    %r14, %rdx
// 2e2: 48 29 ca                      subq    %rcx, %rdx
// 2e5: 4c 89 6a f8                   movq    %r13, -0x8(%rdx)
// 2e9: a8 01                         testb   $0x1, %al
// 2eb: 74 07                         je      0x2f4 <_JIT_ENTRY+0x2f4>
// 2ed: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 2f4: 0f b7 c8                      movzwl  %ax, %ecx
// 2f7: 83 e0 01                      andl    $0x1, %eax
// 2fa: 48 29 c8                      subq    %rcx, %rax
// 2fd: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _JIT_CONTINUE
// 30b: 48 89 df                      movq    %rbx, %rdi
// 30e: 48 8b 14 24                   movq    (%rsp), %rdx
// 312: 48 83 c4 18                   addq    $0x18, %rsp
// 316: 5b                            popq    %rbx
// 317: 41 5c                         popq    %r12
// 319: 41 5d                         popq    %r13
// 31b: 41 5e                         popq    %r14
// 31d: 41 5f                         popq    %r15
// 31f: 5d                            popq    %rbp
// 320: ff e0                         jmpq    *%rax
// 322: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT_code_body[803] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4f, 0x85, 0xc0, 0x79, 0x71, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x09, 0xff, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x4c, 0x89, 0x6a, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 ff                      testq   %r15, %r15
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 f7                      movq    %r14, %r15
// 206: 49 29 cf                      subq    %rcx, %r15
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 211: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 216: 48 8b 50 20                   movq    0x20(%rax), %rdx
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_OPERAND
// 224: 0f b7 c8                      movzwl  %ax, %ecx
// 227: 48 8b 03                      movq    (%rbx), %rax
// 22a: 48 39 4a 18                   cmpq    %rcx, 0x18(%rdx)
// 22e: 0f 86 a8 00 00 00             jbe     0x2dc <_JIT_ENTRY+0x2dc>
// 234: 48 8b 70 20                   movq    0x20(%rax), %rsi
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: 81 e7 fe ff 00 00             andl    $0xfffe, %edi           # imm = 0xFFFE
// 248: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 24c: 41 b8 01 00 00 00             movl    $0x1, %r8d
// 252: 49 d3 e0                      shlq    %cl, %r8
// 255: 48 8b 74 be 18                movq    0x18(%rsi,%rdi,4), %rsi
// 25a: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
// 25e: 4a 8d 4c 02 20                leaq    0x20(%rdx,%r8), %rcx
// 263: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000265:  R_X86_64_64  _JIT_OPERAND
// 26d: 0f b7 d2                      movzwl  %dx, %edx
// 270: 74 24                         je      0x296 <_JIT_ENTRY+0x296>
// 272: 48 c1 e2 04                   shlq    $0x4, %rdx
// 276: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
// 27a: 75 60                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 27c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000027e:  R_X86_64_64  _JIT_OPERAND
// 286: 0f b7 d2                      movzwl  %dx, %edx
// 289: 48 c1 e2 04                   shlq    $0x4, %rdx
// 28d: 48 01 d1                      addq    %rdx, %rcx
// 290: 48 83 c1 08                   addq    $0x8, %rcx
// 294: eb 24                         jmp     0x2ba <_JIT_ENTRY+0x2ba>
// 296: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 29a: 48 39 74 d1 08                cmpq    %rsi, 0x8(%rcx,%rdx,8)
// 29f: 75 3b                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2a1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a3:  R_X86_64_64  _JIT_OPERAND
// 2ab: 0f b7 d2                      movzwl  %dx, %edx
// 2ae: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 2b2: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 2b6: 48 83 c1 10                   addq    $0x10, %rcx
// 2ba: 4c 8b 29                      movq    (%rcx), %r13
// 2bd: 4d 85 ed                      testq   %r13, %r13
// 2c0: 74 1a                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2c2: 41 8b 45 00                   movl    (%r13), %eax
// 2c6: ff c0                         incl    %eax
// 2c8: 75 3c                         jne     0x306 <_JIT_ENTRY+0x306>
// 2ca: 49 8b 04 24                   movq    (%r12), %rax
// 2ce: 48 85 c0                      testq   %rax, %rax
// 2d1: 7e 4c                         jle     0x31f <_JIT_ENTRY+0x31f>
// 2d3: 85 c0                         testl   %eax, %eax
// 2d5: 79 6e                         jns     0x345 <_JIT_ENTRY+0x345>
// 2d7: e9 8a 00 00 00                jmp     0x366 <_JIT_ENTRY+0x366>
// 2dc: 49 29 df                      subq    %rbx, %r15
// 2df: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e3: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e7: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ed:  R_X86_64_64  _JIT_TARGET
// 2f5: 89 c9                         movl    %ecx, %ecx
// 2f7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2fb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 301: e9 71 fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 306: 41 89 45 00                   movl    %eax, (%r13)
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 314: ff d0                         callq   *%rax
// 316: 49 8b 04 24                   movq    (%r12), %rax
// 31a: 48 85 c0                      testq   %rax, %rax
// 31d: 7f b4                         jg      0x2d3 <_JIT_ENTRY+0x2d3>
// 31f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000321:  R_X86_64_64  .rodata.str1.1
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_NegativeRefcount
// 333: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 338: 4c 89 e2                      movq    %r12, %rdx
// 33b: ff d0                         callq   *%rax
// 33d: 49 8b 04 24                   movq    (%r12), %rax
// 341: 85 c0                         testl   %eax, %eax
// 343: 78 21                         js      0x366 <_JIT_ENTRY+0x366>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34f: ff d0                         callq   *%rax
// 351: 49 ff 0c 24                   decq    (%r12)
// 355: 75 0f                         jne     0x366 <_JIT_ENTRY+0x366>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_Dealloc
// 361: 4c 89 e7                      movq    %r12, %rdi
// 364: ff d0                         callq   *%rax
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _JIT_OPARG
// 370: 0f b7 c8                      movzwl  %ax, %ecx
// 373: 48 c1 e1 03                   shlq    $0x3, %rcx
// 377: 4c 89 f2                      movq    %r14, %rdx
// 37a: 48 29 ca                      subq    %rcx, %rdx
// 37d: 4c 89 6a f8                   movq    %r13, -0x8(%rdx)
// 381: a8 01                         testb   $0x1, %al
// 383: 74 07                         je      0x38c <_JIT_ENTRY+0x38c>
// 385: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// 38c: 0f b7 c8                      movzwl  %ax, %ecx
// 38f: 83 e0 01                      andl    $0x1, %eax
// 392: 48 29 c8                      subq    %rcx, %rax
// 395: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 399: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039b:  R_X86_64_64  _JIT_CONTINUE
// 3a3: 48 89 df                      movq    %rbx, %rdi
// 3a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 3aa: 48 83 c4 18                   addq    $0x18, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT_code_body[955] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x50, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x03, 0x48, 0x39, 0x4a, 0x18, 0x0f, 0x86, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x70, 0x20, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x48, 0x8b, 0x74, 0xbe, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d, 0x4c, 0x02, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x24, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x75, 0x60, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x01, 0xd1, 0x48, 0x83, 0xc1, 0x08, 0xeb, 0x24, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x74, 0xd1, 0x08, 0x75, 0x3b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x83, 0xc1, 0x10, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x3c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4c, 0x85, 0xc0, 0x79, 0x6e, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x71, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x4c, 0x89, 0x6a, 0xf8, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x321, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: f7 d0                         notl    %eax
// 58: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5d: 48 98                         cltq
// 5f: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 63: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 68: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 76: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000078:  R_X86_64_64  _PyDict_FromItems
// 80: be 01 00 00 00                movl    $0x1, %esi
// 85: b9 01 00 00 00                movl    $0x1, %ecx
// 8a: 4c 89 ea                      movq    %r13, %rdx
// 8d: ff d0                         callq   *%rax
// 8f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 94: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9b: 0f 8e e1 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _JIT_OPARG
// ab: 44 0f b7 f8                   movzwl  %ax, %r15d
// af: 49 ff c7                      incq    %r15
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x53
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 0c 24                   decq    (%r12)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1d7: 48 85 c9                      testq   %rcx, %rcx
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 44 89 f8                      movl    %r15d, %eax
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1f6: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  PyMapping_GetOptionalItem
// 204: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000206:  R_X86_64_64  _PyRuntime
// 20e: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 215: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 21a: ff d0                         callq   *%rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 70                         js      0x290 <_JIT_ENTRY+0x290>
// 220: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 74 3f                         je      0x269 <_JIT_ENTRY+0x269>
// 22a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022c:  R_X86_64_64  _JIT_OPARG
// 234: 0f b7 c9                      movzwl  %cx, %ecx
// 237: 48 c1 e1 03                   shlq    $0x3, %rcx
// 23b: 49 29 ce                      subq    %rcx, %r14
// 23e: 49 89 06                      movq    %rax, (%r14)
// 241: 49 83 c6 08                   addq    $0x8, %r14
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 f6                      movq    %r14, %rsi
// 255: 48 8b 14 24                   movq    (%rsp), %rdx
// 259: 48 83 c4 18                   addq    $0x18, %rsp
// 25d: 5b                            popq    %rbx
// 25e: 41 5c                         popq    %r12
// 260: 41 5d                         popq    %r13
// 262: 41 5e                         popq    %r14
// 264: 41 5f                         popq    %r15
// 266: 5d                            popq    %rbp
// 267: ff e0                         jmpq    *%rax
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  PyExc_NameError
// 273: 48 8b 30                      movq    (%rax), %rsi
// 276: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000278:  R_X86_64_64  .rodata.str1.1+0x39
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _PyErr_SetString
// 28a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 28e: ff d0                         callq   *%rax
// 290: 41 0f b7 c7                   movzwl  %r15w, %eax
// 294: 48 c1 e0 03                   shlq    $0x3, %rax
// 298: 49 29 c6                      subq    %rax, %r14
// 29b: e9 bf fe ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 2a0: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x86, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x89, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x70, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x3f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x41, 0x0f, 0xb7, 0xc7, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0xe9, 0xbf, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x53},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 79: 00 00 00 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_CONST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_CONST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4c 8d 2c c3                   leaq    (%rbx,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e dd 00 00 00             jle     0x17f <_JIT_ENTRY+0x17f>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b2 00 00 00             jle     0x17f <_JIT_ENTRY+0x17f>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4c 29 f3                      subq    %r14, %rbx
// 162: 48 83 c3 b8                   addq    $-0x48, %rbx
// 166: 48 c1 eb 03                   shrq    $0x3, %rbx
// 16a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 16e: 31 c0                         xorl    %eax, %eax
// 170: 48 83 c4 18                   addq    $0x18, %rsp
// 174: 5b                            popq    %rbx
// 175: 41 5c                         popq    %r12
// 177: 41 5d                         popq    %r13
// 179: 41 5e                         popq    %r14
// 17b: 41 5f                         popq    %r15
// 17d: 5d                            popq    %rbp
// 17e: c3                            retq
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 48 85 c0                      testq   %rax, %rax
// 186: 7f 22                         jg      0x1aa <_JIT_ENTRY+0x1aa>
// 188: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018a:  R_X86_64_64  .rodata.str1.1
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_NegativeRefcount
// 19c: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a1: 4c 89 e2                      movq    %r12, %rdx
// 1a4: ff d0                         callq   *%rax
// 1a6: 49 8b 04 24                   movq    (%r12), %rax
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 0c 24                   decq    (%r12)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 e7                      movq    %r12, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 74 73                         je      0x24c <_JIT_ENTRY+0x24c>
// 1d9: 49 89 45 00                   movq    %rax, (%r13)
// 1dd: 49 8b 06                      movq    (%r14), %rax
// 1e0: 48 8b 40 18                   movq    0x18(%rax), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_OPARG
// 1ee: 0f b7 c9                      movzwl  %cx, %ecx
// 1f1: 4c 8b 7c c8 18                movq    0x18(%rax,%rcx,8), %r15
// 1f6: 41 8b 07                      movl    (%r15), %eax
// 1f9: ff c0                         incl    %eax
// 1fb: 74 0f                         je      0x20c <_JIT_ENTRY+0x20c>
// 1fd: 41 89 07                      movl    %eax, (%r15)
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_OPARG
// 216: 0f b7 c0                      movzwl  %ax, %eax
// 219: 48 c1 e0 03                   shlq    $0x3, %rax
// 21d: 48 29 c3                      subq    %rax, %rbx
// 220: 4c 89 3b                      movq    %r15, (%rbx)
// 223: 48 83 c3 08                   addq    $0x8, %rbx
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_CONTINUE
// 231: 4c 89 f7                      movq    %r14, %rdi
// 234: 48 89 de                      movq    %rbx, %rsi
// 237: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 23c: 48 83 c4 18                   addq    $0x18, %rsp
// 240: 5b                            popq    %rbx
// 241: 41 5c                         popq    %r12
// 243: 41 5d                         popq    %r13
// 245: 41 5e                         popq    %r14
// 247: 41 5f                         popq    %r15
// 249: 5d                            popq    %rbp
// 24a: ff e0                         jmpq    *%rax
// 24c: 4c 89 eb                      movq    %r13, %rbx
// 24f: e9 0b ff ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 254: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_CONST_code_body[597] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x8d, 0x2c, 0xc3, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb2, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x73, 0x49, 0x89, 0x45, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x7c, 0xc8, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x29, 0xc3, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xeb, 0xe9, 0x0b, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_CONST_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_CONST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_CONST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_DEREF
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c1                      movzwl  %cx, %eax
// 1e9: f7 d1                         notl    %ecx
// 1eb: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1f1: 48 63 c9                      movslq  %ecx, %rcx
// 1f4: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1f8: 48 8b 4c c3 48                movq    0x48(%rbx,%rax,8), %rcx
// 1fd: 4c 8b 79 10                   movq    0x10(%rcx), %r15
// 201: 4d 85 ff                      testq   %r15, %r15
// 204: 74 56                         je      0x25c <_JIT_ENTRY+0x25c>
// 206: 41 8b 07                      movl    (%r15), %eax
// 209: ff c0                         incl    %eax
// 20b: 74 0f                         je      0x21c <_JIT_ENTRY+0x21c>
// 20d: 41 89 07                      movl    %eax, (%r15)
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 21a: ff d0                         callq   *%rax
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 0f b7 c0                      movzwl  %ax, %eax
// 229: 48 c1 e0 03                   shlq    $0x3, %rax
// 22d: 49 29 c6                      subq    %rax, %r14
// 230: 4d 89 3e                      movq    %r15, (%r14)
// 233: 49 83 c6 08                   addq    $0x8, %r14
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_CONTINUE
// 241: 48 89 df                      movq    %rbx, %rdi
// 244: 4c 89 f6                      movq    %r14, %rsi
// 247: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 24c: 48 83 c4 18                   addq    $0x18, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: ff e0                         jmpq    *%rax
// 25c: 48 c1 e0 03                   shlq    $0x3, %rax
// 260: 49 29 c6                      subq    %rax, %r14
// 263: 48 8b 33                      movq    (%rbx), %rsi
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_OPARG
// 270: 0f b7 d0                      movzwl  %ax, %edx
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _PyEval_FormatExcUnbound
// 27d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 282: ff d0                         callq   *%rax
// 284: e9 d6 fe ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 289: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_DEREF_code_body[650] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x48, 0x8b, 0x4c, 0xc3, 0x48, 0x4c, 0x8b, 0x79, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x56, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0xe9, 0xd6, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_DEREF_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_DEREF_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_DEREF_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_FAST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4c 8d 2c c3                   leaq    (%rbx,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e dd 00 00 00             jle     0x17f <_JIT_ENTRY+0x17f>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b2 00 00 00             jle     0x17f <_JIT_ENTRY+0x17f>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4c 29 f3                      subq    %r14, %rbx
// 162: 48 83 c3 b8                   addq    $-0x48, %rbx
// 166: 48 c1 eb 03                   shrq    $0x3, %rbx
// 16a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 16e: 31 c0                         xorl    %eax, %eax
// 170: 48 83 c4 18                   addq    $0x18, %rsp
// 174: 5b                            popq    %rbx
// 175: 41 5c                         popq    %r12
// 177: 41 5d                         popq    %r13
// 179: 41 5e                         popq    %r14
// 17b: 41 5f                         popq    %r15
// 17d: 5d                            popq    %rbp
// 17e: c3                            retq
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 48 85 c0                      testq   %rax, %rax
// 186: 7f 22                         jg      0x1aa <_JIT_ENTRY+0x1aa>
// 188: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018a:  R_X86_64_64  .rodata.str1.1
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_NegativeRefcount
// 19c: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a1: 4c 89 e2                      movq    %r12, %rdx
// 1a4: ff d0                         callq   *%rax
// 1a6: 49 8b 04 24                   movq    (%r12), %rax
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 21                         js      0x1cf <_JIT_ENTRY+0x1cf>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 0c 24                   decq    (%r12)
// 1be: 75 0f                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 e7                      movq    %r12, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 74 6c                         je      0x245 <_JIT_ENTRY+0x245>
// 1d9: 49 89 45 00                   movq    %rax, (%r13)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 c0                      movzwl  %ax, %eax
// 1ea: 4d 8b 7c c6 48                movq    0x48(%r14,%rax,8), %r15
// 1ef: 41 8b 07                      movl    (%r15), %eax
// 1f2: ff c0                         incl    %eax
// 1f4: 74 0f                         je      0x205 <_JIT_ENTRY+0x205>
// 1f6: 41 89 07                      movl    %eax, (%r15)
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 203: ff d0                         callq   *%rax
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_OPARG
// 20f: 0f b7 c0                      movzwl  %ax, %eax
// 212: 48 c1 e0 03                   shlq    $0x3, %rax
// 216: 48 29 c3                      subq    %rax, %rbx
// 219: 4c 89 3b                      movq    %r15, (%rbx)
// 21c: 48 83 c3 08                   addq    $0x8, %rbx
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_CONTINUE
// 22a: 4c 89 f7                      movq    %r14, %rdi
// 22d: 48 89 de                      movq    %rbx, %rsi
// 230: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 235: 48 83 c4 18                   addq    $0x18, %rsp
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: 5d                            popq    %rbp
// 243: ff e0                         jmpq    *%rax
// 245: 4c 89 eb                      movq    %r13, %rbx
// 248: e9 12 ff ff ff                jmp     0x15f <_JIT_ENTRY+0x15f>
// 24d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FAST_code_body[590] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x8d, 0x2c, 0xc3, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb2, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x6c, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x7c, 0xc6, 0x48, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x29, 0xc3, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x89, 0xeb, 0xe9, 0x12, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FAST_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FAST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FAST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fe: 4c 89 f2                      movq    %r14, %rdx
// 201: 48 29 c2                      subq    %rax, %rdx
// 204: 48 8b 74 cb 48                movq    0x48(%rbx,%rcx,8), %rsi
// 209: 48 c7 44 cb 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rcx,8)
// 212: 48 89 32                      movq    %rsi, (%rdx)
// 215: 48 f7 d8                      negq    %rax
// 218: 49 8d 34 06                   leaq    (%r14,%rax), %rsi
// 21c: 48 83 c6 08                   addq    $0x8, %rsi
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_CONTINUE
// 22a: 48 89 df                      movq    %rbx, %rdi
// 22d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 232: 48 83 c4 18                   addq    $0x18, %rsp
// 236: 5b                            popq    %rbx
// 237: 41 5c                         popq    %r12
// 239: 41 5d                         popq    %r13
// 23b: 41 5e                         popq    %r14
// 23d: 41 5f                         popq    %r15
// 23f: 5d                            popq    %rbp
// 240: ff e0                         jmpq    *%rax
// 242: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR_code_body[579] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xc2, 0x48, 0x8b, 0x74, 0xcb, 0x48, 0x48, 0xc7, 0x44, 0xcb, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x32, 0x48, 0xf7, 0xd8, 0x49, 0x8d, 0x34, 0x06, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c1                      movzwl  %cx, %eax
// 1e7: f7 d1                         notl    %ecx
// 1e9: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ef: 48 63 c9                      movslq  %ecx, %rcx
// 1f2: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1f6: 4c 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %r15
// 1fb: 4d 85 ff                      testq   %r15, %r15
// 1fe: 74 56                         je      0x256 <_JIT_ENTRY+0x256>
// 200: 41 8b 07                      movl    (%r15), %eax
// 203: ff c0                         incl    %eax
// 205: 74 0f                         je      0x216 <_JIT_ENTRY+0x216>
// 207: 41 89 07                      movl    %eax, (%r15)
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 214: ff d0                         callq   *%rax
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _JIT_OPARG
// 220: 0f b7 c0                      movzwl  %ax, %eax
// 223: 48 c1 e0 03                   shlq    $0x3, %rax
// 227: 49 29 c6                      subq    %rax, %r14
// 22a: 4d 89 3e                      movq    %r15, (%r14)
// 22d: 49 83 c6 08                   addq    $0x8, %r14
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 df                      movq    %rbx, %rdi
// 23e: 4c 89 f6                      movq    %r14, %rsi
// 241: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 246: 48 83 c4 18                   addq    $0x18, %rsp
// 24a: 5b                            popq    %rbx
// 24b: 41 5c                         popq    %r12
// 24d: 41 5d                         popq    %r13
// 24f: 41 5e                         popq    %r14
// 251: 41 5f                         popq    %r15
// 253: 5d                            popq    %rbp
// 254: ff e0                         jmpq    *%rax
// 256: 48 c1 e0 03                   shlq    $0x3, %rax
// 25a: 49 29 c6                      subq    %rax, %r14
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  PyExc_UnboundLocalError
// 267: 4c 8b 38                      movq    (%rax), %r15
// 26a: 48 8b 03                      movq    (%rbx), %rax
// 26d: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: 0f b7 f0                      movzwl  %ax, %esi
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  PyTuple_GetItem
// 288: ff d0                         callq   *%rax
// 28a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x5f
// 294: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000296:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 29e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2a3: 4c 89 fe                      movq    %r15, %rsi
// 2a6: 48 89 c1                      movq    %rax, %rcx
// 2a9: 41 ff d0                      callq   *%r8
// 2ac: e9 ac fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2b1: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x4c, 0x8b, 0x7c, 0xc3, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x56, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0xe9, 0xac, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00cannot access local variable '%s' where it is not associated with a value\x00"
// a9: 00 00 00 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK_data_body[177] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 97: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9d: 0f 8e d3 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 0f b7 e8                      movzwl  %ax, %ebp
// b0: 48 ff c5                      incq    %rbp
// b3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1a8: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 f6                      testq   %r14, %r14
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ef: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1f7: 4d 89 fc                      movq    %r15, %r12
// 1fa: 49 29 c4                      subq    %rax, %r12
// 1fd: 48 f7 d8                      negq    %rax
// 200: 4d 8b 6c 07 f8                movq    -0x8(%r15,%rax), %r13
// 205: 48 8b 03                      movq    (%rbx), %rax
// 208: 48 8b 40 60                   movq    0x60(%rax), %rax
// 20c: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyMapping_GetOptionalItem
// 21b: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 220: 4c 89 ef                      movq    %r13, %rdi
// 223: ff d0                         callq   *%rax
// 225: 85 c0                         testl   %eax, %eax
// 227: 0f 88 29 ff ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 22d: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 233: 0f 84 92 00 00 00             je      0x2cb <_JIT_ENTRY+0x2cb>
// 239: 49 8b 45 00                   movq    (%r13), %rax
// 23d: 48 85 c0                      testq   %rax, %rax
// 240: 7f 22                         jg      0x264 <_JIT_ENTRY+0x264>
// 242: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000244:  R_X86_64_64  .rodata.str1.1
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_NegativeRefcount
// 256: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 25b: 4c 89 ea                      movq    %r13, %rdx
// 25e: ff d0                         callq   *%rax
// 260: 49 8b 45 00                   movq    (%r13), %rax
// 264: 85 c0                         testl   %eax, %eax
// 266: 78 21                         js      0x289 <_JIT_ENTRY+0x289>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 272: ff d0                         callq   *%rax
// 274: 49 ff 4d 00                   decq    (%r13)
// 278: 75 0f                         jne     0x289 <_JIT_ENTRY+0x289>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_Dealloc
// 284: 4c 89 ef                      movq    %r13, %rdi
// 287: ff d0                         callq   *%rax
// 289: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000290:  R_X86_64_64  _JIT_OPARG
// 298: 0f b7 c9                      movzwl  %cx, %ecx
// 29b: 48 c1 e1 03                   shlq    $0x3, %rcx
// 29f: 49 29 cf                      subq    %rcx, %r15
// 2a2: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _JIT_CONTINUE
// 2b0: 48 89 df                      movq    %rbx, %rdi
// 2b3: 4c 89 e6                      movq    %r12, %rsi
// 2b6: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2bb: 48 83 c4 28                   addq    $0x28, %rsp
// 2bf: 5b                            popq    %rbx
// 2c0: 41 5c                         popq    %r12
// 2c2: 41 5d                         popq    %r13
// 2c4: 41 5e                         popq    %r14
// 2c6: 41 5f                         popq    %r15
// 2c8: 5d                            popq    %rbp
// 2c9: ff e0                         jmpq    *%rax
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_OPARG
// 2d5: 0f b7 c0                      movzwl  %ax, %eax
// 2d8: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 2dd: 48 8b 40 10                   movq    0x10(%rax), %rax
// 2e1: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2e6: 48 85 c0                      testq   %rax, %rax
// 2e9: 74 1d                         je      0x308 <_JIT_ENTRY+0x308>
// 2eb: 8b 08                         movl    (%rax), %ecx
// 2ed: ff c1                         incl    %ecx
// 2ef: 0f 84 44 ff ff ff             je      0x239 <_JIT_ENTRY+0x239>
// 2f5: 89 08                         movl    %ecx, (%rax)
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 301: ff d0                         callq   *%rax
// 303: e9 31 ff ff ff                jmp     0x239 <_JIT_ENTRY+0x239>
// 308: 48 8b 33                      movq    (%rbx), %rsi
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _JIT_OPARG
// 315: 0f b7 d0                      movzwl  %ax, %edx
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 322: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 327: ff d0                         callq   *%rax
// 329: e9 28 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 32e: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF_code_body[815] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x07, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x29, 0xff, 0xff, 0xff, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x44, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x31, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0xe9, 0x28, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 97: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9d: 0f 8e d3 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 0f b7 e8                      movzwl  %ax, %ebp
// b0: 48 ff c5                      incq    %rbp
// b3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x56
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 4d 29 f4                      subq    %r14, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 1a8: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 85 db                      testq   %rbx, %rbx
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 1ef: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1f7: 4d 89 fc                      movq    %r15, %r12
// 1fa: 49 29 c4                      subq    %rax, %r12
// 1fd: 48 f7 d8                      negq    %rax
// 200: 4d 8b 6c 07 f8                movq    -0x8(%r15,%rax), %r13
// 205: 49 8b 06                      movq    (%r14), %rax
// 208: 48 8b 40 20                   movq    0x20(%rax), %rax
// 20c: 48 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %rbp
// 211: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000213:  R_X86_64_64  PyMapping_GetOptionalItem
// 21b: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 220: 4c 89 ef                      movq    %r13, %rdi
// 223: 48 89 ee                      movq    %rbp, %rsi
// 226: ff d3                         callq   *%rbx
// 228: 85 c0                         testl   %eax, %eax
// 22a: 0f 88 26 ff ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 230: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 236: 0f 84 92 00 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 23c: 49 8b 45 00                   movq    (%r13), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 7f 22                         jg      0x267 <_JIT_ENTRY+0x267>
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_NegativeRefcount
// 259: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 25e: 4c 89 ea                      movq    %r13, %rdx
// 261: ff d0                         callq   *%rax
// 263: 49 8b 45 00                   movq    (%r13), %rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 78 21                         js      0x28c <_JIT_ENTRY+0x28c>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 49 ff 4d 00                   decq    (%r13)
// 27b: 75 0f                         jne     0x28c <_JIT_ENTRY+0x28c>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_Dealloc
// 287: 4c 89 ef                      movq    %r13, %rdi
// 28a: ff d0                         callq   *%rax
// 28c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  _JIT_OPARG
// 29b: 0f b7 c9                      movzwl  %cx, %ecx
// 29e: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2a2: 49 29 cf                      subq    %rcx, %r15
// 2a5: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _JIT_CONTINUE
// 2b3: 4c 89 f7                      movq    %r14, %rdi
// 2b6: 4c 89 e6                      movq    %r12, %rsi
// 2b9: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  PyDict_GetItemRef
// 2dc: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 2e1: 48 89 ee                      movq    %rbp, %rsi
// 2e4: ff d0                         callq   *%rax
// 2e6: 85 c0                         testl   %eax, %eax
// 2e8: 0f 88 68 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 2ee: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 2f4: 0f 85 42 ff ff ff             jne     0x23c <_JIT_ENTRY+0x23c>
// 2fa: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 2fe: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 303: 48 89 ee                      movq    %rbp, %rsi
// 306: ff d3                         callq   *%rbx
// 308: 85 c0                         testl   %eax, %eax
// 30a: 0f 88 46 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 310: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 316: 0f 85 20 ff ff ff             jne     0x23c <_JIT_ENTRY+0x23c>
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  PyExc_NameError
// 326: 48 8b 30                      movq    (%rax), %rsi
// 329: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000032b:  R_X86_64_64  .rodata.str1.1+0x39
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 33d: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 342: 48 89 e9                      movq    %rbp, %rcx
// 345: ff d0                         callq   *%rax
// 347: e9 0a fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 34c: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[845] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc7, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x07, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x26, 0xff, 0xff, 0xff, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x68, 0xfe, 0xff, 0xff, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x42, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x46, 0xfe, 0xff, 0xff, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x20, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x0a, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00bad BUILD_CONST_KEY_MAP keys argument\x00"
// 7c: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x56
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 89 c1                         movl    %eax, %ecx
// 1e6: f7 d1                         notl    %ecx
// 1e8: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ee: 48 63 c9                      movslq  %ecx, %rcx
// 1f1: 4d 89 34 cf                   movq    %r14, (%r15,%rcx,8)
// 1f5: 0f b7 c8                      movzwl  %ax, %ecx
// 1f8: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fc: 4d 89 fc                      movq    %r15, %r12
// 1ff: 49 29 cc                      subq    %rcx, %r12
// 202: 48 8b 0b                      movq    (%rbx), %rcx
// 205: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 209: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 20d: 25 fe ff 00 00                andl    $0xfffe, %eax           # imm = 0xFFFE
// 212: 4c 8b 6c 81 18                movq    0x18(%rcx,%rax,4), %r13
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  PyDict_Type
// 221: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 225: 75 0e                         jne     0x235 <_JIT_ENTRY+0x235>
// 227: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 22b: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 22f: 0f 84 a6 00 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 235: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000237:  R_X86_64_64  PyMapping_GetOptionalItem
// 23f: 48 89 e2                      movq    %rsp, %rdx
// 242: 4c 89 ee                      movq    %r13, %rsi
// 245: 41 ff d6                      callq   *%r14
// 248: 85 c0                         testl   %eax, %eax
// 24a: 0f 88 10 ff ff ff             js      0x160 <_JIT_ENTRY+0x160>
// 250: 48 8b 04 24                   movq    (%rsp), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 74 62                         je      0x2bb <_JIT_ENTRY+0x2bb>
// 259: 49 89 04 24                   movq    %rax, (%r12)
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _JIT_OPARG
// 267: a8 01                         testb   $0x1, %al
// 269: 74 15                         je      0x280 <_JIT_ENTRY+0x280>
// 26b: 0f b7 c0                      movzwl  %ax, %eax
// 26e: 48 c1 e0 03                   shlq    $0x3, %rax
// 272: 4c 89 f9                      movq    %r15, %rcx
// 275: 48 29 c1                      subq    %rax, %rcx
// 278: 48 c7 41 08 00 00 00 00       movq    $0x0, 0x8(%rcx)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_OPARG
// 28a: 0f b7 c8                      movzwl  %ax, %ecx
// 28d: 83 e0 01                      andl    $0x1, %eax
// 290: ff c0                         incl    %eax
// 292: 48 29 c8                      subq    %rcx, %rax
// 295: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ab: 48 83 c4 18                   addq    $0x18, %rsp
// 2af: 5b                            popq    %rbx
// 2b0: 41 5c                         popq    %r12
// 2b2: 41 5d                         popq    %r13
// 2b4: 41 5e                         popq    %r14
// 2b6: 41 5f                         popq    %r15
// 2b8: 5d                            popq    %rbp
// 2b9: ff e0                         jmpq    *%rax
// 2bb: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 2bf: 48 89 e2                      movq    %rsp, %rdx
// 2c2: 4c 89 ee                      movq    %r13, %rsi
// 2c5: 41 ff d6                      callq   *%r14
// 2c8: 85 c0                         testl   %eax, %eax
// 2ca: 0f 88 90 fe ff ff             js      0x160 <_JIT_ENTRY+0x160>
// 2d0: 48 8b 04 24                   movq    (%rsp), %rax
// 2d4: 48 85 c0                      testq   %rax, %rax
// 2d7: 75 80                         jne     0x259 <_JIT_ENTRY+0x259>
// 2d9: eb 52                         jmp     0x32d <_JIT_ENTRY+0x32d>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _PyDict_LoadGlobal
// 2e5: 4c 89 ea                      movq    %r13, %rdx
// 2e8: ff d0                         callq   *%rax
// 2ea: 48 89 04 24                   movq    %rax, (%rsp)
// 2ee: 48 85 c0                      testq   %rax, %rax
// 2f1: 74 21                         je      0x314 <_JIT_ENTRY+0x314>
// 2f3: 8b 08                         movl    (%rax), %ecx
// 2f5: ff c1                         incl    %ecx
// 2f7: 0f 84 5c ff ff ff             je      0x259 <_JIT_ENTRY+0x259>
// 2fd: 89 08                         movl    %ecx, (%rax)
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 309: ff d0                         callq   *%rax
// 30b: 48 8b 04 24                   movq    (%rsp), %rax
// 30f: e9 45 ff ff ff                jmp     0x259 <_JIT_ENTRY+0x259>
// 314: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 319: 48 8b 40 68                   movq    0x68(%rax), %rax
// 31d: 48 85 c0                      testq   %rax, %rax
// 320: 74 0b                         je      0x32d <_JIT_ENTRY+0x32d>
// 322: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 327: 0f 85 33 fe ff ff             jne     0x160 <_JIT_ENTRY+0x160>
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  PyExc_NameError
// 337: 48 8b 30                      movq    (%rax), %rsi
// 33a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000033c:  R_X86_64_64  .rodata.str1.1+0x39
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 34e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 353: 4c 89 e9                      movq    %r13, %rcx
// 356: ff d0                         callq   *%rax
// 358: e9 03 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 35d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_code_body[862] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x34, 0xcf, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x25, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x81, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0x10, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x62, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x15, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x48, 0xc7, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0x90, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x75, 0x80, 0xeb, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x5c, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0xe9, 0x45, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x33, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x03, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00bad BUILD_CONST_KEY_MAP keys argument\x00"
// 7c: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 d0                      movzwl  %ax, %edx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1f8: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 1fc: 48 8b 40 20                   movq    0x20(%rax), %rax
// 200: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 204: be 01 00 00 00                movl    $0x1, %esi
// 209: 48 d3 e6                      shlq    %cl, %rsi
// 20c: 4d 89 f7                      movq    %r14, %r15
// 20f: 49 29 d7                      subq    %rdx, %r15
// 212: 48 01 c6                      addq    %rax, %rsi
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_OPERAND
// 21f: 0f b7 c0                      movzwl  %ax, %eax
// 222: 48 c1 e0 04                   shlq    $0x4, %rax
// 226: 4c 8b 64 30 28                movq    0x28(%rax,%rsi), %r12
// 22b: 4d 85 e4                      testq   %r12, %r12
// 22e: 74 79                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 230: 41 8b 04 24                   movl    (%r12), %eax
// 234: ff c0                         incl    %eax
// 236: 74 10                         je      0x248 <_JIT_ENTRY+0x248>
// 238: 41 89 04 24                   movl    %eax, (%r12)
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 246: ff d0                         callq   *%rax
// 248: 4d 89 27                      movq    %r12, (%r15)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_OPARG
// 255: a8 01                         testb   $0x1, %al
// 257: 74 15                         je      0x26e <_JIT_ENTRY+0x26e>
// 259: 0f b7 c0                      movzwl  %ax, %eax
// 25c: 48 c1 e0 03                   shlq    $0x3, %rax
// 260: 4c 89 f1                      movq    %r14, %rcx
// 263: 48 29 c1                      subq    %rax, %rcx
// 266: 48 c7 41 08 00 00 00 00       movq    $0x0, 0x8(%rcx)
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_OPARG
// 278: 0f b7 c8                      movzwl  %ax, %ecx
// 27b: 83 e0 01                      andl    $0x1, %eax
// 27e: ff c0                         incl    %eax
// 280: 48 29 c8                      subq    %rcx, %rax
// 283: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 49 29 df                      subq    %rbx, %r15
// 2ac: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b0: 49 c1 ef 03                   shrq    $0x3, %r15
// 2b4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2b8: 48 8b 03                      movq    (%rbx), %rax
// 2bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bd:  R_X86_64_64  _JIT_TARGET
// 2c5: 89 c9                         movl    %ecx, %ecx
// 2c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2d1: e9 9b fe ff ff                jmp     0x171 <_JIT_ENTRY+0x171>
// 2d6: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS_code_body[727] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xd7, 0x48, 0x01, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x30, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x79, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x15, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xc7, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x9b, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 d0                      movzwl  %ax, %edx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1f8: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 1fc: 48 8b 40 20                   movq    0x20(%rax), %rax
// 200: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 204: be 01 00 00 00                movl    $0x1, %esi
// 209: 48 d3 e6                      shlq    %cl, %rsi
// 20c: 4d 89 f7                      movq    %r14, %r15
// 20f: 49 29 d7                      subq    %rdx, %r15
// 212: 48 01 c6                      addq    %rax, %rsi
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_OPERAND
// 21f: 0f b7 c0                      movzwl  %ax, %eax
// 222: 48 c1 e0 04                   shlq    $0x4, %rax
// 226: 4c 8b 64 30 28                movq    0x28(%rax,%rsi), %r12
// 22b: 4d 85 e4                      testq   %r12, %r12
// 22e: 74 79                         je      0x2a9 <_JIT_ENTRY+0x2a9>
// 230: 41 8b 04 24                   movl    (%r12), %eax
// 234: ff c0                         incl    %eax
// 236: 74 10                         je      0x248 <_JIT_ENTRY+0x248>
// 238: 41 89 04 24                   movl    %eax, (%r12)
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 246: ff d0                         callq   *%rax
// 248: 4d 89 27                      movq    %r12, (%r15)
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_OPARG
// 255: a8 01                         testb   $0x1, %al
// 257: 74 15                         je      0x26e <_JIT_ENTRY+0x26e>
// 259: 0f b7 c0                      movzwl  %ax, %eax
// 25c: 48 c1 e0 03                   shlq    $0x3, %rax
// 260: 4c 89 f1                      movq    %r14, %rcx
// 263: 48 29 c1                      subq    %rax, %rcx
// 266: 48 c7 41 08 00 00 00 00       movq    $0x0, 0x8(%rcx)
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _JIT_OPARG
// 278: 0f b7 c8                      movzwl  %ax, %ecx
// 27b: 83 e0 01                      andl    $0x1, %eax
// 27e: ff c0                         incl    %eax
// 280: 48 29 c8                      subq    %rcx, %rax
// 283: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 49 29 df                      subq    %rbx, %r15
// 2ac: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b0: 49 c1 ef 03                   shrq    $0x3, %r15
// 2b4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2b8: 48 8b 03                      movq    (%rbx), %rax
// 2bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bd:  R_X86_64_64  _JIT_TARGET
// 2c5: 89 c9                         movl    %ecx, %ecx
// 2c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2d1: e9 9b fe ff ff                jmp     0x171 <_JIT_ENTRY+0x171>
// 2d6: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE_code_body[727] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xd7, 0x48, 0x01, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x30, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x79, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x15, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xc7, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x29, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x9b, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_LOCALS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_LOCALS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000001d:  R_X86_64_64  .rodata.str1.1+0x49
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyTuple_Type
// 2f: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 34: 0f 85 f0 01 00 00             jne     0x22a <_JIT_ENTRY+0x22a>
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 0f b7 c0                      movzwl  %ax, %eax
// 47: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 4c: 0f 85 d8 01 00 00             jne     0x22a <_JIT_ENTRY+0x22a>
// 52: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _JIT_OPARG
// 61: f7 d0                         notl    %eax
// 63: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 68: 48 98                         cltq
// 6a: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 6e: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 73: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000075:  R_X86_64_64  _JIT_OPARG
// 7d: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 81: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000083:  R_X86_64_64  _PyDict_FromItems
// 8b: be 01 00 00 00                movl    $0x1, %esi
// 90: b9 01 00 00 00                movl    $0x1, %ecx
// 95: 4c 89 ea                      movq    %r13, %rdx
// 98: ff d0                         callq   *%rax
// 9a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 9f: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// a6: 0f 8e 8d 00 00 00             jle     0x139 <_JIT_ENTRY+0x139>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_OPARG
// b6: 44 0f b7 f8                   movzwl  %ax, %r15d
// ba: 49 ff c7                      incq    %r15
// bd: eb 0a                         jmp     0xc9 <_JIT_ENTRY+0xc9>
// bf: 90                            nop
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 7e 70                         jle     0x139 <_JIT_ENTRY+0x139>
// c9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// cd: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d2: 48 8b 45 00                   movq    (%rbp), %rax
// d6: 48 85 c0                      testq   %rax, %rax
// d9: 7e 15                         jle     0xf0 <_JIT_ENTRY+0xf0>
// db: 85 c0                         testl   %eax, %eax
// dd: 78 e1                         js      0xc0 <_JIT_ENTRY+0xc0>
// df: eb 35                         jmp     0x116 <_JIT_ENTRY+0x116>
// e1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 22                         jg      0x164 <_JIT_ENTRY+0x164>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 16b: 78 21                         js      0x18e <_JIT_ENTRY+0x18e>
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 177: ff d0                         callq   *%rax
// 179: 49 ff 0c 24                   decq    (%r12)
// 17d: 75 0f                         jne     0x18e <_JIT_ENTRY+0x18e>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: 4d 85 ff                      testq   %r15, %r15
// 191: 0f 84 b2 00 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 89 c1                         movl    %eax, %ecx
// 1a3: f7 d1                         notl    %ecx
// 1a5: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ab: 48 63 c9                      movslq  %ecx, %rcx
// 1ae: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1b2: 4c 8b 7b 28                   movq    0x28(%rbx), %r15
// 1b6: 4d 85 ff                      testq   %r15, %r15
// 1b9: 74 56                         je      0x211 <_JIT_ENTRY+0x211>
// 1bb: 41 8b 07                      movl    (%r15), %eax
// 1be: ff c0                         incl    %eax
// 1c0: 74 0f                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1c2: 41 89 07                      movl    %eax, (%r15)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _JIT_OPARG
// 1db: 0f b7 c0                      movzwl  %ax, %eax
// 1de: 48 c1 e0 03                   shlq    $0x3, %rax
// 1e2: 49 29 c6                      subq    %rax, %r14
// 1e5: 4d 89 3e                      movq    %r15, (%r14)
// 1e8: 49 83 c6 08                   addq    $0x8, %r14
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_CONTINUE
// 1f6: 48 89 df                      movq    %rbx, %rdi
// 1f9: 4c 89 f6                      movq    %r14, %rsi
// 1fc: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 201: 48 83 c4 18                   addq    $0x18, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 0f b7 c0                      movzwl  %ax, %eax
// 214: 48 c1 e0 03                   shlq    $0x3, %rax
// 218: 49 29 c6                      subq    %rax, %r14
// 21b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021d:  R_X86_64_64  .rodata.str1.1+0x39
// 225: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyExc_SystemError
// 234: 48 8b 30                      movq    (%rax), %rsi
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _PyErr_SetString
// 241: 48 89 cf                      movq    %rcx, %rdi
// 244: ff d0                         callq   *%rax
// 246: 4d 89 f5                      movq    %r14, %r13
// 249: 49 29 dd                      subq    %rbx, %r13
// 24c: 49 83 c5 b8                   addq    $-0x48, %r13
// 250: 49 c1 ed 03                   shrq    $0x3, %r13
// 254: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 258: 31 c0                         xorl    %eax, %eax
// 25a: 48 83 c4 18                   addq    $0x18, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: c3                            retq
// 269: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_LOCALS_code_body[618] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xf0, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xd8, 0x01, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x0a, 0x90, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x70, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x15, 0x85, 0xc0, 0x78, 0xe1, 0xeb, 0x35, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x4c, 0x8b, 0x7b, 0x28, 0x4d, 0x85, 0xff, 0x74, 0x56, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_LOCALS_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x49},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 6f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_LOCALS_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_LOCALS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_NAME
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_NAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x66
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 44 89 f8                      movl    %r15d, %eax
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1f4: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1f8: 48 85 ff                      testq   %rdi, %rdi
// 1fb: 74 79                         je      0x276 <_JIT_ENTRY+0x276>
// 1fd: 48 8b 03                      movq    (%rbx), %rax
// 200: 48 8b 40 20                   movq    0x20(%rax), %rax
// 204: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000206:  R_X86_64_64  _JIT_OPARG
// 20e: 0f b7 c9                      movzwl  %cx, %ecx
// 211: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 216: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000218:  R_X86_64_64  PyMapping_GetOptionalItem
// 220: 48 89 e2                      movq    %rsp, %rdx
// 223: 4c 89 e6                      movq    %r12, %rsi
// 226: 41 ff d5                      callq   *%r13
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 71                         js      0x29e <_JIT_ENTRY+0x29e>
// 22d: 48 8b 04 24                   movq    (%rsp), %rax
// 231: 48 85 c0                      testq   %rax, %rax
// 234: 74 78                         je      0x2ae <_JIT_ENTRY+0x2ae>
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: 0f b7 c9                      movzwl  %cx, %ecx
// 243: 48 c1 e1 03                   shlq    $0x3, %rcx
// 247: 49 29 ce                      subq    %rcx, %r14
// 24a: 49 89 06                      movq    %rax, (%r14)
// 24d: 49 83 c6 08                   addq    $0x8, %r14
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_CONTINUE
// 25b: 48 89 df                      movq    %rbx, %rdi
// 25e: 4c 89 f6                      movq    %r14, %rsi
// 261: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 266: 48 83 c4 18                   addq    $0x18, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: ff e0                         jmpq    *%rax
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  PyExc_SystemError
// 280: 48 8b 30                      movq    (%rax), %rsi
// 283: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000285:  R_X86_64_64  .rodata.str1.1+0x56
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _PyErr_SetString
// 297: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 29c: ff d0                         callq   *%rax
// 29e: 41 0f b7 c7                   movzwl  %r15w, %eax
// 2a2: 48 c1 e0 03                   shlq    $0x3, %rax
// 2a6: 49 29 c6                      subq    %rax, %r14
// 2a9: e9 af fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2ae: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  PyDict_GetItemRef
// 2bc: 48 89 e2                      movq    %rsp, %rdx
// 2bf: 4c 89 e6                      movq    %r12, %rsi
// 2c2: ff d0                         callq   *%rax
// 2c4: 85 c0                         testl   %eax, %eax
// 2c6: 78 d6                         js      0x29e <_JIT_ENTRY+0x29e>
// 2c8: 48 8b 04 24                   movq    (%rsp), %rax
// 2cc: 48 85 c0                      testq   %rax, %rax
// 2cf: 0f 85 61 ff ff ff             jne     0x236 <_JIT_ENTRY+0x236>
// 2d5: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 2d9: 48 89 e2                      movq    %rsp, %rdx
// 2dc: 4c 89 e6                      movq    %r12, %rsi
// 2df: 41 ff d5                      callq   *%r13
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 b8                         js      0x29e <_JIT_ENTRY+0x29e>
// 2e6: 48 8b 04 24                   movq    (%rsp), %rax
// 2ea: 48 85 c0                      testq   %rax, %rax
// 2ed: 0f 85 43 ff ff ff             jne     0x236 <_JIT_ENTRY+0x236>
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  PyExc_NameError
// 2fd: 48 8b 30                      movq    (%rax), %rsi
// 300: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000302:  R_X86_64_64  .rodata.str1.1+0x39
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 314: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 319: 4c 89 e1                      movq    %r12, %rcx
// 31c: ff d0                         callq   *%rax
// 31e: e9 7b ff ff ff                jmp     0x29e <_JIT_ENTRY+0x29e>
// 323: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_NAME_code_body[804] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x86, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x89, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x74, 0x79, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x71, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x78, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x41, 0x0f, 0xb7, 0xc7, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0xe9, 0xaf, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xd6, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x61, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xb8, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x43, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x7b, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_NAME_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x66},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00bad BUILD_CONST_KEY_MAP keys argument\x00"
// 8c: 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_NAME_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_NAME_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c1                      movzwl  %cx, %eax
// 1f2: f7 d1                         notl    %ecx
// 1f4: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1fa: 48 63 c9                      movslq  %ecx, %rcx
// 1fd: 4d 89 34 cf                   movq    %r14, (%r15,%rcx,8)
// 201: 48 c1 e0 03                   shlq    $0x3, %rax
// 205: 4d 89 fc                      movq    %r15, %r12
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000020d:  R_X86_64_64  PySuper_Type
// 215: 49 39 6c 24 e8                cmpq    %rbp, -0x18(%r12)
// 21a: 75 12                         jne     0x22e <_JIT_ENTRY+0x22e>
// 21c: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 221: 49 8b 4d 08                   movq    0x8(%r13), %rcx
// 225: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 22c: 75 2d                         jne     0x25b <_JIT_ENTRY+0x25b>
// 22e: 49 29 dc                      subq    %rbx, %r12
// 231: 49 83 c4 b8                   addq    $-0x48, %r12
// 235: 49 c1 ec 03                   shrq    $0x3, %r12
// 239: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 23d: 48 8b 03                      movq    (%rbx), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: e9 1c ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 25b: 48 f7 d8                      negq    %rax
// 25e: 4d 8b 7c 07 f8                movq    -0x8(%r15,%rax), %r15
// 263: 48 8b 03                      movq    (%rbx), %rax
// 266: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026c:  R_X86_64_64  _JIT_OPARG
// 274: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 27a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _PySuper_Lookup
// 289: 4c 89 ef                      movq    %r13, %rdi
// 28c: 4c 89 fe                      movq    %r15, %rsi
// 28f: 31 c9                         xorl    %ecx, %ecx
// 291: ff d0                         callq   *%rax
// 293: 49 89 c6                      movq    %rax, %r14
// 296: 48 8b 45 00                   movq    (%rbp), %rax
// 29a: 48 85 c0                      testq   %rax, %rax
// 29d: 7f 22                         jg      0x2c1 <_JIT_ENTRY+0x2c1>
// 29f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a1:  R_X86_64_64  .rodata.str1.1
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_NegativeRefcount
// 2b3: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 2b8: 48 89 ea                      movq    %rbp, %rdx
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 8b 45 00                   movq    (%rbp), %rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 28                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 48 ff 4d 00                   decq    (%rbp)
// 2d5: 75 16                         jne     0x2ed <_JIT_ENTRY+0x2ed>
// 2d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d9:  R_X86_64_64  PySuper_Type
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_Dealloc
// 2eb: ff d0                         callq   *%rax
// 2ed: 49 8b 45 00                   movq    (%r13), %rax
// 2f1: 48 85 c0                      testq   %rax, %rax
// 2f4: 7f 22                         jg      0x318 <_JIT_ENTRY+0x318>
// 2f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f8:  R_X86_64_64  .rodata.str1.1
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_NegativeRefcount
// 30a: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 30f: 4c 89 ea                      movq    %r13, %rdx
// 312: ff d0                         callq   *%rax
// 314: 49 8b 45 00                   movq    (%r13), %rax
// 318: 85 c0                         testl   %eax, %eax
// 31a: 78 21                         js      0x33d <_JIT_ENTRY+0x33d>
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 326: ff d0                         callq   *%rax
// 328: 49 ff 4d 00                   decq    (%r13)
// 32c: 75 0f                         jne     0x33d <_JIT_ENTRY+0x33d>
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _Py_Dealloc
// 338: 4c 89 ef                      movq    %r13, %rdi
// 33b: ff d0                         callq   *%rax
// 33d: 49 8b 07                      movq    (%r15), %rax
// 340: 48 85 c0                      testq   %rax, %rax
// 343: 7f 21                         jg      0x366 <_JIT_ENTRY+0x366>
// 345: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000347:  R_X86_64_64  .rodata.str1.1
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_NegativeRefcount
// 359: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 35e: 4c 89 fa                      movq    %r15, %rdx
// 361: ff d0                         callq   *%rax
// 363: 49 8b 07                      movq    (%r15), %rax
// 366: 85 c0                         testl   %eax, %eax
// 368: 78 20                         js      0x38a <_JIT_ENTRY+0x38a>
// 36a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 374: ff d0                         callq   *%rax
// 376: 49 ff 0f                      decq    (%r15)
// 379: 75 0f                         jne     0x38a <_JIT_ENTRY+0x38a>
// 37b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037d:  R_X86_64_64  _Py_Dealloc
// 385: 4c 89 ff                      movq    %r15, %rdi
// 388: ff d0                         callq   *%rax
// 38a: 4d 8d 6c 24 e8                leaq    -0x18(%r12), %r13
// 38f: 4d 85 f6                      testq   %r14, %r14
// 392: 0f 84 ce fd ff ff             je      0x166 <_JIT_ENTRY+0x166>
// 398: 49 83 c4 f0                   addq    $-0x10, %r12
// 39c: 4d 89 75 00                   movq    %r14, (%r13)
// 3a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a2:  R_X86_64_64  _JIT_CONTINUE
// 3aa: 48 89 df                      movq    %rbx, %rdi
// 3ad: 4c 89 e6                      movq    %r12, %rsi
// 3b0: 48 8b 14 24                   movq    (%rsp), %rdx
// 3b4: 48 83 c4 18                   addq    $0x18, %rsp
// 3b8: 5b                            popq    %rbx
// 3b9: 41 5c                         popq    %r12
// 3bb: 41 5d                         popq    %r13
// 3bd: 41 5e                         popq    %r14
// 3bf: 41 5f                         popq    %r15
// 3c1: 5d                            popq    %rbp
// 3c2: ff e0                         jmpq    *%rax
// 3c4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR_code_body[965] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x34, 0xcf, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x6c, 0x24, 0xe8, 0x75, 0x12, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x49, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1c, 0xff, 0xff, 0xff, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x7c, 0x07, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x6c, 0x24, 0xe8, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xce, 0xfd, 0xff, 0xff, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x89, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR_code_holes[37] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 00 01 00 00             jne     0x12f <_JIT_ENTRY+0x12f>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e9 00 00 00             jne     0x12f <_JIT_ENTRY+0x12f>
// 46: 48 89 4c 24 18                movq    %rcx, 0x18(%rsp)
// 4b: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 f2                      movq    %r14, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 97: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9d: 0f 8e d5 00 00 00             jle     0x178 <_JIT_ENTRY+0x178>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 0f b7 d8                      movzwl  %ax, %ebx
// b0: 48 ff c3                      incq    %rbx
// b3: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e ab 00 00 00             jle     0x178 <_JIT_ENTRY+0x178>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// d4: 49 8b 04 24                   movq    (%r12), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 33                         jmp     0x116 <_JIT_ENTRY+0x116>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 e2                      movq    %r12, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 04 24                   movq    (%r12), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: ff d5                         callq   *%rbp
// 118: 49 ff 0c 24                   decq    (%r12)
// 11c: 75 a2                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11e: 4c 89 e7                      movq    %r12, %rdi
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  _Py_Dealloc
// 12b: ff d0                         callq   *%rax
// 12d: eb 91                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  PyExc_SystemError
// 139: 48 8b 30                      movq    (%rax), %rsi
// 13c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013e:  R_X86_64_64  .rodata.str1.1+0x39
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _PyErr_SetString
// 150: 48 89 cf                      movq    %rcx, %rdi
// 153: ff d0                         callq   *%rax
// 155: 4d 89 fe                      movq    %r15, %r14
// 158: 49 29 de                      subq    %rbx, %r14
// 15b: 49 83 c6 b8                   addq    $-0x48, %r14
// 15f: 49 c1 ee 03                   shrq    $0x3, %r14
// 163: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 167: 31 c0                         xorl    %eax, %eax
// 169: 48 83 c4 28                   addq    $0x28, %rsp
// 16d: 5b                            popq    %rbx
// 16e: 41 5c                         popq    %r12
// 170: 41 5d                         popq    %r13
// 172: 41 5e                         popq    %r14
// 174: 41 5f                         popq    %r15
// 176: 5d                            popq    %rbp
// 177: c3                            retq
// 178: 49 8b 45 00                   movq    (%r13), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7f 22                         jg      0x1a3 <_JIT_ENTRY+0x1a3>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 19a: 4c 89 ea                      movq    %r13, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 45 00                   movq    (%r13), %rax
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1aa: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 4d 00                   decq    (%r13)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 ef                      movq    %r13, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 4d 85 e4                      testq   %r12, %r12
// 1d5: 74 81                         je      0x158 <_JIT_ENTRY+0x158>
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  _JIT_OPARG
// 1e1: 0f b7 c1                      movzwl  %cx, %eax
// 1e4: f7 d1                         notl    %ecx
// 1e6: 81 c9 00 00 ff ff             orl     $0xffff0000, %ecx       # imm = 0xFFFF0000
// 1ec: 48 63 c9                      movslq  %ecx, %rcx
// 1ef: 4d 89 24 cf                   movq    %r12, (%r15,%rcx,8)
// 1f3: 48 c1 e0 03                   shlq    $0x3, %rax
// 1f7: 4d 89 fe                      movq    %r15, %r14
// 1fa: 49 29 c6                      subq    %rax, %r14
// 1fd: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ff:  R_X86_64_64  PySuper_Type
// 207: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// 20b: 75 11                         jne     0x21e <_JIT_ENTRY+0x21e>
// 20d: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 211: 48 8b 4d 08                   movq    0x8(%rbp), %rcx
// 215: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 21c: 75 2d                         jne     0x24b <_JIT_ENTRY+0x24b>
// 21e: 49 29 de                      subq    %rbx, %r14
// 221: 49 83 c6 b8                   addq    $-0x48, %r14
// 225: 49 c1 ee 03                   shrq    $0x3, %r14
// 229: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22d: 48 8b 03                      movq    (%rbx), %rax
// 230: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000232:  R_X86_64_64  _JIT_TARGET
// 23a: 89 c9                         movl    %ecx, %ecx
// 23c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 240: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 246: e9 1e ff ff ff                jmp     0x169 <_JIT_ENTRY+0x169>
// 24b: 48 f7 d8                      negq    %rax
// 24e: 49 8b 74 07 f8                movq    -0x8(%r15,%rax), %rsi
// 253: 48 8b 03                      movq    (%rbx), %rax
// 256: 48 8b 40 20                   movq    0x20(%rax), %rax
// 25a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025c:  R_X86_64_64  _JIT_OPARG
// 264: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 26a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 26f: c7 44 24 14 00 00 00 00       movl    $0x0, 0x14(%rsp)
// 277: 48 8b 46 08                   movq    0x8(%rsi), %rax
// 27b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027d:  R_X86_64_64  PyObject_GenericGetAttr
// 285: 31 ff                         xorl    %edi, %edi
// 287: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 28e: 48 8d 4c 24 14                leaq    0x14(%rsp), %rcx
// 293: 48 0f 45 cf                   cmovneq %rdi, %rcx
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _PySuper_Lookup
// 2a1: 48 89 ef                      movq    %rbp, %rdi
// 2a4: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 89 c4                      movq    %rax, %r12
// 2ae: 49 8b 45 00                   movq    (%r13), %rax
// 2b2: 48 85 c0                      testq   %rax, %rax
// 2b5: 7f 22                         jg      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b9:  R_X86_64_64  .rodata.str1.1
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_NegativeRefcount
// 2cb: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 2d0: 4c 89 ea                      movq    %r13, %rdx
// 2d3: ff d0                         callq   *%rax
// 2d5: 49 8b 45 00                   movq    (%r13), %rax
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 78 28                         js      0x305 <_JIT_ENTRY+0x305>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e7: ff d0                         callq   *%rax
// 2e9: 49 ff 4d 00                   decq    (%r13)
// 2ed: 75 16                         jne     0x305 <_JIT_ENTRY+0x305>
// 2ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f1:  R_X86_64_64  PySuper_Type
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: ff d0                         callq   *%rax
// 305: 48 8b 45 00                   movq    (%rbp), %rax
// 309: 48 85 c0                      testq   %rax, %rax
// 30c: 7f 22                         jg      0x330 <_JIT_ENTRY+0x330>
// 30e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_NegativeRefcount
// 322: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 327: 48 89 ea                      movq    %rbp, %rdx
// 32a: ff d0                         callq   *%rax
// 32c: 48 8b 45 00                   movq    (%rbp), %rax
// 330: 85 c0                         testl   %eax, %eax
// 332: 78 21                         js      0x355 <_JIT_ENTRY+0x355>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 48 ff 4d 00                   decq    (%rbp)
// 344: 75 0f                         jne     0x355 <_JIT_ENTRY+0x355>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_Dealloc
// 350: 48 89 ef                      movq    %rbp, %rdi
// 353: ff d0                         callq   *%rax
// 355: 4d 85 e4                      testq   %r12, %r12
// 358: 74 15                         je      0x36f <_JIT_ENTRY+0x36f>
// 35a: 49 83 c6 f8                   addq    $-0x8, %r14
// 35e: 83 7c 24 14 00                cmpl    $0x0, 0x14(%rsp)
// 363: 74 65                         je      0x3ca <_JIT_ENTRY+0x3ca>
// 365: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 36a: e9 b2 00 00 00                jmp     0x421 <_JIT_ENTRY+0x421>
// 36f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 374: 49 8b 07                      movq    (%r15), %rax
// 377: 48 85 c0                      testq   %rax, %rax
// 37a: 7f 21                         jg      0x39d <_JIT_ENTRY+0x39d>
// 37c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000037e:  R_X86_64_64  .rodata.str1.1
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _Py_NegativeRefcount
// 390: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 395: 4c 89 fa                      movq    %r15, %rdx
// 398: ff d0                         callq   *%rax
// 39a: 49 8b 07                      movq    (%r15), %rax
// 39d: 85 c0                         testl   %eax, %eax
// 39f: 78 20                         js      0x3c1 <_JIT_ENTRY+0x3c1>
// 3a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ab: ff d0                         callq   *%rax
// 3ad: 49 ff 0f                      decq    (%r15)
// 3b0: 75 0f                         jne     0x3c1 <_JIT_ENTRY+0x3c1>
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_Dealloc
// 3bc: 4c 89 ff                      movq    %r15, %rdi
// 3bf: ff d0                         callq   *%rax
// 3c1: 49 83 c6 e8                   addq    $-0x18, %r14
// 3c5: e9 8e fd ff ff                jmp     0x158 <_JIT_ENTRY+0x158>
// 3ca: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 3cf: 49 8b 45 00                   movq    (%r13), %rax
// 3d3: 48 85 c0                      testq   %rax, %rax
// 3d6: 7f 22                         jg      0x3fa <_JIT_ENTRY+0x3fa>
// 3d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003da:  R_X86_64_64  .rodata.str1.1
// 3e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e4:  R_X86_64_64  _Py_NegativeRefcount
// 3ec: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 3f1: 4c 89 ea                      movq    %r13, %rdx
// 3f4: ff d0                         callq   *%rax
// 3f6: 49 8b 45 00                   movq    (%r13), %rax
// 3fa: 85 c0                         testl   %eax, %eax
// 3fc: 78 21                         js      0x41f <_JIT_ENTRY+0x41f>
// 3fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000400:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 408: ff d0                         callq   *%rax
// 40a: 49 ff 4d 00                   decq    (%r13)
// 40e: 75 0f                         jne     0x41f <_JIT_ENTRY+0x41f>
// 410: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000412:  R_X86_64_64  _Py_Dealloc
// 41a: 4c 89 ef                      movq    %r13, %rdi
// 41d: ff d0                         callq   *%rax
// 41f: 31 c9                         xorl    %ecx, %ecx
// 421: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000423:  R_X86_64_64  _JIT_OPARG
// 42b: 0f b7 c0                      movzwl  %ax, %eax
// 42e: 48 c1 e0 03                   shlq    $0x3, %rax
// 432: 49 29 c7                      subq    %rax, %r15
// 435: 4d 89 67 e8                   movq    %r12, -0x18(%r15)
// 439: 49 89 4f f0                   movq    %rcx, -0x10(%r15)
// 43d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000043f:  R_X86_64_64  _JIT_CONTINUE
// 447: 48 89 df                      movq    %rbx, %rdi
// 44a: 4c 89 f6                      movq    %r14, %rsi
// 44d: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 452: 48 83 c4 28                   addq    $0x28, %rsp
// 456: 5b                            popq    %rbx
// 457: 41 5c                         popq    %r12
// 459: 41 5d                         popq    %r13
// 45b: 41 5e                         popq    %r14
// 45d: 41 5f                         popq    %r15
// 45f: 5d                            popq    %rbp
// 460: ff e0                         jmpq    *%rax
// 462: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD_code_body[1123] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe9, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xab, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0xaa, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0xa2, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x91, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x81, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0xf7, 0xd1, 0x81, 0xc9, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x24, 0xcf, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xc6, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x4d, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x1e, 0xff, 0xff, 0xff, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x74, 0x07, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x46, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x14, 0x48, 0x0f, 0x45, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x15, 0x49, 0x83, 0xc6, 0xf8, 0x83, 0x7c, 0x24, 0x14, 0x00, 0x74, 0x65, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xe8, 0xe9, 0x8e, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x67, 0xe8, 0x49, 0x89, 0x4f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD_code_holes[43] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x412, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x423, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x43f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_MAKE_CELL
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_MAKE_CELL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 49 29 c6                      subq    %rax, %r14
// 1ff: 48 8b 7c cb 48                movq    0x48(%rbx,%rcx,8), %rdi
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  PyCell_New
// 20e: ff d0                         callq   *%rax
// 210: 48 85 c0                      testq   %rax, %rax
// 213: 0f 84 44 ff ff ff             je      0x15d <_JIT_ENTRY+0x15d>
// 219: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c9                      movzwl  %cx, %ecx
// 226: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 22b: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 230: 4d 85 e4                      testq   %r12, %r12
// 233: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 238: 74 50                         je      0x28a <_JIT_ENTRY+0x28a>
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 22                         jg      0x265 <_JIT_ENTRY+0x265>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1+0x5f
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 e7                      movq    %r12, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_CONTINUE
// 294: 48 89 df                      movq    %rbx, %rdi
// 297: 4c 89 f6                      movq    %r14, %rsi
// 29a: 4c 89 fa                      movq    %r15, %rdx
// 29d: 48 83 c4 18                   addq    $0x18, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_MAKE_CELL_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x48, 0x8b, 0x7c, 0xcb, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x44, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_MAKE_CELL_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 8f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_MAKE_CELL_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_MAKE_CELL_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f4                      movq    %r14, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1e8: f7 d0                         notl    %eax
// 1ea: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ef: 48 98                         cltq
// 1f1: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1f5: 49 c1 e7 03                   shlq    $0x3, %r15
// 1f9: 4c 89 f8                      movq    %r15, %rax
// 1fc: 48 f7 d8                      negq    %rax
// 1ff: 49 8b 6c 06 f8                movq    -0x8(%r14,%rax), %rbp
// 204: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PyFunction_New
// 212: 48 89 ef                      movq    %rbp, %rdi
// 215: ff d0                         callq   *%rax
// 217: 49 89 c5                      movq    %rax, %r13
// 21a: 48 8b 45 00                   movq    (%rbp), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 7f 22                         jg      0x245 <_JIT_ENTRY+0x245>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 23c: 48 89 ea                      movq    %rbp, %rdx
// 23f: ff d0                         callq   *%rax
// 241: 48 8b 45 00                   movq    (%rbp), %rax
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 21                         js      0x26a <_JIT_ENTRY+0x26a>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 48 ff 4d 00                   decq    (%rbp)
// 259: 75 0f                         jne     0x26a <_JIT_ENTRY+0x26a>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 48 89 ef                      movq    %rbp, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 4d 89 f4                      movq    %r14, %r12
// 26d: 4d 29 fc                      subq    %r15, %r12
// 270: 4d 85 ed                      testq   %r13, %r13
// 273: 0f 84 e7 fe ff ff             je      0x160 <_JIT_ENTRY+0x160>
// 279: 8b 75 5c                      movl    0x5c(%rbp), %esi
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _PyFunction_SetVersion
// 286: 4c 89 ef                      movq    %r13, %rdi
// 289: ff d0                         callq   *%rax
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _JIT_OPARG
// 295: 0f b7 c0                      movzwl  %ax, %eax
// 298: 48 c1 e0 03                   shlq    $0x3, %rax
// 29c: 49 29 c6                      subq    %rax, %r14
// 29f: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 48 89 df                      movq    %rbx, %rdi
// 2b0: 4c 89 e6                      movq    %r12, %rsi
// 2b3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2b8: 48 83 c4 18                   addq    $0x18, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0xc1, 0xe7, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x6c, 0x06, 0xf8, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x4d, 0x29, 0xfc, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe7, 0xfe, 0xff, 0xff, 0x8b, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION_code_holes[27] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_MAP_ADD
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_MAP_ADD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 0a 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f3 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e3 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 44 0f b7 f0                   movzwl  %ax, %r14d
// ad: 49 ff c6                      incq    %r14
// b0: eb 1b                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// d5: 48 8b 45 00                   movq    (%rbp), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 12                         jle     0xf0 <_JIT_ENTRY+0xf0>
// de: 85 c0                         testl   %eax, %eax
// e0: 78 de                         js      0xc0 <_JIT_ENTRY+0xc0>
// e2: eb 32                         jmp     0x116 <_JIT_ENTRY+0x116>
// e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fc                      movq    %r15, %r12
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 1ee: 29 cf                         subl    %ecx, %edi
// 1f0: f7 d1                         notl    %ecx
// 1f2: 48 63 c9                      movslq  %ecx, %rcx
// 1f5: 4d 89 34 cf                   movq    %r14, (%r15,%rcx,8)
// 1f9: 0f b7 c0                      movzwl  %ax, %eax
// 1fc: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 204: 4d 89 fe                      movq    %r15, %r14
// 207: 49 29 ce                      subq    %rcx, %r14
// 20a: 48 f7 d9                      negq    %rcx
// 20d: 49 8b 54 0f f8                movq    -0x8(%r15,%rcx), %rdx
// 212: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// 216: 49 8b 76 f0                   movq    -0x10(%r14), %rsi
// 21a: 48 63 cf                      movslq  %edi, %rcx
// 21d: 48 29 c1                      subq    %rax, %rcx
// 220: 49 8b 3c cf                   movq    (%r15,%rcx,8), %rdi
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _PyDict_SetItem_Take2
// 22e: ff d0                         callq   *%rax
// 230: 85 c0                         testl   %eax, %eax
// 232: 4d 0f 45 e6                   cmovneq %r14, %r12
// 236: 74 09                         je      0x241 <_JIT_ENTRY+0x241>
// 238: 49 83 c4 f0                   addq    $-0x10, %r12
// 23c: e9 21 ff ff ff                jmp     0x162 <_JIT_ENTRY+0x162>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_CONTINUE
// 24b: 48 89 df                      movq    %rbx, %rdi
// 24e: 4c 89 e6                      movq    %r12, %rsi
// 251: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_MAP_ADD_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xcf, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x34, 0xcf, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x54, 0x0f, 0xf8, 0x4d, 0x8d, 0x66, 0xf0, 0x49, 0x8b, 0x76, 0xf0, 0x48, 0x63, 0xcf, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x3c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x45, 0xe6, 0x74, 0x09, 0x49, 0x83, 0xc4, 0xf0, 0xe9, 0x21, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_MAP_ADD_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_MAP_ADD_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_MAP_ADD_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_MATCH_CLASS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_MATCH_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 d8                      movzwl  %ax, %ebx
// af: 48 ff c3                      incq    %rbx
// b2: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b4:  R_X86_64_64  _Py_NegativeRefcount
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cb                      decq    %rbx
// c3: 48 83 fb 01                   cmpq    $0x1, %rbx
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 29                         jmp     0x10b <_JIT_ENTRY+0x10b>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: ff d5                         callq   *%rbp
// 104: 49 8b 06                      movq    (%r14), %rax
// 107: 85 c0                         testl   %eax, %eax
// 109: 78 b5                         js      0xc0 <_JIT_ENTRY+0xc0>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 115: ff d0                         callq   *%rax
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d4: 48 85 d2                      testq   %rdx, %rdx
// 1d7: 0f 84 79 ff ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 c8                      movzwl  %ax, %ecx
// 1ea: f7 d0                         notl    %eax
// 1ec: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f1: 48 98                         cltq
// 1f3: 49 89 14 c7                   movq    %rdx, (%r15,%rax,8)
// 1f7: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1ff: 4d 89 fc                      movq    %r15, %r12
// 202: 49 29 c4                      subq    %rax, %r12
// 205: 48 f7 d8                      negq    %rax
// 208: 4d 8b 44 07 f8                movq    -0x8(%r15,%rax), %r8
// 20d: 49 8b 6c 24 e8                movq    -0x18(%r12), %rbp
// 212: 4d 8b 6c 24 f0                movq    -0x10(%r12), %r13
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _PyEval_MatchClass
// 221: 4c 89 f7                      movq    %r14, %rdi
// 224: 48 89 ee                      movq    %rbp, %rsi
// 227: 4c 89 ea                      movq    %r13, %rdx
// 22a: 4d 89 c6                      movq    %r8, %r14
// 22d: ff d0                         callq   *%rax
// 22f: 48 89 04 24                   movq    %rax, (%rsp)
// 233: 48 8b 45 00                   movq    (%rbp), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 255: 48 89 ea                      movq    %rbp, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 48 8b 45 00                   movq    (%rbp), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 48 ff 4d 00                   decq    (%rbp)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 48 89 ef                      movq    %rbp, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 8b 45 00                   movq    (%r13), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7f 22                         jg      0x2ae <_JIT_ENTRY+0x2ae>
// 28c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_NegativeRefcount
// 2a0: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 2a5: 4c 89 ea                      movq    %r13, %rdx
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 45 00                   movq    (%r13), %rax
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 4c 89 f5                      movq    %r14, %rbp
// 2b3: 78 21                         js      0x2d6 <_JIT_ENTRY+0x2d6>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bf: ff d0                         callq   *%rax
// 2c1: 49 ff 4d 00                   decq    (%r13)
// 2c5: 75 0f                         jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 ef                      movq    %r13, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 48 8b 45 00                   movq    (%rbp), %rax
// 2da: 48 85 c0                      testq   %rax, %rax
// 2dd: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2e2: 7f 22                         jg      0x306 <_JIT_ENTRY+0x306>
// 2e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e6:  R_X86_64_64  .rodata.str1.1
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_NegativeRefcount
// 2f8: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 2fd: 48 89 ea                      movq    %rbp, %rdx
// 300: ff d0                         callq   *%rax
// 302: 48 8b 45 00                   movq    (%rbp), %rax
// 306: 85 c0                         testl   %eax, %eax
// 308: 4c 8b 2c 24                   movq    (%rsp), %r13
// 30c: 78 21                         js      0x32f <_JIT_ENTRY+0x32f>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 318: ff d0                         callq   *%rax
// 31a: 48 ff 4d 00                   decq    (%rbp)
// 31e: 75 0f                         jne     0x32f <_JIT_ENTRY+0x32f>
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _Py_Dealloc
// 32a: 48 89 ef                      movq    %rbp, %rdi
// 32d: ff d0                         callq   *%rax
// 32f: 4d 85 ed                      testq   %r13, %r13
// 332: 74 3f                         je      0x373 <_JIT_ENTRY+0x373>
// 334: 49 83 c4 f0                   addq    $-0x10, %r12
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _JIT_OPARG
// 342: 0f b7 c0                      movzwl  %ax, %eax
// 345: 48 c1 e0 03                   shlq    $0x3, %rax
// 349: 49 29 c7                      subq    %rax, %r15
// 34c: 4d 89 6f e8                   movq    %r13, -0x18(%r15)
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _JIT_CONTINUE
// 35a: 48 89 df                      movq    %rbx, %rdi
// 35d: 4c 89 e6                      movq    %r12, %rsi
// 360: 4c 89 f2                      movq    %r14, %rdx
// 363: 48 83 c4 18                   addq    $0x18, %rsp
// 367: 5b                            popq    %rbx
// 368: 41 5c                         popq    %r12
// 36a: 41 5d                         popq    %r13
// 36c: 41 5e                         popq    %r14
// 36e: 41 5f                         popq    %r15
// 370: 5d                            popq    %rbp
// 371: ff e0                         jmpq    *%rax
// 373: 49 8b 46 68                   movq    0x68(%r14), %rax
// 377: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000379:  R_X86_64_64  _Py_NoneStruct
// 381: 48 85 c0                      testq   %rax, %rax
// 384: 74 ae                         je      0x334 <_JIT_ENTRY+0x334>
// 386: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 38b: 74 a7                         je      0x334 <_JIT_ENTRY+0x334>
// 38d: 49 83 c4 e8                   addq    $-0x18, %r12
// 391: e9 c0 fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 396: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_CLASS_code_body[919] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x29, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xb5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc7, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x44, 0x07, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0xe8, 0x4d, 0x8b, 0x6c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0x4d, 0x89, 0xc6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x89, 0xf5, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x74, 0x3f, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x4d, 0x89, 0x6f, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x46, 0x68, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0xae, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0xa7, 0x49, 0x83, 0xc4, 0xe8, 0xe9, 0xc0, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_CLASS_code_holes[35] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_CLASS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_CLASS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_MATCH_KEYS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_MATCH_KEYS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 0a 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f3 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 92: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 99: 0f 8e e3 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 44 0f b7 f8                   movzwl  %ax, %r15d
// ad: 49 ff c7                      incq    %r15
// b0: eb 1b                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// d5: 48 8b 45 00                   movq    (%rbp), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 12                         jle     0xf0 <_JIT_ENTRY+0xf0>
// de: 85 c0                         testl   %eax, %eax
// e0: 78 de                         js      0xc0 <_JIT_ENTRY+0xc0>
// e2: eb 32                         jmp     0x116 <_JIT_ENTRY+0x116>
// e4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f4                      movq    %r14, %r12
// 162: 49 29 dc                      subq    %rbx, %r12
// 165: 49 83 c4 b8                   addq    $-0x48, %r12
// 169: 49 c1 ec 03                   shrq    $0x3, %r12
// 16d: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 ea                      movq    %r13, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1dc: 48 85 d2                      testq   %rdx, %rdx
// 1df: 74 81                         je      0x162 <_JIT_ENTRY+0x162>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c8                      movzwl  %ax, %ecx
// 1ee: f7 d0                         notl    %eax
// 1f0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f5: 48 98                         cltq
// 1f7: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 1fb: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1ff: 4d 89 f4                      movq    %r14, %r12
// 202: 49 29 cc                      subq    %rcx, %r12
// 205: 48 f7 d9                      negq    %rcx
// 208: 49 8b 54 0e f8                movq    -0x8(%r14,%rcx), %rdx
// 20d: 49 8b 74 24 f0                movq    -0x10(%r12), %rsi
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _PyEval_MatchKeys
// 21c: 4c 89 ff                      movq    %r15, %rdi
// 21f: ff d0                         callq   *%rax
// 221: 48 85 c0                      testq   %rax, %rax
// 224: 0f 84 38 ff ff ff             je      0x162 <_JIT_ENTRY+0x162>
// 22a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022c:  R_X86_64_64  _JIT_OPARG
// 234: 0f b7 c9                      movzwl  %cx, %ecx
// 237: 48 c1 e1 03                   shlq    $0x3, %rcx
// 23b: 49 29 ce                      subq    %rcx, %r14
// 23e: 49 89 06                      movq    %rax, (%r14)
// 241: 49 83 c6 08                   addq    $0x8, %r14
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 4c 89 f6                      movq    %r14, %rsi
// 255: 4c 89 fa                      movq    %r15, %rdx
// 258: 48 83 c4 18                   addq    $0x18, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_KEYS_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x54, 0x0e, 0xf8, 0x49, 0x8b, 0x74, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_KEYS_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_KEYS_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_KEYS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_MATCH_MAPPING
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_MATCH_MAPPING.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 207: 48 8b 40 08                   movq    0x8(%rax), %rax
// 20b: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_FalseStruct
// 21c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021e:  R_X86_64_64  _Py_TrueStruct
// 226: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 22a: 49 89 14 0f                   movq    %rdx, (%r15,%rcx)
// 22e: 48 83 c6 08                   addq    $0x8, %rsi
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _JIT_CONTINUE
// 23c: 48 89 df                      movq    %rbx, %rdi
// 23f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 244: 48 83 c4 18                   addq    $0x18, %rsp
// 248: 5b                            popq    %rbx
// 249: 41 5c                         popq    %r12
// 24b: 41 5d                         popq    %r13
// 24d: 41 5e                         popq    %r14
// 24f: 41 5f                         popq    %r15
// 251: 5d                            popq    %rbp
// 252: ff e0                         jmpq    *%rax
// 254: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_MAPPING_code_body[597] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0x49, 0x89, 0x14, 0x0f, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_MAPPING_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_MAPPING_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_MAPPING_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 207: 48 8b 40 08                   movq    0x8(%rax), %rax
// 20b: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_FalseStruct
// 21c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021e:  R_X86_64_64  _Py_TrueStruct
// 226: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 22a: 49 89 14 0f                   movq    %rdx, (%r15,%rcx)
// 22e: 48 83 c6 08                   addq    $0x8, %rsi
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _JIT_CONTINUE
// 23c: 48 89 df                      movq    %rbx, %rdi
// 23f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 244: 48 83 c4 18                   addq    $0x18, %rsp
// 248: 5b                            popq    %rbx
// 249: 41 5c                         popq    %r12
// 24b: 41 5d                         popq    %r13
// 24d: 41 5e                         popq    %r14
// 24f: 41 5f                         popq    %r15
// 251: 5d                            popq    %rbp
// 252: ff e0                         jmpq    *%rax
// 254: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE_code_body[597] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0x49, 0x89, 0x14, 0x0f, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_NOP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_NOP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 49 29 ce                      subq    %rcx, %r14
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_CONTINUE
// 207: 48 89 df                      movq    %rbx, %rdi
// 20a: 4c 89 f6                      movq    %r14, %rsi
// 20d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 212: 48 83 c4 18                   addq    $0x18, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_NOP_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_NOP_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_NOP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_NOP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_POP_EXCEPT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_POP_EXCEPT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4d 89 fc                      movq    %r15, %r12
// 1fd: 49 29 cc                      subq    %rcx, %r12
// 200: 49 83 c4 f8                   addq    $-0x8, %r12
// 204: 48 f7 d9                      negq    %rcx
// 207: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 20c: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 211: 49 8b 4e 70                   movq    0x70(%r14), %rcx
// 215: 4c 8b 39                      movq    (%rcx), %r15
// 218: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021a:  R_X86_64_64  _Py_NoneStruct
// 222: 31 f6                         xorl    %esi, %esi
// 224: 48 39 d0                      cmpq    %rdx, %rax
// 227: 48 0f 45 f0                   cmovneq %rax, %rsi
// 22b: 48 89 31                      movq    %rsi, (%rcx)
// 22e: 4d 85 ff                      testq   %r15, %r15
// 231: 74 4d                         je      0x280 <_JIT_ENTRY+0x280>
// 233: 49 8b 07                      movq    (%r15), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 21                         jg      0x25c <_JIT_ENTRY+0x25c>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0x5f
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 254: 4c 89 fa                      movq    %r15, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 07                      movq    (%r15), %rax
// 25c: 85 c0                         testl   %eax, %eax
// 25e: 78 20                         js      0x280 <_JIT_ENTRY+0x280>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26a: ff d0                         callq   *%rax
// 26c: 49 ff 0f                      decq    (%r15)
// 26f: 75 0f                         jne     0x280 <_JIT_ENTRY+0x280>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 ff                      movq    %r15, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 e6                      movq    %r12, %rsi
// 290: 4c 89 f2                      movq    %r14, %rdx
// 293: 48 83 c4 18                   addq    $0x18, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_POP_EXCEPT_code_body[676] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x4e, 0x70, 0x4c, 0x8b, 0x39, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_POP_EXCEPT_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 8f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_POP_EXCEPT_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_POP_EXCEPT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_POP_FRAME
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_POP_FRAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 f8                      movq    %r15, %rax
// 1fd: 48 29 c8                      subq    %rcx, %rax
// 200: 48 83 c0 f8                   addq    $-0x8, %rax
// 204: 48 f7 d9                      negq    %rcx
// 207: 4d 8b 74 0f f8                movq    -0x8(%r15,%rcx), %r14
// 20c: 48 29 d8                      subq    %rbx, %rax
// 20f: 48 83 c0 b8                   addq    $-0x48, %rax
// 213: 48 c1 e8 03                   shrq    $0x3, %rax
// 217: 89 43 40                      movl    %eax, 0x40(%rbx)
// 21a: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21f: 41 ff 44 24 24                incl    0x24(%r12)
// 224: 4c 8b 7b 08                   movq    0x8(%rbx), %r15
// 228: 4d 89 7c 24 40                movq    %r15, 0x40(%r12)
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _PyEval_FrameClearAndPop
// 237: 4c 89 e7                      movq    %r12, %rdi
// 23a: 48 89 de                      movq    %rbx, %rsi
// 23d: ff d0                         callq   *%rax
// 23f: 49 63 47 40                   movslq  0x40(%r15), %rax
// 243: 4d 89 74 c7 48                movq    %r14, 0x48(%r15,%rax,8)
// 248: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 24c: 48 83 c6 50                   addq    $0x50, %rsi
// 250: 41 c7 47 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r15) # imm = 0xFFFFFFFF
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 4c 89 ff                      movq    %r15, %rdi
// 265: 4c 89 e2                      movq    %r12, %rdx
// 268: 48 83 c4 18                   addq    $0x18, %rsp
// 26c: 5b                            popq    %rbx
// 26d: 41 5c                         popq    %r12
// 26f: 41 5d                         popq    %r13
// 271: 41 5e                         popq    %r14
// 273: 41 5f                         popq    %r15
// 275: 5d                            popq    %rbp
// 276: ff e0                         jmpq    *%rax
// 278: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_POP_FRAME_code_body[633] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x74, 0x0f, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x41, 0xff, 0x44, 0x24, 0x24, 0x4c, 0x8b, 0x7b, 0x08, 0x4d, 0x89, 0x7c, 0x24, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x49, 0x63, 0x47, 0x40, 0x4d, 0x89, 0x74, 0xc7, 0x48, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_POP_FRAME_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_POP_FRAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_POP_FRAME_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_POP_TOP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_POP_TOP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4d 89 fc                      movq    %r15, %r12
// 1fd: 49 29 cc                      subq    %rcx, %r12
// 200: 48 f7 d9                      negq    %rcx
// 203: 4d 8b 7c 0f f8                movq    -0x8(%r15,%rcx), %r15
// 208: 49 8b 07                      movq    (%r15), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 21                         jg      0x231 <_JIT_ENTRY+0x231>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 54 00 00 00                movl    $0x54, %esi
// 229: 4c 89 fa                      movq    %r15, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 07                      movq    (%r15), %rax
// 231: 49 83 c4 f8                   addq    $-0x8, %r12
// 235: 85 c0                         testl   %eax, %eax
// 237: 78 20                         js      0x259 <_JIT_ENTRY+0x259>
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 243: ff d0                         callq   *%rax
// 245: 49 ff 0f                      decq    (%r15)
// 248: 75 0f                         jne     0x259 <_JIT_ENTRY+0x259>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 4c 89 ff                      movq    %r15, %rdi
// 257: ff d0                         callq   *%rax
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 4c 89 e6                      movq    %r12, %rsi
// 269: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 26e: 48 83 c4 18                   addq    $0x18, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: ff e0                         jmpq    *%rax
// 27e: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_POP_TOP_code_body[639] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x7c, 0x0f, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_POP_TOP_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_POP_TOP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_POP_TOP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1b4: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1b9: 78 21                         js      0x1dc <_JIT_ENTRY+0x1dc>
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 ff 0c 24                   decq    (%r12)
// 1cb: 75 0f                         jne     0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_Dealloc
// 1d7: 4c 89 e7                      movq    %r12, %rdi
// 1da: ff d0                         callq   *%rax
// 1dc: 4d 85 ff                      testq   %r15, %r15
// 1df: 74 81                         je      0x162 <_JIT_ENTRY+0x162>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c8                      movzwl  %ax, %ecx
// 1ee: f7 d0                         notl    %eax
// 1f0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f5: 48 98                         cltq
// 1f7: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1fb: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1ff: 48 f7 d9                      negq    %rcx
// 202: 4d 8b 7c 0e f8                movq    -0x8(%r14,%rcx), %r15
// 207: 4c 8b 65 70                   movq    0x70(%rbp), %r12
// 20b: 4d 8b 2c 24                   movq    (%r12), %r13
// 20f: 41 8b 07                      movl    (%r15), %eax
// 212: ff c0                         incl    %eax
// 214: 74 0f                         je      0x225 <_JIT_ENTRY+0x225>
// 216: 41 89 07                      movl    %eax, (%r15)
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 223: ff d0                         callq   *%rax
// 225: 4d 85 ed                      testq   %r13, %r13
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_NoneStruct
// 232: 49 0f 45 c5                   cmovneq %r13, %rax
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: 0f b7 c9                      movzwl  %cx, %ecx
// 243: 48 c1 e1 03                   shlq    $0x3, %rcx
// 247: 49 29 ce                      subq    %rcx, %r14
// 24a: 4d 89 3c 24                   movq    %r15, (%r12)
// 24e: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 252: 4d 89 3e                      movq    %r15, (%r14)
// 255: 49 83 c6 08                   addq    $0x8, %r14
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 4c 89 f6                      movq    %r14, %rsi
// 269: 48 89 ea                      movq    %rbp, %rdx
// 26c: 48 83 c4 18                   addq    $0x18, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: ff e0                         jmpq    *%rax
// 27c: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO_code_body[637] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x7c, 0x0e, 0xf8, 0x4c, 0x8b, 0x65, 0x70, 0x4d, 0x8b, 0x2c, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x4d, 0x89, 0x3c, 0x24, 0x49, 0x89, 0x46, 0xf8, 0x4d, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_PUSH_FRAME
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_PUSH_FRAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 f8                      movq    %r15, %rax
// 1fd: 48 29 c8                      subq    %rcx, %rax
// 200: 48 83 c0 f8                   addq    $-0x8, %rax
// 204: 48 f7 d9                      negq    %rcx
// 207: 49 8b 7c 0f f8                movq    -0x8(%r15,%rcx), %rdi
// 20c: 48 29 d8                      subq    %rbx, %rax
// 20f: 48 83 c0 b8                   addq    $-0x48, %rax
// 213: 48 c1 e8 03                   shrq    $0x3, %rax
// 217: 89 43 40                      movl    %eax, 0x40(%rbx)
// 21a: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// 21e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 223: 48 89 7a 40                   movq    %rdi, 0x40(%rdx)
// 227: ff 4a 24                      decl    0x24(%rdx)
// 22a: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 22e: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 232: 48 83 c6 48                   addq    $0x48, %rsi
// 236: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_CONTINUE
// 247: 48 83 c4 18                   addq    $0x18, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_PUSH_FRAME_code_body[600] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x7c, 0x0f, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x7a, 0x40, 0xff, 0x4a, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_PUSH_FRAME_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_PUSH_FRAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_PUSH_FRAME_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_PUSH_NULL
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_PUSH_NULL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 c7 04 0f 00 00 00 00       movq    $0x0, (%r15,%rcx)
// 20b: 48 83 c6 08                   addq    $0x8, %rsi
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_CONTINUE
// 219: 48 89 df                      movq    %rbx, %rdi
// 21c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_PUSH_NULL_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0xc7, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_PUSH_NULL_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_PUSH_NULL_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_PUSH_NULL_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_RESUME_CHECK
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_RESUME_CHECK.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 49 29 ce                      subq    %rcx, %r14
// 1fd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 202: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 206: 48 8b 08                      movq    (%rax), %rcx
// 209: 48 8b 03                      movq    (%rbx), %rax
// 20c: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// 213: 75 20                         jne     0x235 <_JIT_ENTRY+0x235>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 48 89 df                      movq    %rbx, %rdi
// 222: 4c 89 f6                      movq    %r14, %rsi
// 225: 48 83 c4 18                   addq    $0x18, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 49 29 de                      subq    %rbx, %r14
// 238: 49 83 c6 b8                   addq    $-0x48, %r14
// 23c: 49 c1 ee 03                   shrq    $0x3, %r14
// 240: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  _JIT_TARGET
// 24e: 89 c9                         movl    %ecx, %ecx
// 250: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 254: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25a: e9 14 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 25f: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_RESUME_CHECK_code_body[608] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x14, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_RESUME_CHECK_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_RESUME_CHECK_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_RESUME_CHECK_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fe: 49 29 c6                      subq    %rax, %r14
// 201: 66 89 4b 44                   movw    %cx, 0x44(%rbx)
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_CONTINUE
// 20f: 48 89 df                      movq    %rbx, %rdi
// 212: 4c 89 f6                      movq    %r14, %rsi
// 215: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 21a: 48 83 c4 18                   addq    $0x18, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET_code_body[555] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x66, 0x89, 0x4b, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 fa                      movq    %r15, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 97: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9d: 0f 8e d3 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 0f b7 e8                      movzwl  %ax, %ebp
// b0: 48 ff c5                      incq    %rbp
// b3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x65
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e7                      movq    %r12, %r15
// 156: 49 29 df                      subq    %rbx, %r15
// 159: 49 83 c7 b8                   addq    $-0x48, %r15
// 15d: 49 c1 ef 03                   shrq    $0x3, %r15
// 161: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1a8: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 f6                      testq   %r14, %r14
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 e7                      movq    %r12, %r15
// 1f6: 49 29 cf                      subq    %rcx, %r15
// 1f9: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1fd: 48 85 ff                      testq   %rdi, %rdi
// 200: 0f 84 98 00 00 00             je      0x29e <_JIT_ENTRY+0x29e>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  PyMapping_GetOptionalItem
// 210: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000212:  R_X86_64_64  _PyRuntime
// 21a: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 221: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 226: 4c 89 ee                      movq    %r13, %rsi
// 229: ff d0                         callq   *%rax
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 0f 88 23 ff ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 233: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 238: 4d 85 e4                      testq   %r12, %r12
// 23b: 0f 84 8c 00 00 00             je      0x2cd <_JIT_ENTRY+0x2cd>
// 241: 49 8b 04 24                   movq    (%r12), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7f 22                         jg      0x26c <_JIT_ENTRY+0x26c>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 263: 4c 89 e2                      movq    %r12, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 04 24                   movq    (%r12), %rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 0f 88 e8 00 00 00             js      0x35c <_JIT_ENTRY+0x35c>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27e: ff d0                         callq   *%rax
// 280: 49 ff 0c 24                   decq    (%r12)
// 284: 0f 85 d2 00 00 00             jne     0x35c <_JIT_ENTRY+0x35c>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 e7                      movq    %r12, %rdi
// 297: ff d0                         callq   *%rax
// 299: e9 be 00 00 00                jmp     0x35c <_JIT_ENTRY+0x35c>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  PyExc_SystemError
// 2a8: 48 8b 30                      movq    (%rax), %rsi
// 2ab: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ad:  R_X86_64_64  .rodata.str1.1+0x39
// 2b5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b7:  R_X86_64_64  _PyErr_Format
// 2bf: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2c4: 31 c0                         xorl    %eax, %eax
// 2c6: ff d1                         callq   *%rcx
// 2c8: e9 89 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  PyDict_New
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2de: 48 85 c0                      testq   %rax, %rax
// 2e1: 0f 84 6f fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2e7: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 2eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ed:  R_X86_64_64  PyObject_SetItem
// 2f5: 4c 89 ee                      movq    %r13, %rsi
// 2f8: 48 89 c2                      movq    %rax, %rdx
// 2fb: ff d1                         callq   *%rcx
// 2fd: 89 c5                         movl    %eax, %ebp
// 2ff: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 304: 49 8b 04 24                   movq    (%r12), %rax
// 308: 48 85 c0                      testq   %rax, %rax
// 30b: 7f 22                         jg      0x32f <_JIT_ENTRY+0x32f>
// 30d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030f:  R_X86_64_64  .rodata.str1.1
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_NegativeRefcount
// 321: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 326: 4c 89 e2                      movq    %r12, %rdx
// 329: ff d0                         callq   *%rax
// 32b: 49 8b 04 24                   movq    (%r12), %rax
// 32f: 85 c0                         testl   %eax, %eax
// 331: 78 21                         js      0x354 <_JIT_ENTRY+0x354>
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33d: ff d0                         callq   *%rax
// 33f: 49 ff 0c 24                   decq    (%r12)
// 343: 75 0f                         jne     0x354 <_JIT_ENTRY+0x354>
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_Dealloc
// 34f: 4c 89 e7                      movq    %r12, %rdi
// 352: ff d0                         callq   *%rax
// 354: 85 ed                         testl   %ebp, %ebp
// 356: 0f 85 fa fd ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _JIT_CONTINUE
// 366: 48 89 df                      movq    %rbx, %rdi
// 369: 4c 89 fe                      movq    %r15, %rsi
// 36c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 371: 48 83 c4 28                   addq    $0x28, %rsp
// 375: 5b                            popq    %rbx
// 376: 41 5c                         popq    %r12
// 378: 41 5d                         popq    %r13
// 37a: 41 5e                         popq    %r14
// 37c: 41 5f                         popq    %r15
// 37e: 5d                            popq    %rbp
// 37f: ff e0                         jmpq    *%rax
// 381: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS_code_body[898] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xcf, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x23, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xe8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xbe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x31, 0xc0, 0xff, 0xd1, 0xe9, 0x89, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6f, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0xfa, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS_code_holes[35] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x65},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 8b: 00 00 00 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_SET_ADD
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_SET_ADD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 e7                      movq    %r12, %r15
// 160: 49 29 df                      subq    %rbx, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 1f4: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1fc: 4d 89 e7                      movq    %r12, %r15
// 1ff: 49 29 d7                      subq    %rdx, %r15
// 202: 48 f7 da                      negq    %rdx
// 205: 4d 8b 6c 14 f8                movq    -0x8(%r12,%rdx), %r13
// 20a: 48 29 c8                      subq    %rcx, %rax
// 20d: 49 8b 3c c4                   movq    (%r12,%rax,8), %rdi
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PySet_Add
// 21b: 4c 89 ee                      movq    %r13, %rsi
// 21e: ff d0                         callq   *%rax
// 220: 89 c5                         movl    %eax, %ebp
// 222: 49 8b 45 00                   movq    (%r13), %rax
// 226: 48 85 c0                      testq   %rax, %rax
// 229: 7f 22                         jg      0x24d <_JIT_ENTRY+0x24d>
// 22b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022d:  R_X86_64_64  .rodata.str1.1
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_NegativeRefcount
// 23f: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 244: 4c 89 ea                      movq    %r13, %rdx
// 247: ff d0                         callq   *%rax
// 249: 49 8b 45 00                   movq    (%r13), %rax
// 24d: 4d 8d 77 f8                   leaq    -0x8(%r15), %r14
// 251: 85 c0                         testl   %eax, %eax
// 253: 78 21                         js      0x276 <_JIT_ENTRY+0x276>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25f: ff d0                         callq   *%rax
// 261: 49 ff 4d 00                   decq    (%r13)
// 265: 75 0f                         jne     0x276 <_JIT_ENTRY+0x276>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_Dealloc
// 271: 4c 89 ef                      movq    %r13, %rdi
// 274: ff d0                         callq   *%rax
// 276: 85 ed                         testl   %ebp, %ebp
// 278: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 27c: 74 09                         je      0x287 <_JIT_ENTRY+0x287>
// 27e: 49 83 c7 f8                   addq    $-0x8, %r15
// 282: e9 d9 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_CONTINUE
// 291: 48 89 df                      movq    %rbx, %rdi
// 294: 4c 89 fe                      movq    %r15, %rsi
// 297: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: ff e0                         jmpq    *%rax
// 2ac: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_ADD_code_body[685] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc4, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xd7, 0x48, 0xf7, 0xda, 0x4d, 0x8b, 0x6c, 0x14, 0xf8, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x3c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x77, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x09, 0x49, 0x83, 0xc7, 0xf8, 0xe9, 0xd9, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_ADD_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_ADD_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_ADD_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 ff                      testq   %r15, %r15
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 d0                      movzwl  %ax, %edx
// 1e7: 89 d1                         movl    %edx, %ecx
// 1e9: f7 d1                         notl    %ecx
// 1eb: 48 63 c9                      movslq  %ecx, %rcx
// 1ee: 4d 89 3c ce                   movq    %r15, (%r14,%rcx,8)
// 1f2: 0f b7 c0                      movzwl  %ax, %eax
// 1f5: 48 c1 e0 03                   shlq    $0x3, %rax
// 1f9: 4c 89 f6                      movq    %r14, %rsi
// 1fc: 48 29 c6                      subq    %rax, %rsi
// 1ff: 48 f7 d8                      negq    %rax
// 202: 49 8b 44 06 f8                movq    -0x8(%r14,%rax), %rax
// 207: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 20b: 83 fa 03                      cmpl    $0x3, %edx
// 20e: 7f 10                         jg      0x220 <_JIT_ENTRY+0x220>
// 210: 83 fa 01                      cmpl    $0x1, %edx
// 213: 74 1b                         je      0x230 <_JIT_ENTRY+0x230>
// 215: 83 fa 02                      cmpl    $0x2, %edx
// 218: 75 61                         jne     0x27b <_JIT_ENTRY+0x27b>
// 21a: 48 8d 50 40                   leaq    0x40(%rax), %rdx
// 21e: eb 1a                         jmp     0x23a <_JIT_ENTRY+0x23a>
// 220: 83 fa 04                      cmpl    $0x4, %edx
// 223: 74 11                         je      0x236 <_JIT_ENTRY+0x236>
// 225: 83 fa 08                      cmpl    $0x8, %edx
// 228: 75 51                         jne     0x27b <_JIT_ENTRY+0x27b>
// 22a: 48 8d 50 48                   leaq    0x48(%rax), %rdx
// 22e: eb 0a                         jmp     0x23a <_JIT_ENTRY+0x23a>
// 230: 48 8d 50 38                   leaq    0x38(%rax), %rdx
// 234: eb 04                         jmp     0x23a <_JIT_ENTRY+0x23a>
// 236: 48 8d 50 70                   leaq    0x70(%rax), %rdx
// 23a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 23e: 48 89 0a                      movq    %rcx, (%rdx)
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _JIT_OPARG
// 24b: 0f b7 c9                      movzwl  %cx, %ecx
// 24e: 48 c1 e1 03                   shlq    $0x3, %rcx
// 252: 49 29 ce                      subq    %rcx, %r14
// 255: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 26b: 48 83 c4 18                   addq    $0x18, %rsp
// 26f: 5b                            popq    %rbx
// 270: 41 5c                         popq    %r12
// 272: 41 5d                         popq    %r13
// 274: 41 5e                         popq    %r14
// 276: 41 5f                         popq    %r15
// 278: 5d                            popq    %rbp
// 279: ff e0                         jmpq    *%rax
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1+0x5f
// 285: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000287:  R_X86_64_64  .rodata.str1.1+0x6a
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_FatalErrorFunc
// 299: ff d0                         callq   *%rax
// 29b: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE_code_body[668] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x89, 0x3c, 0xce, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf6, 0x48, 0x29, 0xc6, 0x48, 0xf7, 0xd8, 0x49, 0x8b, 0x44, 0x06, 0xf8, 0x48, 0x8b, 0x4e, 0xf0, 0x83, 0xfa, 0x03, 0x7f, 0x10, 0x83, 0xfa, 0x01, 0x74, 0x1b, 0x83, 0xfa, 0x02, 0x75, 0x61, 0x48, 0x8d, 0x50, 0x40, 0xeb, 0x1a, 0x83, 0xfa, 0x04, 0x74, 0x11, 0x83, 0xfa, 0x08, 0x75, 0x51, 0x48, 0x8d, 0x50, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x50, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x50, 0x70, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x0a, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x287, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x6a},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// f6: 00 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE_data_body[249] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_SET_IP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_SET_IP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fe: 49 29 c6                      subq    %rax, %r14
// 201: 48 8b 03                      movq    (%rbx), %rax
// 204: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 208: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 20e: 48 89 43 38                   movq    %rax, 0x38(%rbx)
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_CONTINUE
// 21c: 48 89 df                      movq    %rbx, %rdi
// 21f: 4c 89 f6                      movq    %r14, %rsi
// 222: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 227: 48 83 c4 18                   addq    $0x18, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: ff e0                         jmpq    *%rax
// 237: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_IP_code_body[568] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_IP_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_IP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_IP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_SET_UPDATE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_SET_UPDATE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fc                      movq    %r15, %r12
// 160: 49 29 dc                      subq    %rbx, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 1fc: 4d 89 fe                      movq    %r15, %r14
// 1ff: 49 29 d6                      subq    %rdx, %r14
// 202: 48 f7 da                      negq    %rdx
// 205: 4d 8b 6c 17 f8                movq    -0x8(%r15,%rdx), %r13
// 20a: 48 29 c8                      subq    %rcx, %rax
// 20d: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _PySet_Update
// 21b: 4c 89 ee                      movq    %r13, %rsi
// 21e: ff d0                         callq   *%rax
// 220: 89 c5                         movl    %eax, %ebp
// 222: 49 8b 45 00                   movq    (%r13), %rax
// 226: 48 85 c0                      testq   %rax, %rax
// 229: 7f 22                         jg      0x24d <_JIT_ENTRY+0x24d>
// 22b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022d:  R_X86_64_64  .rodata.str1.1
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_NegativeRefcount
// 23f: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 244: 4c 89 ea                      movq    %r13, %rdx
// 247: ff d0                         callq   *%rax
// 249: 49 8b 45 00                   movq    (%r13), %rax
// 24d: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 251: 85 c0                         testl   %eax, %eax
// 253: 78 21                         js      0x276 <_JIT_ENTRY+0x276>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25f: ff d0                         callq   *%rax
// 261: 49 ff 4d 00                   decq    (%r13)
// 265: 75 0f                         jne     0x276 <_JIT_ENTRY+0x276>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_Dealloc
// 271: 4c 89 ef                      movq    %r13, %rdi
// 274: ff d0                         callq   *%rax
// 276: 85 ed                         testl   %ebp, %ebp
// 278: 4d 0f 48 e6                   cmovsq  %r14, %r12
// 27c: 78 25                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _JIT_CONTINUE
// 288: 48 89 df                      movq    %rbx, %rdi
// 28b: 4c 89 e6                      movq    %r12, %rsi
// 28e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 293: 48 83 c4 18                   addq    $0x18, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 49 83 c4 f8                   addq    $-0x8, %r12
// 2a7: e9 b4 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 2ac: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_UPDATE_code_body[685] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xd6, 0x48, 0xf7, 0xda, 0x4d, 0x8b, 0x6c, 0x17, 0xf8, 0x48, 0x29, 0xc8, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xe6, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0xe9, 0xb4, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_UPDATE_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_SET_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_SET_UPDATE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_ATTR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 e7                      movq    %r12, %r15
// 160: 49 29 df                      subq    %rbx, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 4d 89 e7                      movq    %r12, %r15
// 1ff: 49 29 c7                      subq    %rax, %r15
// 202: 48 f7 d8                      negq    %rax
// 205: 4d 8b 64 04 f8                movq    -0x8(%r12,%rax), %r12
// 20a: 4d 8b 6f f0                   movq    -0x10(%r15), %r13
// 20e: 48 8b 03                      movq    (%rbx), %rax
// 211: 48 8b 40 20                   movq    0x20(%rax), %rax
// 215: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  PyObject_SetAttr
// 224: 4c 89 e7                      movq    %r12, %rdi
// 227: 4c 89 ea                      movq    %r13, %rdx
// 22a: ff d0                         callq   *%rax
// 22c: 89 c5                         movl    %eax, %ebp
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 48 85 c0                      testq   %rax, %rax
// 235: 7f 22                         jg      0x259 <_JIT_ENTRY+0x259>
// 237: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000239:  R_X86_64_64  .rodata.str1.1
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_NegativeRefcount
// 24b: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 250: 4c 89 ea                      movq    %r13, %rdx
// 253: ff d0                         callq   *%rax
// 255: 49 8b 45 00                   movq    (%r13), %rax
// 259: 85 c0                         testl   %eax, %eax
// 25b: 78 21                         js      0x27e <_JIT_ENTRY+0x27e>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 267: ff d0                         callq   *%rax
// 269: 49 ff 4d 00                   decq    (%r13)
// 26d: 75 0f                         jne     0x27e <_JIT_ENTRY+0x27e>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_Dealloc
// 279: 4c 89 ef                      movq    %r13, %rdi
// 27c: ff d0                         callq   *%rax
// 27e: 49 8b 04 24                   movq    (%r12), %rax
// 282: 48 85 c0                      testq   %rax, %rax
// 285: 7f 22                         jg      0x2a9 <_JIT_ENTRY+0x2a9>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 2a0: 4c 89 e2                      movq    %r12, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 04 24                   movq    (%r12), %rax
// 2a9: 4d 8d 77 f0                   leaq    -0x10(%r15), %r14
// 2ad: 85 c0                         testl   %eax, %eax
// 2af: 78 21                         js      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 ff 0c 24                   decq    (%r12)
// 2c1: 75 0f                         jne     0x2d2 <_JIT_ENTRY+0x2d2>
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _Py_Dealloc
// 2cd: 4c 89 e7                      movq    %r12, %rdi
// 2d0: ff d0                         callq   *%rax
// 2d2: 85 ed                         testl   %ebp, %ebp
// 2d4: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 2d8: 74 09                         je      0x2e3 <_JIT_ENTRY+0x2e3>
// 2da: 49 83 c7 f0                   addq    $-0x10, %r15
// 2de: e9 7d fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _JIT_CONTINUE
// 2ed: 48 89 df                      movq    %rbx, %rdi
// 2f0: 4c 89 fe                      movq    %r15, %rsi
// 2f3: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2f8: 48 83 c4 18                   addq    $0x18, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: ff e0                         jmpq    *%rax
// 308: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_ATTR_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc4, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xc7, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x04, 0xf8, 0x4d, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x09, 0x49, 0x83, 0xc7, 0xf0, 0xe9, 0x7d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_ATTR_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_ATTR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_ATTR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 7c 0f f8                movq    -0x8(%r15,%rcx), %r15
// 211: 49 8b 4c 24 f0                movq    -0x10(%r12), %rcx
// 216: 49 8b 47 e8                   movq    -0x18(%r15), %rax
// 21a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000021c:  R_X86_64_64  _JIT_OPERAND
// 224: 0f b7 d2                      movzwl  %dx, %edx
// 227: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 22c: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 231: 4d 85 ed                      testq   %r13, %r13
// 234: 74 56                         je      0x28c <_JIT_ENTRY+0x28c>
// 236: 49 8b 45 00                   movq    (%r13), %rax
// 23a: 48 85 c0                      testq   %rax, %rax
// 23d: 7f 22                         jg      0x261 <_JIT_ENTRY+0x261>
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_NegativeRefcount
// 253: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 258: 4c 89 ea                      movq    %r13, %rdx
// 25b: ff d0                         callq   *%rax
// 25d: 49 8b 45 00                   movq    (%r13), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 4c 8b 34 24                   movq    (%rsp), %r14
// 267: 78 43                         js      0x2ac <_JIT_ENTRY+0x2ac>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 4d 00                   decq    (%r13)
// 279: 75 31                         jne     0x2ac <_JIT_ENTRY+0x2ac>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 ef                      movq    %r13, %rdi
// 288: ff d0                         callq   *%rax
// 28a: eb 20                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 28c: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 290: 8d 51 01                      leal    0x1(%rcx), %edx
// 293: 48 f7 d1                      notq    %rcx
// 296: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000298:  R_X86_64_64  _JIT_OPERAND
// 2a0: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 2a5: 88 50 ff                      movb    %dl, -0x1(%rax)
// 2a8: 4c 8b 34 24                   movq    (%rsp), %r14
// 2ac: 49 8b 07                      movq    (%r15), %rax
// 2af: 48 85 c0                      testq   %rax, %rax
// 2b2: 7f 21                         jg      0x2d5 <_JIT_ENTRY+0x2d5>
// 2b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b6:  R_X86_64_64  .rodata.str1.1
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_NegativeRefcount
// 2c8: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 2cd: 4c 89 fa                      movq    %r15, %rdx
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 07                      movq    (%r15), %rax
// 2d5: 49 83 c4 f0                   addq    $-0x10, %r12
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 78 20                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e7: ff d0                         callq   *%rax
// 2e9: 49 ff 0f                      decq    (%r15)
// 2ec: 75 0f                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 4c 89 ff                      movq    %r15, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ff:  R_X86_64_64  _JIT_CONTINUE
// 307: 48 89 df                      movq    %rbx, %rdi
// 30a: 4c 89 e6                      movq    %r12, %rsi
// 30d: 4c 89 f2                      movq    %r14, %rdx
// 310: 48 83 c4 18                   addq    $0x18, %rsp
// 314: 5b                            popq    %rbx
// 315: 41 5c                         popq    %r12
// 317: 41 5d                         popq    %r13
// 319: 41 5e                         popq    %r14
// 31b: 41 5f                         popq    %r15
// 31d: 5d                            popq    %rbp
// 31e: ff e0                         jmpq    *%rax
// 320: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE_code_body[801] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x7c, 0x0f, 0xf8, 0x49, 0x8b, 0x4c, 0x24, 0xf0, 0x49, 0x8b, 0x47, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x56, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x20, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc4, 0xf0, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 7c 0f f8                movq    -0x8(%r15,%rcx), %r15
// 211: 49 8b 44 24 f0                movq    -0x10(%r12), %rax
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  _JIT_OPERAND
// 220: 0f b7 c9                      movzwl  %cx, %ecx
// 223: 4d 8b 2c 0f                   movq    (%r15,%rcx), %r13
// 227: 49 89 04 0f                   movq    %rax, (%r15,%rcx)
// 22b: 4d 85 ed                      testq   %r13, %r13
// 22e: 74 50                         je      0x280 <_JIT_ENTRY+0x280>
// 230: 49 8b 45 00                   movq    (%r13), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 7f 22                         jg      0x25b <_JIT_ENTRY+0x25b>
// 239: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023b:  R_X86_64_64  .rodata.str1.1+0x5f
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_NegativeRefcount
// 24d: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 252: 4c 89 ea                      movq    %r13, %rdx
// 255: ff d0                         callq   *%rax
// 257: 49 8b 45 00                   movq    (%r13), %rax
// 25b: 85 c0                         testl   %eax, %eax
// 25d: 78 21                         js      0x280 <_JIT_ENTRY+0x280>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 269: ff d0                         callq   *%rax
// 26b: 49 ff 4d 00                   decq    (%r13)
// 26f: 75 0f                         jne     0x280 <_JIT_ENTRY+0x280>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 ef                      movq    %r13, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 07                      movq    (%r15), %rax
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 7f 21                         jg      0x2a9 <_JIT_ENTRY+0x2a9>
// 288: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028a:  R_X86_64_64  .rodata.str1.1
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NegativeRefcount
// 29c: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 2a1: 4c 89 fa                      movq    %r15, %rdx
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 8b 07                      movq    (%r15), %rax
// 2a9: 49 83 c4 f0                   addq    $-0x10, %r12
// 2ad: 85 c0                         testl   %eax, %eax
// 2af: 4c 8b 34 24                   movq    (%rsp), %r14
// 2b3: 78 20                         js      0x2d5 <_JIT_ENTRY+0x2d5>
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bf: ff d0                         callq   *%rax
// 2c1: 49 ff 0f                      decq    (%r15)
// 2c4: 75 0f                         jne     0x2d5 <_JIT_ENTRY+0x2d5>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_Dealloc
// 2d0: 4c 89 ff                      movq    %r15, %rdi
// 2d3: ff d0                         callq   *%rax
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _JIT_CONTINUE
// 2df: 48 89 df                      movq    %rbx, %rdi
// 2e2: 4c 89 e6                      movq    %r12, %rsi
// 2e5: 4c 89 f2                      movq    %r14, %rdx
// 2e8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ec: 5b                            popq    %rbx
// 2ed: 41 5c                         popq    %r12
// 2ef: 41 5d                         popq    %r13
// 2f1: 41 5e                         popq    %r14
// 2f3: 41 5f                         popq    %r15
// 2f5: 5d                            popq    %rbp
// 2f6: ff e0                         jmpq    *%rax
// 2f8: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x7c, 0x0f, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0f, 0x49, 0x89, 0x04, 0x0f, 0x4d, 0x85, 0xed, 0x74, 0x50, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc4, 0xf0, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 8f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_DEREF
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// d5: 49 8b 06                      movq    (%r14), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fd                      movq    %r15, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 4c 89 fa                      movq    %r15, %rdx
// 1ff: 48 29 c2                      subq    %rax, %rdx
// 202: 48 f7 d8                      negq    %rax
// 205: 49 01 c7                      addq    %rax, %r15
// 208: 49 83 c7 f8                   addq    $-0x8, %r15
// 20c: 48 8b 42 f8                   movq    -0x8(%rdx), %rax
// 210: 48 8b 4c cb 48                movq    0x48(%rbx,%rcx,8), %rcx
// 215: 4c 8b 61 10                   movq    0x10(%rcx), %r12
// 219: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 21d: 4d 85 e4                      testq   %r12, %r12
// 220: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 225: 74 50                         je      0x277 <_JIT_ENTRY+0x277>
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 7f 22                         jg      0x252 <_JIT_ENTRY+0x252>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1+0x5f
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_NegativeRefcount
// 244: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 249: 4c 89 e2                      movq    %r12, %rdx
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 04 24                   movq    (%r12), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 21                         js      0x277 <_JIT_ENTRY+0x277>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 49 ff 0c 24                   decq    (%r12)
// 266: 75 0f                         jne     0x277 <_JIT_ENTRY+0x277>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_Dealloc
// 272: 4c 89 e7                      movq    %r12, %rdi
// 275: ff d0                         callq   *%rax
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 fe                      movq    %r15, %rsi
// 287: 4c 89 f2                      movq    %r14, %rdx
// 28a: 48 83 c4 18                   addq    $0x18, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_DEREF_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0x29, 0xc2, 0x48, 0xf7, 0xd8, 0x49, 0x01, 0xc7, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x8b, 0x42, 0xf8, 0x48, 0x8b, 0x4c, 0xcb, 0x48, 0x4c, 0x8b, 0x61, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xe4, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_DEREF_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 8f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_DEREF_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_DEREF_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_FAST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fe: 4c 89 fa                      movq    %r15, %rdx
// 201: 48 29 c2                      subq    %rax, %rdx
// 204: 48 f7 d8                      negq    %rax
// 207: 49 01 c7                      addq    %rax, %r15
// 20a: 49 83 c7 f8                   addq    $-0x8, %r15
// 20e: 48 8b 42 f8                   movq    -0x8(%rdx), %rax
// 212: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 217: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 21c: 4d 85 e4                      testq   %r12, %r12
// 21f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 224: 74 50                         je      0x276 <_JIT_ENTRY+0x276>
// 226: 49 8b 04 24                   movq    (%r12), %rax
// 22a: 48 85 c0                      testq   %rax, %rax
// 22d: 7f 22                         jg      0x251 <_JIT_ENTRY+0x251>
// 22f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000231:  R_X86_64_64  .rodata.str1.1+0x5f
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_NegativeRefcount
// 243: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 248: 4c 89 e2                      movq    %r12, %rdx
// 24b: ff d0                         callq   *%rax
// 24d: 49 8b 04 24                   movq    (%r12), %rax
// 251: 85 c0                         testl   %eax, %eax
// 253: 78 21                         js      0x276 <_JIT_ENTRY+0x276>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25f: ff d0                         callq   *%rax
// 261: 49 ff 0c 24                   decq    (%r12)
// 265: 75 0f                         jne     0x276 <_JIT_ENTRY+0x276>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_Dealloc
// 271: 4c 89 e7                      movq    %r12, %rdi
// 274: ff d0                         callq   *%rax
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _JIT_CONTINUE
// 280: 48 89 df                      movq    %rbx, %rdi
// 283: 4c 89 fe                      movq    %r15, %rsi
// 286: 4c 89 f2                      movq    %r14, %rdx
// 289: 48 83 c4 18                   addq    $0x18, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_FAST_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0x29, 0xc2, 0x48, 0xf7, 0xd8, 0x49, 0x01, 0xc7, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0x8b, 0x42, 0xf8, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_FAST_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 8f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_FAST_data_body[145] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_FAST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_GLOBAL
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 e7                      movq    %r12, %r15
// 160: 49 29 df                      subq    %rbx, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 1f4: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fc: 4d 89 e7                      movq    %r12, %r15
// 1ff: 49 29 c7                      subq    %rax, %r15
// 202: 48 f7 d8                      negq    %rax
// 205: 4d 8b 64 04 f8                movq    -0x8(%r12,%rax), %r12
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 211: 48 8b 40 20                   movq    0x20(%rax), %rax
// 215: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  PyDict_SetItem
// 224: 4c 89 e2                      movq    %r12, %rdx
// 227: ff d0                         callq   *%rax
// 229: 89 c5                         movl    %eax, %ebp
// 22b: 49 8b 04 24                   movq    (%r12), %rax
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 7f 22                         jg      0x256 <_JIT_ENTRY+0x256>
// 234: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000236:  R_X86_64_64  .rodata.str1.1
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_NegativeRefcount
// 248: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 24d: 4c 89 e2                      movq    %r12, %rdx
// 250: ff d0                         callq   *%rax
// 252: 49 8b 04 24                   movq    (%r12), %rax
// 256: 4d 8d 77 f8                   leaq    -0x8(%r15), %r14
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 21                         js      0x27f <_JIT_ENTRY+0x27f>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 268: ff d0                         callq   *%rax
// 26a: 49 ff 0c 24                   decq    (%r12)
// 26e: 75 0f                         jne     0x27f <_JIT_ENTRY+0x27f>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_Dealloc
// 27a: 4c 89 e7                      movq    %r12, %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 85 ed                         testl   %ebp, %ebp
// 281: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 285: 74 09                         je      0x290 <_JIT_ENTRY+0x290>
// 287: 49 83 c7 f8                   addq    $-0x8, %r15
// 28b: e9 d0 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _JIT_CONTINUE
// 29a: 48 89 df                      movq    %rbx, %rdi
// 29d: 4c 89 fe                      movq    %r15, %rsi
// 2a0: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a5: 48 83 c4 18                   addq    $0x18, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: ff e0                         jmpq    *%rax
// 2b5: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_GLOBAL_code_body[694] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc4, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xc7, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x04, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x09, 0x49, 0x83, 0xc7, 0xf8, 0xe9, 0xd0, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_GLOBAL_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_GLOBAL_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_GLOBAL_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_NAME
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 34 c4                   leaq    (%r12,%rax,8), %r14
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 f2                      movq    %r14, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x59
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e6                      movq    %r12, %r14
// 156: 49 29 de                      subq    %rbx, %r14
// 159: 49 83 c6 b8                   addq    $-0x48, %r14
// 15d: 49 c1 ee 03                   shrq    $0x3, %r14
// 161: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c4                   movq    %r15, (%r12,%rax,8)
// 1ef: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1f7: 4d 89 e6                      movq    %r12, %r14
// 1fa: 49 29 c6                      subq    %rax, %r14
// 1fd: 49 83 c6 f8                   addq    $-0x8, %r14
// 201: 48 f7 d8                      negq    %rax
// 204: 4d 8b 64 04 f8                movq    -0x8(%r12,%rax), %r12
// 209: 48 8b 03                      movq    (%rbx), %rax
// 20c: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 210: 48 8b 40 20                   movq    0x20(%rax), %rax
// 214: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 219: 48 85 ff                      testq   %rdi, %rdi
// 21c: 74 23                         je      0x241 <_JIT_ENTRY+0x241>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  PyDict_Type
// 228: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 22c: 0f 84 96 00 00 00             je      0x2c8 <_JIT_ENTRY+0x2c8>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  PyObject_SetItem
// 23c: e9 91 00 00 00                jmp     0x2d2 <_JIT_ENTRY+0x2d2>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  PyExc_SystemError
// 24b: 48 8b 30                      movq    (%rax), %rsi
// 24e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000250:  R_X86_64_64  .rodata.str1.1+0x39
// 258: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000025a:  R_X86_64_64  _PyErr_Format
// 262: 48 8b 3c 24                   movq    (%rsp), %rdi
// 266: 31 c0                         xorl    %eax, %eax
// 268: 41 ff d0                      callq   *%r8
// 26b: 49 8b 04 24                   movq    (%r12), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7f 22                         jg      0x296 <_JIT_ENTRY+0x296>
// 274: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_NegativeRefcount
// 288: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 28d: 4c 89 e2                      movq    %r12, %rdx
// 290: ff d0                         callq   *%rax
// 292: 49 8b 04 24                   movq    (%r12), %rax
// 296: 85 c0                         testl   %eax, %eax
// 298: 0f 88 b8 fe ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 ff 0c 24                   decq    (%r12)
// 2ae: 0f 85 a2 fe ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: 4c 89 e7                      movq    %r12, %rdi
// 2c1: ff d0                         callq   *%rax
// 2c3: e9 8e fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  PyDict_SetItem
// 2d2: 48 89 ce                      movq    %rcx, %rsi
// 2d5: 4c 89 e2                      movq    %r12, %rdx
// 2d8: ff d0                         callq   *%rax
// 2da: 89 c5                         movl    %eax, %ebp
// 2dc: 49 8b 04 24                   movq    (%r12), %rax
// 2e0: 48 85 c0                      testq   %rax, %rax
// 2e3: 7f 22                         jg      0x307 <_JIT_ENTRY+0x307>
// 2e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_NegativeRefcount
// 2f9: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 2fe: 4c 89 e2                      movq    %r12, %rdx
// 301: ff d0                         callq   *%rax
// 303: 49 8b 04 24                   movq    (%r12), %rax
// 307: 85 c0                         testl   %eax, %eax
// 309: 78 21                         js      0x32c <_JIT_ENTRY+0x32c>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 315: ff d0                         callq   *%rax
// 317: 49 ff 0c 24                   decq    (%r12)
// 31b: 75 0f                         jne     0x32c <_JIT_ENTRY+0x32c>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_Dealloc
// 327: 4c 89 e7                      movq    %r12, %rdi
// 32a: ff d0                         callq   *%rax
// 32c: 85 ed                         testl   %ebp, %ebp
// 32e: 0f 85 22 fe ff ff             jne     0x156 <_JIT_ENTRY+0x156>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _JIT_CONTINUE
// 33e: 48 89 df                      movq    %rbx, %rdi
// 341: 4c 89 f6                      movq    %r14, %rsi
// 344: 48 8b 14 24                   movq    (%rsp), %rdx
// 348: 48 83 c4 18                   addq    $0x18, %rsp
// 34c: 5b                            popq    %rbx
// 34d: 41 5c                         popq    %r12
// 34f: 41 5d                         popq    %r13
// 351: 41 5e                         popq    %r14
// 353: 41 5f                         popq    %r15
// 355: 5d                            popq    %rbp
// 356: ff e0                         jmpq    *%rax
// 358: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_NAME_code_body[857] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc4, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x04, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xb8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xa2, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x8e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x22, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_NAME_code_holes[34] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x59},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 7f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_NAME_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_NAME_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_SLICE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_SLICE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 fa                      movq    %r15, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e7                      movq    %r12, %r15
// 156: 4d 29 f7                      subq    %r14, %r15
// 159: 49 83 c7 b8                   addq    $-0x48, %r15
// 15d: 49 c1 ef 03                   shrq    $0x3, %r15
// 161: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1a8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 85 db                      testq   %rbx, %rbx
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 49 89 1c c4                   movq    %rbx, (%r12,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 e7                      movq    %r12, %r15
// 1f6: 49 29 cf                      subq    %rcx, %r15
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 49 8b 74 0c f8                movq    -0x8(%r12,%rcx), %rsi
// 201: 49 8b 7f f0                   movq    -0x10(%r15), %rdi
// 205: 4d 8b 6f e0                   movq    -0x20(%r15), %r13
// 209: 4d 8b 67 e8                   movq    -0x18(%r15), %r12
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 217: ff d0                         callq   *%rax
// 219: 48 85 c0                      testq   %rax, %rax
// 21c: 0f 84 4a 01 00 00             je      0x36c <_JIT_ENTRY+0x36c>
// 222: 48 89 c5                      movq    %rax, %rbp
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  PyObject_SetItem
// 22f: 4c 89 e7                      movq    %r12, %rdi
// 232: 48 89 ee                      movq    %rbp, %rsi
// 235: 4c 89 ea                      movq    %r13, %rdx
// 238: ff d0                         callq   *%rax
// 23a: 89 c3                         movl    %eax, %ebx
// 23c: 48 8b 45 00                   movq    (%rbp), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 7f 22                         jg      0x267 <_JIT_ENTRY+0x267>
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_NegativeRefcount
// 259: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 25e: 48 89 ea                      movq    %rbp, %rdx
// 261: ff d0                         callq   *%rax
// 263: 48 8b 45 00                   movq    (%rbp), %rax
// 267: 85 c0                         testl   %eax, %eax
// 269: 78 21                         js      0x28c <_JIT_ENTRY+0x28c>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 48 ff 4d 00                   decq    (%rbp)
// 27b: 75 0f                         jne     0x28c <_JIT_ENTRY+0x28c>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_Dealloc
// 287: 48 89 ef                      movq    %rbp, %rdi
// 28a: ff d0                         callq   *%rax
// 28c: 85 db                         testl   %ebx, %ebx
// 28e: 40 0f 94 c5                   sete    %bpl
// 292: 49 8b 45 00                   movq    (%r13), %rax
// 296: 48 85 c0                      testq   %rax, %rax
// 299: 7f 22                         jg      0x2bd <_JIT_ENTRY+0x2bd>
// 29b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029d:  R_X86_64_64  .rodata.str1.1
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_NegativeRefcount
// 2af: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 2b4: 4c 89 ea                      movq    %r13, %rdx
// 2b7: ff d0                         callq   *%rax
// 2b9: 49 8b 45 00                   movq    (%r13), %rax
// 2bd: 85 c0                         testl   %eax, %eax
// 2bf: 78 21                         js      0x2e2 <_JIT_ENTRY+0x2e2>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 ff 4d 00                   decq    (%r13)
// 2d1: 75 0f                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 2d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d5:  R_X86_64_64  _Py_Dealloc
// 2dd: 4c 89 ef                      movq    %r13, %rdi
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 8b 04 24                   movq    (%r12), %rax
// 2e6: 48 85 c0                      testq   %rax, %rax
// 2e9: 7f 22                         jg      0x30d <_JIT_ENTRY+0x30d>
// 2eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ed:  R_X86_64_64  .rodata.str1.1
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_NegativeRefcount
// 2ff: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 304: 4c 89 e2                      movq    %r12, %rdx
// 307: ff d0                         callq   *%rax
// 309: 49 8b 04 24                   movq    (%r12), %rax
// 30d: 49 8d 5f e0                   leaq    -0x20(%r15), %rbx
// 311: 85 c0                         testl   %eax, %eax
// 313: 78 21                         js      0x336 <_JIT_ENTRY+0x336>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31f: ff d0                         callq   *%rax
// 321: 49 ff 0c 24                   decq    (%r12)
// 325: 75 0f                         jne     0x336 <_JIT_ENTRY+0x336>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_Dealloc
// 331: 4c 89 e7                      movq    %r12, %rdi
// 334: ff d0                         callq   *%rax
// 336: 40 84 ed                      testb   %bpl, %bpl
// 339: 4c 0f 45 fb                   cmovneq %rbx, %r15
// 33d: 74 24                         je      0x363 <_JIT_ENTRY+0x363>
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _JIT_CONTINUE
// 349: 4c 89 f7                      movq    %r14, %rdi
// 34c: 4c 89 fe                      movq    %r15, %rsi
// 34f: 48 8b 14 24                   movq    (%rsp), %rdx
// 353: 48 83 c4 18                   addq    $0x18, %rsp
// 357: 5b                            popq    %rbx
// 358: 41 5c                         popq    %r12
// 35a: 41 5d                         popq    %r13
// 35c: 41 5e                         popq    %r14
// 35e: 41 5f                         popq    %r15
// 360: 5d                            popq    %rbp
// 361: ff e0                         jmpq    *%rax
// 363: 49 83 c7 e0                   addq    $-0x20, %r15
// 367: e9 ea fd ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 36c: 31 ed                         xorl    %ebp, %ebp
// 36e: 49 8b 45 00                   movq    (%r13), %rax
// 372: 48 85 c0                      testq   %rax, %rax
// 375: 0f 8f 42 ff ff ff             jg      0x2bd <_JIT_ENTRY+0x2bd>
// 37b: e9 1b ff ff ff                jmp     0x29b <_JIT_ENTRY+0x29b>
// 380: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SLICE_code_body[897] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x74, 0x0c, 0xf8, 0x49, 0x8b, 0x7f, 0xf0, 0x4d, 0x8b, 0x6f, 0xe0, 0x4d, 0x8b, 0x67, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x4a, 0x01, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xdb, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x5f, 0xe0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x4c, 0x0f, 0x45, 0xfb, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc7, 0xe0, 0xe9, 0xea, 0xfd, 0xff, 0xff, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x42, 0xff, 0xff, 0xff, 0xe9, 0x1b, 0xff, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SLICE_code_holes[34] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SLICE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SLICE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 08 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 f1 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: f7 d0                         notl    %eax
// 57: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5c: 48 98                         cltq
// 5e: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 62: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 66: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _PyDict_FromItems
// 7e: be 01 00 00 00                movl    $0x1, %esi
// 83: b9 01 00 00 00                movl    $0x1, %ecx
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 92: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 99: 0f 8e e1 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_OPARG
// a9: 0f b7 e8                      movzwl  %ax, %ebp
// ac: 48 ff c5                      incq    %rbp
// af: eb 1c                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 e7                      movq    %r12, %r15
// 160: 49 29 df                      subq    %rbx, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 ea                      movq    %r13, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 4d 00                   decq    (%r13)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 ef                      movq    %r13, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 e7                      movq    %r12, %r15
// 1fb: 49 29 cf                      subq    %rcx, %r15
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 64 0c f8                movq    -0x8(%r12,%rcx), %r12
// 206: 49 8b 6f e8                   movq    -0x18(%r15), %rbp
// 20a: 4d 8b 6f f0                   movq    -0x10(%r15), %r13
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  PyObject_SetItem
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: 4c 89 e6                      movq    %r12, %rsi
// 21e: 48 89 ea                      movq    %rbp, %rdx
// 221: ff d0                         callq   *%rax
// 223: 89 44 24 08                   movl    %eax, 0x8(%rsp)
// 227: 48 8b 45 00                   movq    (%rbp), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 7f 22                         jg      0x252 <_JIT_ENTRY+0x252>
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_NegativeRefcount
// 244: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 249: 48 89 ea                      movq    %rbp, %rdx
// 24c: ff d0                         callq   *%rax
// 24e: 48 8b 45 00                   movq    (%rbp), %rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 78 21                         js      0x277 <_JIT_ENTRY+0x277>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 260: ff d0                         callq   *%rax
// 262: 48 ff 4d 00                   decq    (%rbp)
// 266: 75 0f                         jne     0x277 <_JIT_ENTRY+0x277>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_Dealloc
// 272: 48 89 ef                      movq    %rbp, %rdi
// 275: ff d0                         callq   *%rax
// 277: 49 8b 45 00                   movq    (%r13), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 7f 22                         jg      0x2a2 <_JIT_ENTRY+0x2a2>
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_NegativeRefcount
// 294: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 299: 4c 89 ea                      movq    %r13, %rdx
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 45 00                   movq    (%r13), %rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 78 21                         js      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 4d 00                   decq    (%r13)
// 2b6: 75 0f                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 ef                      movq    %r13, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 8b 04 24                   movq    (%r12), %rax
// 2cb: 48 85 c0                      testq   %rax, %rax
// 2ce: 7f 22                         jg      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_NegativeRefcount
// 2e4: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 2e9: 4c 89 e2                      movq    %r12, %rdx
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 04 24                   movq    (%r12), %rax
// 2f2: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 2f6: 85 c0                         testl   %eax, %eax
// 2f8: 78 21                         js      0x31b <_JIT_ENTRY+0x31b>
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 304: ff d0                         callq   *%rax
// 306: 49 ff 0c 24                   decq    (%r12)
// 30a: 75 0f                         jne     0x31b <_JIT_ENTRY+0x31b>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _Py_Dealloc
// 316: 4c 89 e7                      movq    %r12, %rdi
// 319: ff d0                         callq   *%rax
// 31b: 83 7c 24 08 00                cmpl    $0x0, 0x8(%rsp)
// 320: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 324: 74 09                         je      0x32f <_JIT_ENTRY+0x32f>
// 326: 49 83 c7 e8                   addq    $-0x18, %r15
// 32a: e9 31 fe ff ff                jmp     0x160 <_JIT_ENTRY+0x160>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _JIT_CONTINUE
// 339: 48 89 df                      movq    %rbx, %rdi
// 33c: 4c 89 fe                      movq    %r15, %rsi
// 33f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 344: 48 83 c4 18                   addq    $0x18, %rsp
// 348: 5b                            popq    %rbx
// 349: 41 5c                         popq    %r12
// 34b: 41 5d                         popq    %r13
// 34d: 41 5e                         popq    %r14
// 34f: 41 5f                         popq    %r15
// 351: 5d                            popq    %rbp
// 352: ff e0                         jmpq    *%rax
// 354: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_code_body[853] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0c, 0xf8, 0x49, 0x8b, 0x6f, 0xe8, 0x4d, 0x8b, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x09, 0x49, 0x83, 0xc7, 0xe8, 0xe9, 0x31, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_code_holes[33] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4a: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPARG
// 59: f7 d0                         notl    %eax
// 5b: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 60: 48 98                         cltq
// 62: 4d 8d 3c c4                   leaq    (%r12,%rax,8), %r15
// 66: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 44 0f b7 c3                   movzwl  %bx, %r8d
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _PyDict_FromItems
// 82: be 01 00 00 00                movl    $0x1, %esi
// 87: b9 01 00 00 00                movl    $0x1, %ecx
// 8c: 4c 89 fa                      movq    %r15, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 e7                      movq    %r12, %r15
// 156: 4d 29 f7                      subq    %r14, %r15
// 159: 49 83 c7 b8                   addq    $-0x48, %r15
// 15d: 49 c1 ef 03                   shrq    $0x3, %r15
// 161: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1a8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 85 db                      testq   %rbx, %rbx
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 49 89 1c c4                   movq    %rbx, (%r12,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 e7                      movq    %r12, %r15
// 1f6: 49 29 cf                      subq    %rcx, %r15
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 4d 8b 6c 0c f0                movq    -0x10(%r12,%rcx), %r13
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  PyDict_Type
// 20b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 20f: 74 2d                         je      0x23e <_JIT_ENTRY+0x23e>
// 211: 4d 29 f7                      subq    %r14, %r15
// 214: 49 83 c7 b8                   addq    $-0x48, %r15
// 218: 49 c1 ef 03                   shrq    $0x3, %r15
// 21c: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 220: 49 8b 06                      movq    (%r14), %rax
// 223: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000225:  R_X86_64_64  _JIT_TARGET
// 22d: 89 c9                         movl    %ecx, %ecx
// 22f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 233: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 239: e9 29 ff ff ff                jmp     0x167 <_JIT_ENTRY+0x167>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_OPARG
// 248: 0f b7 c0                      movzwl  %ax, %eax
// 24b: 48 c1 e0 03                   shlq    $0x3, %rax
// 24f: 49 29 c4                      subq    %rax, %r12
// 252: 49 8b 54 24 e8                movq    -0x18(%r12), %rdx
// 257: 49 8b 74 24 f8                movq    -0x8(%r12), %rsi
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _PyDict_SetItem_Take2
// 266: 4c 89 ef                      movq    %r13, %rdi
// 269: ff d0                         callq   *%rax
// 26b: 89 c5                         movl    %eax, %ebp
// 26d: 49 8b 45 00                   movq    (%r13), %rax
// 271: 48 85 c0                      testq   %rax, %rax
// 274: 7f 22                         jg      0x298 <_JIT_ENTRY+0x298>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_NegativeRefcount
// 28a: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 28f: 4c 89 ea                      movq    %r13, %rdx
// 292: ff d0                         callq   *%rax
// 294: 49 8b 45 00                   movq    (%r13), %rax
// 298: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 78 21                         js      0x2c1 <_JIT_ENTRY+0x2c1>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 ff 4d 00                   decq    (%r13)
// 2b0: 75 0f                         jne     0x2c1 <_JIT_ENTRY+0x2c1>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 4c 89 ef                      movq    %r13, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 85 ed                         testl   %ebp, %ebp
// 2c3: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 2c7: 74 09                         je      0x2d2 <_JIT_ENTRY+0x2d2>
// 2c9: 49 83 c7 e8                   addq    $-0x18, %r15
// 2cd: e9 84 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _JIT_CONTINUE
// 2dc: 4c 89 f7                      movq    %r14, %rdi
// 2df: 4c 89 fe                      movq    %r15, %rsi
// 2e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ea: 5b                            popq    %rbx
// 2eb: 41 5c                         popq    %r12
// 2ed: 41 5d                         popq    %r13
// 2ef: 41 5e                         popq    %r14
// 2f1: 41 5f                         popq    %r15
// 2f3: 5d                            popq    %rbp
// 2f4: ff e0                         jmpq    *%rax
// 2f6: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT_code_body[759] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf4, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc4, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc4, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0c, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x2d, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x29, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc4, 0x49, 0x8b, 0x54, 0x24, 0xe8, 0x49, 0x8b, 0x74, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x74, 0x09, 0x49, 0x83, 0xc7, 0xe8, 0xe9, 0x84, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 f6                      testq   %r14, %r14
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyLong_Type
// 21b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 21f: 0f 85 2f 01 00 00             jne     0x354 <_JIT_ENTRY+0x354>
// 225: 4d 8b 7c 24 f0                movq    -0x10(%r12), %r15
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyList_Type
// 234: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 238: 0f 85 16 01 00 00             jne     0x354 <_JIT_ENTRY+0x354>
// 23e: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 243: 0f 87 0b 01 00 00             ja      0x354 <_JIT_ENTRY+0x354>
// 249: 41 8b 45 18                   movl    0x18(%r13), %eax
// 24d: 49 39 47 10                   cmpq    %rax, 0x10(%r15)
// 251: 0f 8e fd 00 00 00             jle     0x354 <_JIT_ENTRY+0x354>
// 257: 49 8b 4c 24 e8                movq    -0x18(%r12), %rcx
// 25c: 49 8b 57 18                   movq    0x18(%r15), %rdx
// 260: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 264: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 268: 48 8b 45 00                   movq    (%rbp), %rax
// 26c: 48 85 c0                      testq   %rax, %rax
// 26f: 7f 22                         jg      0x293 <_JIT_ENTRY+0x293>
// 271: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000273:  R_X86_64_64  .rodata.str1.1
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_NegativeRefcount
// 285: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 28a: 48 89 ea                      movq    %rbp, %rdx
// 28d: ff d0                         callq   *%rax
// 28f: 48 8b 45 00                   movq    (%rbp), %rax
// 293: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000295:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 78 18                         js      0x2b9 <_JIT_ENTRY+0x2b9>
// 2a1: 41 ff d6                      callq   *%r14
// 2a4: 48 ff 4d 00                   decq    (%rbp)
// 2a8: 75 0f                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: 48 89 ef                      movq    %rbp, %rdi
// 2b7: ff d0                         callq   *%rax
// 2b9: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2be: 75 28                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  PyInterpreterState_Get
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d3: 49 ff 4d 00                   decq    (%r13)
// 2d7: 75 0f                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  PyObject_Free
// 2e3: 4c 89 ef                      movq    %r13, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 8b 07                      movq    (%r15), %rax
// 2eb: 48 85 c0                      testq   %rax, %rax
// 2ee: 7f 21                         jg      0x311 <_JIT_ENTRY+0x311>
// 2f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_NegativeRefcount
// 304: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 309: 4c 89 fa                      movq    %r15, %rdx
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 07                      movq    (%r15), %rax
// 311: 49 83 c4 e8                   addq    $-0x18, %r12
// 315: 85 c0                         testl   %eax, %eax
// 317: 78 17                         js      0x330 <_JIT_ENTRY+0x330>
// 319: 41 ff d6                      callq   *%r14
// 31c: 49 ff 0f                      decq    (%r15)
// 31f: 75 0f                         jne     0x330 <_JIT_ENTRY+0x330>
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _Py_Dealloc
// 32b: 4c 89 ff                      movq    %r15, %rdi
// 32e: ff d0                         callq   *%rax
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _JIT_CONTINUE
// 33a: 48 89 df                      movq    %rbx, %rdi
// 33d: 4c 89 e6                      movq    %r12, %rsi
// 340: 48 8b 14 24                   movq    (%rsp), %rdx
// 344: 48 83 c4 18                   addq    $0x18, %rsp
// 348: 5b                            popq    %rbx
// 349: 41 5c                         popq    %r12
// 34b: 41 5d                         popq    %r13
// 34d: 41 5e                         popq    %r14
// 34f: 41 5f                         popq    %r15
// 351: 5d                            popq    %rbp
// 352: ff e0                         jmpq    *%rax
// 354: 49 29 dc                      subq    %rbx, %r12
// 357: 49 83 c4 b8                   addq    $-0x48, %r12
// 35b: 49 c1 ec 03                   shrq    $0x3, %r12
// 35f: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 363: 48 8b 03                      movq    (%rbx), %rax
// 366: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000368:  R_X86_64_64  _JIT_TARGET
// 370: 89 c9                         movl    %ecx, %ecx
// 372: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 376: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 37c: e9 f6 fd ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 381: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT_code_body[898] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x7c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x0f, 0x85, 0x16, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x0b, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x47, 0x10, 0x0f, 0x8e, 0xfd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0xe8, 0x49, 0x8b, 0x57, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc4, 0xe8, 0x85, 0xc0, 0x78, 0x17, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xf6, 0xfd, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_SWAP
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_SWAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 1fe: 4c 89 f6                      movq    %r14, %rsi
// 201: 48 29 c6                      subq    %rax, %rsi
// 204: 48 f7 d8                      negq    %rax
// 207: 48 8b 56 f8                   movq    -0x8(%rsi), %rdx
// 20b: 48 01 c9                      addq    %rcx, %rcx
// 20e: 48 f7 d9                      negq    %rcx
// 211: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// 215: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 219: 49 89 7c 06 f8                movq    %rdi, -0x8(%r14,%rax)
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_CONTINUE
// 228: 48 89 df                      movq    %rbx, %rdi
// 22b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 230: 48 83 c4 18                   addq    $0x18, %rsp
// 234: 5b                            popq    %rbx
// 235: 41 5c                         popq    %r12
// 237: 41 5d                         popq    %r13
// 239: 41 5e                         popq    %r14
// 23b: 41 5f                         popq    %r15
// 23d: 5d                            popq    %rbp
// 23e: ff e0                         jmpq    *%rax
// 240: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_SWAP_code_body[577] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0x48, 0x29, 0xc6, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x56, 0xf8, 0x48, 0x01, 0xc9, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x3c, 0xce, 0x49, 0x89, 0x14, 0xce, 0x49, 0x89, 0x7c, 0x06, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_SWAP_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_SWAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_SWAP_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_TO_BOOL
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_TO_BOOL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1b8: 78 21                         js      0x1db <_JIT_ENTRY+0x1db>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 ff 0c 24                   decq    (%r12)
// 1ca: 75 0f                         jne     0x1db <_JIT_ENTRY+0x1db>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e0: 48 85 c9                      testq   %rcx, %rcx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1f3: f7 d0                         notl    %eax
// 1f5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1fa: 48 98                         cltq
// 1fc: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 200: 49 c1 e7 03                   shlq    $0x3, %r15
// 204: 4c 89 f8                      movq    %r15, %rax
// 207: 48 f7 d8                      negq    %rax
// 20a: 4d 8b 64 06 f8                movq    -0x8(%r14,%rax), %r12
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  PyObject_IsTrue
// 219: 4c 89 e7                      movq    %r12, %rdi
// 21c: ff d0                         callq   *%rax
// 21e: 89 c5                         movl    %eax, %ebp
// 220: 49 8b 04 24                   movq    (%r12), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be 86 00 00 00                movl    $0x86, %esi
// 242: 4c 89 e2                      movq    %r12, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 04 24                   movq    (%r12), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 78 21                         js      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 259: ff d0                         callq   *%rax
// 25b: 49 ff 0c 24                   decq    (%r12)
// 25f: 75 0f                         jne     0x270 <_JIT_ENTRY+0x270>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 e7                      movq    %r12, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 85 ed                         testl   %ebp, %ebp
// 272: 78 56                         js      0x2ca <_JIT_ENTRY+0x2ca>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_OPARG
// 27e: 0f b7 c0                      movzwl  %ax, %eax
// 281: 48 c1 e0 03                   shlq    $0x3, %rax
// 285: 49 29 c6                      subq    %rax, %r14
// 288: 85 ed                         testl   %ebp, %ebp
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_FalseStruct
// 294: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000296:  R_X86_64_64  _Py_TrueStruct
// 29e: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2a2: 49 89 4e f8                   movq    %rcx, -0x8(%r14)
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _JIT_CONTINUE
// 2b0: 48 89 df                      movq    %rbx, %rdi
// 2b3: 4c 89 f6                      movq    %r14, %rsi
// 2b6: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ba: 48 83 c4 18                   addq    $0x18, %rsp
// 2be: 5b                            popq    %rbx
// 2bf: 41 5c                         popq    %r12
// 2c1: 41 5d                         popq    %r13
// 2c3: 41 5e                         popq    %r14
// 2c5: 41 5f                         popq    %r15
// 2c7: 5d                            popq    %rbp
// 2c8: ff e0                         jmpq    *%rax
// 2ca: 4d 29 fe                      subq    %r15, %r14
// 2cd: 49 83 c6 f8                   addq    $-0x8, %r14
// 2d1: e9 8d fe ff ff                jmp     0x163 <_JIT_ENTRY+0x163>
// 2d6: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_code_body[727] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0xc1, 0xe7, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x06, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x78, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0x8d, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// d5: 49 8b 06                      movq    (%r14), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fd                      movq    %r15, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 206: 49 8b 45 08                   movq    0x8(%r13), %rax
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  _JIT_OPERAND
// 214: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 21a: 0f 85 97 00 00 00             jne     0x2b7 <_JIT_ENTRY+0x2b7>
// 220: 49 8b 45 00                   movq    (%r13), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be db 00 00 00                movl    $0xdb, %esi
// 242: 4c 89 ea                      movq    %r13, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 45 00                   movq    (%r13), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 78 21                         js      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 259: ff d0                         callq   *%rax
// 25b: 49 ff 4d 00                   decq    (%r13)
// 25f: 75 0f                         jne     0x270 <_JIT_ENTRY+0x270>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ef                      movq    %r13, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _JIT_OPARG
// 27a: 0f b7 c0                      movzwl  %ax, %eax
// 27d: 48 c1 e0 03                   shlq    $0x3, %rax
// 281: 49 29 c7                      subq    %rax, %r15
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_TrueStruct
// 28e: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _JIT_CONTINUE
// 29c: 48 89 df                      movq    %rbx, %rdi
// 29f: 4c 89 e6                      movq    %r12, %rsi
// 2a2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a7: 48 83 c4 18                   addq    $0x18, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: ff e0                         jmpq    *%rax
// 2b7: 49 29 dc                      subq    %rbx, %r12
// 2ba: 49 83 c4 b8                   addq    $-0x48, %r12
// 2be: 49 c1 ec 03                   shrq    $0x3, %r12
// 2c2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2c6: 48 8b 03                      movq    (%rbx), %rax
// 2c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cb:  R_X86_64_64  _JIT_TARGET
// 2d3: 89 c9                         movl    %ecx, %ecx
// 2d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2df: e9 8d fe ff ff                jmp     0x171 <_JIT_ENTRY+0x171>
// 2e4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE_code_body[741] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x97, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8d, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 49 8b 44 0f f8                movq    -0x8(%r15,%rcx), %rax
// 208: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020a:  R_X86_64_64  PyBool_Type
// 212: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 216: 74 2c                         je      0x244 <_JIT_ENTRY+0x244>
// 218: 48 29 de                      subq    %rbx, %rsi
// 21b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 21f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 223: 89 73 40                      movl    %esi, 0x40(%rbx)
// 226: 48 8b 03                      movq    (%rbx), %rax
// 229: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022b:  R_X86_64_64  _JIT_TARGET
// 233: 89 c9                         movl    %ecx, %ecx
// 235: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 239: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23f: e9 2f ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_CONTINUE
// 24e: 48 89 df                      movq    %rbx, %rdi
// 251: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 256: 48 83 c4 18                   addq    $0x18, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x44, 0x0f, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_TO_BOOL_INT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_TO_BOOL_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 4d 29 f5                      subq    %r14, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 45 89 6e 40                   movl    %r13d, 0x40(%r14)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 db                      testq   %rbx, %rbx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyLong_Type
// 21b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 21f: 74 2d                         je      0x24e <_JIT_ENTRY+0x24e>
// 221: 4d 29 f4                      subq    %r14, %r12
// 224: 49 83 c4 b8                   addq    $-0x48, %r12
// 228: 49 c1 ec 03                   shrq    $0x3, %r12
// 22c: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 230: 49 8b 06                      movq    (%r14), %rax
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_TARGET
// 23d: 89 c9                         movl    %ecx, %ecx
// 23f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 243: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 249: e9 29 ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 24e: 41 8b 45 10                   movl    0x10(%r13), %eax
// 252: 83 e0 03                      andl    $0x3, %eax
// 255: 83 f8 01                      cmpl    $0x1, %eax
// 258: 75 0c                         jne     0x266 <_JIT_ENTRY+0x266>
// 25a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000025c:  R_X86_64_64  _Py_FalseStruct
// 264: eb 5a                         jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 266: 49 8b 45 00                   movq    (%r13), %rax
// 26a: 48 85 c0                      testq   %rax, %rax
// 26d: 7f 22                         jg      0x291 <_JIT_ENTRY+0x291>
// 26f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000271:  R_X86_64_64  .rodata.str1.1
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_NegativeRefcount
// 283: be a0 00 00 00                movl    $0xa0, %esi
// 288: 4c 89 ea                      movq    %r13, %rdx
// 28b: ff d0                         callq   *%rax
// 28d: 49 8b 45 00                   movq    (%r13), %rax
// 291: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000293:  R_X86_64_64  _Py_TrueStruct
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 21                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 ff 4d 00                   decq    (%r13)
// 2af: 75 0f                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 ef                      movq    %r13, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 48 8b 14 24                   movq    (%rsp), %rdx
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _JIT_OPARG
// 2ce: 0f b7 c0                      movzwl  %ax, %eax
// 2d1: 48 c1 e0 03                   shlq    $0x3, %rax
// 2d5: 49 29 c7                      subq    %rax, %r15
// 2d8: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _JIT_CONTINUE
// 2e6: 4c 89 f7                      movq    %r14, %rdi
// 2e9: 4c 89 e6                      movq    %r12, %rsi
// 2ec: 48 83 c4 18                   addq    $0x18, %rsp
// 2f0: 5b                            popq    %rbx
// 2f1: 41 5c                         popq    %r12
// 2f3: 41 5d                         popq    %r13
// 2f5: 41 5e                         popq    %r14
// 2f7: 41 5f                         popq    %r15
// 2f9: 5d                            popq    %rbp
// 2fa: ff e0                         jmpq    *%rax
// 2fc: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_INT_code_body[765] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x4d, 0x29, 0xf5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x2d, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x29, 0xff, 0xff, 0xff, 0x41, 0x8b, 0x45, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_INT_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_INT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_INT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// d5: 49 8b 06                      movq    (%r14), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0e                      decq    (%r14)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 f7                      movq    %r14, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 fd                      movq    %r15, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 4d 85 f6                      testq   %r14, %r14
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 c8                      movzwl  %ax, %ecx
// 1e7: f7 d0                         notl    %eax
// 1e9: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ee: 48 98                         cltq
// 1f0: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f8: 4d 89 fc                      movq    %r15, %r12
// 1fb: 49 29 cc                      subq    %rcx, %r12
// 1fe: 48 f7 d9                      negq    %rcx
// 201: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  PyList_Type
// 210: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 214: 74 2d                         je      0x243 <_JIT_ENTRY+0x243>
// 216: 49 29 dc                      subq    %rbx, %r12
// 219: 49 83 c4 b8                   addq    $-0x48, %r12
// 21d: 49 c1 ec 03                   shrq    $0x3, %r12
// 221: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 225: 48 8b 03                      movq    (%rbx), %rax
// 228: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022a:  R_X86_64_64  _JIT_TARGET
// 232: 89 c9                         movl    %ecx, %ecx
// 234: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 238: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23e: e9 2e ff ff ff                jmp     0x171 <_JIT_ENTRY+0x171>
// 243: 49 8b 45 00                   movq    (%r13), %rax
// 247: 4d 8b 75 10                   movq    0x10(%r13), %r14
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 7f 22                         jg      0x272 <_JIT_ENTRY+0x272>
// 250: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000252:  R_X86_64_64  .rodata.str1.1
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_NegativeRefcount
// 264: be ae 00 00 00                movl    $0xae, %esi
// 269: 4c 89 ea                      movq    %r13, %rdx
// 26c: ff d0                         callq   *%rax
// 26e: 49 8b 45 00                   movq    (%r13), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 21                         js      0x297 <_JIT_ENTRY+0x297>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 4d 00                   decq    (%r13)
// 286: 75 0f                         jne     0x297 <_JIT_ENTRY+0x297>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_Dealloc
// 292: 4c 89 ef                      movq    %r13, %rdi
// 295: ff d0                         callq   *%rax
// 297: 4d 85 f6                      testq   %r14, %r14
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_FalseStruct
// 2a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a6:  R_X86_64_64  _Py_TrueStruct
// 2ae: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _JIT_OPARG
// 2bc: 0f b7 c0                      movzwl  %ax, %eax
// 2bf: 48 c1 e0 03                   shlq    $0x3, %rax
// 2c3: 49 29 c7                      subq    %rax, %r15
// 2c6: 49 89 4f f8                   movq    %rcx, -0x8(%r15)
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _JIT_CONTINUE
// 2d4: 48 89 df                      movq    %rbx, %rdi
// 2d7: 4c 89 e6                      movq    %r12, %rsi
// 2da: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2df: 48 83 c4 18                   addq    $0x18, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: ff e0                         jmpq    *%rax
// 2ef: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST_code_body[752] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2e, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8b, 0x75, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x4f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f0                   movzwl  %ax, %r14d
// b0: 49 ff c6                      incq    %r14
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff ce                      decq    %r14
// c3: 49 83 fe 01                   cmpq    $0x1, %r14
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 fd                      movq    %r15, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 f6                      testq   %r14, %r14
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 fe                      movq    %r15, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_NoneStruct
// 20d: 49 39 44 0f f8                cmpq    %rax, -0x8(%r15,%rcx)
// 212: 74 2c                         je      0x240 <_JIT_ENTRY+0x240>
// 214: 48 29 de                      subq    %rbx, %rsi
// 217: 48 83 c6 b8                   addq    $-0x48, %rsi
// 21b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 21f: 89 73 40                      movl    %esi, 0x40(%rbx)
// 222: 48 8b 03                      movq    (%rbx), %rax
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  _JIT_TARGET
// 22f: 89 c9                         movl    %ecx, %ecx
// 231: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 235: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23b: e9 33 ff ff ff                jmp     0x173 <_JIT_ENTRY+0x173>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _JIT_OPARG
// 24a: 0f b7 c0                      movzwl  %ax, %eax
// 24d: 48 c1 e0 03                   shlq    $0x3, %rax
// 251: 49 29 c7                      subq    %rax, %r15
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_FalseStruct
// 25e: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_CONTINUE
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE_code_body[645] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xfe, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x0f, 0xf8, 0x74, 0x2c, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x33, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_TO_BOOL_STR
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_TO_BOOL_STR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// e5: 49 8b 06                      movq    (%r14), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 f2                      movq    %r14, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 06                      movq    (%r14), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0e                      decq    (%r14)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 f7                      movq    %r14, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 fd                      movq    %r15, %r13
// 166: 4d 29 f5                      subq    %r14, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 45 89 6e 40                   movl    %r13d, 0x40(%r14)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1b8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 db                      testq   %rbx, %rbx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 fc                      movq    %r15, %r12
// 206: 49 29 cc                      subq    %rcx, %r12
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 6c 0f f8                movq    -0x8(%r15,%rcx), %r13
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyUnicode_Type
// 21b: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 21f: 74 2d                         je      0x24e <_JIT_ENTRY+0x24e>
// 221: 4d 29 f4                      subq    %r14, %r12
// 224: 49 83 c4 b8                   addq    $-0x48, %r12
// 228: 49 c1 ec 03                   shrq    $0x3, %r12
// 22c: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 230: 49 8b 06                      movq    (%r14), %rax
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_TARGET
// 23d: 89 c9                         movl    %ecx, %ecx
// 23f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 243: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 249: e9 29 ff ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _PyRuntime
// 258: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 25e: 49 39 c5                      cmpq    %rax, %r13
// 261: 74 5c                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 263: 49 8b 45 00                   movq    (%r13), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7f 22                         jg      0x28e <_JIT_ENTRY+0x28e>
// 26c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026e:  R_X86_64_64  .rodata.str1.1
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_NegativeRefcount
// 280: be cb 00 00 00                movl    $0xcb, %esi
// 285: 4c 89 ea                      movq    %r13, %rdx
// 288: ff d0                         callq   *%rax
// 28a: 49 8b 45 00                   movq    (%r13), %rax
// 28e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000290:  R_X86_64_64  _Py_TrueStruct
// 298: 85 c0                         testl   %eax, %eax
// 29a: 78 2d                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 ff 4d 00                   decq    (%r13)
// 2ac: 75 1b                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 4c 89 ef                      movq    %r13, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: eb 0a                         jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 2bf: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002c1:  R_X86_64_64  _Py_FalseStruct
// 2c9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_OPARG
// 2d7: 0f b7 c0                      movzwl  %ax, %eax
// 2da: 48 c1 e0 03                   shlq    $0x3, %rax
// 2de: 49 29 c7                      subq    %rax, %r15
// 2e1: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _JIT_CONTINUE
// 2ef: 4c 89 f7                      movq    %r14, %rdi
// 2f2: 4c 89 e6                      movq    %r12, %rsi
// 2f5: 48 83 c4 18                   addq    $0x18, %rsp
// 2f9: 5b                            popq    %rbx
// 2fa: 41 5c                         popq    %r12
// 2fc: 41 5d                         popq    %r13
// 2fe: 41 5e                         popq    %r14
// 300: 41 5f                         popq    %r15
// 302: 5d                            popq    %rbp
// 303: ff e0                         jmpq    *%rax
// 305: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_STR_code_body[774] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x4d, 0x29, 0xf5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x6c, 0x0f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x2d, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x29, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc5, 0x74, 0x5c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc7, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_STR_code_holes[30] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_TO_BOOL_STR_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_TO_BOOL_STR_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNARY_INVERT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNARY_INVERT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1e8: f7 d0                         notl    %eax
// 1ea: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ef: 48 98                         cltq
// 1f1: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1f5: 49 c1 e7 03                   shlq    $0x3, %r15
// 1f9: 4c 89 f8                      movq    %r15, %rax
// 1fc: 48 f7 d8                      negq    %rax
// 1ff: 4d 8b 6c 06 f8                movq    -0x8(%r14,%rax), %r13
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  PyNumber_Invert
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: ff d0                         callq   *%rax
// 213: 49 89 c4                      movq    %rax, %r12
// 216: 49 8b 45 00                   movq    (%r13), %rax
// 21a: 48 85 c0                      testq   %rax, %rax
// 21d: 7f 22                         jg      0x241 <_JIT_ENTRY+0x241>
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_NegativeRefcount
// 233: be e6 00 00 00                movl    $0xe6, %esi
// 238: 4c 89 ea                      movq    %r13, %rdx
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 45 00                   movq    (%r13), %rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 78 21                         js      0x266 <_JIT_ENTRY+0x266>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24f: ff d0                         callq   *%rax
// 251: 49 ff 4d 00                   decq    (%r13)
// 255: 75 0f                         jne     0x266 <_JIT_ENTRY+0x266>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 ef                      movq    %r13, %rdi
// 264: ff d0                         callq   *%rax
// 266: 4d 85 e4                      testq   %r12, %r12
// 269: 74 3d                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_OPARG
// 275: 0f b7 c0                      movzwl  %ax, %eax
// 278: 48 c1 e0 03                   shlq    $0x3, %rax
// 27c: 49 29 c6                      subq    %rax, %r14
// 27f: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 4c 89 f6                      movq    %r14, %rsi
// 293: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 298: 48 83 c4 18                   addq    $0x18, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: ff e0                         jmpq    *%rax
// 2a8: 4d 29 fe                      subq    %r15, %r14
// 2ab: 49 83 c6 f8                   addq    $-0x8, %r14
// 2af: e9 a9 fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2b4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNARY_INVERT_code_body[693] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0xc1, 0xe7, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x06, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0xa9, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_UNARY_INVERT_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNARY_INVERT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNARY_INVERT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 07 01 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 ef 00 00 00             jne     0x137 <_JIT_ENTRY+0x137>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e de 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: eb 19                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e b3 00 00 00             jle     0x180 <_JIT_ENTRY+0x180>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 13                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dd: 85 c0                         testl   %eax, %eax
// df: 78 df                         js      0xc0 <_JIT_ENTRY+0xc0>
// e1: eb 32                         jmp     0x115 <_JIT_ENTRY+0x115>
// e3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 49 ff 0f                      decq    (%r15)
// 124: 75 9a                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 126: 4c 89 ff                      movq    %r15, %rdi
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_Dealloc
// 133: ff d0                         callq   *%rax
// 135: eb 89                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyExc_SystemError
// 141: 48 8b 30                      movq    (%rax), %rsi
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  .rodata.str1.1+0x39
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _PyErr_SetString
// 158: 48 89 cf                      movq    %rcx, %rdi
// 15b: ff d0                         callq   *%rax
// 15d: 4d 89 f5                      movq    %r14, %r13
// 160: 49 29 dd                      subq    %rbx, %r13
// 163: 49 83 c5 b8                   addq    $-0x48, %r13
// 167: 49 c1 ed 03                   shrq    $0x3, %r13
// 16b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 18                   addq    $0x18, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7f 22                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 189: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NegativeRefcount
// 19d: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a2: 4c 89 e2                      movq    %r12, %rdx
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 0c 24                   decq    (%r12)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d5: 48 85 c9                      testq   %rcx, %rcx
// 1d8: 74 86                         je      0x160 <_JIT_ENTRY+0x160>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 44 0f b7 f8                   movzwl  %ax, %r15d
// 1e8: f7 d0                         notl    %eax
// 1ea: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1ef: 48 98                         cltq
// 1f1: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 1f5: 49 c1 e7 03                   shlq    $0x3, %r15
// 1f9: 4c 89 f8                      movq    %r15, %rax
// 1fc: 48 f7 d8                      negq    %rax
// 1ff: 4d 8b 6c 06 f8                movq    -0x8(%r14,%rax), %r13
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  PyNumber_Negative
// 20e: 4c 89 ef                      movq    %r13, %rdi
// 211: ff d0                         callq   *%rax
// 213: 49 89 c4                      movq    %rax, %r12
// 216: 49 8b 45 00                   movq    (%r13), %rax
// 21a: 48 85 c0                      testq   %rax, %rax
// 21d: 7f 22                         jg      0x241 <_JIT_ENTRY+0x241>
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_NegativeRefcount
// 233: be 71 00 00 00                movl    $0x71, %esi
// 238: 4c 89 ea                      movq    %r13, %rdx
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 45 00                   movq    (%r13), %rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 78 21                         js      0x266 <_JIT_ENTRY+0x266>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24f: ff d0                         callq   *%rax
// 251: 49 ff 4d 00                   decq    (%r13)
// 255: 75 0f                         jne     0x266 <_JIT_ENTRY+0x266>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 ef                      movq    %r13, %rdi
// 264: ff d0                         callq   *%rax
// 266: 4d 85 e4                      testq   %r12, %r12
// 269: 74 3d                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _JIT_OPARG
// 275: 0f b7 c0                      movzwl  %ax, %eax
// 278: 48 c1 e0 03                   shlq    $0x3, %rax
// 27c: 49 29 c6                      subq    %rax, %r14
// 27f: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 4c 89 f6                      movq    %r14, %rsi
// 293: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 298: 48 83 c4 18                   addq    $0x18, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: ff e0                         jmpq    *%rax
// 2a8: 4d 29 fe                      subq    %r15, %r14
// 2ab: 49 83 c6 f8                   addq    $-0x8, %r14
// 2af: e9 a9 fe ff ff                jmp     0x15d <_JIT_ENTRY+0x15d>
// 2b4: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE_code_body[693] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb3, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x9a, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x0c, 0xc6, 0x49, 0xc1, 0xe7, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x6c, 0x06, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x29, 0xc6, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0xe9, 0xa9, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNARY_NOT
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNARY_NOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 09 01 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f1 00 00 00             jne     0x139 <_JIT_ENTRY+0x139>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 64: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 69: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _PyDict_FromItems
// 81: be 01 00 00 00                movl    $0x1, %esi
// 86: b9 01 00 00 00                movl    $0x1, %ecx
// 8b: 4c 89 ea                      movq    %r13, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 95: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 9c: 0f 8e e0 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 44 0f b7 f8                   movzwl  %ax, %r15d
// b0: 49 ff c7                      incq    %r15
// b3: eb 18                         jmp     0xcd <_JIT_ENTRY+0xcd>
// b5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// c0: 49 ff cf                      decq    %r15
// c3: 49 83 ff 01                   cmpq    $0x1, %r15
// c7: 0f 8e b5 00 00 00             jle     0x182 <_JIT_ENTRY+0x182>
// cd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// d1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// d6: 48 8b 45 00                   movq    (%rbp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 7e 11                         jle     0xf0 <_JIT_ENTRY+0xf0>
// df: 85 c0                         testl   %eax, %eax
// e1: 78 dd                         js      0xc0 <_JIT_ENTRY+0xc0>
// e3: eb 31                         jmp     0x116 <_JIT_ENTRY+0x116>
// e5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 48 89 ea                      movq    %rbp, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 45 00                   movq    (%rbp), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 aa                         js      0xc0 <_JIT_ENTRY+0xc0>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 120: ff d0                         callq   *%rax
// 122: 48 ff 4d 00                   decq    (%rbp)
// 126: 75 98                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 128: 48 89 ef                      movq    %rbp, %rdi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: ff d0                         callq   *%rax
// 137: eb 87                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  PyExc_SystemError
// 143: 48 8b 30                      movq    (%rax), %rsi
// 146: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x39
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _PyErr_SetString
// 15a: 48 89 cf                      movq    %rcx, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 4d 89 f5                      movq    %r14, %r13
// 162: 49 29 dd                      subq    %rbx, %r13
// 165: 49 83 c5 b8                   addq    $-0x48, %r13
// 169: 49 c1 ed 03                   shrq    $0x3, %r13
// 16d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 171: 31 c0                         xorl    %eax, %eax
// 173: 48 83 c4 18                   addq    $0x18, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: c3                            retq
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 7f 22                         jg      0x1ad <_JIT_ENTRY+0x1ad>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 85 ff                      testq   %r15, %r15
// 1da: 74 86                         je      0x162 <_JIT_ENTRY+0x162>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c8                      movzwl  %ax, %ecx
// 1e9: f7 d0                         notl    %eax
// 1eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f0: 48 98                         cltq
// 1f2: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1f6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1fa: 4c 89 f6                      movq    %r14, %rsi
// 1fd: 48 29 ce                      subq    %rcx, %rsi
// 200: 48 f7 d9                      negq    %rcx
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_FalseStruct
// 20d: 48 39 46 f8                   cmpq    %rax, -0x8(%rsi)
// 211: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000213:  R_X86_64_64  _Py_TrueStruct
// 21b: 48 0f 45 d0                   cmovneq %rax, %rdx
// 21f: 49 89 54 0e f8                movq    %rdx, -0x8(%r14,%rcx)
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_CONTINUE
// 22e: 48 89 df                      movq    %rbx, %rdi
// 231: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 236: 48 83 c4 18                   addq    $0x18, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: ff e0                         jmpq    *%rax
// 246: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNARY_NOT_code_body[583] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x18, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf6, 0x48, 0x29, 0xce, 0x48, 0xf7, 0xd9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd0, 0x49, 0x89, 0x54, 0x0e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_UNARY_NOT_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNARY_NOT_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNARY_NOT_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNPACK_EX
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNPACK_EX.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 34 24                   movq    (%rsp), %rsi
// 1d4: 48 85 f6                      testq   %rsi, %rsi
// 1d7: 0f 84 79 ff ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 c8                      movzwl  %ax, %ecx
// 1ea: 89 ca                         movl    %ecx, %edx
// 1ec: f7 d2                         notl    %edx
// 1ee: 48 63 d2                      movslq  %edx, %rdx
// 1f1: 49 89 34 d7                   movq    %rsi, (%r15,%rdx,8)
// 1f5: 0f b7 f0                      movzwl  %ax, %esi
// 1f8: 48 8d 14 f5 00 00 00 00       leaq    (,%rsi,8), %rdx
// 200: 48 f7 da                      negq    %rdx
// 203: 4d 8b 64 17 f8                movq    -0x8(%r15,%rdx), %r12
// 208: 0f b6 d0                      movzbl  %al, %edx
// 20b: c1 e9 08                      shrl    $0x8, %ecx
// 20e: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 211: ff c0                         incl    %eax
// 213: 48 29 f0                      subq    %rsi, %rax
// 216: 4d 8d 04 c7                   leaq    (%r15,%rax,8), %r8
// 21a: 49 83 c0 f8                   addq    $-0x8, %r8
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _PyEval_UnpackIterable
// 228: 4c 89 f7                      movq    %r14, %rdi
// 22b: 4c 89 e6                      movq    %r12, %rsi
// 22e: ff d0                         callq   *%rax
// 230: 89 c5                         movl    %eax, %ebp
// 232: 49 8b 04 24                   movq    (%r12), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 254: 4c 89 e2                      movq    %r12, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 04 24                   movq    (%r12), %rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 49 ff 0c 24                   decq    (%r12)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 e7                      movq    %r12, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_OPARG
// 28c: 0f b6 c8                      movzbl  %al, %ecx
// 28f: 0f b6 d4                      movzbl  %ah, %edx
// 292: 01 ca                         addl    %ecx, %edx
// 294: 0f b7 c0                      movzwl  %ax, %eax
// 297: 48 29 c2                      subq    %rax, %rdx
// 29a: 48 f7 d8                      negq    %rax
// 29d: 85 ed                         testl   %ebp, %ebp
// 29f: 48 0f 45 c2                   cmovneq %rdx, %rax
// 2a3: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 2a7: 74 23                         je      0x2cc <_JIT_ENTRY+0x2cc>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _JIT_CONTINUE
// 2b3: 48 89 df                      movq    %rbx, %rdi
// 2b6: 4c 89 e6                      movq    %r12, %rsi
// 2b9: 4c 89 f2                      movq    %r14, %rdx
// 2bc: 48 83 c4 18                   addq    $0x18, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: ff e0                         jmpq    *%rax
// 2cc: 49 83 c4 f8                   addq    $-0x8, %r12
// 2d0: e9 81 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2d5: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_EX_code_body[726] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x49, 0x89, 0x34, 0xd7, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x14, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4d, 0x8b, 0x64, 0x17, 0xf8, 0x0f, 0xb6, 0xd0, 0xc1, 0xe9, 0x08, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x48, 0x29, 0xf0, 0x4d, 0x8d, 0x04, 0xc7, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xd4, 0x01, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc2, 0x48, 0xf7, 0xd8, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc2, 0x4d, 0x8d, 0x24, 0xc7, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0xe9, 0x81, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_EX_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_EX_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_EX_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4b: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 04 24                   movq    %rax, (%rsp)
// 96: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9c: 0f 8e d4 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _JIT_OPARG
// ac: 0f b7 e8                      movzwl  %ax, %ebp
// af: 48 ff c5                      incq    %rbp
// b2: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: eb 0f                         jmp     0xcd <_JIT_ENTRY+0xcd>
// be: 66 90                         nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// d4: 49 8b 06                      movq    (%r14), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 f2                      movq    %r14, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0e                      decq    (%r14)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 f7                      movq    %r14, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 18                   addq    $0x18, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1a8: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 34 24                   movq    (%rsp), %rsi
// 1d4: 48 85 f6                      testq   %rsi, %rsi
// 1d7: 0f 84 79 ff ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: 0f b7 d0                      movzwl  %ax, %edx
// 1ea: 89 d1                         movl    %edx, %ecx
// 1ec: f7 d1                         notl    %ecx
// 1ee: 48 63 c9                      movslq  %ecx, %rcx
// 1f1: 49 89 34 cf                   movq    %rsi, (%r15,%rcx,8)
// 1f5: 0f b7 c0                      movzwl  %ax, %eax
// 1f8: 48 c1 e0 03                   shlq    $0x3, %rax
// 1fc: 48 f7 d8                      negq    %rax
// 1ff: 4d 8b 64 07 f8                movq    -0x8(%r15,%rax), %r12
// 204: 4d 8d 47 f8                   leaq    -0x8(%r15), %r8
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _PyEval_UnpackIterable
// 212: 4c 89 f7                      movq    %r14, %rdi
// 215: 4c 89 e6                      movq    %r12, %rsi
// 218: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 21d: ff d0                         callq   *%rax
// 21f: 89 c5                         movl    %eax, %ebp
// 221: 49 8b 04 24                   movq    (%r12), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7f 22                         jg      0x24c <_JIT_ENTRY+0x24c>
// 22a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022c:  R_X86_64_64  .rodata.str1.1
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_NegativeRefcount
// 23e: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 243: 4c 89 e2                      movq    %r12, %rdx
// 246: ff d0                         callq   *%rax
// 248: 49 8b 04 24                   movq    (%r12), %rax
// 24c: 85 c0                         testl   %eax, %eax
// 24e: 78 21                         js      0x271 <_JIT_ENTRY+0x271>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25a: ff d0                         callq   *%rax
// 25c: 49 ff 0c 24                   decq    (%r12)
// 260: 75 0f                         jne     0x271 <_JIT_ENTRY+0x271>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_Dealloc
// 26c: 4c 89 e7                      movq    %r12, %rdi
// 26f: ff d0                         callq   *%rax
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: 0f b7 c0                      movzwl  %ax, %eax
// 27e: 48 89 c1                      movq    %rax, %rcx
// 281: 48 f7 d1                      notq    %rcx
// 284: 48 01 c1                      addq    %rax, %rcx
// 287: 48 f7 d8                      negq    %rax
// 28a: 85 ed                         testl   %ebp, %ebp
// 28c: 48 0f 45 c1                   cmovneq %rcx, %rax
// 290: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 294: 74 23                         je      0x2b9 <_JIT_ENTRY+0x2b9>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _JIT_CONTINUE
// 2a0: 48 89 df                      movq    %rbx, %rdi
// 2a3: 4c 89 e6                      movq    %r12, %rsi
// 2a6: 4c 89 f2                      movq    %r14, %rdx
// 2a9: 48 83 c4 18                   addq    $0x18, %rsp
// 2ad: 5b                            popq    %rbx
// 2ae: 41 5c                         popq    %r12
// 2b0: 41 5d                         popq    %r13
// 2b2: 41 5e                         popq    %r14
// 2b4: 41 5f                         popq    %r15
// 2b6: 5d                            popq    %rbp
// 2b7: ff e0                         jmpq    *%rax
// 2b9: 49 83 c4 f8                   addq    $-0x8, %r12
// 2bd: e9 94 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2c2: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_code_body[707] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xa4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x34, 0xcf, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x8b, 0x64, 0x07, 0xf8, 0x4d, 0x8d, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc1, 0x48, 0xf7, 0xd1, 0x48, 0x01, 0xc1, 0x48, 0xf7, 0xd8, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc1, 0x4d, 0x8d, 0x24, 0xc7, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0xe9, 0x94, 0xfe, 0xff, 0xff};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 89 1c 24                   movq    %rbx, (%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1b7: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1bc: 78 21                         js      0x1df <_JIT_ENTRY+0x1df>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 ff 0c 24                   decq    (%r12)
// 1ce: 75 0f                         jne     0x1df <_JIT_ENTRY+0x1df>
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_Dealloc
// 1da: 4c 89 e7                      movq    %r12, %rdi
// 1dd: ff d0                         callq   *%rax
// 1df: 4d 85 ff                      testq   %r15, %r15
// 1e2: 74 82                         je      0x166 <_JIT_ENTRY+0x166>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _JIT_OPARG
// 1ee: 0f b7 c8                      movzwl  %ax, %ecx
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1fe: 48 c1 e1 03                   shlq    $0x3, %rcx
// 202: 4d 89 f7                      movq    %r14, %r15
// 205: 49 29 cf                      subq    %rcx, %r15
// 208: 48 f7 d9                      negq    %rcx
// 20b: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PyList_Type
// 21a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 21f: 75 6f                         jne     0x290 <_JIT_ENTRY+0x290>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_OPARG
// 22b: 0f b7 c0                      movzwl  %ax, %eax
// 22e: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 233: 75 5b                         jne     0x290 <_JIT_ENTRY+0x290>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 244: 7e 77                         jle     0x2bd <_JIT_ENTRY+0x2bd>
// 246: 49 83 c7 f8                   addq    $-0x8, %r15
// 24a: 49 8b 5c 24 18                movq    0x18(%r12), %rbx
// 24f: 44 0f b7 e8                   movzwl  %ax, %r13d
// 253: 49 ff c5                      incq    %r13
// 256: eb 18                         jmp     0x270 <_JIT_ENTRY+0x270>
// 258: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 260: 49 89 2f                      movq    %rbp, (%r15)
// 263: 49 83 c7 08                   addq    $0x8, %r15
// 267: 49 ff cd                      decq    %r13
// 26a: 49 83 fd 01                   cmpq    $0x1, %r13
// 26e: 7e 4d                         jle     0x2bd <_JIT_ENTRY+0x2bd>
// 270: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 274: 48 8b 2c c3                   movq    (%rbx,%rax,8), %rbp
// 278: 8b 45 00                      movl    (%rbp), %eax
// 27b: ff c0                         incl    %eax
// 27d: 74 e1                         je      0x260 <_JIT_ENTRY+0x260>
// 27f: 89 45 00                      movl    %eax, (%rbp)
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: eb d0                         jmp     0x260 <_JIT_ENTRY+0x260>
// 290: 49 29 df                      subq    %rbx, %r15
// 293: 49 83 c7 b8                   addq    $-0x48, %r15
// 297: 49 c1 ef 03                   shrq    $0x3, %r15
// 29b: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 29f: 48 8b 03                      movq    (%rbx), %rax
// 2a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a4:  R_X86_64_64  _JIT_TARGET
// 2ac: 89 c9                         movl    %ecx, %ecx
// 2ae: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2b2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b8: e9 ba fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 2bd: 49 8b 04 24                   movq    (%r12), %rax
// 2c1: 48 85 c0                      testq   %rax, %rax
// 2c4: 7f 22                         jg      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c8:  R_X86_64_64  .rodata.str1.1
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_NegativeRefcount
// 2da: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 2df: 4c 89 e2                      movq    %r12, %rdx
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 8b 04 24                   movq    (%r12), %rax
// 2e8: 85 c0                         testl   %eax, %eax
// 2ea: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2ee: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2f3: 78 21                         js      0x316 <_JIT_ENTRY+0x316>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ff: ff d0                         callq   *%rax
// 301: 49 ff 0c 24                   decq    (%r12)
// 305: 75 0f                         jne     0x316 <_JIT_ENTRY+0x316>
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_Dealloc
// 311: 4c 89 e7                      movq    %r12, %rdi
// 314: ff d0                         callq   *%rax
// 316: 49 83 c6 f8                   addq    $-0x8, %r14
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _JIT_CONTINUE
// 324: 48 89 df                      movq    %rbx, %rdi
// 327: 4c 89 f6                      movq    %r14, %rsi
// 32a: 4c 89 fa                      movq    %r15, %rdx
// 32d: 48 83 c4 18                   addq    $0x18, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: ff e0                         jmpq    *%rax
// 33d: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST_code_body[830] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x75, 0x5b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x77, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x8b, 0x5c, 0x24, 0x18, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0xeb, 0x18, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4d, 0x41, 0x8d, 0x45, 0xfe, 0x48, 0x8b, 0x2c, 0xc3, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe1, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xba, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 4d: 48 89 1c 24                   movq    %rbx, (%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 dd                      subq    %rbx, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 1c 24                   movq    (%rsp), %rbx
// 1b7: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1bc: 78 21                         js      0x1df <_JIT_ENTRY+0x1df>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 ff 0c 24                   decq    (%r12)
// 1ce: 75 0f                         jne     0x1df <_JIT_ENTRY+0x1df>
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_Dealloc
// 1da: 4c 89 e7                      movq    %r12, %rdi
// 1dd: ff d0                         callq   *%rax
// 1df: 4d 85 ff                      testq   %r15, %r15
// 1e2: 74 82                         je      0x166 <_JIT_ENTRY+0x166>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _JIT_OPARG
// 1ee: 0f b7 c8                      movzwl  %ax, %ecx
// 1f1: f7 d0                         notl    %eax
// 1f3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f8: 48 98                         cltq
// 1fa: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1fe: 48 c1 e1 03                   shlq    $0x3, %rcx
// 202: 4d 89 f7                      movq    %r14, %r15
// 205: 49 29 cf                      subq    %rcx, %r15
// 208: 48 f7 d9                      negq    %rcx
// 20b: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PyTuple_Type
// 21a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 21f: 75 66                         jne     0x287 <_JIT_ENTRY+0x287>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_OPARG
// 22b: 0f b7 c0                      movzwl  %ax, %eax
// 22e: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 233: 75 52                         jne     0x287 <_JIT_ENTRY+0x287>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 244: 7e 6e                         jle     0x2b4 <_JIT_ENTRY+0x2b4>
// 246: 49 83 c7 f8                   addq    $-0x8, %r15
// 24a: 0f b7 d8                      movzwl  %ax, %ebx
// 24d: 48 ff c3                      incq    %rbx
// 250: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000252:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 25a: eb 14                         jmp     0x270 <_JIT_ENTRY+0x270>
// 25c: 0f 1f 40 00                   nopl    (%rax)
// 260: 49 89 2f                      movq    %rbp, (%r15)
// 263: 49 83 c7 08                   addq    $0x8, %r15
// 267: 48 ff cb                      decq    %rbx
// 26a: 48 83 fb 01                   cmpq    $0x1, %rbx
// 26e: 7e 44                         jle     0x2b4 <_JIT_ENTRY+0x2b4>
// 270: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 273: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 278: 8b 45 00                      movl    (%rbp), %eax
// 27b: ff c0                         incl    %eax
// 27d: 74 e1                         je      0x260 <_JIT_ENTRY+0x260>
// 27f: 89 45 00                      movl    %eax, (%rbp)
// 282: 41 ff d5                      callq   *%r13
// 285: eb d9                         jmp     0x260 <_JIT_ENTRY+0x260>
// 287: 49 29 df                      subq    %rbx, %r15
// 28a: 49 83 c7 b8                   addq    $-0x48, %r15
// 28e: 49 c1 ef 03                   shrq    $0x3, %r15
// 292: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 296: 48 8b 03                      movq    (%rbx), %rax
// 299: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029b:  R_X86_64_64  _JIT_TARGET
// 2a3: 89 c9                         movl    %ecx, %ecx
// 2a5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2af: e9 c3 fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 2b4: 49 8b 04 24                   movq    (%r12), %rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 7f 22                         jg      0x2df <_JIT_ENTRY+0x2df>
// 2bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bf:  R_X86_64_64  .rodata.str1.1
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_NegativeRefcount
// 2d1: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 2d6: 4c 89 e2                      movq    %r12, %rdx
// 2d9: ff d0                         callq   *%rax
// 2db: 49 8b 04 24                   movq    (%r12), %rax
// 2df: 85 c0                         testl   %eax, %eax
// 2e1: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2e5: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2ea: 78 21                         js      0x30d <_JIT_ENTRY+0x30d>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f6: ff d0                         callq   *%rax
// 2f8: 49 ff 0c 24                   decq    (%r12)
// 2fc: 75 0f                         jne     0x30d <_JIT_ENTRY+0x30d>
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  _Py_Dealloc
// 308: 4c 89 e7                      movq    %r12, %rdi
// 30b: ff d0                         callq   *%rax
// 30d: 49 83 c6 f8                   addq    $-0x8, %r14
// 311: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000313:  R_X86_64_64  _JIT_CONTINUE
// 31b: 48 89 df                      movq    %rbx, %rdi
// 31e: 4c 89 f6                      movq    %r14, %rsi
// 321: 4c 89 fa                      movq    %r15, %rdx
// 324: 48 83 c4 18                   addq    $0x18, %rsp
// 328: 5b                            popq    %rbx
// 329: 41 5c                         popq    %r12
// 32b: 41 5d                         popq    %r13
// 32d: 41 5e                         popq    %r14
// 32f: 41 5f                         popq    %r15
// 331: 5d                            popq    %rbp
// 332: ff e0                         jmpq    *%rax
// 334: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE_code_body[821] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x82, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x75, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x6e, 0x49, 0x83, 0xc7, 0xf8, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x14, 0x0f, 0x1f, 0x40, 0x00, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x44, 0x8d, 0x43, 0xfe, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe1, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0xeb, 0xd9, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xc3, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 0d 01 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 30: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000032:  R_X86_64_64  _JIT_OPARG
// 3a: 0f b7 c0                      movzwl  %ax, %eax
// 3d: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 42: 0f 85 f5 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 48: 48 89 0c 24                   movq    %rcx, (%rsp)
// 4c: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: f7 d0                         notl    %eax
// 5d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 62: 48 98                         cltq
// 64: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 68: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 6d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 c3                   movzwl  %bx, %r8d
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _PyDict_FromItems
// 85: be 01 00 00 00                movl    $0x1, %esi
// 8a: b9 01 00 00 00                movl    $0x1, %ecx
// 8f: 4c 89 ea                      movq    %r13, %rdx
// 92: ff d0                         callq   *%rax
// 94: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 99: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9f: 0f 8e e1 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_OPARG
// af: 0f b7 e8                      movzwl  %ax, %ebp
// b2: 48 ff c5                      incq    %rbp
// b5: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: eb 1c                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// d0: 48 ff cd                      decq    %rbp
// d3: 48 83 fd 01                   cmpq    $0x1, %rbp
// d7: 0f 8e a9 00 00 00             jle     0x186 <_JIT_ENTRY+0x186>
// dd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// e0: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// e5: 49 8b 07                      movq    (%r15), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 7e 13                         jle     0x100 <_JIT_ENTRY+0x100>
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 df                         js      0xd0 <_JIT_ENTRY+0xd0>
// f1: eb 32                         jmp     0x125 <_JIT_ENTRY+0x125>
// f3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 4c 89 fa                      movq    %r15, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 07                      movq    (%r15), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 ab                         js      0xd0 <_JIT_ENTRY+0xd0>
// 125: ff d3                         callq   *%rbx
// 127: 49 ff 0f                      decq    (%r15)
// 12a: 75 a4                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 12c: 4c 89 ff                      movq    %r15, %rdi
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: ff d0                         callq   *%rax
// 13b: eb 93                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyExc_SystemError
// 147: 48 8b 30                      movq    (%rax), %rsi
// 14a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _PyErr_SetString
// 15e: 48 89 cf                      movq    %rcx, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4d 89 f5                      movq    %r14, %r13
// 166: 49 29 ed                      subq    %rbp, %r13
// 169: 49 83 c5 b8                   addq    $-0x48, %r13
// 16d: 49 c1 ed 03                   shrq    $0x3, %r13
// 171: 44 89 6d 40                   movl    %r13d, 0x40(%rbp)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 18                   addq    $0x18, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7f 22                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  .rodata.str1.1
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_NegativeRefcount
// 1a3: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1a8: 4c 89 e2                      movq    %r12, %rdx
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 04 24                   movq    (%r12), %rax
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1b8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 0c 24                   decq    (%r12)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 e7                      movq    %r12, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 85 db                      testq   %rbx, %rbx
// 1e3: 74 81                         je      0x166 <_JIT_ENTRY+0x166>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _JIT_OPARG
// 1ef: 0f b7 c8                      movzwl  %ax, %ecx
// 1f2: f7 d0                         notl    %eax
// 1f4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1f9: 48 98                         cltq
// 1fb: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 1ff: 48 c1 e1 03                   shlq    $0x3, %rcx
// 203: 4d 89 f7                      movq    %r14, %r15
// 206: 49 29 cf                      subq    %rcx, %r15
// 209: 48 f7 d9                      negq    %rcx
// 20c: 4d 8b 64 0e f8                movq    -0x8(%r14,%rcx), %r12
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyTuple_Type
// 21b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 220: 75 62                         jne     0x284 <_JIT_ENTRY+0x284>
// 222: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 228: 75 5a                         jne     0x284 <_JIT_ENTRY+0x284>
// 22a: 4d 8b 6c 24 20                movq    0x20(%r12), %r13
// 22f: 41 8b 45 00                   movl    (%r13), %eax
// 233: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000235:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 23d: ff c0                         incl    %eax
// 23f: 74 06                         je      0x247 <_JIT_ENTRY+0x247>
// 241: 41 89 45 00                   movl    %eax, (%r13)
// 245: ff d3                         callq   *%rbx
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_OPARG
// 251: 0f b7 c0                      movzwl  %ax, %eax
// 254: 48 c1 e0 03                   shlq    $0x3, %rax
// 258: 4c 89 f1                      movq    %r14, %rcx
// 25b: 48 29 c1                      subq    %rax, %rcx
// 25e: 4c 89 69 f8                   movq    %r13, -0x8(%rcx)
// 262: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 267: 41 8b 45 00                   movl    (%r13), %eax
// 26b: ff c0                         incl    %eax
// 26d: 75 43                         jne     0x2b2 <_JIT_ENTRY+0x2b2>
// 26f: 4d 89 2f                      movq    %r13, (%r15)
// 272: 49 8b 04 24                   movq    (%r12), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7e 49                         jle     0x2c4 <_JIT_ENTRY+0x2c4>
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 79 6b                         jns     0x2ea <_JIT_ENTRY+0x2ea>
// 27f: e9 87 00 00 00                jmp     0x30b <_JIT_ENTRY+0x30b>
// 284: 49 29 ef                      subq    %rbp, %r15
// 287: 49 83 c7 b8                   addq    $-0x48, %r15
// 28b: 49 c1 ef 03                   shrq    $0x3, %r15
// 28f: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 293: 48 8b 45 00                   movq    (%rbp), %rax
// 297: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000299:  R_X86_64_64  _JIT_TARGET
// 2a1: 89 c9                         movl    %ecx, %ecx
// 2a3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2ad: e9 c5 fe ff ff                jmp     0x177 <_JIT_ENTRY+0x177>
// 2b2: 41 89 45 00                   movl    %eax, (%r13)
// 2b6: ff d3                         callq   *%rbx
// 2b8: 4d 89 2f                      movq    %r13, (%r15)
// 2bb: 49 8b 04 24                   movq    (%r12), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 7f b7                         jg      0x27b <_JIT_ENTRY+0x27b>
// 2c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c6:  R_X86_64_64  .rodata.str1.1
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_NegativeRefcount
// 2d8: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 2dd: 4c 89 e2                      movq    %r12, %rdx
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 8b 04 24                   movq    (%r12), %rax
// 2e6: 85 c0                         testl   %eax, %eax
// 2e8: 78 21                         js      0x30b <_JIT_ENTRY+0x30b>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 ff 0c 24                   decq    (%r12)
// 2fa: 75 0f                         jne     0x30b <_JIT_ENTRY+0x30b>
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_Dealloc
// 306: 4c 89 e7                      movq    %r12, %rdi
// 309: ff d0                         callq   *%rax
// 30b: 49 83 c6 f8                   addq    $-0x8, %r14
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _JIT_CONTINUE
// 319: 48 89 ef                      movq    %rbp, %rdi
// 31c: 4c 89 f6                      movq    %r14, %rsi
// 31f: 48 8b 14 24                   movq    (%rsp), %rdx
// 323: 48 83 c4 18                   addq    $0x18, %rsp
// 327: 5b                            popq    %rbx
// 328: 41 5c                         popq    %r12
// 32a: 41 5d                         popq    %r13
// 32c: 41 5e                         popq    %r14
// 32e: 41 5f                         popq    %r15
// 330: 5d                            popq    %rbp
// 331: ff e0                         jmpq    *%rax
// 333: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[820] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0c, 0x24, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xed, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x1c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xcf, 0x48, 0xf7, 0xd9, 0x4d, 0x8b, 0x64, 0x0e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x62, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x5a, 0x4d, 0x8b, 0x6c, 0x24, 0x20, 0x41, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x89, 0x69, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x43, 0x4d, 0x89, 0x2f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x49, 0x85, 0xc0, 0x79, 0x6b, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xc5, 0xfe, 0xff, 0xff, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x4d, 0x89, 0x2f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START
// 
// /tmp/tmpald_kdgj/_BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 48                   subq    $0x48, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 29: 0f 85 fe 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_OPARG
// 39: 0f b7 c0                      movzwl  %ax, %eax
// 3c: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 40: 0f 85 e7 00 00 00             jne     0x12d <_JIT_ENTRY+0x12d>
// 46: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 4b: 48 89 5c 24 18                movq    %rbx, 0x18(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: f7 d0                         notl    %eax
// 5c: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 61: 48 98                         cltq
// 63: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 67: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 6b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 44 0f b7 c3                   movzwl  %bx, %r8d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _PyDict_FromItems
// 83: be 01 00 00 00                movl    $0x1, %esi
// 88: b9 01 00 00 00                movl    $0x1, %ecx
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 97: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 9d: 0f 8e d3 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _JIT_OPARG
// ad: 0f b7 e8                      movzwl  %ax, %ebp
// b0: 48 ff c5                      incq    %rbp
// b3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: eb 0e                         jmp     0xcd <_JIT_ENTRY+0xcd>
// bf: 90                            nop
// c0: 48 ff cd                      decq    %rbp
// c3: 48 83 fd 01                   cmpq    $0x1, %rbp
// c7: 0f 8e a9 00 00 00             jle     0x176 <_JIT_ENTRY+0x176>
// cd: 8d 45 fe                      leal    -0x2(%rbp), %eax
// d0: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// d4: 49 8b 07                      movq    (%r15), %rax
// d7: 48 85 c0                      testq   %rax, %rax
// da: 7e 14                         jle     0xf0 <_JIT_ENTRY+0xf0>
// dc: 85 c0                         testl   %eax, %eax
// de: 78 e0                         js      0xc0 <_JIT_ENTRY+0xc0>
// e0: eb 33                         jmp     0x115 <_JIT_ENTRY+0x115>
// e2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// ff: 4c 89 fa                      movq    %r15, %rdx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_NegativeRefcount
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 07                      movq    (%r15), %rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 78 ab                         js      0xc0 <_JIT_ENTRY+0xc0>
// 115: ff d3                         callq   *%rbx
// 117: 49 ff 0f                      decq    (%r15)
// 11a: 75 a4                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 11c: 4c 89 ff                      movq    %r15, %rdi
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: ff d0                         callq   *%rax
// 12b: eb 93                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  PyExc_SystemError
// 137: 48 8b 30                      movq    (%rax), %rsi
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  .rodata.str1.1+0x39
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyErr_SetString
// 14e: 48 89 cf                      movq    %rcx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 4d 89 f4                      movq    %r14, %r12
// 156: 49 29 dc                      subq    %rbx, %r12
// 159: 49 83 c4 b8                   addq    $-0x48, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 48                   addq    $0x48, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 49 8b 45 00                   movq    (%r13), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 198: 4c 89 ea                      movq    %r13, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 45 00                   movq    (%r13), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 1a8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 49 ff 4d 00                   decq    (%r13)
// 1bf: 75 0f                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 ef                      movq    %r13, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 85 ff                      testq   %r15, %r15
// 1d3: 74 81                         je      0x156 <_JIT_ENTRY+0x156>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c8                      movzwl  %ax, %ecx
// 1e2: f7 d0                         notl    %eax
// 1e4: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1e9: 48 98                         cltq
// 1eb: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 1ef: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1f3: 4d 89 f4                      movq    %r14, %r12
// 1f6: 49 29 cc                      subq    %rcx, %r12
// 1f9: 48 f7 d9                      negq    %rcx
// 1fc: 49 8b 6c 0e f8                movq    -0x8(%r14,%rcx), %rbp
// 201: 4d 8b 7c 24 e0                movq    -0x20(%r12), %r15
// 206: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 20a: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  PyException_GetTraceback
// 219: 48 89 ef                      movq    %rbp, %rdi
// 21c: ff d0                         callq   *%rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 74 54                         je      0x277 <_JIT_ENTRY+0x277>
// 223: 49 89 c5                      movq    %rax, %r13
// 226: 48 8b 00                      movq    (%rax), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 7f 22                         jg      0x250 <_JIT_ENTRY+0x250>
// 22e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000230:  R_X86_64_64  .rodata.str1.1
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_NegativeRefcount
// 242: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 247: 4c 89 ea                      movq    %r13, %rdx
// 24a: ff d0                         callq   *%rax
// 24c: 49 8b 45 00                   movq    (%r13), %rax
// 250: 85 c0                         testl   %eax, %eax
// 252: 78 2d                         js      0x281 <_JIT_ENTRY+0x281>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25e: ff d0                         callq   *%rax
// 260: 49 ff 4d 00                   decq    (%r13)
// 264: 75 1b                         jne     0x281 <_JIT_ENTRY+0x281>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_Dealloc
// 270: 4c 89 ef                      movq    %r13, %rdi
// 273: ff d0                         callq   *%rax
// 275: eb 0a                         jmp     0x281 <_JIT_ENTRY+0x281>
// 277: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000279:  R_X86_64_64  _Py_NoneStruct
// 281: 4c 89 ff                      movq    %r15, %rdi
// 284: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 289: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 292: 48 8d 74 24 28                leaq    0x28(%rsp), %rsi
// 297: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// 29c: 48 89 6c 24 30                movq    %rbp, 0x30(%rsp)
// 2a1: 4c 89 6c 24 38                movq    %r13, 0x38(%rsp)
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  PyObject_Vectorcall
// 2b0: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 2ba: 31 c9                         xorl    %ecx, %ecx
// 2bc: ff d0                         callq   *%rax
// 2be: 48 85 c0                      testq   %rax, %rax
// 2c1: 0f 84 8f fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 2c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c9:  R_X86_64_64  _JIT_OPARG
// 2d1: 0f b7 c9                      movzwl  %cx, %ecx
// 2d4: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2d8: 49 29 ce                      subq    %rcx, %r14
// 2db: 49 89 06                      movq    %rax, (%r14)
// 2de: 49 83 c6 08                   addq    $0x8, %r14
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _JIT_CONTINUE
// 2ec: 48 89 df                      movq    %rbx, %rdi
// 2ef: 4c 89 f6                      movq    %r14, %rsi
// 2f2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2f7: 48 83 c4 48                   addq    $0x48, %rsp
// 2fb: 5b                            popq    %rbx
// 2fc: 41 5c                         popq    %r12
// 2fe: 41 5d                         popq    %r13
// 300: 41 5e                         popq    %r14
// 302: 41 5f                         popq    %r15
// 304: 5d                            popq    %rbp
// 305: ff e0                         jmpq    *%rax
// 307: 
static const unsigned char _BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START_code_body[776] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x48, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xa9, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xab, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x75, 0xa4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x93, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xcc, 0x48, 0xf7, 0xd9, 0x49, 0x8b, 0x6c, 0x0e, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0xe0, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x54, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x0a, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x28, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x89, 0x6c, 0x24, 0x30, 0x4c, 0x89, 0x6c, 0x24, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8f, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BEFORE_ASYNC_WITH),
    [_BUILD_CONST_KEY_MAPplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BEFORE_WITH),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_FLOAT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_INT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP_ADD_UNICODE),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_FLOAT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP_MULTIPLY_INT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_FLOAT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_OP_SUBTRACT_INT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_SLICE),
    [_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR),
    [_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_DICT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_LIST_INT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_STR_INT),
    [_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BINARY_SUBSCR_TUPLE_INT),
    [_BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BUILD_CONST_KEY_MAP),
    [_BUILD_CONST_KEY_MAPplus_BUILD_LIST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BUILD_LIST),
    [_BUILD_CONST_KEY_MAPplus_BUILD_MAP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BUILD_MAP),
    [_BUILD_CONST_KEY_MAPplus_BUILD_SET] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BUILD_SET),
    [_BUILD_CONST_KEY_MAPplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BUILD_SLICE),
    [_BUILD_CONST_KEY_MAPplus_BUILD_STRING] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BUILD_STRING),
    [_BUILD_CONST_KEY_MAPplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_BUILD_TUPLE),
    [_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_CLASS),
    [_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST),
    [_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_BUILTIN_O),
    [_BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_1),
    [_BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_INTRINSIC_2),
    [_BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_ISINSTANCE),
    [_BUILD_CONST_KEY_MAPplus_CALL_LEN] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_LEN),
    [_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_METHOD_DESCRIPTOR_O),
    [_BUILD_CONST_KEY_MAPplus_CALL_STR_1] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_STR_1),
    [_BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_TUPLE_1),
    [_BUILD_CONST_KEY_MAPplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CALL_TYPE_1),
    [_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_CLASS),
    [_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_MODULE),
    [_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_ATTR_WITH_HINT),
    [_BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_EG_MATCH),
    [_BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_EXC_MATCH),
    [_BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_FUNCTION_EXACT_ARGS),
    [_BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_BUILD_CONST_KEY_MAPplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_PEP_523),
    [_BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_STACK_SPACE),
    [_BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CHECK_VALIDITY),
    [_BUILD_CONST_KEY_MAPplus_COMPARE_OP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_COMPARE_OP),
    [_BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_COMPARE_OP_FLOAT),
    [_BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_COMPARE_OP_INT),
    [_BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_COMPARE_OP_STR),
    [_BUILD_CONST_KEY_MAPplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CONTAINS_OP),
    [_BUILD_CONST_KEY_MAPplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_CONVERT_VALUE),
    [_BUILD_CONST_KEY_MAPplus_COPY] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_COPY),
    [_BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_COPY_FREE_VARS),
    [_BUILD_CONST_KEY_MAPplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DELETE_ATTR),
    [_BUILD_CONST_KEY_MAPplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DELETE_DEREF),
    [_BUILD_CONST_KEY_MAPplus_DELETE_FAST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DELETE_FAST),
    [_BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DELETE_GLOBAL),
    [_BUILD_CONST_KEY_MAPplus_DELETE_NAME] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DELETE_NAME),
    [_BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DELETE_SUBSCR),
    [_BUILD_CONST_KEY_MAPplus_DICT_MERGE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DICT_MERGE),
    [_BUILD_CONST_KEY_MAPplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_DICT_UPDATE),
    [_BUILD_CONST_KEY_MAPplus_END_SEND] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_END_SEND),
    [_BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_EXIT_INIT_CHECK),
    [_BUILD_CONST_KEY_MAPplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_EXIT_TRACE),
    [_BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_FORMAT_SIMPLE),
    [_BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_FORMAT_WITH_SPEC),
    [_BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_FOR_ITER_TIER_TWO),
    [_BUILD_CONST_KEY_MAPplus_GET_AITER] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GET_AITER),
    [_BUILD_CONST_KEY_MAPplus_GET_ANEXT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GET_ANEXT),
    [_BUILD_CONST_KEY_MAPplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GET_AWAITABLE),
    [_BUILD_CONST_KEY_MAPplus_GET_ITER] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GET_ITER),
    [_BUILD_CONST_KEY_MAPplus_GET_LEN] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GET_LEN),
    [_BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GET_YIELD_FROM_ITER),
    [_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_FLOAT),
    [_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_INT),
    [_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_BOTH_UNICODE),
    [_BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_BUILTINS_VERSION),
    [_BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES),
    [_BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_GLOBALS_VERSION),
    [_BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_IS_FALSE_POP),
    [_BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_IS_NONE_POP),
    [_BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_IS_NOT_NONE_POP),
    [_BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_IS_TRUE_POP),
    [_BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_KEYS_VERSION),
    [_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_LIST),
    [_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_GUARD_TYPE_VERSION),
    [_BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_INIT_CALL_PY_EXACT_ARGS),
    [_BUILD_CONST_KEY_MAPplus_INSERT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_INSERT),
    [_BUILD_CONST_KEY_MAPplus_IS_NONE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_IS_NONE),
    [_BUILD_CONST_KEY_MAPplus_IS_OP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_IS_OP),
    [_BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_ITER_CHECK_LIST),
    [_BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_ITER_CHECK_RANGE),
    [_BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_ITER_CHECK_TUPLE),
    [_BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_ITER_NEXT_LIST),
    [_BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_ITER_NEXT_RANGE),
    [_BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_ITER_NEXT_TUPLE),
    [_BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_JUMP_TO_TOP),
    [_BUILD_CONST_KEY_MAPplus_LIST_APPEND] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LIST_APPEND),
    [_BUILD_CONST_KEY_MAPplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LIST_EXTEND),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ASSERTION_ERROR),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_CLASS),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_INSTANCE_VALUE),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_NO_DICT),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_MODULE),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_SLOT),
    [_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_ATTR_WITH_HINT),
    [_BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_BUILD_CLASS),
    [_BUILD_CONST_KEY_MAPplus_LOAD_CONST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_CONST),
    [_BUILD_CONST_KEY_MAPplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_DEREF),
    [_BUILD_CONST_KEY_MAPplus_LOAD_FAST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_FAST),
    [_BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_FAST_AND_CLEAR),
    [_BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_FAST_CHECK),
    [_BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_DEREF),
    [_BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL),
    [_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_BUILTINS),
    [_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_GLOBAL_MODULE),
    [_BUILD_CONST_KEY_MAPplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_LOCALS),
    [_BUILD_CONST_KEY_MAPplus_LOAD_NAME] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_NAME),
    [_BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_ATTR),
    [_BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_LOAD_SUPER_ATTR_METHOD),
    [_BUILD_CONST_KEY_MAPplus_MAKE_CELL] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_MAKE_CELL),
    [_BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_MAKE_FUNCTION),
    [_BUILD_CONST_KEY_MAPplus_MAP_ADD] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_MAP_ADD),
    [_BUILD_CONST_KEY_MAPplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_MATCH_CLASS),
    [_BUILD_CONST_KEY_MAPplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_MATCH_KEYS),
    [_BUILD_CONST_KEY_MAPplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_MATCH_MAPPING),
    [_BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_MATCH_SEQUENCE),
    [_BUILD_CONST_KEY_MAPplus_NOP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_NOP),
    [_BUILD_CONST_KEY_MAPplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_POP_EXCEPT),
    [_BUILD_CONST_KEY_MAPplus_POP_FRAME] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_POP_FRAME),
    [_BUILD_CONST_KEY_MAPplus_POP_TOP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_POP_TOP),
    [_BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_PUSH_EXC_INFO),
    [_BUILD_CONST_KEY_MAPplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_PUSH_FRAME),
    [_BUILD_CONST_KEY_MAPplus_PUSH_NULL] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_PUSH_NULL),
    [_BUILD_CONST_KEY_MAPplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_RESUME_CHECK),
    [_BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_SAVE_RETURN_OFFSET),
    [_BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_SETUP_ANNOTATIONS),
    [_BUILD_CONST_KEY_MAPplus_SET_ADD] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_SET_ADD),
    [_BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_SET_FUNCTION_ATTRIBUTE),
    [_BUILD_CONST_KEY_MAPplus_SET_IP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_SET_IP),
    [_BUILD_CONST_KEY_MAPplus_SET_UPDATE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_SET_UPDATE),
    [_BUILD_CONST_KEY_MAPplus_STORE_ATTR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_ATTR),
    [_BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_ATTR_INSTANCE_VALUE),
    [_BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_ATTR_SLOT),
    [_BUILD_CONST_KEY_MAPplus_STORE_DEREF] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_DEREF),
    [_BUILD_CONST_KEY_MAPplus_STORE_FAST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_FAST),
    [_BUILD_CONST_KEY_MAPplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_GLOBAL),
    [_BUILD_CONST_KEY_MAPplus_STORE_NAME] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_NAME),
    [_BUILD_CONST_KEY_MAPplus_STORE_SLICE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_SLICE),
    [_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR),
    [_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_DICT),
    [_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_STORE_SUBSCR_LIST_INT),
    [_BUILD_CONST_KEY_MAPplus_SWAP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_SWAP),
    [_BUILD_CONST_KEY_MAPplus_TO_BOOL] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_TO_BOOL),
    [_BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_TO_BOOL_ALWAYS_TRUE),
    [_BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_TO_BOOL_BOOL),
    [_BUILD_CONST_KEY_MAPplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_TO_BOOL_INT),
    [_BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_TO_BOOL_LIST),
    [_BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_TO_BOOL_NONE),
    [_BUILD_CONST_KEY_MAPplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_TO_BOOL_STR),
    [_BUILD_CONST_KEY_MAPplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNARY_INVERT),
    [_BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNARY_NEGATIVE),
    [_BUILD_CONST_KEY_MAPplus_UNARY_NOT] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNARY_NOT),
    [_BUILD_CONST_KEY_MAPplus_UNPACK_EX] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNPACK_EX),
    [_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE),
    [_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_LIST),
    [_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TUPLE),
    [_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAPplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
