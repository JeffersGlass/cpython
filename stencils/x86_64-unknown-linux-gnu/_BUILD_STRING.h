// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _BUILD_STRINGplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BEFORE_ASYNC_WITH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 8d b9 00 a1 00 00          leaq    0xa100(%rcx), %rdi
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f8                   movzwl  %ax, %r15d
// 77: 49 ff c7                      incq    %r15
// 7a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// b1: 48 8b 03                      movq    (%rbx), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 48 8b 03                      movq    (%rbx), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d5                         callq   *%rbp
// d7: 48 ff 0b                      decq    (%rbx)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 48 89 df                      movq    %rbx, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f2: 48 85 f6                      testq   %rsi, %rsi
// f5: 0f 84 59 03 00 00             je      0x454 <_JIT_ENTRY+0x454>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 0f b7 c0                      movzwl  %ax, %eax
// 10b: 48 c1 e0 03                   shlq    $0x3, %rax
// 10f: 48 f7 d8                      negq    %rax
// 112: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 117: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11b: b8 01 00 00 00                movl    $0x1, %eax
// 120: 29 c8                         subl    %ecx, %eax
// 122: 48 63 d8                      movslq  %eax, %rbx
// 125: 4c 8d 24 da                   leaq    (%rdx,%rbx,8), %r12
// 129: 4c 8b 74 da f8                movq    -0x8(%rdx,%rbx,8), %r14
// 12e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000130:  R_X86_64_64  _PyObject_LookupSpecial
// 138: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000013a:  R_X86_64_64  _PyRuntime
// 142: 48 8d b5 68 a6 00 00          leaq    0xa668(%rbp), %rsi
// 149: 4c 89 f7                      movq    %r14, %rdi
// 14c: 41 ff d7                      callq   *%r15
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 0f 84 c1 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 158: 49 89 c5                      movq    %rax, %r13
// 15b: 48 81 c5 a0 a6 00 00          addq    $0xa6a0, %rbp           # imm = 0xA6A0
// 162: 4c 89 f7                      movq    %r14, %rdi
// 165: 48 89 ee                      movq    %rbp, %rsi
// 168: 41 ff d7                      callq   *%r15
// 16b: 48 85 c0                      testq   %rax, %rax
// 16e: 0f 84 f1 00 00 00             je      0x265 <_JIT_ENTRY+0x265>
// 174: 48 89 c5                      movq    %rax, %rbp
// 177: 49 8b 06                      movq    (%r14), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 21                         jg      0x1a0 <_JIT_ENTRY+0x1a0>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 198: 4c 89 f2                      movq    %r14, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 06                      movq    (%r14), %rax
// 1a0: 85 c0                         testl   %eax, %eax
// 1a2: 78 15                         js      0x1b9 <_JIT_ENTRY+0x1b9>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 49 ff 0e                      decq    (%r14)
// 1b3: 0f 84 5c 01 00 00             je      0x315 <_JIT_ENTRY+0x315>
// 1b9: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1bd: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 1c4: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1c9: 0f 84 6b 01 00 00             je      0x33a <_JIT_ENTRY+0x33a>
// 1cf: 48 8b 40 38                   movq    0x38(%rax), %rax
// 1d3: 49 8b 44 05 00                movq    (%r13,%rax), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 0f 84 59 01 00 00             je      0x33a <_JIT_ENTRY+0x33a>
// 1e1: 4c 89 ef                      movq    %r13, %rdi
// 1e4: 31 f6                         xorl    %esi, %esi
// 1e6: 31 d2                         xorl    %edx, %edx
// 1e8: 31 c9                         xorl    %ecx, %ecx
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001ee:  R_X86_64_64  _Py_CheckFunctionResult
// 1f6: 4c 89 ff                      movq    %r15, %rdi
// 1f9: 4c 89 ee                      movq    %r13, %rsi
// 1fc: 48 89 c2                      movq    %rax, %rdx
// 1ff: 31 c9                         xorl    %ecx, %ecx
// 201: 41 ff d0                      callq   *%r8
// 204: 49 89 c6                      movq    %rax, %r14
// 207: 49 8b 45 00                   movq    (%r13), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 0f 8f 6d 01 00 00             jg      0x381 <_JIT_ENTRY+0x381>
// 214: e9 46 01 00 00                jmp     0x35f <_JIT_ENTRY+0x35f>
// 219: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 21e: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 74 0b                         je      0x232 <_JIT_ENTRY+0x232>
// 227: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 22c: 0f 85 22 02 00 00             jne     0x454 <_JIT_ENTRY+0x454>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  PyExc_TypeError
// 23c: 48 8b 30                      movq    (%rax), %rsi
// 23f: 49 8b 46 08                   movq    0x8(%r14), %rax
// 243: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 247: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000249:  R_X86_64_64  .rodata.str1.1+0x39
// 251: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000253:  R_X86_64_64  _PyErr_Format
// 25b: 31 c0                         xorl    %eax, %eax
// 25d: 41 ff d0                      callq   *%r8
// 260: e9 ef 01 00 00                jmp     0x454 <_JIT_ENTRY+0x454>
// 265: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 26a: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 74 19                         je      0x28c <_JIT_ENTRY+0x28c>
// 273: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 278: 74 12                         je      0x28c <_JIT_ENTRY+0x28c>
// 27a: 49 8b 45 00                   movq    (%r13), %rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 7e 40                         jle     0x2c3 <_JIT_ENTRY+0x2c3>
// 283: 85 c0                         testl   %eax, %eax
// 285: 79 66                         jns     0x2ed <_JIT_ENTRY+0x2ed>
// 287: e9 c8 01 00 00                jmp     0x454 <_JIT_ENTRY+0x454>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  PyExc_TypeError
// 296: 48 8b 30                      movq    (%rax), %rsi
// 299: 49 8b 46 08                   movq    0x8(%r14), %rax
// 29d: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2a1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1+0x84
// 2ab: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ad:  R_X86_64_64  _PyErr_Format
// 2b5: 31 c0                         xorl    %eax, %eax
// 2b7: 41 ff d0                      callq   *%r8
// 2ba: 49 8b 45 00                   movq    (%r13), %rax
// 2be: 48 85 c0                      testq   %rax, %rax
// 2c1: 7f c0                         jg      0x283 <_JIT_ENTRY+0x283>
// 2c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_NegativeRefcount
// 2d7: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 2dc: 4c 89 ea                      movq    %r13, %rdx
// 2df: ff d0                         callq   *%rax
// 2e1: 49 8b 45 00                   movq    (%r13), %rax
// 2e5: 85 c0                         testl   %eax, %eax
// 2e7: 0f 88 67 01 00 00             js      0x454 <_JIT_ENTRY+0x454>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 ff 4d 00                   decq    (%r13)
// 2fd: 0f 85 51 01 00 00             jne     0x454 <_JIT_ENTRY+0x454>
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _Py_Dealloc
// 30d: 4c 89 ef                      movq    %r13, %rdi
// 310: e9 3d 01 00 00                jmp     0x452 <_JIT_ENTRY+0x452>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_Dealloc
// 31f: 4c 89 f7                      movq    %r14, %rdi
// 322: ff d0                         callq   *%rax
// 324: 49 8b 45 08                   movq    0x8(%r13), %rax
// 328: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 32f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 334: 0f 85 95 fe ff ff             jne     0x1cf <_JIT_ENTRY+0x1cf>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _PyObject_MakeTpCall
// 344: 4c 89 ff                      movq    %r15, %rdi
// 347: 4c 89 ee                      movq    %r13, %rsi
// 34a: 31 d2                         xorl    %edx, %edx
// 34c: 31 c9                         xorl    %ecx, %ecx
// 34e: 45 31 c0                      xorl    %r8d, %r8d
// 351: ff d0                         callq   *%rax
// 353: 49 89 c6                      movq    %rax, %r14
// 356: 49 8b 45 00                   movq    (%r13), %rax
// 35a: 48 85 c0                      testq   %rax, %rax
// 35d: 7f 22                         jg      0x381 <_JIT_ENTRY+0x381>
// 35f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000361:  R_X86_64_64  .rodata.str1.1
// 369: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036b:  R_X86_64_64  _Py_NegativeRefcount
// 373: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 378: 4c 89 ea                      movq    %r13, %rdx
// 37b: ff d0                         callq   *%rax
// 37d: 49 8b 45 00                   movq    (%r13), %rax
// 381: 85 c0                         testl   %eax, %eax
// 383: 78 21                         js      0x3a6 <_JIT_ENTRY+0x3a6>
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38f: ff d0                         callq   *%rax
// 391: 49 ff 4d 00                   decq    (%r13)
// 395: 75 0f                         jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _Py_Dealloc
// 3a1: 4c 89 ef                      movq    %r13, %rdi
// 3a4: ff d0                         callq   *%rax
// 3a6: 4d 85 f6                      testq   %r14, %r14
// 3a9: 74 4c                         je      0x3f7 <_JIT_ENTRY+0x3f7>
// 3ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ad:  R_X86_64_64  _JIT_OPARG
// 3b5: 0f b7 c0                      movzwl  %ax, %eax
// 3b8: b9 01 00 00 00                movl    $0x1, %ecx
// 3bd: 29 c1                         subl    %eax, %ecx
// 3bf: 48 63 c1                      movslq  %ecx, %rax
// 3c2: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 3c7: 48 89 6c c1 f8                movq    %rbp, -0x8(%rcx,%rax,8)
// 3cc: 4c 89 34 c1                   movq    %r14, (%rcx,%rax,8)
// 3d0: 48 8d 74 c1 08                leaq    0x8(%rcx,%rax,8), %rsi
// 3d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d7:  R_X86_64_64  _JIT_CONTINUE
// 3df: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 3e4: 4c 89 fa                      movq    %r15, %rdx
// 3e7: 48 83 c4 28                   addq    $0x28, %rsp
// 3eb: 5b                            popq    %rbx
// 3ec: 41 5c                         popq    %r12
// 3ee: 41 5d                         popq    %r13
// 3f0: 41 5e                         popq    %r14
// 3f2: 41 5f                         popq    %r15
// 3f4: 5d                            popq    %rbp
// 3f5: ff e0                         jmpq    *%rax
// 3f7: 48 8b 45 00                   movq    (%rbp), %rax
// 3fb: 48 85 c0                      testq   %rax, %rax
// 3fe: 7f 22                         jg      0x422 <_JIT_ENTRY+0x422>
// 400: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000402:  R_X86_64_64  .rodata.str1.1
// 40a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040c:  R_X86_64_64  _Py_NegativeRefcount
// 414: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 419: 48 89 ea                      movq    %rbp, %rdx
// 41c: ff d0                         callq   *%rax
// 41e: 48 8b 45 00                   movq    (%rbp), %rax
// 422: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 427: 4c 8d 24 d9                   leaq    (%rcx,%rbx,8), %r12
// 42b: 49 83 c4 f8                   addq    $-0x8, %r12
// 42f: 85 c0                         testl   %eax, %eax
// 431: 78 21                         js      0x454 <_JIT_ENTRY+0x454>
// 433: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000435:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 43d: ff d0                         callq   *%rax
// 43f: 48 ff 4d 00                   decq    (%rbp)
// 443: 75 0f                         jne     0x454 <_JIT_ENTRY+0x454>
// 445: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000447:  R_X86_64_64  _Py_Dealloc
// 44f: 48 89 ef                      movq    %rbp, %rdi
// 452: ff d0                         callq   *%rax
// 454: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 459: 49 29 c4                      subq    %rax, %r12
// 45c: 49 83 c4 b8                   addq    $-0x48, %r12
// 460: 49 c1 ec 03                   shrq    $0x3, %r12
// 464: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 468: 31 c0                         xorl    %eax, %eax
// 46a: 48 83 c4 28                   addq    $0x28, %rsp
// 46e: 5b                            popq    %rbx
// 46f: 41 5c                         popq    %r12
// 471: 41 5d                         popq    %r13
// 473: 41 5e                         popq    %r14
// 475: 41 5f                         popq    %r15
// 477: 5d                            popq    %rbp
// 478: c3                            retq
// 479: 
static const unsigned char _BUILD_STRINGplus_BEFORE_ASYNC_WITH_code_body[1146] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xb9, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x4c, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x59, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8d, 0x24, 0xda, 0x4c, 0x8b, 0x74, 0xda, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x84, 0x5c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x84, 0x6b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x44, 0x05, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6d, 0x01, 0x00, 0x00, 0xe9, 0x46, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x22, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x46, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xef, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x19, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x12, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x40, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0xc8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x46, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xc0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x51, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x85, 0x95, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x4c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x6c, 0xc1, 0xf8, 0x4c, 0x89, 0x34, 0xc1, 0x48, 0x8d, 0x74, 0xc1, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4c, 0x8d, 0x24, 0xd9, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BEFORE_ASYNC_WITH_code_holes[38] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x402, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x40c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x435, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x447, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BEFORE_ASYNC_WITH_data_holes[1];

// _BUILD_STRINGplus_BEFORE_WITH
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BEFORE_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 8d b9 00 a1 00 00          leaq    0xa100(%rcx), %rdi
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f8                   movzwl  %ax, %r15d
// 77: 49 ff c7                      incq    %r15
// 7a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// b1: 48 8b 03                      movq    (%rbx), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 48 8b 03                      movq    (%rbx), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d5                         callq   *%rbp
// d7: 48 ff 0b                      decq    (%rbx)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 48 89 df                      movq    %rbx, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f2: 48 85 f6                      testq   %rsi, %rsi
// f5: 0f 84 59 03 00 00             je      0x454 <_JIT_ENTRY+0x454>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 0f b7 c0                      movzwl  %ax, %eax
// 10b: 48 c1 e0 03                   shlq    $0x3, %rax
// 10f: 48 f7 d8                      negq    %rax
// 112: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 117: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11b: b8 01 00 00 00                movl    $0x1, %eax
// 120: 29 c8                         subl    %ecx, %eax
// 122: 48 63 d8                      movslq  %eax, %rbx
// 125: 4c 8d 24 da                   leaq    (%rdx,%rbx,8), %r12
// 129: 4c 8b 74 da f8                movq    -0x8(%rdx,%rbx,8), %r14
// 12e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000130:  R_X86_64_64  _PyObject_LookupSpecial
// 138: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000013a:  R_X86_64_64  _PyRuntime
// 142: 48 8d b5 50 ae 00 00          leaq    0xae50(%rbp), %rsi
// 149: 4c 89 f7                      movq    %r14, %rdi
// 14c: 41 ff d7                      callq   *%r15
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 0f 84 c1 00 00 00             je      0x219 <_JIT_ENTRY+0x219>
// 158: 49 89 c5                      movq    %rax, %r13
// 15b: 48 81 c5 b8 ae 00 00          addq    $0xaeb8, %rbp           # imm = 0xAEB8
// 162: 4c 89 f7                      movq    %r14, %rdi
// 165: 48 89 ee                      movq    %rbp, %rsi
// 168: 41 ff d7                      callq   *%r15
// 16b: 48 85 c0                      testq   %rax, %rax
// 16e: 0f 84 f1 00 00 00             je      0x265 <_JIT_ENTRY+0x265>
// 174: 48 89 c5                      movq    %rax, %rbp
// 177: 49 8b 06                      movq    (%r14), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 21                         jg      0x1a0 <_JIT_ENTRY+0x1a0>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 198: 4c 89 f2                      movq    %r14, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 49 8b 06                      movq    (%r14), %rax
// 1a0: 85 c0                         testl   %eax, %eax
// 1a2: 78 15                         js      0x1b9 <_JIT_ENTRY+0x1b9>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 49 ff 0e                      decq    (%r14)
// 1b3: 0f 84 5c 01 00 00             je      0x315 <_JIT_ENTRY+0x315>
// 1b9: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1bd: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 1c4: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1c9: 0f 84 6b 01 00 00             je      0x33a <_JIT_ENTRY+0x33a>
// 1cf: 48 8b 40 38                   movq    0x38(%rax), %rax
// 1d3: 49 8b 44 05 00                movq    (%r13,%rax), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 0f 84 59 01 00 00             je      0x33a <_JIT_ENTRY+0x33a>
// 1e1: 4c 89 ef                      movq    %r13, %rdi
// 1e4: 31 f6                         xorl    %esi, %esi
// 1e6: 31 d2                         xorl    %edx, %edx
// 1e8: 31 c9                         xorl    %ecx, %ecx
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001ee:  R_X86_64_64  _Py_CheckFunctionResult
// 1f6: 4c 89 ff                      movq    %r15, %rdi
// 1f9: 4c 89 ee                      movq    %r13, %rsi
// 1fc: 48 89 c2                      movq    %rax, %rdx
// 1ff: 31 c9                         xorl    %ecx, %ecx
// 201: 41 ff d0                      callq   *%r8
// 204: 49 89 c6                      movq    %rax, %r14
// 207: 49 8b 45 00                   movq    (%r13), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 0f 8f 6d 01 00 00             jg      0x381 <_JIT_ENTRY+0x381>
// 214: e9 46 01 00 00                jmp     0x35f <_JIT_ENTRY+0x35f>
// 219: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 21e: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 74 0b                         je      0x232 <_JIT_ENTRY+0x232>
// 227: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 22c: 0f 85 22 02 00 00             jne     0x454 <_JIT_ENTRY+0x454>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  PyExc_TypeError
// 23c: 48 8b 30                      movq    (%rax), %rsi
// 23f: 49 8b 46 08                   movq    0x8(%r14), %rax
// 243: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 247: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000249:  R_X86_64_64  .rodata.str1.1+0x39
// 251: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000253:  R_X86_64_64  _PyErr_Format
// 25b: 31 c0                         xorl    %eax, %eax
// 25d: 41 ff d0                      callq   *%r8
// 260: e9 ef 01 00 00                jmp     0x454 <_JIT_ENTRY+0x454>
// 265: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 26a: 48 8b 47 68                   movq    0x68(%rdi), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 74 19                         je      0x28c <_JIT_ENTRY+0x28c>
// 273: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 278: 74 12                         je      0x28c <_JIT_ENTRY+0x28c>
// 27a: 49 8b 45 00                   movq    (%r13), %rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 7e 40                         jle     0x2c3 <_JIT_ENTRY+0x2c3>
// 283: 85 c0                         testl   %eax, %eax
// 285: 79 66                         jns     0x2ed <_JIT_ENTRY+0x2ed>
// 287: e9 c8 01 00 00                jmp     0x454 <_JIT_ENTRY+0x454>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  PyExc_TypeError
// 296: 48 8b 30                      movq    (%rax), %rsi
// 299: 49 8b 46 08                   movq    0x8(%r14), %rax
// 29d: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2a1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1+0x77
// 2ab: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ad:  R_X86_64_64  _PyErr_Format
// 2b5: 31 c0                         xorl    %eax, %eax
// 2b7: 41 ff d0                      callq   *%r8
// 2ba: 49 8b 45 00                   movq    (%r13), %rax
// 2be: 48 85 c0                      testq   %rax, %rax
// 2c1: 7f c0                         jg      0x283 <_JIT_ENTRY+0x283>
// 2c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_NegativeRefcount
// 2d7: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 2dc: 4c 89 ea                      movq    %r13, %rdx
// 2df: ff d0                         callq   *%rax
// 2e1: 49 8b 45 00                   movq    (%r13), %rax
// 2e5: 85 c0                         testl   %eax, %eax
// 2e7: 0f 88 67 01 00 00             js      0x454 <_JIT_ENTRY+0x454>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 ff 4d 00                   decq    (%r13)
// 2fd: 0f 85 51 01 00 00             jne     0x454 <_JIT_ENTRY+0x454>
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _Py_Dealloc
// 30d: 4c 89 ef                      movq    %r13, %rdi
// 310: e9 3d 01 00 00                jmp     0x452 <_JIT_ENTRY+0x452>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_Dealloc
// 31f: 4c 89 f7                      movq    %r14, %rdi
// 322: ff d0                         callq   *%rax
// 324: 49 8b 45 08                   movq    0x8(%r13), %rax
// 328: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 32f: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 334: 0f 85 95 fe ff ff             jne     0x1cf <_JIT_ENTRY+0x1cf>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _PyObject_MakeTpCall
// 344: 4c 89 ff                      movq    %r15, %rdi
// 347: 4c 89 ee                      movq    %r13, %rsi
// 34a: 31 d2                         xorl    %edx, %edx
// 34c: 31 c9                         xorl    %ecx, %ecx
// 34e: 45 31 c0                      xorl    %r8d, %r8d
// 351: ff d0                         callq   *%rax
// 353: 49 89 c6                      movq    %rax, %r14
// 356: 49 8b 45 00                   movq    (%r13), %rax
// 35a: 48 85 c0                      testq   %rax, %rax
// 35d: 7f 22                         jg      0x381 <_JIT_ENTRY+0x381>
// 35f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000361:  R_X86_64_64  .rodata.str1.1
// 369: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036b:  R_X86_64_64  _Py_NegativeRefcount
// 373: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 378: 4c 89 ea                      movq    %r13, %rdx
// 37b: ff d0                         callq   *%rax
// 37d: 49 8b 45 00                   movq    (%r13), %rax
// 381: 85 c0                         testl   %eax, %eax
// 383: 78 21                         js      0x3a6 <_JIT_ENTRY+0x3a6>
// 385: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000387:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38f: ff d0                         callq   *%rax
// 391: 49 ff 4d 00                   decq    (%r13)
// 395: 75 0f                         jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _Py_Dealloc
// 3a1: 4c 89 ef                      movq    %r13, %rdi
// 3a4: ff d0                         callq   *%rax
// 3a6: 4d 85 f6                      testq   %r14, %r14
// 3a9: 74 4c                         je      0x3f7 <_JIT_ENTRY+0x3f7>
// 3ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ad:  R_X86_64_64  _JIT_OPARG
// 3b5: 0f b7 c0                      movzwl  %ax, %eax
// 3b8: b9 01 00 00 00                movl    $0x1, %ecx
// 3bd: 29 c1                         subl    %eax, %ecx
// 3bf: 48 63 c1                      movslq  %ecx, %rax
// 3c2: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 3c7: 48 89 6c c1 f8                movq    %rbp, -0x8(%rcx,%rax,8)
// 3cc: 4c 89 34 c1                   movq    %r14, (%rcx,%rax,8)
// 3d0: 48 8d 74 c1 08                leaq    0x8(%rcx,%rax,8), %rsi
// 3d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d7:  R_X86_64_64  _JIT_CONTINUE
// 3df: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 3e4: 4c 89 fa                      movq    %r15, %rdx
// 3e7: 48 83 c4 28                   addq    $0x28, %rsp
// 3eb: 5b                            popq    %rbx
// 3ec: 41 5c                         popq    %r12
// 3ee: 41 5d                         popq    %r13
// 3f0: 41 5e                         popq    %r14
// 3f2: 41 5f                         popq    %r15
// 3f4: 5d                            popq    %rbp
// 3f5: ff e0                         jmpq    *%rax
// 3f7: 48 8b 45 00                   movq    (%rbp), %rax
// 3fb: 48 85 c0                      testq   %rax, %rax
// 3fe: 7f 22                         jg      0x422 <_JIT_ENTRY+0x422>
// 400: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000402:  R_X86_64_64  .rodata.str1.1
// 40a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040c:  R_X86_64_64  _Py_NegativeRefcount
// 414: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 419: 48 89 ea                      movq    %rbp, %rdx
// 41c: ff d0                         callq   *%rax
// 41e: 48 8b 45 00                   movq    (%rbp), %rax
// 422: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 427: 4c 8d 24 d9                   leaq    (%rcx,%rbx,8), %r12
// 42b: 49 83 c4 f8                   addq    $-0x8, %r12
// 42f: 85 c0                         testl   %eax, %eax
// 431: 78 21                         js      0x454 <_JIT_ENTRY+0x454>
// 433: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000435:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 43d: ff d0                         callq   *%rax
// 43f: 48 ff 4d 00                   decq    (%rbp)
// 443: 75 0f                         jne     0x454 <_JIT_ENTRY+0x454>
// 445: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000447:  R_X86_64_64  _Py_Dealloc
// 44f: 48 89 ef                      movq    %rbp, %rdi
// 452: ff d0                         callq   *%rax
// 454: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 459: 49 29 c4                      subq    %rax, %r12
// 45c: 49 83 c4 b8                   addq    $-0x48, %r12
// 460: 49 c1 ec 03                   shrq    $0x3, %r12
// 464: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 468: 31 c0                         xorl    %eax, %eax
// 46a: 48 83 c4 28                   addq    $0x28, %rsp
// 46e: 5b                            popq    %rbx
// 46f: 41 5c                         popq    %r12
// 471: 41 5d                         popq    %r13
// 473: 41 5e                         popq    %r14
// 475: 41 5f                         popq    %r15
// 477: 5d                            popq    %rbp
// 478: c3                            retq
// 479: 
static const unsigned char _BUILD_STRINGplus_BEFORE_WITH_code_body[1146] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xb9, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x4c, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x59, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8d, 0x24, 0xda, 0x4c, 0x8b, 0x74, 0xda, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x84, 0x5c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x84, 0x6b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x44, 0x05, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6d, 0x01, 0x00, 0x00, 0xe9, 0x46, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x22, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x46, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xef, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x19, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x12, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x40, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0xc8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x46, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xc0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x51, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x85, 0x95, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x4c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x6c, 0xc1, 0xf8, 0x4c, 0x89, 0x34, 0xc1, 0x48, 0x8d, 0x74, 0xc1, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4c, 0x8d, 0x24, 0xd9, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BEFORE_WITH_code_holes[38] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x402, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x40c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x435, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x447, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _BUILD_STRINGplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BEFORE_WITH_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7f: 49 ff c7                      incq    %r15
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f2: 48 85 f6                      testq   %rsi, %rsi
// f5: 0f 84 49 01 00 00             je      0x244 <_JIT_ENTRY+0x244>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 0f b7 c0                      movzwl  %ax, %eax
// 10b: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 113: 48 f7 da                      negq    %rdx
// 116: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 11b: 49 89 34 17                   movq    %rsi, (%r15,%rdx)
// 11f: ba 01 00 00 00                movl    $0x1, %edx
// 124: 29 ca                         subl    %ecx, %edx
// 126: 4c 63 f2                      movslq  %edx, %r14
// 129: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 12e: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 133: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000135:  R_X86_64_64  _PyEval_BinaryOps
// 13d: 48 89 ef                      movq    %rbp, %rdi
// 140: 4c 89 ee                      movq    %r13, %rsi
// 143: ff 14 c1                      callq   *(%rcx,%rax,8)
// 146: 49 89 c4                      movq    %rax, %r12
// 149: 48 8b 45 00                   movq    (%rbp), %rax
// 14d: 48 85 c0                      testq   %rax, %rax
// 150: 7e 06                         jle     0x158 <_JIT_ENTRY+0x158>
// 152: 85 c0                         testl   %eax, %eax
// 154: 79 28                         jns     0x17e <_JIT_ENTRY+0x17e>
// 156: eb 2e                         jmp     0x186 <_JIT_ENTRY+0x186>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 171: 48 89 ea                      movq    %rbp, %rdx
// 174: ff d0                         callq   *%rax
// 176: 48 8b 45 00                   movq    (%rbp), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 78 08                         js      0x186 <_JIT_ENTRY+0x186>
// 17e: ff d3                         callq   *%rbx
// 180: 48 ff 4d 00                   decq    (%rbp)
// 184: 74 0f                         je      0x195 <_JIT_ENTRY+0x195>
// 186: 49 8b 45 00                   movq    (%r13), %rax
// 18a: 48 85 c0                      testq   %rax, %rax
// 18d: 7e 1e                         jle     0x1ad <_JIT_ENTRY+0x1ad>
// 18f: 85 c0                         testl   %eax, %eax
// 191: 79 40                         jns     0x1d3 <_JIT_ENTRY+0x1d3>
// 193: eb 46                         jmp     0x1db <_JIT_ENTRY+0x1db>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 48 89 ef                      movq    %rbp, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 8b 45 00                   movq    (%r13), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7f e2                         jg      0x18f <_JIT_ENTRY+0x18f>
// 1ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 1c6: 4c 89 ea                      movq    %r13, %rdx
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 8b 45 00                   movq    (%r13), %rax
// 1cf: 85 c0                         testl   %eax, %eax
// 1d1: 78 08                         js      0x1db <_JIT_ENTRY+0x1db>
// 1d3: ff d3                         callq   *%rbx
// 1d5: 49 ff 4d 00                   decq    (%r13)
// 1d9: 74 4d                         je      0x228 <_JIT_ENTRY+0x228>
// 1db: 4d 85 e4                      testq   %r12, %r12
// 1de: 74 5c                         je      0x23c <_JIT_ENTRY+0x23c>
// 1e0: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 1e4: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_OPARG
// 1f2: 0f b7 c0                      movzwl  %ax, %eax
// 1f5: b9 01 00 00 00                movl    $0x1, %ecx
// 1fa: 29 c1                         subl    %eax, %ecx
// 1fc: 48 63 c1                      movslq  %ecx, %rax
// 1ff: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _JIT_CONTINUE
// 20e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 213: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 218: 48 83 c4 28                   addq    $0x28, %rsp
// 21c: 5b                            popq    %rbx
// 21d: 41 5c                         popq    %r12
// 21f: 41 5d                         popq    %r13
// 221: 41 5e                         popq    %r14
// 223: 41 5f                         popq    %r15
// 225: 5d                            popq    %rbp
// 226: ff e0                         jmpq    *%rax
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 ef                      movq    %r13, %rdi
// 235: ff d0                         callq   *%rax
// 237: 4d 85 e4                      testq   %r12, %r12
// 23a: 75 a4                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 23c: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 240: 49 83 c4 f0                   addq    $-0x10, %r12
// 244: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 249: 49 29 c4                      subq    %rax, %r12
// 24c: 49 83 c4 b8                   addq    $-0x48, %r12
// 250: 49 c1 ec 03                   shrq    $0x3, %r12
// 254: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 258: 31 c0                         xorl    %eax, %eax
// 25a: 48 83 c4 28                   addq    $0x28, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: c3                            retq
// 269: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_code_body[618] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x49, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x34, 0x17, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xf2, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4d, 0x4d, 0x85, 0xe4, 0x74, 0x5c, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa4, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_OP_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP_ADD_FLOAT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 5a 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4a 8b 6c f3 f0                movq    -0x10(%rbx,%r14,8), %rbp
// 12b: 4e 8b 64 f3 f8                movq    -0x8(%rbx,%r14,8), %r12
// 130: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 135: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 13c: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 141: 75 3d                         jne     0x180 <_JIT_ENTRY+0x180>
// 143: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 148: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 14e: 75 28                         jne     0x178 <_JIT_ENTRY+0x178>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  PyInterpreterState_Get
// 15a: ff d0                         callq   *%rax
// 15c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 163: 49 ff 0c 24                   decq    (%r12)
// 167: 75 0f                         jne     0x178 <_JIT_ENTRY+0x178>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _PyFloat_ExactDealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 49 89 ec                      movq    %rbp, %r12
// 17b: e9 fe 00 00 00                jmp     0x27e <_JIT_ENTRY+0x27e>
// 180: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 185: 75 3c                         jne     0x1c3 <_JIT_ENTRY+0x1c3>
// 187: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 18e: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 192: 0f 85 e6 00 00 00             jne     0x27e <_JIT_ENTRY+0x27e>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  PyInterpreterState_Get
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ab: 48 8b 45 00                   movq    (%rbp), %rax
// 1af: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1b3: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1b7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1bb: 0f 8f bd 00 00 00             jg      0x27e <_JIT_ENTRY+0x27e>
// 1c1: eb 6f                         jmp     0x232 <_JIT_ENTRY+0x232>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyFloat_FromDouble
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 74 7e                         je      0x252 <_JIT_ENTRY+0x252>
// 1d4: 49 89 c5                      movq    %rax, %r13
// 1d7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1db: 75 25                         jne     0x202 <_JIT_ENTRY+0x202>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  PyInterpreterState_Get
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f0: 48 8b 45 00                   movq    (%rbp), %rax
// 1f4: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1f8: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1fc: 48 83 f8 01                   cmpq    $0x1, %rax
// 200: 7e 30                         jle     0x232 <_JIT_ENTRY+0x232>
// 202: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 208: 75 71                         jne     0x27b <_JIT_ENTRY+0x27b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyInterpreterState_Get
// 214: ff d0                         callq   *%rax
// 216: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21d: 49 8b 04 24                   movq    (%r12), %rax
// 221: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 225: 49 89 0c 24                   movq    %rcx, (%r12)
// 229: 4d 89 ec                      movq    %r13, %r12
// 22c: 48 83 f8 01                   cmpq    $0x1, %rax
// 230: 7f 4c                         jg      0x27e <_JIT_ENTRY+0x27e>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1+0x39
// 23c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1+0x4f
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 250: ff d0                         callq   *%rax
// 252: 4e 8d 24 f3                   leaq    (%rbx,%r14,8), %r12
// 256: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 25b: 49 29 c4                      subq    %rax, %r12
// 25e: 49 83 c4 b8                   addq    $-0x48, %r12
// 262: 49 c1 ec 03                   shrq    $0x3, %r12
// 266: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 26a: 31 c0                         xorl    %eax, %eax
// 26c: 48 83 c4 28                   addq    $0x28, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: c3                            retq
// 27b: 4d 89 ec                      movq    %r13, %r12
// 27e: 4a 8d 34 f3                   leaq    (%rbx,%r14,8), %rsi
// 282: 48 83 c6 f8                   addq    $-0x8, %rsi
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_OPARG
// 290: 0f b7 c0                      movzwl  %ax, %eax
// 293: b9 01 00 00 00                movl    $0x1, %ecx
// 298: 29 c1                         subl    %eax, %ecx
// 29a: 48 63 c1                      movslq  %ecx, %rax
// 29d: 4c 89 64 c3 f0                movq    %r12, -0x10(%rbx,%rax,8)
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_CONTINUE
// 2ac: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b6: 48 83 c4 28                   addq    $0x28, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_ADD_FLOAT_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x6c, 0xf3, 0xf0, 0x4e, 0x8b, 0x64, 0xf3, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xbd, 0x00, 0x00, 0x00, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x4c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x8d, 0x24, 0xf3, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xec, 0x4a, 0x8d, 0x34, 0xf3, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_BINARY_OP_ADD_FLOAT_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP_ADD_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP_ADD_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 07 01 00 00             je      0x203 <_JIT_ENTRY+0x203>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 118: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 63 d8                      movslq  %eax, %rbx
// 127: 4c 8b 6c dd f0                movq    -0x10(%rbp,%rbx,8), %r13
// 12c: 4c 8b 74 dd f8                movq    -0x8(%rbp,%rbx,8), %r14
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _PyLong_Add
// 13b: 4c 89 ef                      movq    %r13, %rdi
// 13e: 4c 89 f6                      movq    %r14, %rsi
// 141: ff d0                         callq   *%rax
// 143: 49 89 c4                      movq    %rax, %r12
// 146: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 14b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000014d:  R_X86_64_64  PyInterpreterState_Get
// 155: 75 0f                         jne     0x166 <_JIT_ENTRY+0x166>
// 157: 41 ff d7                      callq   *%r15
// 15a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 161: 49 ff 0e                      decq    (%r14)
// 164: 74 28                         je      0x18e <_JIT_ENTRY+0x18e>
// 166: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 16b: 75 37                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 16d: 41 ff d7                      callq   *%r15
// 170: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 177: 49 ff 4d 00                   decq    (%r13)
// 17b: 75 27                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  PyObject_Free
// 187: 4c 89 ef                      movq    %r13, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  PyObject_Free
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1a2: 74 c9                         je      0x16d <_JIT_ENTRY+0x16d>
// 1a4: 4d 85 e4                      testq   %r12, %r12
// 1a7: 74 4b                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1a9: 48 8d 34 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %rsi
// 1b1: 48 01 ee                      addq    %rbp, %rsi
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_OPARG
// 1be: 0f b7 c0                      movzwl  %ax, %eax
// 1c1: b9 01 00 00 00                movl    $0x1, %ecx
// 1c6: 29 c1                         subl    %eax, %ecx
// 1c8: 48 63 c1                      movslq  %ecx, %rax
// 1cb: 4c 89 64 c5 f0                movq    %r12, -0x10(%rbp,%rax,8)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1df: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1e4: 48 83 c4 28                   addq    $0x28, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 1fc: 49 01 ec                      addq    %rbp, %r12
// 1ff: 49 83 c4 f0                   addq    $-0x10, %r12
// 203: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 83 c4 b8                   addq    $-0x48, %r12
// 20f: 49 c1 ec 03                   shrq    $0x3, %r12
// 213: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 217: 31 c0                         xorl    %eax, %eax
// 219: 48 83 c4 28                   addq    $0x28, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: c3                            retq
// 228: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_ADD_INT_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x6c, 0xdd, 0xf0, 0x4c, 0x8b, 0x74, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0f, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x4d, 0x85, 0xe4, 0x74, 0x4b, 0x48, 0x8d, 0x34, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_OP_ADD_INT_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_ADD_INT_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP_ADD_UNICODE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 07 01 00 00             je      0x203 <_JIT_ENTRY+0x203>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 118: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 63 d8                      movslq  %eax, %rbx
// 127: 4c 8b 74 dd f0                movq    -0x10(%rbp,%rbx,8), %r14
// 12c: 4c 8b 6c dd f8                movq    -0x8(%rbp,%rbx,8), %r13
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  PyUnicode_Concat
// 13b: 4c 89 f7                      movq    %r14, %rdi
// 13e: 4c 89 ee                      movq    %r13, %rsi
// 141: ff d0                         callq   *%rax
// 143: 49 89 c4                      movq    %rax, %r12
// 146: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 14b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000014d:  R_X86_64_64  PyInterpreterState_Get
// 155: 75 0f                         jne     0x166 <_JIT_ENTRY+0x166>
// 157: 41 ff d7                      callq   *%r15
// 15a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 161: 49 ff 0e                      decq    (%r14)
// 164: 74 28                         je      0x18e <_JIT_ENTRY+0x18e>
// 166: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 16b: 75 37                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 16d: 41 ff d7                      callq   *%r15
// 170: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 177: 49 ff 4d 00                   decq    (%r13)
// 17b: 75 27                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _PyUnicode_ExactDealloc
// 187: 4c 89 ef                      movq    %r13, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _PyUnicode_ExactDealloc
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1a2: 74 c9                         je      0x16d <_JIT_ENTRY+0x16d>
// 1a4: 4d 85 e4                      testq   %r12, %r12
// 1a7: 74 4b                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1a9: 48 8d 34 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %rsi
// 1b1: 48 01 ee                      addq    %rbp, %rsi
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_OPARG
// 1be: 0f b7 c0                      movzwl  %ax, %eax
// 1c1: b9 01 00 00 00                movl    $0x1, %ecx
// 1c6: 29 c1                         subl    %eax, %ecx
// 1c8: 48 63 c1                      movslq  %ecx, %rax
// 1cb: 4c 89 64 c5 f0                movq    %r12, -0x10(%rbp,%rax,8)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1df: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1e4: 48 83 c4 28                   addq    $0x28, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 1fc: 49 01 ec                      addq    %rbp, %r12
// 1ff: 49 83 c4 f0                   addq    $-0x10, %r12
// 203: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 83 c4 b8                   addq    $-0x48, %r12
// 20f: 49 c1 ec 03                   shrq    $0x3, %r12
// 213: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 217: 31 c0                         xorl    %eax, %eax
// 219: 48 83 c4 28                   addq    $0x28, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: c3                            retq
// 228: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_ADD_UNICODE_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x74, 0xdd, 0xf0, 0x4c, 0x8b, 0x6c, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0f, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x4d, 0x85, 0xe4, 0x74, 0x4b, 0x48, 0x8d, 0x34, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_OP_ADD_UNICODE_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 5a 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4a 8b 6c f3 f0                movq    -0x10(%rbx,%r14,8), %rbp
// 12b: 4e 8b 64 f3 f8                movq    -0x8(%rbx,%r14,8), %r12
// 130: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 135: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 13c: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 141: 75 3d                         jne     0x180 <_JIT_ENTRY+0x180>
// 143: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 148: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 14e: 75 28                         jne     0x178 <_JIT_ENTRY+0x178>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  PyInterpreterState_Get
// 15a: ff d0                         callq   *%rax
// 15c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 163: 49 ff 0c 24                   decq    (%r12)
// 167: 75 0f                         jne     0x178 <_JIT_ENTRY+0x178>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _PyFloat_ExactDealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 49 89 ec                      movq    %rbp, %r12
// 17b: e9 fe 00 00 00                jmp     0x27e <_JIT_ENTRY+0x27e>
// 180: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 185: 75 3c                         jne     0x1c3 <_JIT_ENTRY+0x1c3>
// 187: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 18e: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 192: 0f 85 e6 00 00 00             jne     0x27e <_JIT_ENTRY+0x27e>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  PyInterpreterState_Get
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ab: 48 8b 45 00                   movq    (%rbp), %rax
// 1af: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1b3: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1b7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1bb: 0f 8f bd 00 00 00             jg      0x27e <_JIT_ENTRY+0x27e>
// 1c1: eb 6f                         jmp     0x232 <_JIT_ENTRY+0x232>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyFloat_FromDouble
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 74 7e                         je      0x252 <_JIT_ENTRY+0x252>
// 1d4: 49 89 c5                      movq    %rax, %r13
// 1d7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1db: 75 25                         jne     0x202 <_JIT_ENTRY+0x202>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  PyInterpreterState_Get
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f0: 48 8b 45 00                   movq    (%rbp), %rax
// 1f4: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1f8: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1fc: 48 83 f8 01                   cmpq    $0x1, %rax
// 200: 7e 30                         jle     0x232 <_JIT_ENTRY+0x232>
// 202: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 208: 75 71                         jne     0x27b <_JIT_ENTRY+0x27b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyInterpreterState_Get
// 214: ff d0                         callq   *%rax
// 216: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21d: 49 8b 04 24                   movq    (%r12), %rax
// 221: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 225: 49 89 0c 24                   movq    %rcx, (%r12)
// 229: 4d 89 ec                      movq    %r13, %r12
// 22c: 48 83 f8 01                   cmpq    $0x1, %rax
// 230: 7f 4c                         jg      0x27e <_JIT_ENTRY+0x27e>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1+0x39
// 23c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1+0x4f
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 250: ff d0                         callq   *%rax
// 252: 4e 8d 24 f3                   leaq    (%rbx,%r14,8), %r12
// 256: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 25b: 49 29 c4                      subq    %rax, %r12
// 25e: 49 83 c4 b8                   addq    $-0x48, %r12
// 262: 49 c1 ec 03                   shrq    $0x3, %r12
// 266: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 26a: 31 c0                         xorl    %eax, %eax
// 26c: 48 83 c4 28                   addq    $0x28, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: c3                            retq
// 27b: 4d 89 ec                      movq    %r13, %r12
// 27e: 4a 8d 34 f3                   leaq    (%rbx,%r14,8), %rsi
// 282: 48 83 c6 f8                   addq    $-0x8, %rsi
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_OPARG
// 290: 0f b7 c0                      movzwl  %ax, %eax
// 293: b9 01 00 00 00                movl    $0x1, %ecx
// 298: 29 c1                         subl    %eax, %ecx
// 29a: 48 63 c1                      movslq  %ecx, %rax
// 29d: 4c 89 64 c3 f0                movq    %r12, -0x10(%rbx,%rax,8)
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_CONTINUE
// 2ac: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b6: 48 83 c4 28                   addq    $0x28, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x6c, 0xf3, 0xf0, 0x4e, 0x8b, 0x64, 0xf3, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xbd, 0x00, 0x00, 0x00, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x4c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x8d, 0x24, 0xf3, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xec, 0x4a, 0x8d, 0x34, 0xf3, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 07 01 00 00             je      0x203 <_JIT_ENTRY+0x203>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 118: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 63 d8                      movslq  %eax, %rbx
// 127: 4c 8b 6c dd f0                movq    -0x10(%rbp,%rbx,8), %r13
// 12c: 4c 8b 74 dd f8                movq    -0x8(%rbp,%rbx,8), %r14
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _PyLong_Multiply
// 13b: 4c 89 ef                      movq    %r13, %rdi
// 13e: 4c 89 f6                      movq    %r14, %rsi
// 141: ff d0                         callq   *%rax
// 143: 49 89 c4                      movq    %rax, %r12
// 146: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 14b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000014d:  R_X86_64_64  PyInterpreterState_Get
// 155: 75 0f                         jne     0x166 <_JIT_ENTRY+0x166>
// 157: 41 ff d7                      callq   *%r15
// 15a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 161: 49 ff 0e                      decq    (%r14)
// 164: 74 28                         je      0x18e <_JIT_ENTRY+0x18e>
// 166: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 16b: 75 37                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 16d: 41 ff d7                      callq   *%r15
// 170: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 177: 49 ff 4d 00                   decq    (%r13)
// 17b: 75 27                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  PyObject_Free
// 187: 4c 89 ef                      movq    %r13, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  PyObject_Free
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1a2: 74 c9                         je      0x16d <_JIT_ENTRY+0x16d>
// 1a4: 4d 85 e4                      testq   %r12, %r12
// 1a7: 74 4b                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1a9: 48 8d 34 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %rsi
// 1b1: 48 01 ee                      addq    %rbp, %rsi
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_OPARG
// 1be: 0f b7 c0                      movzwl  %ax, %eax
// 1c1: b9 01 00 00 00                movl    $0x1, %ecx
// 1c6: 29 c1                         subl    %eax, %ecx
// 1c8: 48 63 c1                      movslq  %ecx, %rax
// 1cb: 4c 89 64 c5 f0                movq    %r12, -0x10(%rbp,%rax,8)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1df: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1e4: 48 83 c4 28                   addq    $0x28, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 1fc: 49 01 ec                      addq    %rbp, %r12
// 1ff: 49 83 c4 f0                   addq    $-0x10, %r12
// 203: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 83 c4 b8                   addq    $-0x48, %r12
// 20f: 49 c1 ec 03                   shrq    $0x3, %r12
// 213: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 217: 31 c0                         xorl    %eax, %eax
// 219: 48 83 c4 28                   addq    $0x28, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: c3                            retq
// 228: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x6c, 0xdd, 0xf0, 0x4c, 0x8b, 0x74, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0f, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x4d, 0x85, 0xe4, 0x74, 0x4b, 0x48, 0x8d, 0x34, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 5a 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4a 8b 6c f3 f0                movq    -0x10(%rbx,%r14,8), %rbp
// 12b: 4e 8b 64 f3 f8                movq    -0x8(%rbx,%r14,8), %r12
// 130: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 135: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 13c: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 141: 75 3d                         jne     0x180 <_JIT_ENTRY+0x180>
// 143: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 148: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 14e: 75 28                         jne     0x178 <_JIT_ENTRY+0x178>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  PyInterpreterState_Get
// 15a: ff d0                         callq   *%rax
// 15c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 163: 49 ff 0c 24                   decq    (%r12)
// 167: 75 0f                         jne     0x178 <_JIT_ENTRY+0x178>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _PyFloat_ExactDealloc
// 173: 4c 89 e7                      movq    %r12, %rdi
// 176: ff d0                         callq   *%rax
// 178: 49 89 ec                      movq    %rbp, %r12
// 17b: e9 fe 00 00 00                jmp     0x27e <_JIT_ENTRY+0x27e>
// 180: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 185: 75 3c                         jne     0x1c3 <_JIT_ENTRY+0x1c3>
// 187: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 18e: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 192: 0f 85 e6 00 00 00             jne     0x27e <_JIT_ENTRY+0x27e>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  PyInterpreterState_Get
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ab: 48 8b 45 00                   movq    (%rbp), %rax
// 1af: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1b3: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1b7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1bb: 0f 8f bd 00 00 00             jg      0x27e <_JIT_ENTRY+0x27e>
// 1c1: eb 6f                         jmp     0x232 <_JIT_ENTRY+0x232>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyFloat_FromDouble
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 74 7e                         je      0x252 <_JIT_ENTRY+0x252>
// 1d4: 49 89 c5                      movq    %rax, %r13
// 1d7: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1db: 75 25                         jne     0x202 <_JIT_ENTRY+0x202>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  PyInterpreterState_Get
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f0: 48 8b 45 00                   movq    (%rbp), %rax
// 1f4: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1f8: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1fc: 48 83 f8 01                   cmpq    $0x1, %rax
// 200: 7e 30                         jle     0x232 <_JIT_ENTRY+0x232>
// 202: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 208: 75 71                         jne     0x27b <_JIT_ENTRY+0x27b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyInterpreterState_Get
// 214: ff d0                         callq   *%rax
// 216: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 21d: 49 8b 04 24                   movq    (%r12), %rax
// 221: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 225: 49 89 0c 24                   movq    %rcx, (%r12)
// 229: 4d 89 ec                      movq    %r13, %r12
// 22c: 48 83 f8 01                   cmpq    $0x1, %rax
// 230: 7f 4c                         jg      0x27e <_JIT_ENTRY+0x27e>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1+0x39
// 23c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1+0x4f
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 250: ff d0                         callq   *%rax
// 252: 4e 8d 24 f3                   leaq    (%rbx,%r14,8), %r12
// 256: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 25b: 49 29 c4                      subq    %rax, %r12
// 25e: 49 83 c4 b8                   addq    $-0x48, %r12
// 262: 49 c1 ec 03                   shrq    $0x3, %r12
// 266: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 26a: 31 c0                         xorl    %eax, %eax
// 26c: 48 83 c4 28                   addq    $0x28, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: c3                            retq
// 27b: 4d 89 ec                      movq    %r13, %r12
// 27e: 4a 8d 34 f3                   leaq    (%rbx,%r14,8), %rsi
// 282: 48 83 c6 f8                   addq    $-0x8, %rsi
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_OPARG
// 290: 0f b7 c0                      movzwl  %ax, %eax
// 293: b9 01 00 00 00                movl    $0x1, %ecx
// 298: 29 c1                         subl    %eax, %ecx
// 29a: 48 63 c1                      movslq  %ecx, %rax
// 29d: 4c 89 64 c3 f0                movq    %r12, -0x10(%rbx,%rax,8)
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _JIT_CONTINUE
// 2ac: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b6: 48 83 c4 28                   addq    $0x28, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x6c, 0xf3, 0xf0, 0x4e, 0x8b, 0x64, 0xf3, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xbd, 0x00, 0x00, 0x00, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7e, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x4c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x8d, 0x24, 0xf3, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x89, 0xec, 0x4a, 0x8d, 0x34, 0xf3, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 07 01 00 00             je      0x203 <_JIT_ENTRY+0x203>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 118: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 63 d8                      movslq  %eax, %rbx
// 127: 4c 8b 6c dd f0                movq    -0x10(%rbp,%rbx,8), %r13
// 12c: 4c 8b 74 dd f8                movq    -0x8(%rbp,%rbx,8), %r14
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _PyLong_Subtract
// 13b: 4c 89 ef                      movq    %r13, %rdi
// 13e: 4c 89 f6                      movq    %r14, %rsi
// 141: ff d0                         callq   *%rax
// 143: 49 89 c4                      movq    %rax, %r12
// 146: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 14b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000014d:  R_X86_64_64  PyInterpreterState_Get
// 155: 75 0f                         jne     0x166 <_JIT_ENTRY+0x166>
// 157: 41 ff d7                      callq   *%r15
// 15a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 161: 49 ff 0e                      decq    (%r14)
// 164: 74 28                         je      0x18e <_JIT_ENTRY+0x18e>
// 166: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 16b: 75 37                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 16d: 41 ff d7                      callq   *%r15
// 170: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 177: 49 ff 4d 00                   decq    (%r13)
// 17b: 75 27                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  PyObject_Free
// 187: 4c 89 ef                      movq    %r13, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  PyObject_Free
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: ff d0                         callq   *%rax
// 19d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1a2: 74 c9                         je      0x16d <_JIT_ENTRY+0x16d>
// 1a4: 4d 85 e4                      testq   %r12, %r12
// 1a7: 74 4b                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1a9: 48 8d 34 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %rsi
// 1b1: 48 01 ee                      addq    %rbp, %rsi
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _JIT_OPARG
// 1be: 0f b7 c0                      movzwl  %ax, %eax
// 1c1: b9 01 00 00 00                movl    $0x1, %ecx
// 1c6: 29 c1                         subl    %eax, %ecx
// 1c8: 48 63 c1                      movslq  %ecx, %rax
// 1cb: 4c 89 64 c5 f0                movq    %r12, -0x10(%rbp,%rax,8)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1df: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1e4: 48 83 c4 28                   addq    $0x28, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 1fc: 49 01 ec                      addq    %rbp, %r12
// 1ff: 49 83 c4 f0                   addq    $-0x10, %r12
// 203: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 83 c4 b8                   addq    $-0x48, %r12
// 20f: 49 c1 ec 03                   shrq    $0x3, %r12
// 213: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 217: 31 c0                         xorl    %eax, %eax
// 219: 48 83 c4 28                   addq    $0x28, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: c3                            retq
// 228: 
static const unsigned char _BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x6c, 0xdd, 0xf0, 0x4c, 0x8b, 0x74, 0xdd, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0f, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x4d, 0x85, 0xe4, 0x74, 0x4b, 0x48, 0x8d, 0x34, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _BUILD_STRINGplus_BINARY_SLICE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_SLICE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 7f 01 00 00             je      0x27b <_JIT_ENTRY+0x27b>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4a 8b 74 f3 f8                movq    -0x8(%rbx,%r14,8), %rsi
// 12b: 4e 8b 64 f3 e8                movq    -0x18(%rbx,%r14,8), %r12
// 130: 4a 8b 7c f3 f0                movq    -0x10(%rbx,%r14,8), %rdi
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 13f: ff d0                         callq   *%rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 74 27                         je      0x16d <_JIT_ENTRY+0x16d>
// 146: 48 89 c5                      movq    %rax, %rbp
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyObject_GetItem
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: 48 89 ee                      movq    %rbp, %rsi
// 159: ff d0                         callq   *%rax
// 15b: 49 89 c5                      movq    %rax, %r13
// 15e: 48 8b 45 00                   movq    (%rbp), %rax
// 162: 48 85 c0                      testq   %rax, %rax
// 165: 7e 14                         jle     0x17b <_JIT_ENTRY+0x17b>
// 167: 85 c0                         testl   %eax, %eax
// 169: 79 36                         jns     0x1a1 <_JIT_ENTRY+0x1a1>
// 16b: eb 46                         jmp     0x1b3 <_JIT_ENTRY+0x1b3>
// 16d: 45 31 ed                      xorl    %r13d, %r13d
// 170: 49 8b 04 24                   movq    (%r12), %rax
// 174: 48 85 c0                      testq   %rax, %rax
// 177: 7f 43                         jg      0x1bc <_JIT_ENTRY+0x1bc>
// 179: eb 5f                         jmp     0x1da <_JIT_ENTRY+0x1da>
// 17b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017d:  R_X86_64_64  .rodata.str1.1
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_NegativeRefcount
// 18f: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 194: 48 89 ea                      movq    %rbp, %rdx
// 197: ff d0                         callq   *%rax
// 199: 48 8b 45 00                   movq    (%rbp), %rax
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 78 12                         js      0x1b3 <_JIT_ENTRY+0x1b3>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ab: ff d0                         callq   *%rax
// 1ad: 48 ff 4d 00                   decq    (%rbp)
// 1b1: 74 0f                         je      0x1c2 <_JIT_ENTRY+0x1c2>
// 1b3: 49 8b 04 24                   movq    (%r12), %rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 7e 1e                         jle     0x1da <_JIT_ENTRY+0x1da>
// 1bc: 85 c0                         testl   %eax, %eax
// 1be: 79 40                         jns     0x200 <_JIT_ENTRY+0x200>
// 1c0: eb 50                         jmp     0x212 <_JIT_ENTRY+0x212>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_Dealloc
// 1cc: 48 89 ef                      movq    %rbp, %rdi
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 8b 04 24                   movq    (%r12), %rax
// 1d5: 48 85 c0                      testq   %rax, %rax
// 1d8: 7f e2                         jg      0x1bc <_JIT_ENTRY+0x1bc>
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_NegativeRefcount
// 1ee: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 1f3: 4c 89 e2                      movq    %r12, %rdx
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 8b 04 24                   movq    (%r12), %rax
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 78 12                         js      0x212 <_JIT_ENTRY+0x212>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 49 ff 0c 24                   decq    (%r12)
// 210: 74 4d                         je      0x25f <_JIT_ENTRY+0x25f>
// 212: 4d 85 ed                      testq   %r13, %r13
// 215: 74 5c                         je      0x273 <_JIT_ENTRY+0x273>
// 217: 4a 8d 34 f3                   leaq    (%rbx,%r14,8), %rsi
// 21b: 48 83 c6 f0                   addq    $-0x10, %rsi
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_OPARG
// 229: 0f b7 c0                      movzwl  %ax, %eax
// 22c: b9 01 00 00 00                movl    $0x1, %ecx
// 231: 29 c1                         subl    %eax, %ecx
// 233: 48 63 c1                      movslq  %ecx, %rax
// 236: 4c 89 6c c3 e8                movq    %r13, -0x18(%rbx,%rax,8)
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _JIT_CONTINUE
// 245: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 24a: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 24f: 48 83 c4 28                   addq    $0x28, %rsp
// 253: 5b                            popq    %rbx
// 254: 41 5c                         popq    %r12
// 256: 41 5d                         popq    %r13
// 258: 41 5e                         popq    %r14
// 25a: 41 5f                         popq    %r15
// 25c: 5d                            popq    %rbp
// 25d: ff e0                         jmpq    *%rax
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_Dealloc
// 269: 4c 89 e7                      movq    %r12, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 4d 85 ed                      testq   %r13, %r13
// 271: 75 a4                         jne     0x217 <_JIT_ENTRY+0x217>
// 273: 4e 8d 24 f3                   leaq    (%rbx,%r14,8), %r12
// 277: 49 83 c4 e8                   addq    $-0x18, %r12
// 27b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 280: 49 29 c4                      subq    %rax, %r12
// 283: 49 83 c4 b8                   addq    $-0x48, %r12
// 287: 49 c1 ec 03                   shrq    $0x3, %r12
// 28b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 28f: 31 c0                         xorl    %eax, %eax
// 291: 48 83 c4 28                   addq    $0x28, %rsp
// 295: 5b                            popq    %rbx
// 296: 41 5c                         popq    %r12
// 298: 41 5d                         popq    %r13
// 29a: 41 5e                         popq    %r14
// 29c: 41 5f                         popq    %r15
// 29e: 5d                            popq    %rbp
// 29f: c3                            retq
// 2a0: 
static const unsigned char _BUILD_STRINGplus_BINARY_SLICE_code_body[673] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x74, 0xf3, 0xf8, 0x4e, 0x8b, 0x64, 0xf3, 0xe8, 0x4a, 0x8b, 0x7c, 0xf3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x79, 0x36, 0xeb, 0x46, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x43, 0xeb, 0x5f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4d, 0x4d, 0x85, 0xed, 0x74, 0x5c, 0x4a, 0x8d, 0x34, 0xf3, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x6c, 0xc3, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xa4, 0x4e, 0x8d, 0x24, 0xf3, 0x49, 0x83, 0xc4, 0xe8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_SLICE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_SLICE_data_holes[1];

// _BUILD_STRINGplus_BINARY_SUBSCR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7f: 49 ff c7                      incq    %r15
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 0f 84 44 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 0f b7 c0                      movzwl  %ax, %eax
// 10b: 48 c1 e0 03                   shlq    $0x3, %rax
// 10f: 48 f7 d8                      negq    %rax
// 112: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 117: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11b: b8 01 00 00 00                movl    $0x1, %eax
// 120: 29 c8                         subl    %ecx, %eax
// 122: 4c 63 f0                      movslq  %eax, %r14
// 125: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 12a: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  PyObject_GetItem
// 139: 48 89 ef                      movq    %rbp, %rdi
// 13c: 4c 89 ee                      movq    %r13, %rsi
// 13f: ff d0                         callq   *%rax
// 141: 49 89 c4                      movq    %rax, %r12
// 144: 48 8b 45 00                   movq    (%rbp), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7e 06                         jle     0x153 <_JIT_ENTRY+0x153>
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 79 28                         jns     0x179 <_JIT_ENTRY+0x179>
// 151: eb 2e                         jmp     0x181 <_JIT_ENTRY+0x181>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 16c: 48 89 ea                      movq    %rbp, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 45 00                   movq    (%rbp), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 08                         js      0x181 <_JIT_ENTRY+0x181>
// 179: ff d3                         callq   *%rbx
// 17b: 48 ff 4d 00                   decq    (%rbp)
// 17f: 74 0f                         je      0x190 <_JIT_ENTRY+0x190>
// 181: 49 8b 45 00                   movq    (%r13), %rax
// 185: 48 85 c0                      testq   %rax, %rax
// 188: 7e 1e                         jle     0x1a8 <_JIT_ENTRY+0x1a8>
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 79 40                         jns     0x1ce <_JIT_ENTRY+0x1ce>
// 18e: eb 46                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 48 89 ef                      movq    %rbp, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 45 00                   movq    (%r13), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 7f e2                         jg      0x18a <_JIT_ENTRY+0x18a>
// 1a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001aa:  R_X86_64_64  .rodata.str1.1
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 1c1: 4c 89 ea                      movq    %r13, %rdx
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 8b 45 00                   movq    (%r13), %rax
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 08                         js      0x1d6 <_JIT_ENTRY+0x1d6>
// 1ce: ff d3                         callq   *%rbx
// 1d0: 49 ff 4d 00                   decq    (%r13)
// 1d4: 74 4d                         je      0x223 <_JIT_ENTRY+0x223>
// 1d6: 4d 85 e4                      testq   %r12, %r12
// 1d9: 74 5c                         je      0x237 <_JIT_ENTRY+0x237>
// 1db: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 1df: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _JIT_OPARG
// 1ed: 0f b7 c0                      movzwl  %ax, %eax
// 1f0: b9 01 00 00 00                movl    $0x1, %ecx
// 1f5: 29 c1                         subl    %eax, %ecx
// 1f7: 48 63 c1                      movslq  %ecx, %rax
// 1fa: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_CONTINUE
// 209: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 20e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 213: 48 83 c4 28                   addq    $0x28, %rsp
// 217: 5b                            popq    %rbx
// 218: 41 5c                         popq    %r12
// 21a: 41 5d                         popq    %r13
// 21c: 41 5e                         popq    %r14
// 21e: 41 5f                         popq    %r15
// 220: 5d                            popq    %rbp
// 221: ff e0                         jmpq    *%rax
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 ef                      movq    %r13, %rdi
// 230: ff d0                         callq   *%rax
// 232: 4d 85 e4                      testq   %r12, %r12
// 235: 75 a4                         jne     0x1db <_JIT_ENTRY+0x1db>
// 237: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 23b: 49 83 c4 f0                   addq    $-0x10, %r12
// 23f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 244: 49 29 c4                      subq    %rax, %r12
// 247: 49 83 c4 b8                   addq    $-0x48, %r12
// 24b: 49 c1 ec 03                   shrq    $0x3, %r12
// 24f: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 253: 31 c0                         xorl    %eax, %eax
// 255: 48 83 c4 28                   addq    $0x28, %rsp
// 259: 5b                            popq    %rbx
// 25a: 41 5c                         popq    %r12
// 25c: 41 5d                         popq    %r13
// 25e: 41 5e                         popq    %r14
// 260: 41 5f                         popq    %r15
// 262: 5d                            popq    %rbp
// 263: c3                            retq
// 264: 
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_code_body[613] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4d, 0x4d, 0x85, 0xe4, 0x74, 0x5c, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa4, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_data_holes[1];

// _BUILD_STRINGplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_SUBSCR_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 b9 01 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 4c 63 fa                      movslq  %edx, %r15
// 12b: 4f 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %r13
// 130: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000132:  R_X86_64_64  PyDict_Type
// 13a: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 13e: 74 43                         je      0x183 <_JIT_ENTRY+0x183>
// 140: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000142:  R_X86_64_64  _JIT_OPARG
// 14a: 0f b7 c9                      movzwl  %cx, %ecx
// 14d: 29 c8                         subl    %ecx, %eax
// 14f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 153: 48 8b 0c 24                   movq    (%rsp), %rcx
// 157: 48 29 c8                      subq    %rcx, %rax
// 15a: 48 83 c0 b8                   addq    $-0x48, %rax
// 15e: 48 c1 e8 03                   shrq    $0x3, %rax
// 162: 89 41 40                      movl    %eax, 0x40(%rcx)
// 165: 48 8b 01                      movq    (%rcx), %rax
// 168: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016a:  R_X86_64_64  _JIT_TARGET
// 172: 89 c9                         movl    %ecx, %ecx
// 174: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 178: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 17e: e9 47 01 00 00                jmp     0x2ca <_JIT_ENTRY+0x2ca>
// 183: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  PyDict_GetItemRef
// 192: 48 8d 54 24 20                leaq    0x20(%rsp), %rdx
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: 4c 89 e6                      movq    %r12, %rsi
// 19d: ff d0                         callq   *%rax
// 19f: 89 c5                         movl    %eax, %ebp
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 74 19                         je      0x1be <_JIT_ENTRY+0x1be>
// 1a5: 49 8b 45 00                   movq    (%r13), %rax
// 1a9: 48 85 c0                      testq   %rax, %rax
// 1ac: 7e 28                         jle     0x1d6 <_JIT_ENTRY+0x1d6>
// 1ae: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: 85 c0                         testl   %eax, %eax
// 1ba: 79 4a                         jns     0x206 <_JIT_ENTRY+0x206>
// 1bc: eb 5f                         jmp     0x21d <_JIT_ENTRY+0x21d>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _PyErr_SetKeyError
// 1c8: 4c 89 e7                      movq    %r12, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 45 00                   movq    (%r13), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f d8                         jg      0x1ae <_JIT_ENTRY+0x1ae>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 45 00                   movq    (%r13), %rax
// 1f8: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 17                         js      0x21d <_JIT_ENTRY+0x21d>
// 206: ff d3                         callq   *%rbx
// 208: 49 ff 4d 00                   decq    (%r13)
// 20c: 75 0f                         jne     0x21d <_JIT_ENTRY+0x21d>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_Dealloc
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 49 8b 04 24                   movq    (%r12), %rax
// 221: 48 85 c0                      testq   %rax, %rax
// 224: 7e 06                         jle     0x22c <_JIT_ENTRY+0x22c>
// 226: 85 c0                         testl   %eax, %eax
// 228: 79 28                         jns     0x252 <_JIT_ENTRY+0x252>
// 22a: eb 2e                         jmp     0x25a <_JIT_ENTRY+0x25a>
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_NegativeRefcount
// 240: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 245: 4c 89 e2                      movq    %r12, %rdx
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 04 24                   movq    (%r12), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 08                         js      0x25a <_JIT_ENTRY+0x25a>
// 252: ff d3                         callq   *%rbx
// 254: 49 ff 0c 24                   decq    (%r12)
// 258: 74 40                         je      0x29a <_JIT_ENTRY+0x29a>
// 25a: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 25e: 49 83 c4 f0                   addq    $-0x10, %r12
// 262: 85 ed                         testl   %ebp, %ebp
// 264: 7e 4f                         jle     0x2b5 <_JIT_ENTRY+0x2b5>
// 266: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 26a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 26e: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 273: 49 89 04 24                   movq    %rax, (%r12)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 8b 3c 24                   movq    (%rsp), %rdi
// 285: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 2ad: 49 83 c4 f0                   addq    $-0x10, %r12
// 2b1: 85 ed                         testl   %ebp, %ebp
// 2b3: 7f b1                         jg      0x266 <_JIT_ENTRY+0x266>
// 2b5: 48 8b 04 24                   movq    (%rsp), %rax
// 2b9: 49 29 c4                      subq    %rax, %r12
// 2bc: 49 83 c4 b8                   addq    $-0x48, %r12
// 2c0: 49 c1 ec 03                   shrq    $0x3, %r12
// 2c4: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2c8: 31 c0                         xorl    %eax, %eax
// 2ca: 48 83 c4 28                   addq    $0x28, %rsp
// 2ce: 5b                            popq    %rbx
// 2cf: 41 5c                         popq    %r12
// 2d1: 41 5d                         popq    %r13
// 2d3: 41 5e                         popq    %r14
// 2d5: 41 5f                         popq    %r15
// 2d7: 5d                            popq    %rbp
// 2d8: c3                            retq
// 2d9: 
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_DICT_code_body[730] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb9, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xfa, 0x4f, 0x8b, 0x6c, 0xfe, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x74, 0x43, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x47, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x19, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x28, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x40, 0x4f, 0x8d, 0x24, 0xfe, 0x49, 0x83, 0xc4, 0xf0, 0x85, 0xed, 0x7e, 0x4f, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xfe, 0x49, 0x83, 0xc4, 0xf0, 0x85, 0xed, 0x7f, 0xb1, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_DICT_code_holes[24] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_DICT_data_holes[1];

// _BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 92 01 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 e8                      movslq  %eax, %rbp
// 126: 4c 8b 6c eb f8                movq    -0x8(%rbx,%rbp,8), %r13
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyLong_Type
// 135: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 139: 0f 85 1d 01 00 00             jne     0x25c <_JIT_ENTRY+0x25c>
// 13f: 4c 8b 64 eb f0                movq    -0x10(%rbx,%rbp,8), %r12
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyList_Type
// 14e: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 153: 0f 85 03 01 00 00             jne     0x25c <_JIT_ENTRY+0x25c>
// 159: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 15e: 0f 87 f8 00 00 00             ja      0x25c <_JIT_ENTRY+0x25c>
// 164: 41 8b 45 18                   movl    0x18(%r13), %eax
// 168: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 16d: 0f 8e e9 00 00 00             jle     0x25c <_JIT_ENTRY+0x25c>
// 173: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 178: 4c 8b 34 c1                   movq    (%rcx,%rax,8), %r14
// 17c: 41 8b 06                      movl    (%r14), %eax
// 17f: ff c0                         incl    %eax
// 181: 74 0f                         je      0x192 <_JIT_ENTRY+0x192>
// 183: 41 89 06                      movl    %eax, (%r14)
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 190: ff d0                         callq   *%rax
// 192: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 197: 75 28                         jne     0x1c1 <_JIT_ENTRY+0x1c1>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  PyInterpreterState_Get
// 1a3: ff d0                         callq   *%rax
// 1a5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1ac: 49 ff 4d 00                   decq    (%r13)
// 1b0: 75 0f                         jne     0x1c1 <_JIT_ENTRY+0x1c1>
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  PyObject_Free
// 1bc: 4c 89 ef                      movq    %r13, %rdi
// 1bf: ff d0                         callq   *%rax
// 1c1: 49 8b 04 24                   movq    (%r12), %rax
// 1c5: 48 85 c0                      testq   %rax, %rax
// 1c8: 7f 22                         jg      0x1ec <_JIT_ENTRY+0x1ec>
// 1ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cc:  R_X86_64_64  .rodata.str1.1
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_NegativeRefcount
// 1de: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 1e3: 4c 89 e2                      movq    %r12, %rdx
// 1e6: ff d0                         callq   *%rax
// 1e8: 49 8b 04 24                   movq    (%r12), %rax
// 1ec: 4c 8d 2c eb                   leaq    (%rbx,%rbp,8), %r13
// 1f0: 49 83 c5 f8                   addq    $-0x8, %r13
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 78 21                         js      0x219 <_JIT_ENTRY+0x219>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 202: ff d0                         callq   *%rax
// 204: 49 ff 0c 24                   decq    (%r12)
// 208: 75 0f                         jne     0x219 <_JIT_ENTRY+0x219>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 e7                      movq    %r12, %rdi
// 217: ff d0                         callq   *%rax
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b7 c0                      movzwl  %ax, %eax
// 226: b9 01 00 00 00                movl    $0x1, %ecx
// 22b: 29 c1                         subl    %eax, %ecx
// 22d: 48 63 c1                      movslq  %ecx, %rax
// 230: 4c 89 74 c3 f0                movq    %r14, -0x10(%rbx,%rax,8)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 244: 4c 89 ee                      movq    %r13, %rsi
// 247: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 24c: 48 83 c4 28                   addq    $0x28, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: ff e0                         jmpq    *%rax
// 25c: 48 8d 04 eb                   leaq    (%rbx,%rbp,8), %rax
// 260: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 265: 48 29 c8                      subq    %rcx, %rax
// 268: 48 83 c0 b8                   addq    $-0x48, %rax
// 26c: 48 c1 e8 03                   shrq    $0x3, %rax
// 270: 89 41 40                      movl    %eax, 0x40(%rcx)
// 273: 48 8b 01                      movq    (%rcx), %rax
// 276: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000278:  R_X86_64_64  _JIT_TARGET
// 280: 89 c9                         movl    %ecx, %ecx
// 282: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 286: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28c: eb 16                         jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 28e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 293: 49 29 c4                      subq    %rax, %r12
// 296: 49 83 c4 b8                   addq    $-0x48, %r12
// 29a: 49 c1 ec 03                   shrq    $0x3, %r12
// 29e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2a2: 31 c0                         xorl    %eax, %eax
// 2a4: 48 83 c4 28                   addq    $0x28, %rsp
// 2a8: 5b                            popq    %rbx
// 2a9: 41 5c                         popq    %r12
// 2ab: 41 5d                         popq    %r13
// 2ad: 41 5e                         popq    %r14
// 2af: 41 5f                         popq    %r15
// 2b1: 5d                            popq    %rbp
// 2b2: c3                            retq
// 2b3: 
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT_code_body[692] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x92, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xe8, 0x4c, 0x8b, 0x6c, 0xeb, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x1d, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0xeb, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xf8, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0xc1, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0xeb, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x74, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8d, 0x04, 0xeb, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _BUILD_STRINGplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_SUBSCR_STR_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 8d b9 00 a1 00 00          leaq    0xa100(%rcx), %rdi
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 a1 00 00 00             je      0x19d <_JIT_ENTRY+0x19d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4e 8b 6c f3 f8                movq    -0x8(%rbx,%r14,8), %r13
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyLong_Type
// 135: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 139: 0f 85 e5 00 00 00             jne     0x224 <_JIT_ENTRY+0x224>
// 13f: 4e 8b 64 f3 f0                movq    -0x10(%rbx,%r14,8), %r12
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyUnicode_Type
// 14e: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 153: 0f 85 cb 00 00 00             jne     0x224 <_JIT_ENTRY+0x224>
// 159: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 15e: 0f 87 c0 00 00 00             ja      0x224 <_JIT_ENTRY+0x224>
// 164: 41 8b 45 18                   movl    0x18(%r13), %eax
// 168: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 16d: 0f 8e b1 00 00 00             jle     0x224 <_JIT_ENTRY+0x224>
// 173: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 178: 89 ca                         movl    %ecx, %edx
// 17a: c1 ea 02                      shrl    $0x2, %edx
// 17d: 83 e2 07                      andl    $0x7, %edx
// 180: 83 fa 02                      cmpl    $0x2, %edx
// 183: 74 33                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 185: 83 fa 01                      cmpl    $0x1, %edx
// 188: 75 3e                         jne     0x1c8 <_JIT_ENTRY+0x1c8>
// 18a: f6 c1 20                      testb   $0x20, %cl
// 18d: 75 45                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 18f: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 194: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 198: e9 82 00 00 00                jmp     0x21f <_JIT_ENTRY+0x21f>
// 19d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a2: 49 29 c4                      subq    %rax, %r12
// 1a5: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a9: 49 c1 ec 03                   shrq    $0x3, %r12
// 1ad: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b1: 31 c0                         xorl    %eax, %eax
// 1b3: e9 9c 00 00 00                jmp     0x254 <_JIT_ENTRY+0x254>
// 1b8: f6 c1 20                      testb   $0x20, %cl
// 1bb: 75 31                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 1bd: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 1c2: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 1c6: eb 57                         jmp     0x21f <_JIT_ENTRY+0x21f>
// 1c8: f6 c1 20                      testb   $0x20, %cl
// 1cb: 75 3b                         jne     0x208 <_JIT_ENTRY+0x208>
// 1cd: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 1d2: eb 48                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 1d4: 31 d2                         xorl    %edx, %edx
// 1d6: f6 c1 40                      testb   $0x40, %cl
// 1d9: 0f 94 c2                      sete    %dl
// 1dc: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1e0: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 1e4: 48 83 c1 28                   addq    $0x28, %rcx
// 1e8: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 1ec: eb 31                         jmp     0x21f <_JIT_ENTRY+0x21f>
// 1ee: 31 d2                         xorl    %edx, %edx
// 1f0: f6 c1 40                      testb   $0x40, %cl
// 1f3: 0f 94 c2                      sete    %dl
// 1f6: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1fa: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 1fe: 48 83 c1 28                   addq    $0x28, %rcx
// 202: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 206: eb 17                         jmp     0x21f <_JIT_ENTRY+0x21f>
// 208: 31 d2                         xorl    %edx, %edx
// 20a: f6 c1 40                      testb   $0x40, %cl
// 20d: 0f 94 c2                      sete    %dl
// 210: 48 c1 e2 04                   shlq    $0x4, %rdx
// 214: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 218: 48 83 c1 28                   addq    $0x28, %rcx
// 21c: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// 21f: 83 fd 7f                      cmpl    $0x7f, %ebp
// 222: 76 3f                         jbe     0x263 <_JIT_ENTRY+0x263>
// 224: 4a 8d 04 f3                   leaq    (%rbx,%r14,8), %rax
// 228: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 22d: 48 29 c8                      subq    %rcx, %rax
// 230: 48 83 c0 b8                   addq    $-0x48, %rax
// 234: 48 c1 e8 03                   shrq    $0x3, %rax
// 238: 89 41 40                      movl    %eax, 0x40(%rcx)
// 23b: 48 8b 01                      movq    (%rcx), %rax
// 23e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000240:  R_X86_64_64  _JIT_TARGET
// 248: 89 c9                         movl    %ecx, %ecx
// 24a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 254: 48 83 c4 28                   addq    $0x28, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: c3                            retq
// 263: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 268: 75 28                         jne     0x292 <_JIT_ENTRY+0x292>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  PyInterpreterState_Get
// 274: ff d0                         callq   *%rax
// 276: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27d: 49 ff 4d 00                   decq    (%r13)
// 281: 75 0f                         jne     0x292 <_JIT_ENTRY+0x292>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  PyObject_Free
// 28d: 4c 89 ef                      movq    %r13, %rdi
// 290: ff d0                         callq   *%rax
// 292: 49 8b 04 24                   movq    (%r12), %rax
// 296: 48 85 c0                      testq   %rax, %rax
// 299: 7f 22                         jg      0x2bd <_JIT_ENTRY+0x2bd>
// 29b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029d:  R_X86_64_64  .rodata.str1.1
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_NegativeRefcount
// 2af: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 2b4: 4c 89 e2                      movq    %r12, %rdx
// 2b7: ff d0                         callq   *%rax
// 2b9: 49 8b 04 24                   movq    (%r12), %rax
// 2bd: 4e 8d 2c f3                   leaq    (%rbx,%r14,8), %r13
// 2c1: 49 83 c5 f8                   addq    $-0x8, %r13
// 2c5: 85 c0                         testl   %eax, %eax
// 2c7: 78 21                         js      0x2ea <_JIT_ENTRY+0x2ea>
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d3: ff d0                         callq   *%rax
// 2d5: 49 ff 0c 24                   decq    (%r12)
// 2d9: 75 0f                         jne     0x2ea <_JIT_ENTRY+0x2ea>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: 4c 89 e7                      movq    %r12, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 89 e8                         movl    %ebp, %eax
// 2ec: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 2f0: 48 c1 e0 04                   shlq    $0x4, %rax
// 2f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f6:  R_X86_64_64  _PyRuntime
// 2fe: 48 01 c8                      addq    %rcx, %rax
// 301: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 307: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000309:  R_X86_64_64  _JIT_OPARG
// 311: 0f b7 c9                      movzwl  %cx, %ecx
// 314: ba 01 00 00 00                movl    $0x1, %edx
// 319: 29 ca                         subl    %ecx, %edx
// 31b: 48 63 ca                      movslq  %edx, %rcx
// 31e: 48 89 44 cb f0                movq    %rax, -0x10(%rbx,%rcx,8)
// 323: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000325:  R_X86_64_64  _JIT_CONTINUE
// 32d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 332: 4c 89 ee                      movq    %r13, %rsi
// 335: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 33a: 48 83 c4 28                   addq    $0x28, %rsp
// 33e: 5b                            popq    %rbx
// 33f: 41 5c                         popq    %r12
// 341: 41 5d                         popq    %r13
// 343: 41 5e                         popq    %r14
// 345: 41 5f                         popq    %r15
// 347: 5d                            popq    %rbp
// 348: ff e0                         jmpq    *%rax
// 34a: 
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_STR_INT_code_body[843] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xb9, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4e, 0x8b, 0x6c, 0xf3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xe5, 0x00, 0x00, 0x00, 0x4e, 0x8b, 0x64, 0xf3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xcb, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xb1, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x33, 0x83, 0xfa, 0x01, 0x75, 0x3e, 0xf6, 0xc1, 0x20, 0x75, 0x45, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x3f, 0x4a, 0x8d, 0x04, 0xf3, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x2c, 0xf3, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x89, 0x44, 0xcb, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_STR_INT_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 8e 01 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 e8                      movslq  %eax, %rbp
// 126: 4c 8b 6c eb f8                movq    -0x8(%rbx,%rbp,8), %r13
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyLong_Type
// 135: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 139: 0f 85 19 01 00 00             jne     0x258 <_JIT_ENTRY+0x258>
// 13f: 4c 8b 64 eb f0                movq    -0x10(%rbx,%rbp,8), %r12
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyTuple_Type
// 14e: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 153: 0f 85 ff 00 00 00             jne     0x258 <_JIT_ENTRY+0x258>
// 159: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 15e: 0f 87 f4 00 00 00             ja      0x258 <_JIT_ENTRY+0x258>
// 164: 41 8b 45 18                   movl    0x18(%r13), %eax
// 168: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 16d: 0f 8e e5 00 00 00             jle     0x258 <_JIT_ENTRY+0x258>
// 173: 4d 8b 74 c4 18                movq    0x18(%r12,%rax,8), %r14
// 178: 41 8b 06                      movl    (%r14), %eax
// 17b: ff c0                         incl    %eax
// 17d: 74 0f                         je      0x18e <_JIT_ENTRY+0x18e>
// 17f: 41 89 06                      movl    %eax, (%r14)
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 18c: ff d0                         callq   *%rax
// 18e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 193: 75 28                         jne     0x1bd <_JIT_ENTRY+0x1bd>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  PyInterpreterState_Get
// 19f: ff d0                         callq   *%rax
// 1a1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1a8: 49 ff 4d 00                   decq    (%r13)
// 1ac: 75 0f                         jne     0x1bd <_JIT_ENTRY+0x1bd>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  PyObject_Free
// 1b8: 4c 89 ef                      movq    %r13, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 8b 04 24                   movq    (%r12), %rax
// 1c1: 48 85 c0                      testq   %rax, %rax
// 1c4: 7f 22                         jg      0x1e8 <_JIT_ENTRY+0x1e8>
// 1c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c8:  R_X86_64_64  .rodata.str1.1
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_NegativeRefcount
// 1da: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 1df: 4c 89 e2                      movq    %r12, %rdx
// 1e2: ff d0                         callq   *%rax
// 1e4: 49 8b 04 24                   movq    (%r12), %rax
// 1e8: 4c 8d 2c eb                   leaq    (%rbx,%rbp,8), %r13
// 1ec: 49 83 c5 f8                   addq    $-0x8, %r13
// 1f0: 85 c0                         testl   %eax, %eax
// 1f2: 78 21                         js      0x215 <_JIT_ENTRY+0x215>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 0c 24                   decq    (%r12)
// 204: 75 0f                         jne     0x215 <_JIT_ENTRY+0x215>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_Dealloc
// 210: 4c 89 e7                      movq    %r12, %rdi
// 213: ff d0                         callq   *%rax
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_OPARG
// 21f: 0f b7 c0                      movzwl  %ax, %eax
// 222: b9 01 00 00 00                movl    $0x1, %ecx
// 227: 29 c1                         subl    %eax, %ecx
// 229: 48 63 c1                      movslq  %ecx, %rax
// 22c: 4c 89 74 c3 f0                movq    %r14, -0x10(%rbx,%rax,8)
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 240: 4c 89 ee                      movq    %r13, %rsi
// 243: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 248: 48 83 c4 28                   addq    $0x28, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: ff e0                         jmpq    *%rax
// 258: 48 8d 04 eb                   leaq    (%rbx,%rbp,8), %rax
// 25c: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 261: 48 29 c8                      subq    %rcx, %rax
// 264: 48 83 c0 b8                   addq    $-0x48, %rax
// 268: 48 c1 e8 03                   shrq    $0x3, %rax
// 26c: 89 41 40                      movl    %eax, 0x40(%rcx)
// 26f: 48 8b 01                      movq    (%rcx), %rax
// 272: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000274:  R_X86_64_64  _JIT_TARGET
// 27c: 89 c9                         movl    %ecx, %ecx
// 27e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 282: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 288: eb 16                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 28a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28f: 49 29 c4                      subq    %rax, %r12
// 292: 49 83 c4 b8                   addq    $-0x48, %r12
// 296: 49 c1 ec 03                   shrq    $0x3, %r12
// 29a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 29e: 31 c0                         xorl    %eax, %eax
// 2a0: 48 83 c4 28                   addq    $0x28, %rsp
// 2a4: 5b                            popq    %rbx
// 2a5: 41 5c                         popq    %r12
// 2a7: 41 5d                         popq    %r13
// 2a9: 41 5e                         popq    %r14
// 2ab: 41 5f                         popq    %r15
// 2ad: 5d                            popq    %rbp
// 2ae: c3                            retq
// 2af: 
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT_code_body[688] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x8e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xe8, 0x4c, 0x8b, 0x6c, 0xeb, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0xeb, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xf4, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x74, 0xc4, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x2c, 0xeb, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x74, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8d, 0x04, 0xeb, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _BUILD_STRINGplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BUILD_CONST_KEY_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 67 01 00 00             je      0x263 <_JIT_ENTRY+0x263>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 0f b7 c9                      movzwl  %cx, %ecx
// 10c: 48 c1 e1 03                   shlq    $0x3, %rcx
// 110: 48 f7 d9                      negq    %rcx
// 113: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 118: 48 89 14 0e                   movq    %rdx, (%rsi,%rcx)
// 11c: b9 01 00 00 00                movl    $0x1, %ecx
// 121: 29 c1                         subl    %eax, %ecx
// 123: 48 63 c9                      movslq  %ecx, %rcx
// 126: 4c 8b 6c ce f8                movq    -0x8(%rsi,%rcx,8), %r13
// 12b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012d:  R_X86_64_64  PyTuple_Type
// 135: 49 39 55 08                   cmpq    %rdx, 0x8(%r13)
// 139: 0f 85 f8 00 00 00             jne     0x237 <_JIT_ENTRY+0x237>
// 13f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000141:  R_X86_64_64  _JIT_OPARG
// 149: 0f b7 d2                      movzwl  %dx, %edx
// 14c: 49 39 55 10                   cmpq    %rdx, 0x10(%r13)
// 150: 0f 85 e1 00 00 00             jne     0x237 <_JIT_ENTRY+0x237>
// 156: f7 d0                         notl    %eax
// 158: 48 98                         cltq
// 15a: 48 01 c8                      addq    %rcx, %rax
// 15d: 4c 8d 24 c6                   leaq    (%rsi,%rax,8), %r12
// 161: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 165: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000167:  R_X86_64_64  _JIT_OPARG
// 16f: 44 0f b7 c3                   movzwl  %bx, %r8d
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _PyDict_FromItems
// 17d: be 01 00 00 00                movl    $0x1, %esi
// 182: b9 01 00 00 00                movl    $0x1, %ecx
// 187: 4c 89 e2                      movq    %r12, %rdx
// 18a: ff d0                         callq   *%rax
// 18c: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 191: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 197: 0f 8e eb 00 00 00             jle     0x288 <_JIT_ENTRY+0x288>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: 0f b7 d8                      movzwl  %ax, %ebx
// 1aa: 48 ff c3                      incq    %rbx
// 1ad: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001af:  R_X86_64_64  .rodata.str1.1
// 1b7: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001b9:  R_X86_64_64  _Py_NegativeRefcount
// 1c1: eb 1a                         jmp     0x1dd <_JIT_ENTRY+0x1dd>
// 1c3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 1d0: 48 ff cb                      decq    %rbx
// 1d3: 48 83 fb 01                   cmpq    $0x1, %rbx
// 1d7: 0f 8e ab 00 00 00             jle     0x288 <_JIT_ENTRY+0x288>
// 1dd: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 1e0: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// 1e4: 49 8b 06                      movq    (%r14), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7e 14                         jle     0x200 <_JIT_ENTRY+0x200>
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 78 e0                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1f0: eb 23                         jmp     0x215 <_JIT_ENTRY+0x215>
// 1f2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 200: 48 89 ef                      movq    %rbp, %rdi
// 203: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 208: 4c 89 f2                      movq    %r14, %rdx
// 20b: 41 ff d7                      callq   *%r15
// 20e: 49 8b 06                      movq    (%r14), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 bb                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0e                      decq    (%r14)
// 224: 75 aa                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 4c 89 f7                      movq    %r14, %rdi
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: ff d0                         callq   *%rax
// 235: eb 99                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 237: 4c 8d 24 ce                   leaq    (%rsi,%rcx,8), %r12
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  PyExc_SystemError
// 245: 48 8b 30                      movq    (%rax), %rsi
// 248: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000024a:  R_X86_64_64  .rodata.str1.1+0x39
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _PyErr_SetString
// 25c: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 261: ff d0                         callq   *%rax
// 263: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 268: 49 29 c4                      subq    %rax, %r12
// 26b: 49 83 c4 b8                   addq    $-0x48, %r12
// 26f: 49 c1 ec 03                   shrq    $0x3, %r12
// 273: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 277: 31 c0                         xorl    %eax, %eax
// 279: 48 83 c4 28                   addq    $0x28, %rsp
// 27d: 5b                            popq    %rbx
// 27e: 41 5c                         popq    %r12
// 280: 41 5d                         popq    %r13
// 282: 41 5e                         popq    %r14
// 284: 41 5f                         popq    %r15
// 286: 5d                            popq    %rbp
// 287: c3                            retq
// 288: 49 8b 45 00                   movq    (%r13), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 7f 22                         jg      0x2b3 <_JIT_ENTRY+0x2b3>
// 291: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000293:  R_X86_64_64  .rodata.str1.1
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_NegativeRefcount
// 2a5: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 2aa: 4c 89 ea                      movq    %r13, %rdx
// 2ad: ff d0                         callq   *%rax
// 2af: 49 8b 45 00                   movq    (%r13), %rax
// 2b3: 85 c0                         testl   %eax, %eax
// 2b5: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2ba: 78 21                         js      0x2dd <_JIT_ENTRY+0x2dd>
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 ff 4d 00                   decq    (%r13)
// 2cc: 75 0f                         jne     0x2dd <_JIT_ENTRY+0x2dd>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 48 85 db                      testq   %rbx, %rbx
// 2e0: 74 81                         je      0x263 <_JIT_ENTRY+0x263>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _JIT_OPARG
// 2ec: 0f b7 c8                      movzwl  %ax, %ecx
// 2ef: ba 01 00 00 00                movl    $0x1, %edx
// 2f4: 29 ca                         subl    %ecx, %edx
// 2f6: 48 63 d2                      movslq  %edx, %rdx
// 2f9: f7 d1                         notl    %ecx
// 2fb: 48 63 c9                      movslq  %ecx, %rcx
// 2fe: 48 01 d1                      addq    %rdx, %rcx
// 301: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 306: 48 89 1c ce                   movq    %rbx, (%rsi,%rcx,8)
// 30a: 0f b7 c0                      movzwl  %ax, %eax
// 30d: 48 29 c2                      subq    %rax, %rdx
// 310: 48 8d 34 d6                   leaq    (%rsi,%rdx,8), %rsi
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _JIT_CONTINUE
// 31e: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// 323: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 328: 48 83 c4 28                   addq    $0x28, %rsp
// 32c: 5b                            popq    %rbx
// 32d: 41 5c                         popq    %r12
// 32f: 41 5d                         popq    %r13
// 331: 41 5e                         popq    %r14
// 333: 41 5f                         popq    %r15
// 335: 5d                            popq    %rbp
// 336: ff e0                         jmpq    *%rax
// 338: 
static const unsigned char _BUILD_STRINGplus_BUILD_CONST_KEY_MAP_code_body[825] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x89, 0x14, 0x0e, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4c, 0x8b, 0x6c, 0xce, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x55, 0x08, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x39, 0x55, 0x10, 0x0f, 0x85, 0xe1, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4c, 0x8d, 0x24, 0xc6, 0x49, 0x8d, 0x7d, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x0f, 0x8e, 0xab, 0x00, 0x00, 0x00, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x4c, 0x8d, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x89, 0x1c, 0xce, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc2, 0x48, 0x8d, 0x34, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_BUILD_CONST_KEY_MAP_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _BUILD_STRINGplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _BUILD_STRINGplus_BUILD_LIST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BUILD_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 9c 00 00 00             je      0x198 <_JIT_ENTRY+0x198>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 f0                      movzwl  %ax, %esi
// 10c: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 114: 48 f7 d8                      negq    %rax
// 117: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11c: 48 89 3c 02                   movq    %rdi, (%rdx,%rax)
// 120: bb 01 00 00 00                movl    $0x1, %ebx
// 125: b8 01 00 00 00                movl    $0x1, %eax
// 12a: 29 c8                         subl    %ecx, %eax
// 12c: 48 98                         cltq
// 12e: 48 29 f0                      subq    %rsi, %rax
// 131: 4c 8d 24 c2                   leaq    (%rdx,%rax,8), %r12
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _PyList_FromArraySteal
// 13f: 4c 89 e7                      movq    %r12, %rdi
// 142: ff d0                         callq   *%rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 74 4f                         je      0x198 <_JIT_ENTRY+0x198>
// 149: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014b:  R_X86_64_64  _JIT_OPARG
// 153: 0f b7 d1                      movzwl  %cx, %edx
// 156: 29 d3                         subl    %edx, %ebx
// 158: 48 63 d3                      movslq  %ebx, %rdx
// 15b: 0f b7 c9                      movzwl  %cx, %ecx
// 15e: 48 89 d6                      movq    %rdx, %rsi
// 161: 48 29 ce                      subq    %rcx, %rsi
// 164: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 169: 48 89 04 f1                   movq    %rax, (%rcx,%rsi,8)
// 16d: 48 01 d2                      addq    %rdx, %rdx
// 170: 48 8d 34 d1                   leaq    (%rcx,%rdx,8), %rsi
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_CONTINUE
// 17e: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 183: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 188: 48 83 c4 28                   addq    $0x28, %rsp
// 18c: 5b                            popq    %rbx
// 18d: 41 5c                         popq    %r12
// 18f: 41 5d                         popq    %r13
// 191: 41 5e                         popq    %r14
// 193: 41 5f                         popq    %r15
// 195: 5d                            popq    %rbp
// 196: ff e0                         jmpq    *%rax
// 198: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19d: 49 29 c4                      subq    %rax, %r12
// 1a0: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a4: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a8: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1ac: 31 c0                         xorl    %eax, %eax
// 1ae: 48 83 c4 28                   addq    $0x28, %rsp
// 1b2: 5b                            popq    %rbx
// 1b3: 41 5c                         popq    %r12
// 1b5: 41 5d                         popq    %r13
// 1b7: 41 5e                         popq    %r14
// 1b9: 41 5f                         popq    %r15
// 1bb: 5d                            popq    %rbp
// 1bc: c3                            retq
// 1bd: 
static const unsigned char _BUILD_STRINGplus_BUILD_LIST_code_body[446] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4c, 0x8d, 0x24, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd3, 0x48, 0x63, 0xd3, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xd6, 0x48, 0x29, 0xce, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x04, 0xf1, 0x48, 0x01, 0xd2, 0x48, 0x8d, 0x34, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BUILD_LIST_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BUILD_LIST_data_holes[1];

// _BUILD_STRINGplus_BUILD_MAP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BUILD_MAP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 5f 01 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 d8                      movzwl  %ax, %ebx
// 109: 89 d9                         movl    %ebx, %ecx
// 10b: f7 d9                         negl    %ecx
// 10d: 48 63 c9                      movslq  %ecx, %rcx
// 110: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 115: 48 89 14 ce                   movq    %rdx, (%rsi,%rcx,8)
// 119: ba 01 00 00 00                movl    $0x1, %edx
// 11e: 29 da                         subl    %ebx, %edx
// 120: 48 63 d2                      movslq  %edx, %rdx
// 123: 01 c9                         addl    %ecx, %ecx
// 125: 48 63 c9                      movslq  %ecx, %rcx
// 128: 48 01 d1                      addq    %rdx, %rcx
// 12b: 4c 8d 24 ce                   leaq    (%rsi,%rcx,8), %r12
// 12f: 48 8d 14 ce                   leaq    (%rsi,%rcx,8), %rdx
// 133: 48 83 c2 08                   addq    $0x8, %rdx
// 137: 44 0f b7 c0                   movzwl  %ax, %r8d
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _PyDict_FromItems
// 145: be 02 00 00 00                movl    $0x2, %esi
// 14a: b9 02 00 00 00                movl    $0x2, %ecx
// 14f: 4c 89 e7                      movq    %r12, %rdi
// 152: ff d0                         callq   *%rax
// 154: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 159: 01 db                         addl    %ebx, %ebx
// 15b: 85 db                         testl   %ebx, %ebx
// 15d: 0f 8e 8b 00 00 00             jle     0x1ee <_JIT_ENTRY+0x1ee>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _JIT_OPARG
// 16d: 0f b7 c0                      movzwl  %ax, %eax
// 170: 48 8d 1c 00                   leaq    (%rax,%rax), %rbx
// 174: 48 ff c3                      incq    %rbx
// 177: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000179:  R_X86_64_64  .rodata.str1.1
// 181: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000183:  R_X86_64_64  _Py_NegativeRefcount
// 18b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: eb 12                         jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// 197: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 1a0: 48 ff cb                      decq    %rbx
// 1a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// 1a7: 7e 45                         jle     0x1ee <_JIT_ENTRY+0x1ee>
// 1a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 1ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// 1b0: 49 8b 06                      movq    (%r14), %rax
// 1b3: 48 85 c0                      testq   %rax, %rax
// 1b6: 7e 08                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1b8: 85 c0                         testl   %eax, %eax
// 1ba: 78 e4                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1bc: eb 17                         jmp     0x1d5 <_JIT_ENTRY+0x1d5>
// 1be: 66 90                         nop
// 1c0: 48 89 ef                      movq    %rbp, %rdi
// 1c3: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 1c8: 4c 89 f2                      movq    %r14, %rdx
// 1cb: 41 ff d7                      callq   *%r15
// 1ce: 49 8b 06                      movq    (%r14), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 cb                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 1d5: 41 ff d5                      callq   *%r13
// 1d8: 49 ff 0e                      decq    (%r14)
// 1db: 75 c3                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 1dd: 4c 89 f7                      movq    %r14, %rdi
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_Dealloc
// 1ea: ff d0                         callq   *%rax
// 1ec: eb b2                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 1ee: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1f3: 4d 85 c0                      testq   %r8, %r8
// 1f6: 74 63                         je      0x25b <_JIT_ENTRY+0x25b>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_OPARG
// 202: 0f b7 c0                      movzwl  %ax, %eax
// 205: b9 01 00 00 00                movl    $0x1, %ecx
// 20a: ba 01 00 00 00                movl    $0x1, %edx
// 20f: 29 c2                         subl    %eax, %edx
// 211: 48 63 d2                      movslq  %edx, %rdx
// 214: 89 c6                         movl    %eax, %esi
// 216: f7 de                         negl    %esi
// 218: 01 f6                         addl    %esi, %esi
// 21a: 48 63 f6                      movslq  %esi, %rsi
// 21d: 48 01 d6                      addq    %rdx, %rsi
// 220: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 225: 4c 89 04 f7                   movq    %r8, (%rdi,%rsi,8)
// 229: 01 c0                         addl    %eax, %eax
// 22b: 29 c1                         subl    %eax, %ecx
// 22d: 48 63 c1                      movslq  %ecx, %rax
// 230: 48 01 d0                      addq    %rdx, %rax
// 233: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_CONTINUE
// 241: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 246: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 24b: 48 83 c4 28                   addq    $0x28, %rsp
// 24f: 5b                            popq    %rbx
// 250: 41 5c                         popq    %r12
// 252: 41 5d                         popq    %r13
// 254: 41 5e                         popq    %r14
// 256: 41 5f                         popq    %r15
// 258: 5d                            popq    %rbp
// 259: ff e0                         jmpq    *%rax
// 25b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 260: 49 29 c4                      subq    %rax, %r12
// 263: 49 83 c4 b8                   addq    $-0x48, %r12
// 267: 49 c1 ec 03                   shrq    $0x3, %r12
// 26b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 26f: 31 c0                         xorl    %eax, %eax
// 271: 48 83 c4 28                   addq    $0x28, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: c3                            retq
// 280: 
static const unsigned char _BUILD_STRINGplus_BUILD_MAP_code_body[641] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd9, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x89, 0x14, 0xce, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xda, 0x48, 0x63, 0xd2, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x4c, 0x8d, 0x24, 0xce, 0x48, 0x8d, 0x14, 0xce, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x1c, 0x00, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x4d, 0x85, 0xc0, 0x74, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x89, 0xc6, 0xf7, 0xde, 0x01, 0xf6, 0x48, 0x63, 0xf6, 0x48, 0x01, 0xd6, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x04, 0xf7, 0x01, 0xc0, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd0, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BUILD_MAP_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BUILD_MAP_data_holes[1];

// _BUILD_STRINGplus_BUILD_SET
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BUILD_SET.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f8                   movzwl  %ax, %r15d
// 77: 49 ff c7                      incq    %r15
// 7a: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// b1: 48 8b 03                      movq    (%rbx), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 15                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// bf: 90                            nop
// c0: 4c 89 f7                      movq    %r14, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: ff d5                         callq   *%rbp
// cd: 48 8b 03                      movq    (%rbx), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d5                      callq   *%r13
// d7: 48 ff 0b                      decq    (%rbx)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 48 89 df                      movq    %rbx, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 0f 84 87 01 00 00             je      0x282 <_JIT_ENTRY+0x282>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 44 0f b7 f0                   movzwl  %ax, %r14d
// 10c: 4a 8d 04 f5 00 00 00 00       leaq    (,%r14,8), %rax
// 114: 48 f7 d8                      negq    %rax
// 117: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 11c: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 63 d8                      movslq  %eax, %rbx
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PySet_New
// 135: 31 ff                         xorl    %edi, %edi
// 137: ff d0                         callq   *%rax
// 139: 48 85 c0                      testq   %rax, %rax
// 13c: 0f 84 d9 00 00 00             je      0x21b <_JIT_ENTRY+0x21b>
// 142: 49 89 c5                      movq    %rax, %r13
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_OPARG
// 14f: 66 85 c0                      testw   %ax, %ax
// 152: 0f 84 4f 01 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 158: 4c 29 f3                      subq    %r14, %rbx
// 15b: 0f b7 c0                      movzwl  %ax, %eax
// 15e: 83 f8 02                      cmpl    $0x2, %eax
// 161: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 167: 44 0f 43 f8                   cmovael %eax, %r15d
// 16b: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 173: 49 01 ec                      addq    %rbp, %r12
// 176: 31 ed                         xorl    %ebp, %ebp
// 178: 45 31 f6                      xorl    %r14d, %r14d
// 17b: eb 0f                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 17d: 0f 1f 00                      nopl    (%rax)
// 180: 48 ff c5                      incq    %rbp
// 183: 49 39 ef                      cmpq    %rbp, %r15
// 186: 0f 84 9c 00 00 00             je      0x228 <_JIT_ENTRY+0x228>
// 18c: 49 8b 1c ec                   movq    (%r12,%rbp,8), %rbx
// 190: 45 85 f6                      testl   %r14d, %r14d
// 193: 74 1b                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 195: 48 8b 03                      movq    (%rbx), %rax
// 198: 48 85 c0                      testq   %rax, %rax
// 19b: 7e 30                         jle     0x1cd <_JIT_ENTRY+0x1cd>
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 78 df                         js      0x180 <_JIT_ENTRY+0x180>
// 1a1: eb 4f                         jmp     0x1f2 <_JIT_ENTRY+0x1f2>
// 1a3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 1b0: 4c 89 ef                      movq    %r13, %rdi
// 1b3: 48 89 de                      movq    %rbx, %rsi
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PySet_Add
// 1c0: ff d0                         callq   *%rax
// 1c2: 41 89 c6                      movl    %eax, %r14d
// 1c5: 48 8b 03                      movq    (%rbx), %rax
// 1c8: 48 85 c0                      testq   %rax, %rax
// 1cb: 7f d0                         jg      0x19d <_JIT_ENTRY+0x19d>
// 1cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cf:  R_X86_64_64  .rodata.str1.1
// 1d7: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 1dc: 48 89 da                      movq    %rbx, %rdx
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_NegativeRefcount
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 8b 03                      movq    (%rbx), %rax
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 8e                         js      0x180 <_JIT_ENTRY+0x180>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fc: ff d0                         callq   *%rax
// 1fe: 48 ff 0b                      decq    (%rbx)
// 201: 0f 85 79 ff ff ff             jne     0x180 <_JIT_ENTRY+0x180>
// 207: 48 89 df                      movq    %rbx, %rdi
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: ff d0                         callq   *%rax
// 216: e9 65 ff ff ff                jmp     0x180 <_JIT_ENTRY+0x180>
// 21b: 4c 8d 24 dd 00 00 00 00       leaq    (,%rbx,8), %r12
// 223: 49 01 ec                      addq    %rbp, %r12
// 226: eb 5a                         jmp     0x282 <_JIT_ENTRY+0x282>
// 228: 45 85 f6                      testl   %r14d, %r14d
// 22b: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 230: 74 75                         je      0x2a7 <_JIT_ENTRY+0x2a7>
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 24a: 4c 89 ea                      movq    %r13, %rdx
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: ff d0                         callq   *%rax
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 49 ff 4d 00                   decq    (%r13)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 4c 89 ef                      movq    %r13, %rdi
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_Dealloc
// 280: ff d0                         callq   *%rax
// 282: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 287: 49 29 c4                      subq    %rax, %r12
// 28a: 49 83 c4 b8                   addq    $-0x48, %r12
// 28e: 49 c1 ec 03                   shrq    $0x3, %r12
// 292: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 296: 31 c0                         xorl    %eax, %eax
// 298: 48 83 c4 28                   addq    $0x28, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: c3                            retq
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_OPARG
// 2b1: 0f b7 c8                      movzwl  %ax, %ecx
// 2b4: ba 01 00 00 00                movl    $0x1, %edx
// 2b9: 29 ca                         subl    %ecx, %edx
// 2bb: 48 63 ca                      movslq  %edx, %rcx
// 2be: 0f b7 c0                      movzwl  %ax, %eax
// 2c1: 48 89 ca                      movq    %rcx, %rdx
// 2c4: 48 29 c2                      subq    %rax, %rdx
// 2c7: 4c 89 6c d5 00                movq    %r13, (%rbp,%rdx,8)
// 2cc: 48 01 c9                      addq    %rcx, %rcx
// 2cf: 48 8d 34 cd 00 00 00 00       leaq    (,%rcx,8), %rsi
// 2d7: 48 01 ee                      addq    %rbp, %rsi
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _JIT_CONTINUE
// 2e4: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2e9: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 2ee: 48 83 c4 28                   addq    $0x28, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: ff e0                         jmpq    *%rax
// 2fe: 
static const unsigned char _BUILD_STRINGplus_BUILD_SET_code_body[767] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x4c, 0x89, 0xf7, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x87, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x44, 0x0f, 0xb7, 0xf0, 0x4a, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf8, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0x31, 0xed, 0x45, 0x31, 0xf6, 0xeb, 0x0f, 0x0f, 0x1f, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x1c, 0xec, 0x45, 0x85, 0xf6, 0x74, 0x1b, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x4c, 0x8d, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xec, 0xeb, 0x5a, 0x45, 0x85, 0xf6, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x75, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xca, 0x48, 0x29, 0xc2, 0x4c, 0x89, 0x6c, 0xd5, 0x00, 0x48, 0x01, 0xc9, 0x48, 0x8d, 0x34, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_BUILD_SET_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BUILD_SET_data_holes[1];

// _BUILD_STRINGplus_BUILD_SLICE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BUILD_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 0f 84 e2 01 00 00             je      0x2de <_JIT_ENTRY+0x2de>
// fc: 49 89 04 24                   movq    %rax, (%r12)
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 66 83 f8 03                   cmpw    $0x3, %ax
// 10e: 75 24                         jne     0x134 <_JIT_ENTRY+0x134>
// 110: 0f b7 c8                      movzwl  %ax, %ecx
// 113: ba 01 00 00 00                movl    $0x1, %edx
// 118: 29 ca                         subl    %ecx, %edx
// 11a: 48 63 ca                      movslq  %edx, %rcx
// 11d: 31 d2                         xorl    %edx, %edx
// 11f: 66 83 f8 03                   cmpw    $0x3, %ax
// 123: 0f 94 c2                      sete    %dl
// 126: 48 29 d1                      subq    %rdx, %rcx
// 129: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 12e: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// 132: eb 08                         jmp     0x13c <_JIT_ENTRY+0x13c>
// 134: 45 31 e4                      xorl    %r12d, %r12d
// 137: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 13c: 0f b7 c8                      movzwl  %ax, %ecx
// 13f: ba 01 00 00 00                movl    $0x1, %edx
// 144: 29 ca                         subl    %ecx, %edx
// 146: 48 63 ca                      movslq  %edx, %rcx
// 149: 31 d2                         xorl    %edx, %edx
// 14b: 66 83 f8 03                   cmpw    $0x3, %ax
// 14f: 0f 94 c2                      sete    %dl
// 152: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 157: 29 d0                         subl    %edx, %eax
// 159: f7 d2                         notl    %edx
// 15b: 48 63 da                      movslq  %edx, %rbx
// 15e: 48 01 cb                      addq    %rcx, %rbx
// 161: 49 8b 2c df                   movq    (%r15,%rbx,8), %rbp
// 165: 4c 63 e8                      movslq  %eax, %r13
// 168: 49 01 cd                      addq    %rcx, %r13
// 16b: 4f 8b 34 ef                   movq    (%r15,%r13,8), %r14
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  PySlice_New
// 179: 4c 89 f7                      movq    %r14, %rdi
// 17c: 48 89 ee                      movq    %rbp, %rsi
// 17f: 4c 89 e2                      movq    %r12, %rdx
// 182: ff d0                         callq   *%rax
// 184: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 189: 49 8b 06                      movq    (%r14), %rax
// 18c: 48 85 c0                      testq   %rax, %rax
// 18f: 7e 06                         jle     0x197 <_JIT_ENTRY+0x197>
// 191: 85 c0                         testl   %eax, %eax
// 193: 79 27                         jns     0x1bc <_JIT_ENTRY+0x1bc>
// 195: eb 36                         jmp     0x1cd <_JIT_ENTRY+0x1cd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 1b0: 4c 89 f2                      movq    %r14, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 8b 06                      movq    (%r14), %rax
// 1b8: 85 c0                         testl   %eax, %eax
// 1ba: 78 11                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 ff 0e                      decq    (%r14)
// 1cb: 74 0f                         je      0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 48 8b 45 00                   movq    (%rbp), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7e 1e                         jle     0x1f4 <_JIT_ENTRY+0x1f4>
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 79 40                         jns     0x21a <_JIT_ENTRY+0x21a>
// 1da: eb 5f                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 f7                      movq    %r14, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 8b 45 00                   movq    (%rbp), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7f e2                         jg      0x1d6 <_JIT_ENTRY+0x1d6>
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  .rodata.str1.1
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_NegativeRefcount
// 208: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 20d: 48 89 ea                      movq    %rbp, %rdx
// 210: ff d0                         callq   *%rax
// 212: 48 8b 45 00                   movq    (%rbp), %rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 78 21                         js      0x23b <_JIT_ENTRY+0x23b>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 224: ff d0                         callq   *%rax
// 226: 48 ff 4d 00                   decq    (%rbp)
// 22a: 75 0f                         jne     0x23b <_JIT_ENTRY+0x23b>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_Dealloc
// 236: 48 89 ef                      movq    %rbp, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 4d 85 e4                      testq   %r12, %r12
// 23e: 74 47                         je      0x287 <_JIT_ENTRY+0x287>
// 240: 49 8b 04 24                   movq    (%r12), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 06                         jle     0x24f <_JIT_ENTRY+0x24f>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 79 28                         jns     0x275 <_JIT_ENTRY+0x275>
// 24d: eb 38                         jmp     0x287 <_JIT_ENTRY+0x287>
// 24f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1+0x39
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_NegativeRefcount
// 263: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 268: 4c 89 e2                      movq    %r12, %rdx
// 26b: ff d0                         callq   *%rax
// 26d: 49 8b 04 24                   movq    (%r12), %rax
// 271: 85 c0                         testl   %eax, %eax
// 273: 78 12                         js      0x287 <_JIT_ENTRY+0x287>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27f: ff d0                         callq   *%rax
// 281: 49 ff 0c 24                   decq    (%r12)
// 285: 74 3a                         je      0x2c1 <_JIT_ENTRY+0x2c1>
// 287: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 28b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 290: 48 85 c0                      testq   %rax, %rax
// 293: 74 49                         je      0x2de <_JIT_ENTRY+0x2de>
// 295: 49 8d 34 df                   leaq    (%r15,%rbx,8), %rsi
// 299: 49 89 04 24                   movq    %rax, (%r12)
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _JIT_CONTINUE
// 2a7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ac: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 2b1: 48 83 c4 28                   addq    $0x28, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: ff e0                         jmpq    *%rax
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 4c 89 e7                      movq    %r12, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 4f 8d 24 ef                   leaq    (%r15,%r13,8), %r12
// 2d4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2d9: 48 85 c0                      testq   %rax, %rax
// 2dc: 75 b7                         jne     0x295 <_JIT_ENTRY+0x295>
// 2de: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2e3: 49 29 c4                      subq    %rax, %r12
// 2e6: 49 83 c4 b8                   addq    $-0x48, %r12
// 2ea: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ee: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2f2: 31 c0                         xorl    %eax, %eax
// 2f4: 48 83 c4 28                   addq    $0x28, %rsp
// 2f8: 5b                            popq    %rbx
// 2f9: 41 5c                         popq    %r12
// 2fb: 41 5d                         popq    %r13
// 2fd: 41 5e                         popq    %r14
// 2ff: 41 5f                         popq    %r15
// 301: 5d                            popq    %rbp
// 302: c3                            retq
// 303: 
static const unsigned char _BUILD_STRINGplus_BUILD_SLICE_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe2, 0x01, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x24, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0x48, 0x29, 0xd1, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4d, 0x8b, 0x24, 0xcf, 0xeb, 0x08, 0x45, 0x31, 0xe4, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x31, 0xd2, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc2, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd0, 0xf7, 0xd2, 0x48, 0x63, 0xda, 0x48, 0x01, 0xcb, 0x49, 0x8b, 0x2c, 0xdf, 0x4c, 0x63, 0xe8, 0x49, 0x01, 0xcd, 0x4f, 0x8b, 0x34, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x47, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3a, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x49, 0x49, 0x8d, 0x34, 0xdf, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xef, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x75, 0xb7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BUILD_SLICE_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BUILD_SLICE_data_holes[1];

// _BUILD_STRINGplus_BUILD_STRING
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BUILD_STRING.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 58: 4c 89 e6                      movq    %r12, %rsi
// 5b: ff d0                         callq   *%rax
// 5d: 48 89 04 24                   movq    %rax, (%rsp)
// 61: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 67: 0f 8e 80 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7b: 49 ff c7                      incq    %r15
// 7e: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000094:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9c: eb 0b                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9e: 66 90                         nop
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// b1: 48 8b 03                      movq    (%rbx), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 15                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// bf: 90                            nop
// c0: 4c 89 f7                      movq    %r14, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: ff d5                         callq   *%rbp
// cd: 48 8b 03                      movq    (%rbx), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d5                      callq   *%r13
// d7: 48 ff 0b                      decq    (%rbx)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 48 89 df                      movq    %rbx, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 34 24                   movq    (%rsp), %rsi
// f1: 48 85 f6                      testq   %rsi, %rsi
// f4: 0f 84 30 01 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _JIT_OPARG
// 104: 0f b7 d8                      movzwl  %ax, %ebx
// 107: 0f b7 d0                      movzwl  %ax, %edx
// 10a: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 112: 48 f7 d8                      negq    %rax
// 115: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 11a: 48 89 34 01                   movq    %rsi, (%rcx,%rax)
// 11e: b8 01 00 00 00                movl    $0x1, %eax
// 123: 29 d8                         subl    %ebx, %eax
// 125: 48 98                         cltq
// 127: 48 29 d0                      subq    %rdx, %rax
// 12a: 4c 8d 24 c1                   leaq    (%rcx,%rax,8), %r12
// 12e: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// 133: 4c 89 e6                      movq    %r12, %rsi
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _PyUnicode_JoinArray
// 140: ff d0                         callq   *%rax
// 142: 48 89 04 24                   movq    %rax, (%rsp)
// 146: 85 db                         testl   %ebx, %ebx
// 148: 0f 8e 7f 00 00 00             jle     0x1cd <_JIT_ENTRY+0x1cd>
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _JIT_OPARG
// 158: 44 0f b7 f8                   movzwl  %ax, %r15d
// 15c: 49 ff c7                      incq    %r15
// 15f: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000161:  R_X86_64_64  .rodata.str1.1
// 169: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000016b:  R_X86_64_64  _Py_NegativeRefcount
// 173: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000175:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17d: eb 0a                         jmp     0x189 <_JIT_ENTRY+0x189>
// 17f: 90                            nop
// 180: 49 ff cf                      decq    %r15
// 183: 49 83 ff 01                   cmpq    $0x1, %r15
// 187: 7e 44                         jle     0x1cd <_JIT_ENTRY+0x1cd>
// 189: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 18d: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// 191: 48 8b 03                      movq    (%rbx), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7e 07                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 199: 85 c0                         testl   %eax, %eax
// 19b: 78 e3                         js      0x180 <_JIT_ENTRY+0x180>
// 19d: eb 15                         jmp     0x1b4 <_JIT_ENTRY+0x1b4>
// 19f: 90                            nop
// 1a0: 4c 89 f7                      movq    %r14, %rdi
// 1a3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 1a8: 48 89 da                      movq    %rbx, %rdx
// 1ab: ff d5                         callq   *%rbp
// 1ad: 48 8b 03                      movq    (%rbx), %rax
// 1b0: 85 c0                         testl   %eax, %eax
// 1b2: 78 cc                         js      0x180 <_JIT_ENTRY+0x180>
// 1b4: 41 ff d5                      callq   *%r13
// 1b7: 48 ff 0b                      decq    (%rbx)
// 1ba: 75 c4                         jne     0x180 <_JIT_ENTRY+0x180>
// 1bc: 48 89 df                      movq    %rbx, %rdi
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_Dealloc
// 1c9: ff d0                         callq   *%rax
// 1cb: eb b3                         jmp     0x180 <_JIT_ENTRY+0x180>
// 1cd: 48 8b 34 24                   movq    (%rsp), %rsi
// 1d1: 48 85 f6                      testq   %rsi, %rsi
// 1d4: 74 54                         je      0x22a <_JIT_ENTRY+0x22a>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_OPARG
// 1e0: 0f b7 c8                      movzwl  %ax, %ecx
// 1e3: ba 01 00 00 00                movl    $0x1, %edx
// 1e8: 29 ca                         subl    %ecx, %edx
// 1ea: 48 63 ca                      movslq  %edx, %rcx
// 1ed: 0f b7 c0                      movzwl  %ax, %eax
// 1f0: 48 89 ca                      movq    %rcx, %rdx
// 1f3: 48 29 c2                      subq    %rax, %rdx
// 1f6: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1fb: 48 89 34 d0                   movq    %rsi, (%rax,%rdx,8)
// 1ff: 48 01 c9                      addq    %rcx, %rcx
// 202: 48 8d 34 c8                   leaq    (%rax,%rcx,8), %rsi
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _JIT_CONTINUE
// 210: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 215: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 21a: 48 83 c4 28                   addq    $0x28, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 22f: 49 29 c4                      subq    %rax, %r12
// 232: 49 83 c4 b8                   addq    $-0x48, %r12
// 236: 49 c1 ec 03                   shrq    $0x3, %r12
// 23a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 23e: 31 c0                         xorl    %eax, %eax
// 240: 48 83 c4 28                   addq    $0x28, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: c3                            retq
// 24f: 
static const unsigned char _BUILD_STRINGplus_BUILD_STRING_code_body[592] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0b, 0x66, 0x90, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x4c, 0x89, 0xf7, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x0f, 0xb7, 0xd0, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x34, 0x01, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd8, 0x48, 0x98, 0x48, 0x29, 0xd0, 0x4c, 0x8d, 0x24, 0xc1, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x85, 0xdb, 0x0f, 0x8e, 0x7f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0a, 0x90, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x4c, 0x89, 0xf7, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x85, 0xf6, 0x74, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xca, 0x48, 0x29, 0xc2, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x34, 0xd0, 0x48, 0x01, 0xc9, 0x48, 0x8d, 0x34, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BUILD_STRING_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BUILD_STRING_data_holes[1];

// _BUILD_STRINGplus_BUILD_TUPLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_BUILD_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 9c 00 00 00             je      0x198 <_JIT_ENTRY+0x198>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 f0                      movzwl  %ax, %esi
// 10c: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 114: 48 f7 d8                      negq    %rax
// 117: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11c: 48 89 3c 02                   movq    %rdi, (%rdx,%rax)
// 120: bb 01 00 00 00                movl    $0x1, %ebx
// 125: b8 01 00 00 00                movl    $0x1, %eax
// 12a: 29 c8                         subl    %ecx, %eax
// 12c: 48 98                         cltq
// 12e: 48 29 f0                      subq    %rsi, %rax
// 131: 4c 8d 24 c2                   leaq    (%rdx,%rax,8), %r12
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _PyTuple_FromArraySteal
// 13f: 4c 89 e7                      movq    %r12, %rdi
// 142: ff d0                         callq   *%rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 74 4f                         je      0x198 <_JIT_ENTRY+0x198>
// 149: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014b:  R_X86_64_64  _JIT_OPARG
// 153: 0f b7 d1                      movzwl  %cx, %edx
// 156: 29 d3                         subl    %edx, %ebx
// 158: 48 63 d3                      movslq  %ebx, %rdx
// 15b: 0f b7 c9                      movzwl  %cx, %ecx
// 15e: 48 89 d6                      movq    %rdx, %rsi
// 161: 48 29 ce                      subq    %rcx, %rsi
// 164: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 169: 48 89 04 f1                   movq    %rax, (%rcx,%rsi,8)
// 16d: 48 01 d2                      addq    %rdx, %rdx
// 170: 48 8d 34 d1                   leaq    (%rcx,%rdx,8), %rsi
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_CONTINUE
// 17e: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 183: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 188: 48 83 c4 28                   addq    $0x28, %rsp
// 18c: 5b                            popq    %rbx
// 18d: 41 5c                         popq    %r12
// 18f: 41 5d                         popq    %r13
// 191: 41 5e                         popq    %r14
// 193: 41 5f                         popq    %r15
// 195: 5d                            popq    %rbp
// 196: ff e0                         jmpq    *%rax
// 198: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 19d: 49 29 c4                      subq    %rax, %r12
// 1a0: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a4: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a8: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1ac: 31 c0                         xorl    %eax, %eax
// 1ae: 48 83 c4 28                   addq    $0x28, %rsp
// 1b2: 5b                            popq    %rbx
// 1b3: 41 5c                         popq    %r12
// 1b5: 41 5d                         popq    %r13
// 1b7: 41 5e                         popq    %r14
// 1b9: 41 5f                         popq    %r15
// 1bb: 5d                            popq    %rbp
// 1bc: c3                            retq
// 1bd: 
static const unsigned char _BUILD_STRINGplus_BUILD_TUPLE_code_body[446] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x29, 0xf0, 0x4c, 0x8d, 0x24, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x4f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd3, 0x48, 0x63, 0xd3, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xd6, 0x48, 0x29, 0xce, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x04, 0xf1, 0x48, 0x01, 0xd2, 0x48, 0x8d, 0x34, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_BUILD_TUPLE_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_BUILD_TUPLE_data_holes[1];

// _BUILD_STRINGplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_BUILTIN_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 68 01 00 00             je      0x264 <_JIT_ENTRY+0x264>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 48 89 c2                      movq    %rax, %rdx
// 10c: 48 f7 da                      negq    %rdx
// 10f: 0f b7 f1                      movzwl  %cx, %esi
// 112: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 11a: 48 f7 d9                      negq    %rcx
// 11d: 4c 8b 54 24 10                movq    0x10(%rsp), %r10
// 122: 49 89 3c 0a                   movq    %rdi, (%r10,%rcx)
// 126: b9 01 00 00 00                movl    $0x1, %ecx
// 12b: 29 f1                         subl    %esi, %ecx
// 12d: 4c 63 c1                      movslq  %ecx, %r8
// 130: 4b 8d 0c c2                   leaq    (%r10,%r8,8), %rcx
// 134: 89 f7                         movl    %esi, %edi
// 136: f7 d7                         notl    %edi
// 138: 4c 63 df                      movslq  %edi, %r11
// 13b: 4d 01 c3                      addq    %r8, %r11
// 13e: 4b 8b 3c da                   movq    (%r10,%r11,8), %rdi
// 142: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 148: 41 29 f1                      subl    %esi, %r9d
// 14b: 49 63 d9                      movslq  %r9d, %rbx
// 14e: 4c 01 c3                      addq    %r8, %rbx
// 151: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 155: 48 85 ff                      testq   %rdi, %rdi
// 158: 48 f7 d0                      notq    %rax
// 15b: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 15f: 44 0f 44 f6                   cmovel  %esi, %r14d
// 163: 4d 8b 24 da                   movq    (%r10,%rbx,8), %r12
// 167: 49 8b 54 24 08                movq    0x8(%r12), %rdx
// 16c: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 173: 0f 84 02 01 00 00             je      0x27b <_JIT_ENTRY+0x27b>
// 179: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 181: 4d 85 c0                      testq   %r8, %r8
// 184: 0f 84 f1 00 00 00             je      0x27b <_JIT_ENTRY+0x27b>
// 18a: 4c 89 5c 24 08                movq    %r11, 0x8(%rsp)
// 18f: 48 8d 2c c1                   leaq    (%rcx,%rax,8), %rbp
// 193: 48 85 ff                      testq   %rdi, %rdi
// 196: 41 0f 94 c7                   sete    %r15b
// 19a: 44 89 f2                      movl    %r14d, %edx
// 19d: 4c 89 e7                      movq    %r12, %rdi
// 1a0: 48 89 ee                      movq    %rbp, %rsi
// 1a3: 31 c9                         xorl    %ecx, %ecx
// 1a5: 41 ff d0                      callq   *%r8
// 1a8: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _JIT_OPARG
// 1b7: 66 85 c0                      testw   %ax, %ax
// 1ba: 0f 94 c0                      sete    %al
// 1bd: 41 84 c7                      testb   %al, %r15b
// 1c0: 0f 84 ef 00 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// 1c6: 49 8b 04 24                   movq    (%r12), %rax
// 1ca: 48 85 c0                      testq   %rax, %rax
// 1cd: 7f 22                         jg      0x1f1 <_JIT_ENTRY+0x1f1>
// 1cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d1:  R_X86_64_64  .rodata.str1.1
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_NegativeRefcount
// 1e3: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 1e8: 4c 89 e2                      movq    %r12, %rdx
// 1eb: ff d0                         callq   *%rax
// 1ed: 49 8b 04 24                   movq    (%r12), %rax
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1f8: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1fd: 78 21                         js      0x220 <_JIT_ENTRY+0x220>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 49 ff 0c 24                   decq    (%r12)
// 20f: 75 0f                         jne     0x220 <_JIT_ENTRY+0x220>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: 4c 89 e7                      movq    %r12, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 224: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 74 36                         je      0x264 <_JIT_ENTRY+0x264>
// 22e: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 232: 49 89 04 24                   movq    %rax, (%r12)
// 236: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 23b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 23f: 48 8b 00                      movq    (%rax), %rax
// 242: 84 c0                         testb   %al, %al
// 244: 0f 84 ed 00 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_HandlePending
// 254: 48 89 df                      movq    %rbx, %rdi
// 257: ff d0                         callq   *%rax
// 259: 85 c0                         testl   %eax, %eax
// 25b: 0f 84 d6 00 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 261: 4d 89 f4                      movq    %r14, %r12
// 264: 48 8b 04 24                   movq    (%rsp), %rax
// 268: 49 29 c4                      subq    %rax, %r12
// 26b: 49 83 c4 b8                   addq    $-0x48, %r12
// 26f: 49 c1 ec 03                   shrq    $0x3, %r12
// 273: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 277: 31 c0                         xorl    %eax, %eax
// 279: eb 2b                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 27b: 48 8b 04 24                   movq    (%rsp), %rax
// 27f: 48 29 c1                      subq    %rax, %rcx
// 282: 48 83 c1 b8                   addq    $-0x48, %rcx
// 286: 48 c1 e9 03                   shrq    $0x3, %rcx
// 28a: 89 48 40                      movl    %ecx, 0x40(%rax)
// 28d: 48 8b 00                      movq    (%rax), %rax
// 290: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000292:  R_X86_64_64  _JIT_TARGET
// 29a: 89 c9                         movl    %ecx, %ecx
// 29c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a6: 48 83 c4 28                   addq    $0x28, %rsp
// 2aa: 5b                            popq    %rbx
// 2ab: 41 5c                         popq    %r12
// 2ad: 41 5d                         popq    %r13
// 2af: 41 5e                         popq    %r14
// 2b1: 41 5f                         popq    %r15
// 2b3: 5d                            popq    %rbp
// 2b4: c3                            retq
// 2b5: 41 83 fe 02                   cmpl    $0x2, %r14d
// 2b9: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 2bf: 45 0f 43 ee                   cmovael %r14d, %r13d
// 2c3: 45 31 ff                      xorl    %r15d, %r15d
// 2c6: eb 14                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 2c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 2d0: 49 ff c7                      incq    %r15
// 2d3: 4d 39 fd                      cmpq    %r15, %r13
// 2d6: 0f 84 ea fe ff ff             je      0x1c6 <_JIT_ENTRY+0x1c6>
// 2dc: 4e 8b 74 fd 00                movq    (%rbp,%r15,8), %r14
// 2e1: 49 8b 06                      movq    (%r14), %rax
// 2e4: 48 85 c0                      testq   %rax, %rax
// 2e7: 7e 07                         jle     0x2f0 <_JIT_ENTRY+0x2f0>
// 2e9: 85 c0                         testl   %eax, %eax
// 2eb: 78 e3                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 2ed: eb 26                         jmp     0x315 <_JIT_ENTRY+0x315>
// 2ef: 90                            nop
// 2f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1
// 2fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2ff: 4c 89 f2                      movq    %r14, %rdx
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_NegativeRefcount
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 06                      movq    (%r14), %rax
// 311: 85 c0                         testl   %eax, %eax
// 313: 78 bb                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31f: ff d0                         callq   *%rax
// 321: 49 ff 0e                      decq    (%r14)
// 324: 75 aa                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 326: 4c 89 f7                      movq    %r14, %rdi
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_Dealloc
// 333: ff d0                         callq   *%rax
// 335: eb 99                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _JIT_CONTINUE
// 341: 48 8b 3c 24                   movq    (%rsp), %rdi
// 345: 4c 89 f6                      movq    %r14, %rsi
// 348: 48 89 da                      movq    %rbx, %rdx
// 34b: 48 83 c4 28                   addq    $0x28, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_CLASS_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x68, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xf1, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x54, 0x24, 0x10, 0x49, 0x89, 0x3c, 0x0a, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf1, 0x4c, 0x63, 0xc1, 0x4b, 0x8d, 0x0c, 0xc2, 0x89, 0xf7, 0xf7, 0xd7, 0x4c, 0x63, 0xdf, 0x4d, 0x01, 0xc3, 0x4b, 0x8b, 0x3c, 0xda, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf1, 0x49, 0x63, 0xd9, 0x4c, 0x01, 0xc3, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x44, 0x0f, 0x44, 0xf6, 0x4d, 0x8b, 0x24, 0xda, 0x49, 0x8b, 0x54, 0x24, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x8d, 0x2c, 0xc1, 0x48, 0x85, 0xff, 0x41, 0x0f, 0x94, 0xc7, 0x44, 0x89, 0xf2, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x48, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x45, 0x31, 0xff, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfd, 0x0f, 0x84, 0xea, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xfd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_CLASS_code_holes[22] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_CLASS_data_holes[1];

// _BUILD_STRINGplus_CALL_BUILTIN_FAST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_BUILTIN_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 68 01 00 00             je      0x264 <_JIT_ENTRY+0x264>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 48 89 c2                      movq    %rax, %rdx
// 10c: 48 f7 da                      negq    %rdx
// 10f: 0f b7 f1                      movzwl  %cx, %esi
// 112: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 11a: 48 f7 d9                      negq    %rcx
// 11d: 4c 8b 54 24 10                movq    0x10(%rsp), %r10
// 122: 49 89 3c 0a                   movq    %rdi, (%r10,%rcx)
// 126: b9 01 00 00 00                movl    $0x1, %ecx
// 12b: 29 f1                         subl    %esi, %ecx
// 12d: 4c 63 c1                      movslq  %ecx, %r8
// 130: 4b 8d 0c c2                   leaq    (%r10,%r8,8), %rcx
// 134: 89 f7                         movl    %esi, %edi
// 136: f7 d7                         notl    %edi
// 138: 4c 63 ef                      movslq  %edi, %r13
// 13b: 4d 01 c5                      addq    %r8, %r13
// 13e: 4b 8b 3c ea                   movq    (%r10,%r13,8), %rdi
// 142: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 148: 41 29 f1                      subl    %esi, %r9d
// 14b: 49 63 d9                      movslq  %r9d, %rbx
// 14e: 4c 01 c3                      addq    %r8, %rbx
// 151: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 155: 48 85 ff                      testq   %rdi, %rdi
// 158: 48 f7 d0                      notq    %rax
// 15b: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 15f: 44 0f 44 f6                   cmovel  %esi, %r14d
// 163: 49 8b 34 da                   movq    (%r10,%rbx,8), %rsi
// 167: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000169:  R_X86_64_64  PyCFunction_Type
// 171: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 175: 0f 85 00 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 17b: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 17f: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 187: 0f 85 ee 00 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 18d: 48 8d 2c c1                   leaq    (%rcx,%rax,8), %rbp
// 191: 48 85 ff                      testq   %rdi, %rdi
// 194: 41 0f 94 c7                   sete    %r15b
// 198: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 19d: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 1a1: 44 89 f2                      movl    %r14d, %edx
// 1a4: 48 89 ee                      movq    %rbp, %rsi
// 1a7: 41 ff 50 08                   callq   *0x8(%r8)
// 1ab: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 66 85 c0                      testw   %ax, %ax
// 1bd: 0f 94 c0                      sete    %al
// 1c0: 41 84 c7                      testb   %al, %r15b
// 1c3: 0f 84 ec 00 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// 1c9: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1ce: 49 8b 07                      movq    (%r15), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 21                         jg      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 1ef: 4c 89 fa                      movq    %r15, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 07                      movq    (%r15), %rax
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1fe: 78 20                         js      0x220 <_JIT_ENTRY+0x220>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20a: ff d0                         callq   *%rax
// 20c: 49 ff 0f                      decq    (%r15)
// 20f: 75 0f                         jne     0x220 <_JIT_ENTRY+0x220>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: 4c 89 ff                      movq    %r15, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 224: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 74 36                         je      0x264 <_JIT_ENTRY+0x264>
// 22e: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 232: 49 89 04 24                   movq    %rax, (%r12)
// 236: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 23b: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 23f: 48 8b 00                      movq    (%rax), %rax
// 242: 84 c0                         testb   %al, %al
// 244: 0f 84 ed 00 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_HandlePending
// 254: 48 89 df                      movq    %rbx, %rdi
// 257: ff d0                         callq   *%rax
// 259: 85 c0                         testl   %eax, %eax
// 25b: 0f 84 d6 00 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 261: 4d 89 f4                      movq    %r14, %r12
// 264: 48 8b 04 24                   movq    (%rsp), %rax
// 268: 49 29 c4                      subq    %rax, %r12
// 26b: 49 83 c4 b8                   addq    $-0x48, %r12
// 26f: 49 c1 ec 03                   shrq    $0x3, %r12
// 273: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 277: 31 c0                         xorl    %eax, %eax
// 279: eb 2b                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 27b: 48 8b 04 24                   movq    (%rsp), %rax
// 27f: 48 29 c1                      subq    %rax, %rcx
// 282: 48 83 c1 b8                   addq    $-0x48, %rcx
// 286: 48 c1 e9 03                   shrq    $0x3, %rcx
// 28a: 89 48 40                      movl    %ecx, 0x40(%rax)
// 28d: 48 8b 00                      movq    (%rax), %rax
// 290: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000292:  R_X86_64_64  _JIT_TARGET
// 29a: 89 c9                         movl    %ecx, %ecx
// 29c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a6: 48 83 c4 28                   addq    $0x28, %rsp
// 2aa: 5b                            popq    %rbx
// 2ab: 41 5c                         popq    %r12
// 2ad: 41 5d                         popq    %r13
// 2af: 41 5e                         popq    %r14
// 2b1: 41 5f                         popq    %r15
// 2b3: 5d                            popq    %rbp
// 2b4: c3                            retq
// 2b5: 41 83 fe 02                   cmpl    $0x2, %r14d
// 2b9: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 2bf: 45 0f 43 e6                   cmovael %r14d, %r12d
// 2c3: 45 31 ff                      xorl    %r15d, %r15d
// 2c6: eb 14                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 2c8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 2d0: 49 ff c7                      incq    %r15
// 2d3: 4d 39 fc                      cmpq    %r15, %r12
// 2d6: 0f 84 ed fe ff ff             je      0x1c9 <_JIT_ENTRY+0x1c9>
// 2dc: 4e 8b 74 fd 00                movq    (%rbp,%r15,8), %r14
// 2e1: 49 8b 06                      movq    (%r14), %rax
// 2e4: 48 85 c0                      testq   %rax, %rax
// 2e7: 7e 07                         jle     0x2f0 <_JIT_ENTRY+0x2f0>
// 2e9: 85 c0                         testl   %eax, %eax
// 2eb: 78 e3                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 2ed: eb 26                         jmp     0x315 <_JIT_ENTRY+0x315>
// 2ef: 90                            nop
// 2f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1
// 2fa: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 2ff: 4c 89 f2                      movq    %r14, %rdx
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_NegativeRefcount
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 06                      movq    (%r14), %rax
// 311: 85 c0                         testl   %eax, %eax
// 313: 78 bb                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31f: ff d0                         callq   *%rax
// 321: 49 ff 0e                      decq    (%r14)
// 324: 75 aa                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 326: 4c 89 f7                      movq    %r14, %rdi
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_Dealloc
// 333: ff d0                         callq   *%rax
// 335: eb 99                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _JIT_CONTINUE
// 341: 48 8b 3c 24                   movq    (%rsp), %rdi
// 345: 4c 89 f6                      movq    %r14, %rsi
// 348: 48 89 da                      movq    %rbx, %rdx
// 34b: 48 83 c4 28                   addq    $0x28, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_FAST_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x68, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xf1, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x54, 0x24, 0x10, 0x49, 0x89, 0x3c, 0x0a, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf1, 0x4c, 0x63, 0xc1, 0x4b, 0x8d, 0x0c, 0xc2, 0x89, 0xf7, 0xf7, 0xd7, 0x4c, 0x63, 0xef, 0x4d, 0x01, 0xc5, 0x4b, 0x8b, 0x3c, 0xea, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf1, 0x49, 0x63, 0xd9, 0x4c, 0x01, 0xc3, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x44, 0x0f, 0x44, 0xf6, 0x49, 0x8b, 0x34, 0xda, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xee, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x2c, 0xc1, 0x48, 0x85, 0xff, 0x41, 0x0f, 0x94, 0xc7, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x48, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe6, 0x45, 0x31, 0xff, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfc, 0x0f, 0x84, 0xed, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xfd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_FAST_code_holes[23] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_FAST_data_holes[1];

// _BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 6a 01 00 00             je      0x266 <_JIT_ENTRY+0x266>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 48 89 c2                      movq    %rax, %rdx
// 10c: 48 f7 da                      negq    %rdx
// 10f: 0f b7 f1                      movzwl  %cx, %esi
// 112: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 11a: 48 f7 d9                      negq    %rcx
// 11d: 4c 8b 54 24 10                movq    0x10(%rsp), %r10
// 122: 49 89 3c 0a                   movq    %rdi, (%r10,%rcx)
// 126: b9 01 00 00 00                movl    $0x1, %ecx
// 12b: 29 f1                         subl    %esi, %ecx
// 12d: 4c 63 c1                      movslq  %ecx, %r8
// 130: 4b 8d 0c c2                   leaq    (%r10,%r8,8), %rcx
// 134: 89 f7                         movl    %esi, %edi
// 136: f7 d7                         notl    %edi
// 138: 4c 63 ef                      movslq  %edi, %r13
// 13b: 4d 01 c5                      addq    %r8, %r13
// 13e: 4b 8b 3c ea                   movq    (%r10,%r13,8), %rdi
// 142: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 148: 41 29 f1                      subl    %esi, %r9d
// 14b: 49 63 d9                      movslq  %r9d, %rbx
// 14e: 4c 01 c3                      addq    %r8, %rbx
// 151: 44 8d 76 01                   leal    0x1(%rsi), %r14d
// 155: 48 85 ff                      testq   %rdi, %rdi
// 158: 48 f7 d0                      notq    %rax
// 15b: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 15f: 44 0f 44 f6                   cmovel  %esi, %r14d
// 163: 49 8b 34 da                   movq    (%r10,%rbx,8), %rsi
// 167: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000169:  R_X86_64_64  PyCFunction_Type
// 171: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 175: 0f 85 02 01 00 00             jne     0x27d <_JIT_ENTRY+0x27d>
// 17b: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 17f: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 187: 0f 85 f0 00 00 00             jne     0x27d <_JIT_ENTRY+0x27d>
// 18d: 48 8d 2c c1                   leaq    (%rcx,%rax,8), %rbp
// 191: 48 85 ff                      testq   %rdi, %rdi
// 194: 41 0f 94 c7                   sete    %r15b
// 198: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 19d: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 1a1: 44 89 f2                      movl    %r14d, %edx
// 1a4: 48 89 ee                      movq    %rbp, %rsi
// 1a7: 31 c9                         xorl    %ecx, %ecx
// 1a9: 41 ff 50 08                   callq   *0x8(%r8)
// 1ad: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_OPARG
// 1bc: 66 85 c0                      testw   %ax, %ax
// 1bf: 0f 94 c0                      sete    %al
// 1c2: 41 84 c7                      testb   %al, %r15b
// 1c5: 0f 84 ec 00 00 00             je      0x2b7 <_JIT_ENTRY+0x2b7>
// 1cb: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1d0: 49 8b 07                      movq    (%r15), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 7f 21                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001da:  R_X86_64_64  .rodata.str1.1
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 1f1: 4c 89 fa                      movq    %r15, %rdx
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 8b 07                      movq    (%r15), %rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 200: 78 20                         js      0x222 <_JIT_ENTRY+0x222>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20c: ff d0                         callq   *%rax
// 20e: 49 ff 0f                      decq    (%r15)
// 211: 75 0f                         jne     0x222 <_JIT_ENTRY+0x222>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_Dealloc
// 21d: 4c 89 ff                      movq    %r15, %rdi
// 220: ff d0                         callq   *%rax
// 222: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 226: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 74 36                         je      0x266 <_JIT_ENTRY+0x266>
// 230: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 234: 49 89 04 24                   movq    %rax, (%r12)
// 238: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 23d: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 241: 48 8b 00                      movq    (%rax), %rax
// 244: 84 c0                         testb   %al, %al
// 246: 0f 84 eb 00 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_HandlePending
// 256: 48 89 df                      movq    %rbx, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 85 c0                         testl   %eax, %eax
// 25d: 0f 84 d4 00 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 263: 4d 89 f4                      movq    %r14, %r12
// 266: 48 8b 04 24                   movq    (%rsp), %rax
// 26a: 49 29 c4                      subq    %rax, %r12
// 26d: 49 83 c4 b8                   addq    $-0x48, %r12
// 271: 49 c1 ec 03                   shrq    $0x3, %r12
// 275: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: eb 2b                         jmp     0x2a8 <_JIT_ENTRY+0x2a8>
// 27d: 48 8b 04 24                   movq    (%rsp), %rax
// 281: 48 29 c1                      subq    %rax, %rcx
// 284: 48 83 c1 b8                   addq    $-0x48, %rcx
// 288: 48 c1 e9 03                   shrq    $0x3, %rcx
// 28c: 89 48 40                      movl    %ecx, 0x40(%rax)
// 28f: 48 8b 00                      movq    (%rax), %rax
// 292: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000294:  R_X86_64_64  _JIT_TARGET
// 29c: 89 c9                         movl    %ecx, %ecx
// 29e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: c3                            retq
// 2b7: 41 83 fe 02                   cmpl    $0x2, %r14d
// 2bb: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 2c1: 45 0f 43 e6                   cmovael %r14d, %r12d
// 2c5: 45 31 ff                      xorl    %r15d, %r15d
// 2c8: eb 12                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 2ca: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 2d0: 49 ff c7                      incq    %r15
// 2d3: 4d 39 fc                      cmpq    %r15, %r12
// 2d6: 0f 84 ef fe ff ff             je      0x1cb <_JIT_ENTRY+0x1cb>
// 2dc: 4e 8b 74 fd 00                movq    (%rbp,%r15,8), %r14
// 2e1: 49 8b 06                      movq    (%r14), %rax
// 2e4: 48 85 c0                      testq   %rax, %rax
// 2e7: 7e 07                         jle     0x2f0 <_JIT_ENTRY+0x2f0>
// 2e9: 85 c0                         testl   %eax, %eax
// 2eb: 78 e3                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 2ed: eb 26                         jmp     0x315 <_JIT_ENTRY+0x315>
// 2ef: 90                            nop
// 2f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1
// 2fa: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 2ff: 4c 89 f2                      movq    %r14, %rdx
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_NegativeRefcount
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 06                      movq    (%r14), %rax
// 311: 85 c0                         testl   %eax, %eax
// 313: 78 bb                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31f: ff d0                         callq   *%rax
// 321: 49 ff 0e                      decq    (%r14)
// 324: 75 aa                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 326: 4c 89 f7                      movq    %r14, %rdi
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _Py_Dealloc
// 333: ff d0                         callq   *%rax
// 335: eb 99                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _JIT_CONTINUE
// 341: 48 8b 3c 24                   movq    (%rsp), %rdi
// 345: 4c 89 f6                      movq    %r14, %rsi
// 348: 48 89 da                      movq    %rbx, %rdx
// 34b: 48 83 c4 28                   addq    $0x28, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: ff e0                         jmpq    *%rax
// 35b: 
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[860] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x6a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xf1, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x54, 0x24, 0x10, 0x49, 0x89, 0x3c, 0x0a, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf1, 0x4c, 0x63, 0xc1, 0x4b, 0x8d, 0x0c, 0xc2, 0x89, 0xf7, 0xf7, 0xd7, 0x4c, 0x63, 0xef, 0x4d, 0x01, 0xc5, 0x4b, 0x8b, 0x3c, 0xea, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf1, 0x49, 0x63, 0xd9, 0x4c, 0x01, 0xc3, 0x44, 0x8d, 0x76, 0x01, 0x48, 0x85, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x44, 0x0f, 0x44, 0xf6, 0x49, 0x8b, 0x34, 0xda, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x02, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x2c, 0xc1, 0x48, 0x85, 0xff, 0x41, 0x0f, 0x94, 0xc7, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2b, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x48, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe6, 0x45, 0x31, 0xff, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfc, 0x0f, 0x84, 0xef, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xfd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[23] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _BUILD_STRINGplus_CALL_BUILTIN_O
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_BUILTIN_O.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 13 02 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 e8                      movzwl  %ax, %ebp
// 109: 48 89 ea                      movq    %rbp, %rdx
// 10c: 48 f7 da                      negq    %rdx
// 10f: 0f b7 c0                      movzwl  %ax, %eax
// 112: 48 8d 0c ed 00 00 00 00       leaq    (,%rbp,8), %rcx
// 11a: 48 f7 d9                      negq    %rcx
// 11d: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 122: 49 89 34 08                   movq    %rsi, (%r8,%rcx)
// 126: b9 01 00 00 00                movl    $0x1, %ecx
// 12b: 29 c1                         subl    %eax, %ecx
// 12d: 48 63 c9                      movslq  %ecx, %rcx
// 130: 89 c6                         movl    %eax, %esi
// 132: f7 d6                         notl    %esi
// 134: 4c 63 f6                      movslq  %esi, %r14
// 137: 49 01 ce                      addq    %rcx, %r14
// 13a: 31 f6                         xorl    %esi, %esi
// 13c: 66 85 ed                      testw   %bp, %bp
// 13f: 40 0f 94 c6                   sete    %sil
// 143: 31 ff                         xorl    %edi, %edi
// 145: 66 83 fd 01                   cmpw    $0x1, %bp
// 149: 40 0f 94 c7                   sete    %dil
// 14d: 4b 83 3c f0 00                cmpq    $0x0, (%r8,%r14,8)
// 152: 48 f7 d5                      notq    %rbp
// 155: 48 0f 44 ea                   cmoveq  %rdx, %rbp
// 159: 4d 8d 24 c8                   leaq    (%r8,%rcx,8), %r12
// 15d: 0f 44 f7                      cmovel  %edi, %esi
// 160: 40 80 fe 01                   cmpb    $0x1, %sil
// 164: 75 58                         jne     0x1be <_JIT_ENTRY+0x1be>
// 166: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 16b: 29 c2                         subl    %eax, %edx
// 16d: 4c 63 ea                      movslq  %edx, %r13
// 170: 49 01 cd                      addq    %rcx, %r13
// 173: 4b 8b 34 e8                   movq    (%r8,%r13,8), %rsi
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  PyCFunction_Type
// 181: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 185: 75 37                         jne     0x1be <_JIT_ENTRY+0x1be>
// 187: 48 8b 46 10                   movq    0x10(%rsi), %rax
// 18b: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 18f: 75 2d                         jne     0x1be <_JIT_ENTRY+0x1be>
// 191: 48 8b 58 08                   movq    0x8(%rax), %rbx
// 195: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 19a: 41 8b 4f 2c                   movl    0x2c(%r15), %ecx
// 19e: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 1a1: 41 89 57 2c                   movl    %edx, 0x2c(%r15)
// 1a5: 85 c9                         testl   %ecx, %ecx
// 1a7: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 1ac: 7e 42                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ae: 4d 8b 24 ec                   movq    (%r12,%rbp,8), %r12
// 1b2: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 1b6: 75 6c                         jne     0x224 <_JIT_ENTRY+0x224>
// 1b8: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 1bc: eb 68                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1be: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1c3: 49 29 c4                      subq    %rax, %r12
// 1c6: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ca: 49 c1 ec 03                   shrq    $0x3, %r12
// 1ce: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1d2: 48 8b 00                      movq    (%rax), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_TARGET
// 1df: 89 c9                         movl    %ecx, %ecx
// 1e1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1eb: e9 35 01 00 00                jmp     0x325 <_JIT_ENTRY+0x325>
// 1f0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1+0x39
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_CheckRecursiveCall
// 204: 4c 89 ff                      movq    %r15, %rdi
// 207: ff d0                         callq   *%rax
// 209: 85 c0                         testl   %eax, %eax
// 20b: 0f 85 fe 00 00 00             jne     0x30f <_JIT_ENTRY+0x30f>
// 211: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 216: 48 8b 46 10                   movq    0x10(%rsi), %rax
// 21a: 4d 8b 24 ec                   movq    (%r12,%rbp,8), %r12
// 21e: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 222: 74 94                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 224: 31 ff                         xorl    %edi, %edi
// 226: 4c 89 e6                      movq    %r12, %rsi
// 229: ff d3                         callq   *%rbx
// 22b: 41 ff 47 2c                   incl    0x2c(%r15)
// 22f: 48 89 c5                      movq    %rax, %rbp
// 232: 49 8b 04 24                   movq    (%r12), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 254: 4c 89 e2                      movq    %r12, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 04 24                   movq    (%r12), %rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 264: 78 21                         js      0x287 <_JIT_ENTRY+0x287>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 270: ff d0                         callq   *%rax
// 272: 49 ff 0c 24                   decq    (%r12)
// 276: 75 0f                         jne     0x287 <_JIT_ENTRY+0x287>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_Dealloc
// 282: 4c 89 e7                      movq    %r12, %rdi
// 285: ff d0                         callq   *%rax
// 287: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 28c: 48 8b 02                      movq    (%rdx), %rax
// 28f: 48 85 c0                      testq   %rax, %rax
// 292: 7f 23                         jg      0x2b7 <_JIT_ENTRY+0x2b7>
// 294: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000296:  R_X86_64_64  .rodata.str1.1
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_NegativeRefcount
// 2a8: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 2ad: ff d0                         callq   *%rax
// 2af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2b4: 48 8b 00                      movq    (%rax), %rax
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 78 22                         js      0x2dd <_JIT_ENTRY+0x2dd>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2cc: 48 ff 0f                      decq    (%rdi)
// 2cf: 75 0c                         jne     0x2dd <_JIT_ENTRY+0x2dd>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_Dealloc
// 2db: ff d0                         callq   *%rax
// 2dd: 4e 8d 24 eb                   leaq    (%rbx,%r13,8), %r12
// 2e1: 48 85 ed                      testq   %rbp, %rbp
// 2e4: 74 29                         je      0x30f <_JIT_ENTRY+0x30f>
// 2e6: 4e 8d 34 f3                   leaq    (%rbx,%r14,8), %r14
// 2ea: 49 89 2c 24                   movq    %rbp, (%r12)
// 2ee: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2f2: 48 8b 00                      movq    (%rax), %rax
// 2f5: 84 c0                         testb   %al, %al
// 2f7: 74 3b                         je      0x334 <_JIT_ENTRY+0x334>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_HandlePending
// 303: 4c 89 ff                      movq    %r15, %rdi
// 306: ff d0                         callq   *%rax
// 308: 85 c0                         testl   %eax, %eax
// 30a: 74 28                         je      0x334 <_JIT_ENTRY+0x334>
// 30c: 4d 89 f4                      movq    %r14, %r12
// 30f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 314: 49 29 c4                      subq    %rax, %r12
// 317: 49 83 c4 b8                   addq    $-0x48, %r12
// 31b: 49 c1 ec 03                   shrq    $0x3, %r12
// 31f: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 323: 31 c0                         xorl    %eax, %eax
// 325: 48 83 c4 28                   addq    $0x28, %rsp
// 329: 5b                            popq    %rbx
// 32a: 41 5c                         popq    %r12
// 32c: 41 5d                         popq    %r13
// 32e: 41 5e                         popq    %r14
// 330: 41 5f                         popq    %r15
// 332: 5d                            popq    %rbp
// 333: c3                            retq
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _JIT_CONTINUE
// 33e: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 343: 4c 89 f6                      movq    %r14, %rsi
// 346: 4c 89 fa                      movq    %r15, %rdx
// 349: 48 83 c4 28                   addq    $0x28, %rsp
// 34d: 5b                            popq    %rbx
// 34e: 41 5c                         popq    %r12
// 350: 41 5d                         popq    %r13
// 352: 41 5e                         popq    %r14
// 354: 41 5f                         popq    %r15
// 356: 5d                            popq    %rbp
// 357: ff e0                         jmpq    *%rax
// 359: 
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_O_code_body[858] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x13, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0x89, 0xea, 0x48, 0xf7, 0xda, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x0c, 0xed, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x89, 0x34, 0x08, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xf6, 0x49, 0x01, 0xce, 0x31, 0xf6, 0x66, 0x85, 0xed, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xfd, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xf0, 0x00, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xea, 0x4d, 0x8d, 0x24, 0xc8, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x58, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xea, 0x49, 0x01, 0xcd, 0x4b, 0x8b, 0x34, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0x08, 0x75, 0x37, 0x48, 0x8b, 0x46, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2d, 0x48, 0x8b, 0x58, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x41, 0x8b, 0x4f, 0x2c, 0x8d, 0x51, 0xff, 0x41, 0x89, 0x57, 0x2c, 0x85, 0xc9, 0x48, 0x89, 0x74, 0x24, 0x08, 0x7e, 0x42, 0x4d, 0x8b, 0x24, 0xec, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x6c, 0x48, 0x8b, 0x7e, 0x18, 0xeb, 0x68, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x35, 0x01, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x46, 0x10, 0x4d, 0x8b, 0x24, 0xec, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x94, 0x31, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x41, 0xff, 0x47, 0x2c, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x8d, 0x24, 0xeb, 0x48, 0x85, 0xed, 0x74, 0x29, 0x4e, 0x8d, 0x34, 0xf3, 0x49, 0x89, 0x2c, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_O_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BUILD_STRINGplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BUILD_STRINGplus_CALL_BUILTIN_O_data_holes[1];

// _BUILD_STRINGplus_CALL_INTRINSIC_1
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_INTRINSIC_1.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 fc 00 00 00             je      0x1f8 <_JIT_ENTRY+0x1f8>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 d0                      movzwl  %ax, %edx
// 10c: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 114: 48 f7 d8                      negq    %rax
// 117: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 11c: 49 89 34 07                   movq    %rsi, (%r15,%rax)
// 120: b8 01 00 00 00                movl    $0x1, %eax
// 125: 29 c8                         subl    %ecx, %eax
// 127: 48 63 d8                      movslq  %eax, %rbx
// 12a: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 12f: 48 c1 e2 04                   shlq    $0x4, %rdx
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 13d: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 142: 4c 89 f7                      movq    %r14, %rdi
// 145: 4c 89 ee                      movq    %r13, %rsi
// 148: ff 14 02                      callq   *(%rdx,%rax)
// 14b: 49 89 c4                      movq    %rax, %r12
// 14e: 49 8b 45 00                   movq    (%r13), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7e 06                         jle     0x15d <_JIT_ENTRY+0x15d>
// 157: 85 c0                         testl   %eax, %eax
// 159: 79 28                         jns     0x183 <_JIT_ENTRY+0x183>
// 15b: eb 38                         jmp     0x195 <_JIT_ENTRY+0x195>
// 15d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_NegativeRefcount
// 171: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 176: 4c 89 ea                      movq    %r13, %rdx
// 179: ff d0                         callq   *%rax
// 17b: 49 8b 45 00                   movq    (%r13), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 12                         js      0x195 <_JIT_ENTRY+0x195>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 4d 00                   decq    (%r13)
// 193: 74 47                         je      0x1dc <_JIT_ENTRY+0x1dc>
// 195: 4d 85 e4                      testq   %r12, %r12
// 198: 74 56                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_OPARG
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: b9 01 00 00 00                movl    $0x1, %ecx
// 1ac: 29 c1                         subl    %eax, %ecx
// 1ae: 48 63 c1                      movslq  %ecx, %rax
// 1b1: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1b5: 4d 89 64 c7 f8                movq    %r12, -0x8(%r15,%rax,8)
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1c9: 4c 89 f2                      movq    %r14, %rdx
// 1cc: 48 83 c4 28                   addq    $0x28, %rsp
// 1d0: 5b                            popq    %rbx
// 1d1: 41 5c                         popq    %r12
// 1d3: 41 5d                         popq    %r13
// 1d5: 41 5e                         popq    %r14
// 1d7: 41 5f                         popq    %r15
// 1d9: 5d                            popq    %rbp
// 1da: ff e0                         jmpq    *%rax
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 ef                      movq    %r13, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 4d 85 e4                      testq   %r12, %r12
// 1ee: 75 aa                         jne     0x19a <_JIT_ENTRY+0x19a>
// 1f0: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 1f4: 49 83 c4 f8                   addq    $-0x8, %r12
// 1f8: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1fd: 49 29 c4                      subq    %rax, %r12
// 200: 49 83 c4 b8                   addq    $-0x48, %r12
// 204: 49 c1 ec 03                   shrq    $0x3, %r12
// 208: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 20c: 31 c0                         xorl    %eax, %eax
// 20e: 48 83 c4 28                   addq    $0x28, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: c3                            retq
// 21d: 
static const unsigned char _BUILD_STRINGplus_CALL_INTRINSIC_1_code_body[542] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x34, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0x14, 0x02, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x47, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x4d, 0x89, 0x64, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xaa, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CALL_INTRINSIC_1_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_INTRINSIC_1_data_holes[1];

// _BUILD_STRINGplus_CALL_INTRINSIC_2
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_INTRINSIC_2.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7f: 49 ff c7                      incq    %r15
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f2: 48 85 f6                      testq   %rsi, %rsi
// f5: 0f 84 5f 01 00 00             je      0x25a <_JIT_ENTRY+0x25a>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 44 0f b7 c0                   movzwl  %ax, %r8d
// 10c: 4a 8d 04 c5 00 00 00 00       leaq    (,%r8,8), %rax
// 114: 48 f7 d8                      negq    %rax
// 117: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 11c: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 120: b8 01 00 00 00                movl    $0x1, %eax
// 125: 29 c8                         subl    %ecx, %eax
// 127: 4c 63 f0                      movslq  %eax, %r14
// 12a: 4a 8b 6c f2 f0                movq    -0x10(%rdx,%r14,8), %rbp
// 12f: 4e 8b 6c f2 f8                movq    -0x8(%rdx,%r14,8), %r13
// 134: 49 c1 e0 04                   shlq    $0x4, %r8
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 142: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 147: 4c 89 ff                      movq    %r15, %rdi
// 14a: 48 89 ee                      movq    %rbp, %rsi
// 14d: 4c 89 ea                      movq    %r13, %rdx
// 150: 41 ff 14 00                   callq   *(%r8,%rax)
// 154: 49 89 c4                      movq    %rax, %r12
// 157: 48 8b 45 00                   movq    (%rbp), %rax
// 15b: 48 85 c0                      testq   %rax, %rax
// 15e: 7e 06                         jle     0x166 <_JIT_ENTRY+0x166>
// 160: 85 c0                         testl   %eax, %eax
// 162: 79 28                         jns     0x18c <_JIT_ENTRY+0x18c>
// 164: eb 2e                         jmp     0x194 <_JIT_ENTRY+0x194>
// 166: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000168:  R_X86_64_64  .rodata.str1.1
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_NegativeRefcount
// 17a: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 17f: 48 89 ea                      movq    %rbp, %rdx
// 182: ff d0                         callq   *%rax
// 184: 48 8b 45 00                   movq    (%rbp), %rax
// 188: 85 c0                         testl   %eax, %eax
// 18a: 78 08                         js      0x194 <_JIT_ENTRY+0x194>
// 18c: ff d3                         callq   *%rbx
// 18e: 48 ff 4d 00                   decq    (%rbp)
// 192: 74 0f                         je      0x1a3 <_JIT_ENTRY+0x1a3>
// 194: 49 8b 45 00                   movq    (%r13), %rax
// 198: 48 85 c0                      testq   %rax, %rax
// 19b: 7e 1e                         jle     0x1bb <_JIT_ENTRY+0x1bb>
// 19d: 85 c0                         testl   %eax, %eax
// 19f: 79 40                         jns     0x1e1 <_JIT_ENTRY+0x1e1>
// 1a1: eb 46                         jmp     0x1e9 <_JIT_ENTRY+0x1e9>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_Dealloc
// 1ad: 48 89 ef                      movq    %rbp, %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 49 8b 45 00                   movq    (%r13), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f e2                         jg      0x19d <_JIT_ENTRY+0x19d>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 1d4: 4c 89 ea                      movq    %r13, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 8b 45 00                   movq    (%r13), %rax
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 78 08                         js      0x1e9 <_JIT_ENTRY+0x1e9>
// 1e1: ff d3                         callq   *%rbx
// 1e3: 49 ff 4d 00                   decq    (%r13)
// 1e7: 74 50                         je      0x239 <_JIT_ENTRY+0x239>
// 1e9: 4d 85 e4                      testq   %r12, %r12
// 1ec: 74 5f                         je      0x24d <_JIT_ENTRY+0x24d>
// 1ee: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f3: 4a 8d 34 f2                   leaq    (%rdx,%r14,8), %rsi
// 1f7: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_OPARG
// 205: 0f b7 c0                      movzwl  %ax, %eax
// 208: b9 01 00 00 00                movl    $0x1, %ecx
// 20d: 29 c1                         subl    %eax, %ecx
// 20f: 48 63 c1                      movslq  %ecx, %rax
// 212: 4c 89 64 c2 f0                movq    %r12, -0x10(%rdx,%rax,8)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_CONTINUE
// 221: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 226: 4c 89 fa                      movq    %r15, %rdx
// 229: 48 83 c4 28                   addq    $0x28, %rsp
// 22d: 5b                            popq    %rbx
// 22e: 41 5c                         popq    %r12
// 230: 41 5d                         popq    %r13
// 232: 41 5e                         popq    %r14
// 234: 41 5f                         popq    %r15
// 236: 5d                            popq    %rbp
// 237: ff e0                         jmpq    *%rax
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_Dealloc
// 243: 4c 89 ef                      movq    %r13, %rdi
// 246: ff d0                         callq   *%rax
// 248: 4d 85 e4                      testq   %r12, %r12
// 24b: 75 a1                         jne     0x1ee <_JIT_ENTRY+0x1ee>
// 24d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 252: 4e 8d 24 f0                   leaq    (%rax,%r14,8), %r12
// 256: 49 83 c4 f0                   addq    $-0x10, %r12
// 25a: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 25f: 49 29 c4                      subq    %rax, %r12
// 262: 49 83 c4 b8                   addq    $-0x48, %r12
// 266: 49 c1 ec 03                   shrq    $0x3, %r12
// 26a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 26e: 31 c0                         xorl    %eax, %eax
// 270: 48 83 c4 28                   addq    $0x28, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: c3                            retq
// 27f: 
static const unsigned char _BUILD_STRINGplus_CALL_INTRINSIC_2_code_body[640] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x44, 0x0f, 0xb7, 0xc0, 0x4a, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x6c, 0xf2, 0xf0, 0x4e, 0x8b, 0x6c, 0xf2, 0xf8, 0x49, 0xc1, 0xe0, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0x41, 0xff, 0x14, 0x00, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x50, 0x4d, 0x85, 0xe4, 0x74, 0x5f, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x4a, 0x8d, 0x34, 0xf2, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc2, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa1, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4e, 0x8d, 0x24, 0xf0, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CALL_INTRINSIC_2_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_INTRINSIC_2_data_holes[1];

// _BUILD_STRINGplus_CALL_ISINSTANCE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_ISINSTANCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 10 02 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 48 89 c6                      movq    %rax, %rsi
// 10c: 48 f7 de                      negq    %rsi
// 10f: 0f b7 c9                      movzwl  %cx, %ecx
// 112: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 11a: 48 f7 da                      negq    %rdx
// 11d: 4c 8b 4c 24 20                movq    0x20(%rsp), %r9
// 122: 49 89 3c 11                   movq    %rdi, (%r9,%rdx)
// 126: ba 01 00 00 00                movl    $0x1, %edx
// 12b: 29 ca                         subl    %ecx, %edx
// 12d: 48 63 d2                      movslq  %edx, %rdx
// 130: 89 cf                         movl    %ecx, %edi
// 132: f7 d7                         notl    %edi
// 134: 4c 63 f7                      movslq  %edi, %r14
// 137: 49 01 d6                      addq    %rdx, %r14
// 13a: 31 ff                         xorl    %edi, %edi
// 13c: 66 83 f8 01                   cmpw    $0x1, %ax
// 140: 40 0f 94 c7                   sete    %dil
// 144: 45 31 c0                      xorl    %r8d, %r8d
// 147: 66 83 f8 02                   cmpw    $0x2, %ax
// 14b: 41 0f 94 c0                   sete    %r8b
// 14f: 4b 83 3c f1 00                cmpq    $0x0, (%r9,%r14,8)
// 154: 48 f7 d0                      notq    %rax
// 157: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 15b: 4d 8d 24 d1                   leaq    (%r9,%rdx,8), %r12
// 15f: 41 0f 44 f8                   cmovel  %r8d, %edi
// 163: 40 80 ff 01                   cmpb    $0x1, %dil
// 167: 75 23                         jne     0x18c <_JIT_ENTRY+0x18c>
// 169: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 16e: 29 ce                         subl    %ecx, %esi
// 170: 4c 63 ee                      movslq  %esi, %r13
// 173: 49 01 d5                      addq    %rdx, %r13
// 176: 4b 8b 1c e9                   movq    (%r9,%r13,8), %rbx
// 17a: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 17f: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 183: 48 3b 99 b8 54 06 00          cmpq    0x654b8(%rcx), %rbx
// 18a: 74 32                         je      0x1be <_JIT_ENTRY+0x1be>
// 18c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 191: 49 29 c4                      subq    %rax, %r12
// 194: 49 83 c4 b8                   addq    $-0x48, %r12
// 198: 49 c1 ec 03                   shrq    $0x3, %r12
// 19c: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a0: 48 8b 00                      movq    (%rax), %rax
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  _JIT_TARGET
// 1ad: 89 c9                         movl    %ecx, %ecx
// 1af: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b9: e9 64 01 00 00                jmp     0x322 <_JIT_ENTRY+0x322>
// 1be: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 1c2: 49 8b 74 c4 08                movq    0x8(%r12,%rax,8), %rsi
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  PyObject_IsInstance
// 1d1: 48 89 ef                      movq    %rbp, %rdi
// 1d4: 49 89 f7                      movq    %rsi, %r15
// 1d7: ff d0                         callq   *%rax
// 1d9: 85 c0                         testl   %eax, %eax
// 1db: 0f 88 2b 01 00 00             js      0x30c <_JIT_ENTRY+0x30c>
// 1e1: 89 c7                         movl    %eax, %edi
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  PyBool_FromLong
// 1ed: ff d0                         callq   *%rax
// 1ef: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 1f4: 48 8b 45 00                   movq    (%rbp), %rax
// 1f8: 48 85 c0                      testq   %rax, %rax
// 1fb: 7f 22                         jg      0x21f <_JIT_ENTRY+0x21f>
// 1fd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ff:  R_X86_64_64  .rodata.str1.1
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_NegativeRefcount
// 211: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 216: 48 89 ea                      movq    %rbp, %rdx
// 219: ff d0                         callq   *%rax
// 21b: 48 8b 45 00                   movq    (%rbp), %rax
// 21f: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000221:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 18                         js      0x245 <_JIT_ENTRY+0x245>
// 22d: 41 ff d4                      callq   *%r12
// 230: 48 ff 4d 00                   decq    (%rbp)
// 234: 75 0f                         jne     0x245 <_JIT_ENTRY+0x245>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_Dealloc
// 240: 48 89 ef                      movq    %rbp, %rdi
// 243: ff d0                         callq   *%rax
// 245: 49 8b 07                      movq    (%r15), %rax
// 248: 48 85 c0                      testq   %rax, %rax
// 24b: 7f 21                         jg      0x26e <_JIT_ENTRY+0x26e>
// 24d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024f:  R_X86_64_64  .rodata.str1.1
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_NegativeRefcount
// 261: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 266: 4c 89 fa                      movq    %r15, %rdx
// 269: ff d0                         callq   *%rax
// 26b: 49 8b 07                      movq    (%r15), %rax
// 26e: 85 c0                         testl   %eax, %eax
// 270: 78 17                         js      0x289 <_JIT_ENTRY+0x289>
// 272: 41 ff d4                      callq   *%r12
// 275: 49 ff 0f                      decq    (%r15)
// 278: 75 0f                         jne     0x289 <_JIT_ENTRY+0x289>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_Dealloc
// 284: 4c 89 ff                      movq    %r15, %rdi
// 287: ff d0                         callq   *%rax
// 289: 48 8b 03                      movq    (%rbx), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 7f 21                         jg      0x2b2 <_JIT_ENTRY+0x2b2>
// 291: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000293:  R_X86_64_64  .rodata.str1.1
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_NegativeRefcount
// 2a5: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 2aa: 48 89 da                      movq    %rbx, %rdx
// 2ad: ff d0                         callq   *%rax
// 2af: 48 8b 03                      movq    (%rbx), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 17                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2b6: 41 ff d4                      callq   *%r12
// 2b9: 48 ff 0b                      decq    (%rbx)
// 2bc: 75 0f                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 48 89 df                      movq    %rbx, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2d2: 4e 8d 24 e8                   leaq    (%rax,%r13,8), %r12
// 2d6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2db: 48 85 c9                      testq   %rcx, %rcx
// 2de: 74 2c                         je      0x30c <_JIT_ENTRY+0x30c>
// 2e0: 4a 8d 34 f0                   leaq    (%rax,%r14,8), %rsi
// 2e4: 49 89 0c 24                   movq    %rcx, (%r12)
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _JIT_CONTINUE
// 2f2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2f7: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 2fc: 48 83 c4 28                   addq    $0x28, %rsp
// 300: 5b                            popq    %rbx
// 301: 41 5c                         popq    %r12
// 303: 41 5d                         popq    %r13
// 305: 41 5e                         popq    %r14
// 307: 41 5f                         popq    %r15
// 309: 5d                            popq    %rbp
// 30a: ff e0                         jmpq    *%rax
// 30c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 311: 49 29 c4                      subq    %rax, %r12
// 314: 49 83 c4 b8                   addq    $-0x48, %r12
// 318: 49 c1 ec 03                   shrq    $0x3, %r12
// 31c: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 320: 31 c0                         xorl    %eax, %eax
// 322: 48 83 c4 28                   addq    $0x28, %rsp
// 326: 5b                            popq    %rbx
// 327: 41 5c                         popq    %r12
// 329: 41 5d                         popq    %r13
// 32b: 41 5e                         popq    %r14
// 32d: 41 5f                         popq    %r15
// 32f: 5d                            popq    %rbp
// 330: c3                            retq
// 331: 
static const unsigned char _BUILD_STRINGplus_CALL_ISINSTANCE_code_body[818] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x20, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x10, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x4c, 0x24, 0x20, 0x49, 0x89, 0x3c, 0x11, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf1, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x24, 0xd1, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x23, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x4b, 0x8b, 0x1c, 0xe9, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0x99, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x32, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x64, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x74, 0xc4, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x49, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x2b, 0x01, 0x00, 0x00, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x17, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x17, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4e, 0x8d, 0x24, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x2c, 0x4a, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0x0c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CALL_ISINSTANCE_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_ISINSTANCE_data_holes[1];

// _BUILD_STRINGplus_CALL_LEN
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_LEN.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 be 01 00 00             je      0x2ba <_JIT_ENTRY+0x2ba>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 48 89 c6                      movq    %rax, %rsi
// 10c: 48 f7 de                      negq    %rsi
// 10f: 0f b7 c9                      movzwl  %cx, %ecx
// 112: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 11a: 48 f7 da                      negq    %rdx
// 11d: 4c 8b 4c 24 18                movq    0x18(%rsp), %r9
// 122: 49 89 3c 11                   movq    %rdi, (%r9,%rdx)
// 126: ba 01 00 00 00                movl    $0x1, %edx
// 12b: 29 ca                         subl    %ecx, %edx
// 12d: 48 63 d2                      movslq  %edx, %rdx
// 130: 89 cf                         movl    %ecx, %edi
// 132: f7 d7                         notl    %edi
// 134: 4c 63 f7                      movslq  %edi, %r14
// 137: 49 01 d6                      addq    %rdx, %r14
// 13a: 31 ff                         xorl    %edi, %edi
// 13c: 66 85 c0                      testw   %ax, %ax
// 13f: 40 0f 94 c7                   sete    %dil
// 143: 45 31 c0                      xorl    %r8d, %r8d
// 146: 66 83 f8 01                   cmpw    $0x1, %ax
// 14a: 41 0f 94 c0                   sete    %r8b
// 14e: 4b 83 3c f1 00                cmpq    $0x0, (%r9,%r14,8)
// 153: 48 f7 d0                      notq    %rax
// 156: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 15a: 4d 8d 24 d1                   leaq    (%r9,%rdx,8), %r12
// 15e: 41 0f 44 f8                   cmovel  %r8d, %edi
// 162: 40 80 ff 01                   cmpb    $0x1, %dil
// 166: 75 23                         jne     0x18b <_JIT_ENTRY+0x18b>
// 168: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 16d: 29 ce                         subl    %ecx, %esi
// 16f: 4c 63 ee                      movslq  %esi, %r13
// 172: 49 01 d5                      addq    %rdx, %r13
// 175: 4b 8b 2c e9                   movq    (%r9,%r13,8), %rbp
// 179: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 17e: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 182: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 189: 74 32                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 18b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 190: 49 29 c4                      subq    %rax, %r12
// 193: 49 83 c4 b8                   addq    $-0x48, %r12
// 197: 49 c1 ec 03                   shrq    $0x3, %r12
// 19b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 19f: 48 8b 00                      movq    (%rax), %rax
// 1a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a4:  R_X86_64_64  _JIT_TARGET
// 1ac: 89 c9                         movl    %ecx, %ecx
// 1ae: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b8: e9 13 01 00 00                jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 1bd: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyObject_Size
// 1cb: 4c 89 ff                      movq    %r15, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 85 c0                      testq   %rax, %rax
// 1d3: 0f 88 e1 00 00 00             js      0x2ba <_JIT_ENTRY+0x2ba>
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  PyLong_FromSsize_t
// 1e3: 48 89 c7                      movq    %rax, %rdi
// 1e6: ff d1                         callq   *%rcx
// 1e8: 48 89 c3                      movq    %rax, %rbx
// 1eb: 48 8b 45 00                   movq    (%rbp), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7f 22                         jg      0x216 <_JIT_ENTRY+0x216>
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  .rodata.str1.1
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_NegativeRefcount
// 208: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 20d: 48 89 ea                      movq    %rbp, %rdx
// 210: ff d0                         callq   *%rax
// 212: 48 8b 45 00                   movq    (%rbp), %rax
// 216: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: 85 c0                         testl   %eax, %eax
// 222: 78 18                         js      0x23c <_JIT_ENTRY+0x23c>
// 224: 41 ff d4                      callq   *%r12
// 227: 48 ff 4d 00                   decq    (%rbp)
// 22b: 75 0f                         jne     0x23c <_JIT_ENTRY+0x23c>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 48 89 ef                      movq    %rbp, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 49 8b 07                      movq    (%r15), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f 21                         jg      0x265 <_JIT_ENTRY+0x265>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 25d: 4c 89 fa                      movq    %r15, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 07                      movq    (%r15), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 17                         js      0x280 <_JIT_ENTRY+0x280>
// 269: 41 ff d4                      callq   *%r12
// 26c: 49 ff 0f                      decq    (%r15)
// 26f: 75 0f                         jne     0x280 <_JIT_ENTRY+0x280>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 ff                      movq    %r15, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 285: 4e 8d 24 e8                   leaq    (%rax,%r13,8), %r12
// 289: 48 85 db                      testq   %rbx, %rbx
// 28c: 74 2c                         je      0x2ba <_JIT_ENTRY+0x2ba>
// 28e: 4a 8d 34 f0                   leaq    (%rax,%r14,8), %rsi
// 292: 49 89 1c 24                   movq    %rbx, (%r12)
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _JIT_CONTINUE
// 2a0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2a5: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2aa: 48 83 c4 28                   addq    $0x28, %rsp
// 2ae: 5b                            popq    %rbx
// 2af: 41 5c                         popq    %r12
// 2b1: 41 5d                         popq    %r13
// 2b3: 41 5e                         popq    %r14
// 2b5: 41 5f                         popq    %r15
// 2b7: 5d                            popq    %rbp
// 2b8: ff e0                         jmpq    *%rax
// 2ba: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2bf: 49 29 c4                      subq    %rax, %r12
// 2c2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2c6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ca: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2ce: 31 c0                         xorl    %eax, %eax
// 2d0: 48 83 c4 28                   addq    $0x28, %rsp
// 2d4: 5b                            popq    %rbx
// 2d5: 41 5c                         popq    %r12
// 2d7: 41 5d                         popq    %r13
// 2d9: 41 5e                         popq    %r14
// 2db: 41 5f                         popq    %r15
// 2dd: 5d                            popq    %rbp
// 2de: c3                            retq
// 2df: 
static const unsigned char _BUILD_STRINGplus_CALL_LEN_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xbe, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x89, 0x3c, 0x11, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf1, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x24, 0xd1, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x23, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x4c, 0x63, 0xee, 0x49, 0x01, 0xd5, 0x4b, 0x8b, 0x2c, 0xe9, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x32, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x13, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x17, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4e, 0x8d, 0x24, 0xe8, 0x48, 0x85, 0xdb, 0x74, 0x2c, 0x4a, 0x8d, 0x34, 0xf0, 0x49, 0x89, 0x1c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CALL_LEN_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_LEN_data_holes[1];

// _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 04 24                   movq    %rax, (%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 14 24                   movq    (%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 0f 84 9d 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c1                      movzwl  %cx, %eax
// 108: 48 89 c6                      movq    %rax, %rsi
// 10b: 48 f7 de                      negq    %rsi
// 10e: 0f b7 f9                      movzwl  %cx, %edi
// 111: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 119: 48 f7 d9                      negq    %rcx
// 11c: 4c 8b 54 24 10                movq    0x10(%rsp), %r10
// 121: 49 89 14 0a                   movq    %rdx, (%r10,%rcx)
// 125: b9 01 00 00 00                movl    $0x1, %ecx
// 12a: 29 f9                         subl    %edi, %ecx
// 12c: 4c 63 c1                      movslq  %ecx, %r8
// 12f: 4b 8d 0c c2                   leaq    (%r10,%r8,8), %rcx
// 133: 89 fa                         movl    %edi, %edx
// 135: f7 d2                         notl    %edx
// 137: 4c 63 ea                      movslq  %edx, %r13
// 13a: 4d 01 c5                      addq    %r8, %r13
// 13d: 4b 8b 14 ea                   movq    (%r10,%r13,8), %rdx
// 141: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 147: 41 29 f9                      subl    %edi, %r9d
// 14a: 49 63 e9                      movslq  %r9d, %rbp
// 14d: 4c 01 c5                      addq    %r8, %rbp
// 150: 44 8d 77 01                   leal    0x1(%rdi), %r14d
// 154: 48 85 d2                      testq   %rdx, %rdx
// 157: 48 f7 d0                      notq    %rax
// 15a: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 15e: 44 0f 44 f7                   cmovel  %edi, %r14d
// 162: 4d 8b 24 ea                   movq    (%r10,%rbp,8), %r12
// 166: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000168:  R_X86_64_64  PyMethodDescr_Type
// 170: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 175: 75 21                         jne     0x198 <_JIT_ENTRY+0x198>
// 177: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 17c: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 184: 75 12                         jne     0x198 <_JIT_ENTRY+0x198>
// 186: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 18a: 48 8b 3e                      movq    (%rsi), %rdi
// 18d: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 191: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 196: 74 31                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 198: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19d: 48 29 c1                      subq    %rax, %rcx
// 1a0: 48 83 c1 b8                   addq    $-0x48, %rcx
// 1a4: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1a8: 89 48 40                      movl    %ecx, 0x40(%rax)
// 1ab: 48 8b 00                      movq    (%rax), %rax
// 1ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b0:  R_X86_64_64  _JIT_TARGET
// 1b8: 89 c9                         movl    %ecx, %ecx
// 1ba: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1be: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c4: e9 e5 00 00 00                jmp     0x2ae <_JIT_ENTRY+0x2ae>
// 1c9: 48 85 d2                      testq   %rdx, %rdx
// 1cc: 0f 94 c3                      sete    %bl
// 1cf: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 1d3: 48 89 34 24                   movq    %rsi, (%rsp)
// 1d7: 48 83 c6 08                   addq    $0x8, %rsi
// 1db: 48 63 d0                      movslq  %eax, %rdx
// 1de: 41 ff 50 08                   callq   *0x8(%r8)
// 1e2: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_OPARG
// 1f1: 66 85 c0                      testw   %ax, %ax
// 1f4: 0f 94 c0                      sete    %al
// 1f7: 84 c3                         testb   %al, %bl
// 1f9: 0f 84 be 00 00 00             je      0x2bd <_JIT_ENTRY+0x2bd>
// 1ff: 49 8b 04 24                   movq    (%r12), %rax
// 203: 48 85 c0                      testq   %rax, %rax
// 206: 7f 22                         jg      0x22a <_JIT_ENTRY+0x22a>
// 208: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020a:  R_X86_64_64  .rodata.str1.1
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 221: 4c 89 e2                      movq    %r12, %rdx
// 224: ff d0                         callq   *%rax
// 226: 49 8b 04 24                   movq    (%r12), %rax
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 231: 78 21                         js      0x254 <_JIT_ENTRY+0x254>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23d: ff d0                         callq   *%rax
// 23f: 49 ff 0c 24                   decq    (%r12)
// 243: 75 0f                         jne     0x254 <_JIT_ENTRY+0x254>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_Dealloc
// 24f: 4c 89 e7                      movq    %r12, %rdi
// 252: ff d0                         callq   *%rax
// 254: 4c 8d 24 eb                   leaq    (%rbx,%rbp,8), %r12
// 258: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 74 36                         je      0x298 <_JIT_ENTRY+0x298>
// 262: 4e 8d 34 eb                   leaq    (%rbx,%r13,8), %r14
// 266: 49 89 04 24                   movq    %rax, (%r12)
// 26a: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 26f: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 273: 48 8b 00                      movq    (%rax), %rax
// 276: 84 c0                         testb   %al, %al
// 278: 0f 84 c9 00 00 00             je      0x347 <_JIT_ENTRY+0x347>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_HandlePending
// 288: 48 89 df                      movq    %rbx, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 85 c0                         testl   %eax, %eax
// 28f: 0f 84 b2 00 00 00             je      0x347 <_JIT_ENTRY+0x347>
// 295: 4d 89 f4                      movq    %r14, %r12
// 298: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 29d: 49 29 c4                      subq    %rax, %r12
// 2a0: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a4: 49 c1 ec 03                   shrq    $0x3, %r12
// 2a8: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2ac: 31 c0                         xorl    %eax, %eax
// 2ae: 48 83 c4 28                   addq    $0x28, %rsp
// 2b2: 5b                            popq    %rbx
// 2b3: 41 5c                         popq    %r12
// 2b5: 41 5d                         popq    %r13
// 2b7: 41 5e                         popq    %r14
// 2b9: 41 5f                         popq    %r15
// 2bb: 5d                            popq    %rbp
// 2bc: c3                            retq
// 2bd: 41 83 fe 02                   cmpl    $0x2, %r14d
// 2c1: bb 01 00 00 00                movl    $0x1, %ebx
// 2c6: 41 0f 43 de                   cmovael %r14d, %ebx
// 2ca: 45 31 ff                      xorl    %r15d, %r15d
// 2cd: eb 0d                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 2cf: 90                            nop
// 2d0: 49 ff c7                      incq    %r15
// 2d3: 4c 39 fb                      cmpq    %r15, %rbx
// 2d6: 0f 84 23 ff ff ff             je      0x1ff <_JIT_ENTRY+0x1ff>
// 2dc: 48 8b 04 24                   movq    (%rsp), %rax
// 2e0: 4e 8b 34 f8                   movq    (%rax,%r15,8), %r14
// 2e4: 49 8b 06                      movq    (%r14), %rax
// 2e7: 48 85 c0                      testq   %rax, %rax
// 2ea: 7e 14                         jle     0x300 <_JIT_ENTRY+0x300>
// 2ec: 85 c0                         testl   %eax, %eax
// 2ee: 78 e0                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 2f0: eb 33                         jmp     0x325 <_JIT_ENTRY+0x325>
// 2f2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 300: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000302:  R_X86_64_64  .rodata.str1.1
// 30a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 30f: 4c 89 f2                      movq    %r14, %rdx
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_NegativeRefcount
// 31c: ff d0                         callq   *%rax
// 31e: 49 8b 06                      movq    (%r14), %rax
// 321: 85 c0                         testl   %eax, %eax
// 323: 78 ab                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32f: ff d0                         callq   *%rax
// 331: 49 ff 0e                      decq    (%r14)
// 334: 75 9a                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 336: 4c 89 f7                      movq    %r14, %rdi
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_Dealloc
// 343: ff d0                         callq   *%rax
// 345: eb 89                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 347: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000349:  R_X86_64_64  _JIT_CONTINUE
// 351: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 356: 4c 89 f6                      movq    %r14, %rsi
// 359: 48 89 da                      movq    %rbx, %rdx
// 35c: 48 83 c4 28                   addq    $0x28, %rsp
// 360: 5b                            popq    %rbx
// 361: 41 5c                         popq    %r12
// 363: 41 5d                         popq    %r13
// 365: 41 5e                         popq    %r14
// 367: 41 5f                         popq    %r15
// 369: 5d                            popq    %rbp
// 36a: ff e0                         jmpq    *%rax
// 36c: 
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[877] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xf9, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x54, 0x24, 0x10, 0x49, 0x89, 0x14, 0x0a, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf9, 0x4c, 0x63, 0xc1, 0x4b, 0x8d, 0x0c, 0xc2, 0x89, 0xfa, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x4d, 0x01, 0xc5, 0x4b, 0x8b, 0x14, 0xea, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf9, 0x49, 0x63, 0xe9, 0x4c, 0x01, 0xc5, 0x44, 0x8d, 0x77, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x44, 0x0f, 0x44, 0xf7, 0x4d, 0x8b, 0x24, 0xea, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x31, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x48, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe5, 0x00, 0x00, 0x00, 0x48, 0x85, 0xd2, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8d, 0x24, 0xeb, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x4e, 0x8d, 0x34, 0xeb, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xff, 0xeb, 0x0d, 0x90, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x23, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8b, 0x34, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 04 24                   movq    %rax, (%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 14 24                   movq    (%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 0f 84 9f 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c1                      movzwl  %cx, %eax
// 108: 48 89 c6                      movq    %rax, %rsi
// 10b: 48 f7 de                      negq    %rsi
// 10e: 0f b7 f9                      movzwl  %cx, %edi
// 111: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 119: 48 f7 d9                      negq    %rcx
// 11c: 4c 8b 54 24 10                movq    0x10(%rsp), %r10
// 121: 49 89 14 0a                   movq    %rdx, (%r10,%rcx)
// 125: b9 01 00 00 00                movl    $0x1, %ecx
// 12a: 29 f9                         subl    %edi, %ecx
// 12c: 4c 63 c1                      movslq  %ecx, %r8
// 12f: 4b 8d 0c c2                   leaq    (%r10,%r8,8), %rcx
// 133: 89 fa                         movl    %edi, %edx
// 135: f7 d2                         notl    %edx
// 137: 4c 63 ea                      movslq  %edx, %r13
// 13a: 4d 01 c5                      addq    %r8, %r13
// 13d: 4b 8b 14 ea                   movq    (%r10,%r13,8), %rdx
// 141: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 147: 41 29 f9                      subl    %edi, %r9d
// 14a: 49 63 e9                      movslq  %r9d, %rbp
// 14d: 4c 01 c5                      addq    %r8, %rbp
// 150: 44 8d 77 01                   leal    0x1(%rdi), %r14d
// 154: 48 85 d2                      testq   %rdx, %rdx
// 157: 48 f7 d0                      notq    %rax
// 15a: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 15e: 44 0f 44 f7                   cmovel  %edi, %r14d
// 162: 4d 8b 24 ea                   movq    (%r10,%rbp,8), %r12
// 166: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000168:  R_X86_64_64  PyMethodDescr_Type
// 170: 49 39 74 24 08                cmpq    %rsi, 0x8(%r12)
// 175: 75 21                         jne     0x198 <_JIT_ENTRY+0x198>
// 177: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 17c: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 184: 75 12                         jne     0x198 <_JIT_ENTRY+0x198>
// 186: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 18a: 48 8b 3e                      movq    (%rsi), %rdi
// 18d: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 191: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 196: 74 31                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 198: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19d: 48 29 c1                      subq    %rax, %rcx
// 1a0: 48 83 c1 b8                   addq    $-0x48, %rcx
// 1a4: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1a8: 89 48 40                      movl    %ecx, 0x40(%rax)
// 1ab: 48 8b 00                      movq    (%rax), %rax
// 1ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b0:  R_X86_64_64  _JIT_TARGET
// 1b8: 89 c9                         movl    %ecx, %ecx
// 1ba: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1be: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c4: e9 e7 00 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 1c9: 48 85 d2                      testq   %rdx, %rdx
// 1cc: 0f 94 c3                      sete    %bl
// 1cf: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 1d3: 48 89 34 24                   movq    %rsi, (%rsp)
// 1d7: 48 83 c6 08                   addq    $0x8, %rsi
// 1db: 48 63 d0                      movslq  %eax, %rdx
// 1de: 31 c9                         xorl    %ecx, %ecx
// 1e0: 41 ff 50 08                   callq   *0x8(%r8)
// 1e4: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 66 85 c0                      testw   %ax, %ax
// 1f6: 0f 94 c0                      sete    %al
// 1f9: 84 c3                         testb   %al, %bl
// 1fb: 0f 84 be 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7f 22                         jg      0x22c <_JIT_ENTRY+0x22c>
// 20a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020c:  R_X86_64_64  .rodata.str1.1
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_NegativeRefcount
// 21e: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 223: 4c 89 e2                      movq    %r12, %rdx
// 226: ff d0                         callq   *%rax
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 85 c0                         testl   %eax, %eax
// 22e: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 233: 78 21                         js      0x256 <_JIT_ENTRY+0x256>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23f: ff d0                         callq   *%rax
// 241: 49 ff 0c 24                   decq    (%r12)
// 245: 75 0f                         jne     0x256 <_JIT_ENTRY+0x256>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_Dealloc
// 251: 4c 89 e7                      movq    %r12, %rdi
// 254: ff d0                         callq   *%rax
// 256: 4c 8d 24 eb                   leaq    (%rbx,%rbp,8), %r12
// 25a: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 25f: 48 85 c0                      testq   %rax, %rax
// 262: 74 36                         je      0x29a <_JIT_ENTRY+0x29a>
// 264: 4e 8d 34 eb                   leaq    (%rbx,%r13,8), %r14
// 268: 49 89 04 24                   movq    %rax, (%r12)
// 26c: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 271: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 275: 48 8b 00                      movq    (%rax), %rax
// 278: 84 c0                         testb   %al, %al
// 27a: 0f 84 d7 00 00 00             je      0x357 <_JIT_ENTRY+0x357>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_HandlePending
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 85 c0                         testl   %eax, %eax
// 291: 0f 84 c0 00 00 00             je      0x357 <_JIT_ENTRY+0x357>
// 297: 4d 89 f4                      movq    %r14, %r12
// 29a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 29f: 49 29 c4                      subq    %rax, %r12
// 2a2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2aa: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: 48 83 c4 28                   addq    $0x28, %rsp
// 2b4: 5b                            popq    %rbx
// 2b5: 41 5c                         popq    %r12
// 2b7: 41 5d                         popq    %r13
// 2b9: 41 5e                         popq    %r14
// 2bb: 41 5f                         popq    %r15
// 2bd: 5d                            popq    %rbp
// 2be: c3                            retq
// 2bf: 41 83 fe 02                   cmpl    $0x2, %r14d
// 2c3: bb 01 00 00 00                movl    $0x1, %ebx
// 2c8: 41 0f 43 de                   cmovael %r14d, %ebx
// 2cc: 45 31 ff                      xorl    %r15d, %r15d
// 2cf: eb 1b                         jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 2d1: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 2e0: 49 ff c7                      incq    %r15
// 2e3: 4c 39 fb                      cmpq    %r15, %rbx
// 2e6: 0f 84 15 ff ff ff             je      0x201 <_JIT_ENTRY+0x201>
// 2ec: 48 8b 04 24                   movq    (%rsp), %rax
// 2f0: 4e 8b 34 f8                   movq    (%rax,%r15,8), %r14
// 2f4: 49 8b 06                      movq    (%r14), %rax
// 2f7: 48 85 c0                      testq   %rax, %rax
// 2fa: 7e 14                         jle     0x310 <_JIT_ENTRY+0x310>
// 2fc: 85 c0                         testl   %eax, %eax
// 2fe: 78 e0                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 300: eb 33                         jmp     0x335 <_JIT_ENTRY+0x335>
// 302: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 310: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000312:  R_X86_64_64  .rodata.str1.1
// 31a: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 31f: 4c 89 f2                      movq    %r14, %rdx
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_NegativeRefcount
// 32c: ff d0                         callq   *%rax
// 32e: 49 8b 06                      movq    (%r14), %rax
// 331: 85 c0                         testl   %eax, %eax
// 333: 78 ab                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33f: ff d0                         callq   *%rax
// 341: 49 ff 0e                      decq    (%r14)
// 344: 75 9a                         jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 346: 4c 89 f7                      movq    %r14, %rdi
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _Py_Dealloc
// 353: ff d0                         callq   *%rax
// 355: eb 89                         jmp     0x2e0 <_JIT_ENTRY+0x2e0>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _JIT_CONTINUE
// 361: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 366: 4c 89 f6                      movq    %r14, %rsi
// 369: 48 89 da                      movq    %rbx, %rdx
// 36c: 48 83 c4 28                   addq    $0x28, %rsp
// 370: 5b                            popq    %rbx
// 371: 41 5c                         popq    %r12
// 373: 41 5d                         popq    %r13
// 375: 41 5e                         popq    %r14
// 377: 41 5f                         popq    %r15
// 379: 5d                            popq    %rbp
// 37a: ff e0                         jmpq    *%rax
// 37c: 
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[893] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9f, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xf9, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x54, 0x24, 0x10, 0x49, 0x89, 0x14, 0x0a, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf9, 0x4c, 0x63, 0xc1, 0x4b, 0x8d, 0x0c, 0xc2, 0x89, 0xfa, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x4d, 0x01, 0xc5, 0x4b, 0x8b, 0x14, 0xea, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x29, 0xf9, 0x49, 0x63, 0xe9, 0x4c, 0x01, 0xc5, 0x44, 0x8d, 0x77, 0x01, 0x48, 0x85, 0xd2, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x44, 0x0f, 0x44, 0xf7, 0x4d, 0x8b, 0x24, 0xea, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x74, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x12, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x8b, 0x3e, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x31, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x48, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x85, 0xd2, 0x0f, 0x94, 0xc3, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x34, 0x24, 0x48, 0x83, 0xc6, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x84, 0xc3, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8d, 0x24, 0xeb, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x4e, 0x8d, 0x34, 0xeb, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xde, 0x45, 0x31, 0xff, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x0f, 0x84, 0x15, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x4e, 0x8b, 0x34, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 a8 01 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 48 89 c6                      movq    %rax, %rsi
// 10c: 48 f7 de                      negq    %rsi
// 10f: 0f b7 c9                      movzwl  %cx, %ecx
// 112: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 11a: 48 f7 da                      negq    %rdx
// 11d: 4c 8b 4c 24 10                movq    0x10(%rsp), %r9
// 122: 49 89 3c 11                   movq    %rdi, (%r9,%rdx)
// 126: ba 01 00 00 00                movl    $0x1, %edx
// 12b: 29 ca                         subl    %ecx, %edx
// 12d: 48 63 d2                      movslq  %edx, %rdx
// 130: 89 cf                         movl    %ecx, %edi
// 132: f7 d7                         notl    %edi
// 134: 4c 63 f7                      movslq  %edi, %r14
// 137: 49 01 d6                      addq    %rdx, %r14
// 13a: 31 ff                         xorl    %edi, %edi
// 13c: 66 85 c0                      testw   %ax, %ax
// 13f: 40 0f 94 c7                   sete    %dil
// 143: 45 31 c0                      xorl    %r8d, %r8d
// 146: 66 83 f8 01                   cmpw    $0x1, %ax
// 14a: 41 0f 94 c0                   sete    %r8b
// 14e: 4b 83 3c f1 00                cmpq    $0x0, (%r9,%r14,8)
// 153: 48 f7 d0                      notq    %rax
// 156: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 15a: 4d 8d 24 d1                   leaq    (%r9,%rdx,8), %r12
// 15e: 41 0f 44 f8                   cmovel  %r8d, %edi
// 162: 40 80 ff 01                   cmpb    $0x1, %dil
// 166: 0f 85 e0 00 00 00             jne     0x24c <_JIT_ENTRY+0x24c>
// 16c: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 171: 29 ce                         subl    %ecx, %esi
// 173: 48 63 de                      movslq  %esi, %rbx
// 176: 48 01 d3                      addq    %rdx, %rbx
// 179: 4d 8b 2c d9                   movq    (%r9,%rbx,8), %r13
// 17d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017f:  R_X86_64_64  PyMethodDescr_Type
// 187: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 18b: 0f 85 bb 00 00 00             jne     0x24c <_JIT_ENTRY+0x24c>
// 191: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 195: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 199: 49 3b 45 10                   cmpq    0x10(%r13), %rax
// 19d: 0f 85 a9 00 00 00             jne     0x24c <_JIT_ENTRY+0x24c>
// 1a3: 49 8b 45 28                   movq    0x28(%r13), %rax
// 1a7: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 1ab: 0f 85 9b 00 00 00             jne     0x24c <_JIT_ENTRY+0x24c>
// 1b1: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 1b5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1ba: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 1bd: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 1c0: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 0f 8e b0 00 00 00             jle     0x27b <_JIT_ENTRY+0x27b>
// 1cb: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1d0: 4c 8d 24 d8                   leaq    (%rax,%rbx,8), %r12
// 1d4: 48 89 ef                      movq    %rbp, %rdi
// 1d7: 31 f6                         xorl    %esi, %esi
// 1d9: 41 ff d0                      callq   *%r8
// 1dc: 49 89 c7                      movq    %rax, %r15
// 1df: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1e4: ff 43 2c                      incl    0x2c(%rbx)
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  .text+0x2f0
// 1f1: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 1f6: 48 89 ee                      movq    %rbp, %rsi
// 1f9: 48 89 c5                      movq    %rax, %rbp
// 1fc: ff d0                         callq   *%rax
// 1fe: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 203: 4c 89 ee                      movq    %r13, %rsi
// 206: ff d5                         callq   *%rbp
// 208: 4d 85 ff                      testq   %r15, %r15
// 20b: 0f 84 93 00 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 211: 4c 89 f8                      movq    %r15, %rax
// 214: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 219: 4e 8d 3c f1                   leaq    (%rcx,%r14,8), %r15
// 21d: 49 89 04 24                   movq    %rax, (%r12)
// 221: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 225: 48 8b 00                      movq    (%rax), %rax
// 228: 84 c0                         testb   %al, %al
// 22a: 0f 84 99 00 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_HandlePending
// 23a: 48 89 df                      movq    %rbx, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 85 c0                         testl   %eax, %eax
// 241: 0f 84 82 00 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 247: 4d 89 fc                      movq    %r15, %r12
// 24a: eb 58                         jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 24c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 251: 49 29 c4                      subq    %rax, %r12
// 254: 49 83 c4 b8                   addq    $-0x48, %r12
// 258: 49 c1 ec 03                   shrq    $0x3, %r12
// 25c: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 260: 48 8b 00                      movq    (%rax), %rax
// 263: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000265:  R_X86_64_64  _JIT_TARGET
// 26d: 89 c9                         movl    %ecx, %ecx
// 26f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 273: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 279: eb 3f                         jmp     0x2ba <_JIT_ENTRY+0x2ba>
// 27b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1+0x39
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_CheckRecursiveCall
// 28f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 294: 4d 89 c7                      movq    %r8, %r15
// 297: ff d0                         callq   *%rax
// 299: 4d 89 f8                      movq    %r15, %r8
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 0f 84 27 ff ff ff             je      0x1cb <_JIT_ENTRY+0x1cb>
// 2a4: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 2a9: 49 29 c4                      subq    %rax, %r12
// 2ac: 49 83 c4 b8                   addq    $-0x48, %r12
// 2b0: 49 c1 ec 03                   shrq    $0x3, %r12
// 2b4: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2b8: 31 c0                         xorl    %eax, %eax
// 2ba: 48 83 c4 28                   addq    $0x28, %rsp
// 2be: 5b                            popq    %rbx
// 2bf: 41 5c                         popq    %r12
// 2c1: 41 5d                         popq    %r13
// 2c3: 41 5e                         popq    %r14
// 2c5: 41 5f                         popq    %r15
// 2c7: 5d                            popq    %rbp
// 2c8: c3                            retq
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _JIT_CONTINUE
// 2d3: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 2d8: 4c 89 fe                      movq    %r15, %rsi
// 2db: 48 89 da                      movq    %rbx, %rdx
// 2de: 48 83 c4 28                   addq    $0x28, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: ff e0                         jmpq    *%rax
// 2ee: 66 90                         nop
// 
// 00000000000002f0 <Py_DECREF>:
// 2f0: 53                            pushq   %rbx
// 2f1: 48 89 f3                      movq    %rsi, %rbx
// 2f4: 48 8b 06                      movq    (%rsi), %rax
// 2f7: 48 85 c0                      testq   %rax, %rax
// 2fa: 7e 06                         jle     0x302 <Py_DECREF+0x12>
// 2fc: 85 c0                         testl   %eax, %eax
// 2fe: 79 24                         jns     0x324 <Py_DECREF+0x34>
// 300: eb 33                         jmp     0x335 <Py_DECREF+0x45>
// 302: 89 fe                         movl    %edi, %esi
// 304: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000306:  R_X86_64_64  .rodata.str1.1
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_NegativeRefcount
// 318: 48 89 da                      movq    %rbx, %rdx
// 31b: ff d0                         callq   *%rax
// 31d: 48 8b 03                      movq    (%rbx), %rax
// 320: 85 c0                         testl   %eax, %eax
// 322: 78 11                         js      0x335 <Py_DECREF+0x45>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32e: ff d0                         callq   *%rax
// 330: 48 ff 0b                      decq    (%rbx)
// 333: 74 02                         je      0x337 <Py_DECREF+0x47>
// 335: 5b                            popq    %rbx
// 336: c3                            retq
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_Dealloc
// 341: 48 89 df                      movq    %rbx, %rdi
// 344: 5b                            popq    %rbx
// 345: ff e0                         jmpq    *%rax
// 347: 
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[840] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xa8, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x3c, 0x11, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf1, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x24, 0xd1, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xe0, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xde, 0x48, 0x01, 0xd3, 0x4d, 0x8b, 0x2c, 0xd9, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xbb, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x45, 0x08, 0x49, 0x3b, 0x45, 0x10, 0x0f, 0x85, 0xa9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x9b, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8d, 0x24, 0xd8, 0x48, 0x89, 0xef, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0xff, 0x43, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0x89, 0xc5, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4e, 0x8d, 0x3c, 0xf1, 0x49, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0xeb, 0x58, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x3f, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4d, 0x89, 0xc7, 0xff, 0xd0, 0x4d, 0x89, 0xf8, 0x85, 0xc0, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x90, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x2f0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 ae 01 00 00             je      0x2aa <_JIT_ENTRY+0x2aa>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 48 89 c6                      movq    %rax, %rsi
// 10c: 48 f7 de                      negq    %rsi
// 10f: 0f b7 c9                      movzwl  %cx, %ecx
// 112: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 11a: 48 f7 da                      negq    %rdx
// 11d: 4c 8b 4c 24 18                movq    0x18(%rsp), %r9
// 122: 49 89 3c 11                   movq    %rdi, (%r9,%rdx)
// 126: ba 01 00 00 00                movl    $0x1, %edx
// 12b: 29 ca                         subl    %ecx, %edx
// 12d: 48 63 d2                      movslq  %edx, %rdx
// 130: 89 cf                         movl    %ecx, %edi
// 132: f7 d7                         notl    %edi
// 134: 4c 63 f7                      movslq  %edi, %r14
// 137: 49 01 d6                      addq    %rdx, %r14
// 13a: 31 ff                         xorl    %edi, %edi
// 13c: 66 83 f8 01                   cmpw    $0x1, %ax
// 140: 40 0f 94 c7                   sete    %dil
// 144: 45 31 c0                      xorl    %r8d, %r8d
// 147: 66 83 f8 02                   cmpw    $0x2, %ax
// 14b: 41 0f 94 c0                   sete    %r8b
// 14f: 4b 83 3c f1 00                cmpq    $0x0, (%r9,%r14,8)
// 154: 48 f7 d0                      notq    %rax
// 157: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 15b: 4d 8d 24 d1                   leaq    (%r9,%rdx,8), %r12
// 15f: 41 0f 44 f8                   cmovel  %r8d, %edi
// 163: 40 80 ff 01                   cmpb    $0x1, %dil
// 167: 75 39                         jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 169: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 16e: 29 ce                         subl    %ecx, %esi
// 170: 48 63 de                      movslq  %esi, %rbx
// 173: 48 01 d3                      addq    %rdx, %rbx
// 176: 4d 8b 2c d9                   movq    (%r9,%rbx,8), %r13
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  PyMethodDescr_Type
// 184: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 188: 75 18                         jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 18a: 49 8b 4d 28                   movq    0x28(%r13), %rcx
// 18e: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 192: 75 0e                         jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 194: 49 8b 2c c4                   movq    (%r12,%rax,8), %rbp
// 198: 48 8b 55 08                   movq    0x8(%rbp), %rdx
// 19c: 49 3b 55 10                   cmpq    0x10(%r13), %rdx
// 1a0: 74 32                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 1a2: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1a7: 49 29 c4                      subq    %rax, %r12
// 1aa: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ae: 49 c1 ec 03                   shrq    $0x3, %r12
// 1b2: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b6: 48 8b 00                      movq    (%rax), %rax
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  _JIT_TARGET
// 1c3: 89 c9                         movl    %ecx, %ecx
// 1c5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1c9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1cf: e9 ec 00 00 00                jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 1d4: 4d 8b 7c c4 08                movq    0x8(%r12,%rax,8), %r15
// 1d9: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 1dd: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1e2: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 1e5: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 1e8: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 0f 8e 84 00 00 00             jle     0x277 <_JIT_ENTRY+0x277>
// 1f3: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 1f8: 4c 8d 24 d8                   leaq    (%rax,%rbx,8), %r12
// 1fc: 48 89 ef                      movq    %rbp, %rdi
// 1ff: 4c 89 fe                      movq    %r15, %rsi
// 202: 41 ff d0                      callq   *%r8
// 205: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 20a: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 20f: ff 43 2c                      incl    0x2c(%rbx)
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  .text+0x300
// 21c: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 221: 48 89 ee                      movq    %rbp, %rsi
// 224: 48 89 c5                      movq    %rax, %rbp
// 227: ff d0                         callq   *%rax
// 229: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 22e: 4c 89 fe                      movq    %r15, %rsi
// 231: ff d5                         callq   *%rbp
// 233: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 238: 4c 89 ee                      movq    %r13, %rsi
// 23b: ff d5                         callq   *%rbp
// 23d: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 242: 48 85 c9                      testq   %rcx, %rcx
// 245: 74 63                         je      0x2aa <_JIT_ENTRY+0x2aa>
// 247: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 24c: 4e 8d 3c f0                   leaq    (%rax,%r14,8), %r15
// 250: 49 89 0c 24                   movq    %rcx, (%r12)
// 254: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 258: 48 8b 00                      movq    (%rax), %rax
// 25b: 84 c0                         testb   %al, %al
// 25d: 74 70                         je      0x2cf <_JIT_ENTRY+0x2cf>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_HandlePending
// 269: 48 89 df                      movq    %rbx, %rdi
// 26c: ff d0                         callq   *%rax
// 26e: 85 c0                         testl   %eax, %eax
// 270: 74 5d                         je      0x2cf <_JIT_ENTRY+0x2cf>
// 272: 4d 89 fc                      movq    %r15, %r12
// 275: eb 33                         jmp     0x2aa <_JIT_ENTRY+0x2aa>
// 277: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 27c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000027e:  R_X86_64_64  .rodata.str1.1+0x39
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_CheckRecursiveCall
// 290: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 295: 4d 89 c7                      movq    %r8, %r15
// 298: ff d0                         callq   *%rax
// 29a: 4d 89 f8                      movq    %r15, %r8
// 29d: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 0f 84 49 ff ff ff             je      0x1f3 <_JIT_ENTRY+0x1f3>
// 2aa: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2af: 49 29 c4                      subq    %rax, %r12
// 2b2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2b6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ba: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2be: 31 c0                         xorl    %eax, %eax
// 2c0: 48 83 c4 28                   addq    $0x28, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: c3                            retq
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _JIT_CONTINUE
// 2d9: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// 2de: 4c 89 fe                      movq    %r15, %rsi
// 2e1: 48 89 da                      movq    %rbx, %rdx
// 2e4: 48 83 c4 28                   addq    $0x28, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: ff e0                         jmpq    *%rax
// 2f4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 
// 0000000000000300 <Py_DECREF>:
// 300: 53                            pushq   %rbx
// 301: 48 89 f3                      movq    %rsi, %rbx
// 304: 48 8b 06                      movq    (%rsi), %rax
// 307: 48 85 c0                      testq   %rax, %rax
// 30a: 7e 06                         jle     0x312 <Py_DECREF+0x12>
// 30c: 85 c0                         testl   %eax, %eax
// 30e: 79 24                         jns     0x334 <Py_DECREF+0x34>
// 310: eb 33                         jmp     0x345 <Py_DECREF+0x45>
// 312: 89 fe                         movl    %edi, %esi
// 314: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000316:  R_X86_64_64  .rodata.str1.1
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_NegativeRefcount
// 328: 48 89 da                      movq    %rbx, %rdx
// 32b: ff d0                         callq   *%rax
// 32d: 48 8b 03                      movq    (%rbx), %rax
// 330: 85 c0                         testl   %eax, %eax
// 332: 78 11                         js      0x345 <Py_DECREF+0x45>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 48 ff 0b                      decq    (%rbx)
// 343: 74 02                         je      0x347 <Py_DECREF+0x47>
// 345: 5b                            popq    %rbx
// 346: c3                            retq
// 347: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000349:  R_X86_64_64  _Py_Dealloc
// 351: 48 89 df                      movq    %rbx, %rdi
// 354: 5b                            popq    %rbx
// 355: ff e0                         jmpq    *%rax
// 357: 
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O_code_body[856] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xae, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x4c, 0x24, 0x18, 0x49, 0x89, 0x3c, 0x11, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x89, 0xcf, 0xf7, 0xd7, 0x4c, 0x63, 0xf7, 0x49, 0x01, 0xd6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc0, 0x4b, 0x83, 0x3c, 0xf1, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8d, 0x24, 0xd1, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x75, 0x39, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xde, 0x48, 0x01, 0xd3, 0x4d, 0x8b, 0x2c, 0xd9, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x75, 0x18, 0x49, 0x8b, 0x4d, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0e, 0x49, 0x8b, 0x2c, 0xc4, 0x48, 0x8b, 0x55, 0x08, 0x49, 0x3b, 0x55, 0x10, 0x74, 0x32, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xec, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x7c, 0xc4, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4c, 0x8d, 0x24, 0xd8, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0xff, 0x43, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0x89, 0xc5, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x63, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4e, 0x8d, 0x3c, 0xf0, 0x49, 0x89, 0x0c, 0x24, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5d, 0x4d, 0x89, 0xfc, 0xeb, 0x33, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x89, 0xc7, 0xff, 0xd0, 0x4d, 0x89, 0xf8, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x84, 0x49, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x300},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _BUILD_STRINGplus_CALL_STR_1
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_STR_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 9e 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 0f b7 c9                      movzwl  %cx, %ecx
// 10c: 48 c1 e1 03                   shlq    $0x3, %rcx
// 110: 48 f7 d9                      negq    %rcx
// 113: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 118: 49 89 14 0f                   movq    %rdx, (%r15,%rcx)
// 11c: b9 01 00 00 00                movl    $0x1, %ecx
// 121: 29 c1                         subl    %eax, %ecx
// 123: 48 63 c9                      movslq  %ecx, %rcx
// 126: 89 c2                         movl    %eax, %edx
// 128: f7 d2                         notl    %edx
// 12a: 4c 63 f2                      movslq  %edx, %r14
// 12d: 49 01 ce                      addq    %rcx, %r14
// 130: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 135: 75 21                         jne     0x158 <_JIT_ENTRY+0x158>
// 137: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 13c: 29 c2                         subl    %eax, %edx
// 13e: 48 63 c2                      movslq  %edx, %rax
// 141: 48 01 c8                      addq    %rcx, %rax
// 144: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 148: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000014a:  R_X86_64_64  PyUnicode_Type
// 152: 4d 39 2c 24                   cmpq    %r13, (%r12)
// 156: 74 35                         je      0x18d <_JIT_ENTRY+0x18d>
// 158: 49 8d 04 cf                   leaq    (%r15,%rcx,8), %rax
// 15c: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 161: 48 29 c8                      subq    %rcx, %rax
// 164: 48 83 c0 b8                   addq    $-0x48, %rax
// 168: 48 c1 e8 03                   shrq    $0x3, %rax
// 16c: 89 41 40                      movl    %eax, 0x40(%rcx)
// 16f: 48 8b 01                      movq    (%rcx), %rax
// 172: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000174:  R_X86_64_64  _JIT_TARGET
// 17c: 89 c9                         movl    %ecx, %ecx
// 17e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 182: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 188: e9 23 01 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: ba 01 00 00 00                movl    $0x1, %edx
// 19f: 29 ca                         subl    %ecx, %edx
// 1a1: 48 63 ca                      movslq  %edx, %rcx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 29 c1                      subq    %rax, %rcx
// 1aa: 49 8b 2c cf                   movq    (%r15,%rcx,8), %rbp
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  PyObject_Str
// 1b8: 48 89 ef                      movq    %rbp, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 48 89 c3                      movq    %rax, %rbx
// 1c0: 48 8b 45 00                   movq    (%rbp), %rax
// 1c4: 48 85 c0                      testq   %rax, %rax
// 1c7: 7f 22                         jg      0x1eb <_JIT_ENTRY+0x1eb>
// 1c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cb:  R_X86_64_64  .rodata.str1.1
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_NegativeRefcount
// 1dd: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 1e2: 48 89 ea                      movq    %rbp, %rdx
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 45 00                   movq    (%rbp), %rax
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 78 21                         js      0x210 <_JIT_ENTRY+0x210>
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 ff 4d 00                   decq    (%rbp)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 48 89 ef                      movq    %rbp, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 49 8b 45 00                   movq    (%r13), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7f 22                         jg      0x23b <_JIT_ENTRY+0x23b>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 232: 4c 89 ea                      movq    %r13, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 45 00                   movq    (%r13), %rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 78 28                         js      0x267 <_JIT_ENTRY+0x267>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 249: ff d0                         callq   *%rax
// 24b: 49 ff 4d 00                   decq    (%r13)
// 24f: 75 16                         jne     0x267 <_JIT_ENTRY+0x267>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  PyUnicode_Type
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: ff d0                         callq   *%rax
// 267: 48 85 db                      testq   %rbx, %rbx
// 26a: 74 2e                         je      0x29a <_JIT_ENTRY+0x29a>
// 26c: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 270: 49 89 1c 24                   movq    %rbx, (%r12)
// 274: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 279: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 27d: 48 8b 00                      movq    (%rax), %rax
// 280: 84 c0                         testb   %al, %al
// 282: 74 3b                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_HandlePending
// 28e: 48 89 df                      movq    %rbx, %rdi
// 291: ff d0                         callq   *%rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 74 28                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 297: 4d 89 f4                      movq    %r14, %r12
// 29a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 29f: 49 29 c4                      subq    %rax, %r12
// 2a2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2aa: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: 48 83 c4 28                   addq    $0x28, %rsp
// 2b4: 5b                            popq    %rbx
// 2b5: 41 5c                         popq    %r12
// 2b7: 41 5d                         popq    %r13
// 2b9: 41 5e                         popq    %r14
// 2bb: 41 5f                         popq    %r15
// 2bd: 5d                            popq    %rbp
// 2be: c3                            retq
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ce: 4c 89 f6                      movq    %r14, %rsi
// 2d1: 48 89 da                      movq    %rbx, %rdx
// 2d4: 48 83 c4 28                   addq    $0x28, %rsp
// 2d8: 5b                            popq    %rbx
// 2d9: 41 5c                         popq    %r12
// 2db: 41 5d                         popq    %r13
// 2dd: 41 5e                         popq    %r14
// 2df: 41 5f                         popq    %r15
// 2e1: 5d                            popq    %rbp
// 2e2: ff e0                         jmpq    *%rax
// 2e4: 
static const unsigned char _BUILD_STRINGplus_CALL_STR_1_code_body[741] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x0f, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x49, 0x01, 0xce, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x75, 0x21, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x2c, 0x24, 0x74, 0x35, 0x49, 0x8d, 0x04, 0xcf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x2c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x2e, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x89, 0x1c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_STR_1_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_STR_1_data_holes[1];

// _BUILD_STRINGplus_CALL_TUPLE_1
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_TUPLE_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 9e 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 0f b7 c9                      movzwl  %cx, %ecx
// 10c: 48 c1 e1 03                   shlq    $0x3, %rcx
// 110: 48 f7 d9                      negq    %rcx
// 113: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 118: 49 89 14 0f                   movq    %rdx, (%r15,%rcx)
// 11c: b9 01 00 00 00                movl    $0x1, %ecx
// 121: 29 c1                         subl    %eax, %ecx
// 123: 48 63 c9                      movslq  %ecx, %rcx
// 126: 89 c2                         movl    %eax, %edx
// 128: f7 d2                         notl    %edx
// 12a: 4c 63 f2                      movslq  %edx, %r14
// 12d: 49 01 ce                      addq    %rcx, %r14
// 130: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 135: 75 21                         jne     0x158 <_JIT_ENTRY+0x158>
// 137: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 13c: 29 c2                         subl    %eax, %edx
// 13e: 48 63 c2                      movslq  %edx, %rax
// 141: 48 01 c8                      addq    %rcx, %rax
// 144: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 148: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000014a:  R_X86_64_64  PyTuple_Type
// 152: 4d 39 2c 24                   cmpq    %r13, (%r12)
// 156: 74 35                         je      0x18d <_JIT_ENTRY+0x18d>
// 158: 49 8d 04 cf                   leaq    (%r15,%rcx,8), %rax
// 15c: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 161: 48 29 c8                      subq    %rcx, %rax
// 164: 48 83 c0 b8                   addq    $-0x48, %rax
// 168: 48 c1 e8 03                   shrq    $0x3, %rax
// 16c: 89 41 40                      movl    %eax, 0x40(%rcx)
// 16f: 48 8b 01                      movq    (%rcx), %rax
// 172: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000174:  R_X86_64_64  _JIT_TARGET
// 17c: 89 c9                         movl    %ecx, %ecx
// 17e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 182: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 188: e9 23 01 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c8                      movzwl  %ax, %ecx
// 19a: ba 01 00 00 00                movl    $0x1, %edx
// 19f: 29 ca                         subl    %ecx, %edx
// 1a1: 48 63 ca                      movslq  %edx, %rcx
// 1a4: 0f b7 c0                      movzwl  %ax, %eax
// 1a7: 48 29 c1                      subq    %rax, %rcx
// 1aa: 49 8b 2c cf                   movq    (%r15,%rcx,8), %rbp
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  PySequence_Tuple
// 1b8: 48 89 ef                      movq    %rbp, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 48 89 c3                      movq    %rax, %rbx
// 1c0: 48 8b 45 00                   movq    (%rbp), %rax
// 1c4: 48 85 c0                      testq   %rax, %rax
// 1c7: 7f 22                         jg      0x1eb <_JIT_ENTRY+0x1eb>
// 1c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cb:  R_X86_64_64  .rodata.str1.1
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_NegativeRefcount
// 1dd: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 1e2: 48 89 ea                      movq    %rbp, %rdx
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 8b 45 00                   movq    (%rbp), %rax
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 78 21                         js      0x210 <_JIT_ENTRY+0x210>
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 ff 4d 00                   decq    (%rbp)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 48 89 ef                      movq    %rbp, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 49 8b 45 00                   movq    (%r13), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7f 22                         jg      0x23b <_JIT_ENTRY+0x23b>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 232: 4c 89 ea                      movq    %r13, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 45 00                   movq    (%r13), %rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 78 28                         js      0x267 <_JIT_ENTRY+0x267>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 249: ff d0                         callq   *%rax
// 24b: 49 ff 4d 00                   decq    (%r13)
// 24f: 75 16                         jne     0x267 <_JIT_ENTRY+0x267>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  PyTuple_Type
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: ff d0                         callq   *%rax
// 267: 48 85 db                      testq   %rbx, %rbx
// 26a: 74 2e                         je      0x29a <_JIT_ENTRY+0x29a>
// 26c: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 270: 49 89 1c 24                   movq    %rbx, (%r12)
// 274: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 279: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 27d: 48 8b 00                      movq    (%rax), %rax
// 280: 84 c0                         testb   %al, %al
// 282: 74 3b                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_HandlePending
// 28e: 48 89 df                      movq    %rbx, %rdi
// 291: ff d0                         callq   *%rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 74 28                         je      0x2bf <_JIT_ENTRY+0x2bf>
// 297: 4d 89 f4                      movq    %r14, %r12
// 29a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 29f: 49 29 c4                      subq    %rax, %r12
// 2a2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2aa: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: 48 83 c4 28                   addq    $0x28, %rsp
// 2b4: 5b                            popq    %rbx
// 2b5: 41 5c                         popq    %r12
// 2b7: 41 5d                         popq    %r13
// 2b9: 41 5e                         popq    %r14
// 2bb: 41 5f                         popq    %r15
// 2bd: 5d                            popq    %rbp
// 2be: c3                            retq
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ce: 4c 89 f6                      movq    %r14, %rsi
// 2d1: 48 89 da                      movq    %rbx, %rdx
// 2d4: 48 83 c4 28                   addq    $0x28, %rsp
// 2d8: 5b                            popq    %rbx
// 2d9: 41 5c                         popq    %r12
// 2db: 41 5d                         popq    %r13
// 2dd: 41 5e                         popq    %r14
// 2df: 41 5f                         popq    %r15
// 2e1: 5d                            popq    %rbp
// 2e2: ff e0                         jmpq    *%rax
// 2e4: 
static const unsigned char _BUILD_STRINGplus_CALL_TUPLE_1_code_body[741] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x0f, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x49, 0x01, 0xce, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x75, 0x21, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x2c, 0x24, 0x74, 0x35, 0x49, 0x8d, 0x04, 0xcf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x2c, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x74, 0x2e, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x89, 0x1c, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x28, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_TUPLE_1_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_TUPLE_1_data_holes[1];

// _BUILD_STRINGplus_CALL_TYPE_1
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CALL_TYPE_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// f3: 48 85 c9                      testq   %rcx, %rcx
// f6: 0f 84 9e 00 00 00             je      0x19a <_JIT_ENTRY+0x19a>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 d0                      movzwl  %ax, %edx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 118: 49 89 0c 07                   movq    %rcx, (%r15,%rax)
// 11c: b9 01 00 00 00                movl    $0x1, %ecx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 d0                         subl    %edx, %eax
// 128: 48 98                         cltq
// 12a: f7 d2                         notl    %edx
// 12c: 4c 63 f2                      movslq  %edx, %r14
// 12f: 49 01 c6                      addq    %rax, %r14
// 132: 4b 83 3c f7 00                cmpq    $0x0, (%r15,%r14,8)
// 137: 75 2f                         jne     0x168 <_JIT_ENTRY+0x168>
// 139: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013b:  R_X86_64_64  _JIT_OPARG
// 143: 0f b7 d2                      movzwl  %dx, %edx
// 146: 29 d1                         subl    %edx, %ecx
// 148: 48 63 c9                      movslq  %ecx, %rcx
// 14b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 150: 29 d6                         subl    %edx, %esi
// 152: 48 63 d6                      movslq  %esi, %rdx
// 155: 48 01 ca                      addq    %rcx, %rdx
// 158: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000015a:  R_X86_64_64  PyType_Type
// 162: 4d 39 24 d7                   cmpq    %r12, (%r15,%rdx,8)
// 166: 74 57                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 168: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 16c: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 171: 48 29 c8                      subq    %rcx, %rax
// 174: 48 83 c0 b8                   addq    $-0x48, %rax
// 178: 48 c1 e8 03                   shrq    $0x3, %rax
// 17c: 89 41 40                      movl    %eax, 0x40(%rcx)
// 17f: 48 8b 01                      movq    (%rcx), %rax
// 182: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000184:  R_X86_64_64  _JIT_TARGET
// 18c: 89 c9                         movl    %ecx, %ecx
// 18e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 192: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 198: eb 16                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 19a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19f: 49 29 c4                      subq    %rax, %r12
// 1a2: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a6: 49 c1 ec 03                   shrq    $0x3, %r12
// 1aa: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: 48 83 c4 28                   addq    $0x28, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_OPARG
// 1c9: 0f b7 c8                      movzwl  %ax, %ecx
// 1cc: ba 01 00 00 00                movl    $0x1, %edx
// 1d1: 29 ca                         subl    %ecx, %edx
// 1d3: 48 63 ca                      movslq  %edx, %rcx
// 1d6: 0f b7 c0                      movzwl  %ax, %eax
// 1d9: 48 29 c1                      subq    %rax, %rcx
// 1dc: 4d 8b 2c cf                   movq    (%r15,%rcx,8), %r13
// 1e0: 49 8b 6d 08                   movq    0x8(%r13), %rbp
// 1e4: 8b 45 00                      movl    (%rbp), %eax
// 1e7: ff c0                         incl    %eax
// 1e9: 75 19                         jne     0x204 <_JIT_ENTRY+0x204>
// 1eb: 49 8b 45 00                   movq    (%r13), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7e 28                         jle     0x21c <_JIT_ENTRY+0x21c>
// 1f4: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 79 4a                         jns     0x24c <_JIT_ENTRY+0x24c>
// 202: eb 5f                         jmp     0x263 <_JIT_ENTRY+0x263>
// 204: 89 45 00                      movl    %eax, (%rbp)
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 211: ff d0                         callq   *%rax
// 213: 49 8b 45 00                   movq    (%r13), %rax
// 217: 48 85 c0                      testq   %rax, %rax
// 21a: 7f d8                         jg      0x1f4 <_JIT_ENTRY+0x1f4>
// 21c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021e:  R_X86_64_64  .rodata.str1.1
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_NegativeRefcount
// 230: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 235: 4c 89 ea                      movq    %r13, %rdx
// 238: ff d0                         callq   *%rax
// 23a: 49 8b 45 00                   movq    (%r13), %rax
// 23e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: 85 c0                         testl   %eax, %eax
// 24a: 78 17                         js      0x263 <_JIT_ENTRY+0x263>
// 24c: ff d3                         callq   *%rbx
// 24e: 49 ff 4d 00                   decq    (%r13)
// 252: 75 0f                         jne     0x263 <_JIT_ENTRY+0x263>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_Dealloc
// 25e: 4c 89 ef                      movq    %r13, %rdi
// 261: ff d0                         callq   *%rax
// 263: 49 8b 04 24                   movq    (%r12), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7f 22                         jg      0x28e <_JIT_ENTRY+0x28e>
// 26c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026e:  R_X86_64_64  .rodata.str1.1
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_NegativeRefcount
// 280: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 285: 4c 89 e2                      movq    %r12, %rdx
// 288: ff d0                         callq   *%rax
// 28a: 49 8b 04 24                   movq    (%r12), %rax
// 28e: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 292: 85 c0                         testl   %eax, %eax
// 294: 78 1e                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 296: ff d3                         callq   *%rbx
// 298: 49 ff 0c 24                   decq    (%r12)
// 29c: 75 16                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 29e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a0:  R_X86_64_64  PyType_Type
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_Dealloc
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_OPARG
// 2be: 0f b7 c0                      movzwl  %ax, %eax
// 2c1: b9 01 00 00 00                movl    $0x1, %ecx
// 2c6: 29 c1                         subl    %eax, %ecx
// 2c8: 48 63 c9                      movslq  %ecx, %rcx
// 2cb: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 2d0: 29 c2                         subl    %eax, %edx
// 2d2: 48 63 c2                      movslq  %edx, %rax
// 2d5: 48 01 c8                      addq    %rcx, %rax
// 2d8: 49 89 2c c7                   movq    %rbp, (%r15,%rax,8)
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _JIT_CONTINUE
// 2e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2eb: 4c 89 ee                      movq    %r13, %rsi
// 2ee: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2f3: 48 83 c4 28                   addq    $0x28, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: ff e0                         jmpq    *%rax
// 303: 
static const unsigned char _BUILD_STRINGplus_CALL_TYPE_1_code_body[772] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x0c, 0x07, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x49, 0x01, 0xc6, 0x4b, 0x83, 0x3c, 0xf7, 0x00, 0x75, 0x2f, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x48, 0x01, 0xca, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xd7, 0x74, 0x57, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x29, 0xc1, 0x4d, 0x8b, 0x2c, 0xcf, 0x49, 0x8b, 0x6d, 0x08, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x19, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x28, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x5f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x85, 0xc0, 0x78, 0x1e, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x49, 0x89, 0x2c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CALL_TYPE_1_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CALL_TYPE_1_data_holes[1];

// _BUILD_STRINGplus_CHECK_ATTR_CLASS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_ATTR_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 a3 00 00 00             je      0x19f <_JIT_ENTRY+0x19f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 129: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12e: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 132: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 139: 74 36                         je      0x171 <_JIT_ENTRY+0x171>
// 13b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013d:  R_X86_64_64  _JIT_OPERAND
// 145: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 14b: 75 24                         jne     0x171 <_JIT_ENTRY+0x171>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _JIT_CONTINUE
// 157: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 15c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 161: 48 83 c4 28                   addq    $0x28, %rsp
// 165: 5b                            popq    %rbx
// 166: 41 5c                         popq    %r12
// 168: 41 5d                         popq    %r13
// 16a: 41 5e                         popq    %r14
// 16c: 41 5f                         popq    %r15
// 16e: 5d                            popq    %rbp
// 16f: ff e0                         jmpq    *%rax
// 171: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 176: 48 29 c6                      subq    %rax, %rsi
// 179: 48 83 c6 b8                   addq    $-0x48, %rsi
// 17d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 181: 89 70 40                      movl    %esi, 0x40(%rax)
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000189:  R_X86_64_64  _JIT_TARGET
// 191: 89 c9                         movl    %ecx, %ecx
// 193: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 197: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19d: eb 16                         jmp     0x1b5 <_JIT_ENTRY+0x1b5>
// 19f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a4: 49 29 c4                      subq    %rax, %r12
// 1a7: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ab: 49 c1 ec 03                   shrq    $0x3, %r12
// 1af: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: 48 83 c4 28                   addq    $0x28, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: c3                            retq
// 1c4: 
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_CLASS_code_body[453] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x36, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_CLASS_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_CLASS_data_holes[1];

// _BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 72                         je      0x16a <_JIT_ENTRY+0x16a>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 12e: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 135: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 13a: 74 53                         je      0x18f <_JIT_ENTRY+0x18f>
// 13c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 141: 48 29 c6                      subq    %rax, %rsi
// 144: 48 83 c6 b8                   addq    $-0x48, %rsi
// 148: 48 c1 ee 03                   shrq    $0x3, %rsi
// 14c: 89 70 40                      movl    %esi, 0x40(%rax)
// 14f: 48 8b 00                      movq    (%rax), %rax
// 152: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000154:  R_X86_64_64  _JIT_TARGET
// 15c: 89 c9                         movl    %ecx, %ecx
// 15e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 162: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 168: eb 16                         jmp     0x180 <_JIT_ENTRY+0x180>
// 16a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16f: 49 29 c4                      subq    %rax, %r12
// 172: 49 83 c4 b8                   addq    $-0x48, %r12
// 176: 49 c1 ec 03                   shrq    $0x3, %r12
// 17a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17e: 31 c0                         xorl    %eax, %eax
// 180: 48 83 c4 28                   addq    $0x28, %rsp
// 184: 5b                            popq    %rbx
// 185: 41 5c                         popq    %r12
// 187: 41 5d                         popq    %r13
// 189: 41 5e                         popq    %r14
// 18b: 41 5f                         popq    %r15
// 18d: 5d                            popq    %rbp
// 18e: c3                            retq
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_CONTINUE
// 199: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a3: 48 83 c4 28                   addq    $0x28, %rsp
// 1a7: 5b                            popq    %rbx
// 1a8: 41 5c                         popq    %r12
// 1aa: 41 5d                         popq    %r13
// 1ac: 41 5e                         popq    %r14
// 1ae: 41 5f                         popq    %r15
// 1b0: 5d                            popq    %rbp
// 1b1: ff e0                         jmpq    *%rax
// 1b3: 
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[436] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BUILD_STRINGplus_CHECK_ATTR_MODULE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_ATTR_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 ab 00 00 00             je      0x1a7 <_JIT_ENTRY+0x1a7>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 129: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000130:  R_X86_64_64  PyModule_Type
// 138: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13c: 75 3b                         jne     0x179 <_JIT_ENTRY+0x179>
// 13e: 48 8b 40 10                   movq    0x10(%rax), %rax
// 142: 48 8b 40 20                   movq    0x20(%rax), %rax
// 146: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000148:  R_X86_64_64  _JIT_OPERAND
// 150: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 153: 75 24                         jne     0x179 <_JIT_ENTRY+0x179>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _JIT_CONTINUE
// 15f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 164: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 169: 48 83 c4 28                   addq    $0x28, %rsp
// 16d: 5b                            popq    %rbx
// 16e: 41 5c                         popq    %r12
// 170: 41 5d                         popq    %r13
// 172: 41 5e                         popq    %r14
// 174: 41 5f                         popq    %r15
// 176: 5d                            popq    %rbp
// 177: ff e0                         jmpq    *%rax
// 179: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17e: 48 29 c6                      subq    %rax, %rsi
// 181: 48 83 c6 b8                   addq    $-0x48, %rsi
// 185: 48 c1 ee 03                   shrq    $0x3, %rsi
// 189: 89 70 40                      movl    %esi, 0x40(%rax)
// 18c: 48 8b 00                      movq    (%rax), %rax
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _JIT_TARGET
// 199: 89 c9                         movl    %ecx, %ecx
// 19b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a5: eb 16                         jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 1a7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ac: 49 29 c4                      subq    %rax, %r12
// 1af: 49 83 c4 b8                   addq    $-0x48, %r12
// 1b3: 49 c1 ec 03                   shrq    $0x3, %r12
// 1b7: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1bb: 31 c0                         xorl    %eax, %eax
// 1bd: 48 83 c4 28                   addq    $0x28, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: c3                            retq
// 1cc: 
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_MODULE_code_body[461] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3b, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_MODULE_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_MODULE_data_holes[1];

// _BUILD_STRINGplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_ATTR_WITH_HINT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 63                         je      0x15b <_JIT_ENTRY+0x15b>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 12e: a8 01                         testb   $0x1, %al
// 130: 75 41                         jne     0x173 <_JIT_ENTRY+0x173>
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 74 3c                         je      0x173 <_JIT_ENTRY+0x173>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _JIT_CONTINUE
// 141: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 146: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 14b: 48 83 c4 28                   addq    $0x28, %rsp
// 14f: 5b                            popq    %rbx
// 150: 41 5c                         popq    %r12
// 152: 41 5d                         popq    %r13
// 154: 41 5e                         popq    %r14
// 156: 41 5f                         popq    %r15
// 158: 5d                            popq    %rbp
// 159: ff e0                         jmpq    *%rax
// 15b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 160: 49 29 c4                      subq    %rax, %r12
// 163: 49 83 c4 b8                   addq    $-0x48, %r12
// 167: 49 c1 ec 03                   shrq    $0x3, %r12
// 16b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: eb 2c                         jmp     0x19f <_JIT_ENTRY+0x19f>
// 173: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 178: 48 29 c6                      subq    %rax, %rsi
// 17b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 17f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 183: 89 70 40                      movl    %esi, 0x40(%rax)
// 186: 48 8b 00                      movq    (%rax), %rax
// 189: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018b:  R_X86_64_64  _JIT_TARGET
// 193: 89 c9                         movl    %ecx, %ecx
// 195: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 199: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19f: 48 83 c4 28                   addq    $0x28, %rsp
// 1a3: 5b                            popq    %rbx
// 1a4: 41 5c                         popq    %r12
// 1a6: 41 5d                         popq    %r13
// 1a8: 41 5e                         popq    %r14
// 1aa: 41 5f                         popq    %r15
// 1ac: 5d                            popq    %rbp
// 1ad: c3                            retq
// 1ae: 
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_WITH_HINT_code_body[431] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x41, 0x48, 0x85, 0xc0, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_WITH_HINT_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 a2 00 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 118: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 d2                      movslq  %edx, %rdx
// 12b: 48 8d 34 d7                   leaq    (%rdi,%rdx,8), %rsi
// 12f: f7 d1                         notl    %ecx
// 131: 48 63 c9                      movslq  %ecx, %rcx
// 134: 48 01 d1                      addq    %rdx, %rcx
// 137: 48 83 3c cf 00                cmpq    $0x0, (%rdi,%rcx,8)
// 13c: 75 32                         jne     0x170 <_JIT_ENTRY+0x170>
// 13e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000140:  R_X86_64_64  _JIT_OPARG
// 148: 0f b7 c9                      movzwl  %cx, %ecx
// 14b: 29 c8                         subl    %ecx, %eax
// 14d: 48 98                         cltq
// 14f: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 154: 29 ca                         subl    %ecx, %edx
// 156: 48 63 ca                      movslq  %edx, %rcx
// 159: 48 01 c1                      addq    %rax, %rcx
// 15c: 48 8b 04 cf                   movq    (%rdi,%rcx,8), %rax
// 160: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000162:  R_X86_64_64  PyMethod_Type
// 16a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 16e: 74 53                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 170: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 175: 48 29 c6                      subq    %rax, %rsi
// 178: 48 83 c6 b8                   addq    $-0x48, %rsi
// 17c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 180: 89 70 40                      movl    %esi, 0x40(%rax)
// 183: 48 8b 00                      movq    (%rax), %rax
// 186: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000188:  R_X86_64_64  _JIT_TARGET
// 190: 89 c9                         movl    %ecx, %ecx
// 192: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 196: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19c: eb 16                         jmp     0x1b4 <_JIT_ENTRY+0x1b4>
// 19e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a3: 49 29 c4                      subq    %rax, %r12
// 1a6: 49 83 c4 b8                   addq    $-0x48, %r12
// 1aa: 49 c1 ec 03                   shrq    $0x3, %r12
// 1ae: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b2: 31 c0                         xorl    %eax, %eax
// 1b4: 48 83 c4 28                   addq    $0x28, %rsp
// 1b8: 5b                            popq    %rbx
// 1b9: 41 5c                         popq    %r12
// 1bb: 41 5d                         popq    %r13
// 1bd: 41 5e                         popq    %r14
// 1bf: 41 5f                         popq    %r15
// 1c1: 5d                            popq    %rbp
// 1c2: c3                            retq
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _JIT_CONTINUE
// 1cd: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1d7: 48 83 c4 28                   addq    $0x28, %rsp
// 1db: 5b                            popq    %rbx
// 1dc: 41 5c                         popq    %r12
// 1de: 41 5d                         popq    %r13
// 1e0: 41 5e                         popq    %r14
// 1e2: 41 5f                         popq    %r15
// 1e4: 5d                            popq    %rbp
// 1e5: ff e0                         jmpq    *%rax
// 1e7: 
static const unsigned char _BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[488] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x48, 0x8d, 0x34, 0xd7, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x01, 0xd1, 0x48, 0x83, 0x3c, 0xcf, 0x00, 0x75, 0x32, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x01, 0xc1, 0x48, 0x8b, 0x04, 0xcf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BUILD_STRINGplus_CHECK_EG_MATCH
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_EG_MATCH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 28                movq    %rsi, 0x28(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 30                movq    %rax, 0x30(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 30                movq    0x30(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 7a 02 00 00             je      0x376 <_JIT_ENTRY+0x376>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 28                movq    0x28(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f8                      movslq  %eax, %r15
// 126: 4e 8b 6c fb f0                movq    -0x10(%rbx,%r15,8), %r13
// 12b: 4e 8b 64 fb f8                movq    -0x8(%rbx,%r15,8), %r12
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 13a: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 13f: 4c 89 f7                      movq    %r14, %rdi
// 142: 4c 89 e6                      movq    %r12, %rsi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 3f                         js      0x18a <_JIT_ENTRY+0x18a>
// 14b: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 154: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 167: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 16c: 48 8d 4c 24 18                leaq    0x18(%rsp), %rcx
// 171: 4c 89 ef                      movq    %r13, %rdi
// 174: 4c 89 e6                      movq    %r12, %rsi
// 177: ff d0                         callq   *%rax
// 179: 89 c5                         movl    %eax, %ebp
// 17b: 49 8b 45 00                   movq    (%r13), %rax
// 17f: 48 85 c0                      testq   %rax, %rax
// 182: 7e 20                         jle     0x1a4 <_JIT_ENTRY+0x1a4>
// 184: 85 c0                         testl   %eax, %eax
// 186: 79 42                         jns     0x1ca <_JIT_ENTRY+0x1ca>
// 188: eb 61                         jmp     0x1eb <_JIT_ENTRY+0x1eb>
// 18a: 49 8b 45 00                   movq    (%r13), %rax
// 18e: 48 85 c0                      testq   %rax, %rax
// 191: 0f 8e 21 01 00 00             jle     0x2b8 <_JIT_ENTRY+0x2b8>
// 197: 85 c0                         testl   %eax, %eax
// 199: 0f 89 3f 01 00 00             jns     0x2de <_JIT_ENTRY+0x2de>
// 19f: e9 5b 01 00 00                jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 1bd: 4c 89 ea                      movq    %r13, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 45 00                   movq    (%r13), %rax
// 1c6: 85 c0                         testl   %eax, %eax
// 1c8: 78 21                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 ff 4d 00                   decq    (%r13)
// 1da: 75 0f                         jne     0x1eb <_JIT_ENTRY+0x1eb>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 ef                      movq    %r13, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 8b 04 24                   movq    (%r12), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7e 06                         jle     0x1fa <_JIT_ENTRY+0x1fa>
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 79 28                         jns     0x220 <_JIT_ENTRY+0x220>
// 1f8: eb 3c                         jmp     0x236 <_JIT_ENTRY+0x236>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 213: 4c 89 e2                      movq    %r12, %rdx
// 216: ff d0                         callq   *%rax
// 218: 49 8b 04 24                   movq    (%r12), %rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 16                         js      0x236 <_JIT_ENTRY+0x236>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 0c 24                   decq    (%r12)
// 230: 0f 84 21 01 00 00             je      0x357 <_JIT_ENTRY+0x357>
// 236: 85 ed                         testl   %ebp, %ebp
// 238: 0f 88 30 01 00 00             js      0x36e <_JIT_ENTRY+0x36e>
// 23e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 243: 48 85 ff                      testq   %rdi, %rdi
// 246: 0f 84 22 01 00 00             je      0x36e <_JIT_ENTRY+0x36e>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_NoneStruct
// 256: 48 39 c7                      cmpq    %rax, %rdi
// 259: 74 11                         je      0x26c <_JIT_ENTRY+0x26c>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  PyErr_SetHandledException
// 265: ff d0                         callq   *%rax
// 267: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 26c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026e:  R_X86_64_64  _JIT_OPARG
// 276: 0f b7 c9                      movzwl  %cx, %ecx
// 279: ba 01 00 00 00                movl    $0x1, %edx
// 27e: 29 ca                         subl    %ecx, %edx
// 280: 48 63 ca                      movslq  %edx, %rcx
// 283: 48 8d 34 cb                   leaq    (%rbx,%rcx,8), %rsi
// 287: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 28c: 48 89 54 cb f0                movq    %rdx, -0x10(%rbx,%rcx,8)
// 291: 48 89 44 cb f8                movq    %rax, -0x8(%rbx,%rcx,8)
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _JIT_CONTINUE
// 2a0: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2a5: 4c 89 f2                      movq    %r14, %rdx
// 2a8: 48 83 c4 38                   addq    $0x38, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 2d1: 4c 89 ea                      movq    %r13, %rdx
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8b 45 00                   movq    (%r13), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 78 21                         js      0x2ff <_JIT_ENTRY+0x2ff>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e8: ff d0                         callq   *%rax
// 2ea: 49 ff 4d 00                   decq    (%r13)
// 2ee: 75 0f                         jne     0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 ef                      movq    %r13, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 8b 04 24                   movq    (%r12), %rax
// 303: 48 85 c0                      testq   %rax, %rax
// 306: 7e 06                         jle     0x30e <_JIT_ENTRY+0x30e>
// 308: 85 c0                         testl   %eax, %eax
// 30a: 79 28                         jns     0x334 <_JIT_ENTRY+0x334>
// 30c: eb 60                         jmp     0x36e <_JIT_ENTRY+0x36e>
// 30e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_NegativeRefcount
// 322: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 327: 4c 89 e2                      movq    %r12, %rdx
// 32a: ff d0                         callq   *%rax
// 32c: 49 8b 04 24                   movq    (%r12), %rax
// 330: 85 c0                         testl   %eax, %eax
// 332: 78 3a                         js      0x36e <_JIT_ENTRY+0x36e>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 49 ff 0c 24                   decq    (%r12)
// 344: 75 28                         jne     0x36e <_JIT_ENTRY+0x36e>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_Dealloc
// 350: 4c 89 e7                      movq    %r12, %rdi
// 353: ff d0                         callq   *%rax
// 355: eb 17                         jmp     0x36e <_JIT_ENTRY+0x36e>
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _Py_Dealloc
// 361: 4c 89 e7                      movq    %r12, %rdi
// 364: ff d0                         callq   *%rax
// 366: 85 ed                         testl   %ebp, %ebp
// 368: 0f 89 d0 fe ff ff             jns     0x23e <_JIT_ENTRY+0x23e>
// 36e: 4e 8d 24 fb                   leaq    (%rbx,%r15,8), %r12
// 372: 49 83 c4 f0                   addq    $-0x10, %r12
// 376: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 37b: 49 29 c4                      subq    %rax, %r12
// 37e: 49 83 c4 b8                   addq    $-0x48, %r12
// 382: 49 c1 ec 03                   shrq    $0x3, %r12
// 386: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 38a: 31 c0                         xorl    %eax, %eax
// 38c: 48 83 c4 38                   addq    $0x38, %rsp
// 390: 5b                            popq    %rbx
// 391: 41 5c                         popq    %r12
// 393: 41 5d                         popq    %r13
// 395: 41 5e                         popq    %r14
// 397: 41 5f                         popq    %r15
// 399: 5d                            popq    %rbp
// 39a: c3                            retq
// 39b: 
static const unsigned char _BUILD_STRINGplus_CHECK_EG_MATCH_code_body[924] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x28, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x30, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x30, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x7a, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x28, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4e, 0x8b, 0x6c, 0xfb, 0xf0, 0x4e, 0x8b, 0x64, 0xfb, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x20, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x61, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x21, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3f, 0x01, 0x00, 0x00, 0xe9, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x21, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x22, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcb, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x54, 0xcb, 0xf0, 0x48, 0x89, 0x44, 0xcb, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x60, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xd0, 0xfe, 0xff, 0xff, 0x4e, 0x8d, 0x24, 0xfb, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_EG_MATCH_code_holes[32] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_EG_MATCH_data_holes[1];

// _BUILD_STRINGplus_CHECK_EXC_MATCH
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_EXC_MATCH.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 86 01 00 00             je      0x282 <_JIT_ENTRY+0x282>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 4d 8b 7c de f0                movq    -0x10(%r14,%rbx,8), %r15
// 12b: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 13a: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 13f: 4c 89 e7                      movq    %r12, %rdi
// 142: 4c 89 ee                      movq    %r13, %rsi
// 145: ff d0                         callq   *%rax
// 147: 85 c0                         testl   %eax, %eax
// 149: 78 23                         js      0x16e <_JIT_ENTRY+0x16e>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  PyErr_GivenExceptionMatches
// 155: 4c 89 ff                      movq    %r15, %rdi
// 158: 4c 89 ee                      movq    %r13, %rsi
// 15b: ff d0                         callq   *%rax
// 15d: 89 c5                         movl    %eax, %ebp
// 15f: 49 8b 45 00                   movq    (%r13), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7e 28                         jle     0x190 <_JIT_ENTRY+0x190>
// 168: 85 c0                         testl   %eax, %eax
// 16a: 79 4a                         jns     0x1b6 <_JIT_ENTRY+0x1b6>
// 16c: eb 69                         jmp     0x1d7 <_JIT_ENTRY+0x1d7>
// 16e: 49 8b 45 00                   movq    (%r13), %rax
// 172: 48 85 c0                      testq   %rax, %rax
// 175: 0f 8e b8 00 00 00             jle     0x233 <_JIT_ENTRY+0x233>
// 17b: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 17f: 49 83 c4 f8                   addq    $-0x8, %r12
// 183: 85 c0                         testl   %eax, %eax
// 185: 0f 89 d6 00 00 00             jns     0x261 <_JIT_ENTRY+0x261>
// 18b: e9 f2 00 00 00                jmp     0x282 <_JIT_ENTRY+0x282>
// 190: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_NegativeRefcount
// 1a4: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 1a9: 4c 89 ea                      movq    %r13, %rdx
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 8b 45 00                   movq    (%r13), %rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 4d 00                   decq    (%r13)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 ef                      movq    %r13, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_OPARG
// 1e1: 0f b7 c0                      movzwl  %ax, %eax
// 1e4: b9 01 00 00 00                movl    $0x1, %ecx
// 1e9: 29 c1                         subl    %eax, %ecx
// 1eb: 48 63 c1                      movslq  %ecx, %rax
// 1ee: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1f2: 85 ed                         testl   %ebp, %ebp
// 1f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f6:  R_X86_64_64  _Py_FalseStruct
// 1fe: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000200:  R_X86_64_64  _Py_TrueStruct
// 208: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 20c: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _JIT_CONTINUE
// 21b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 220: 4c 89 e2                      movq    %r12, %rdx
// 223: 48 83 c4 28                   addq    $0x28, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: ff e0                         jmpq    *%rax
// 233: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000235:  R_X86_64_64  .rodata.str1.1
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_NegativeRefcount
// 247: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 24c: 4c 89 ea                      movq    %r13, %rdx
// 24f: ff d0                         callq   *%rax
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 259: 49 83 c4 f8                   addq    $-0x8, %r12
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 49 ff 4d 00                   decq    (%r13)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 ef                      movq    %r13, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 287: 49 29 c4                      subq    %rax, %r12
// 28a: 49 83 c4 b8                   addq    $-0x48, %r12
// 28e: 49 c1 ec 03                   shrq    $0x3, %r12
// 292: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 296: 31 c0                         xorl    %eax, %eax
// 298: 48 83 c4 28                   addq    $0x28, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: c3                            retq
// 2a7: 
static const unsigned char _BUILD_STRINGplus_CHECK_EXC_MATCH_code_body[680] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x86, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x7c, 0xde, 0xf0, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x28, 0x85, 0xc0, 0x79, 0x4a, 0xeb, 0x69, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb8, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0xd6, 0x00, 0x00, 0x00, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x85, 0xed, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_EXC_MATCH_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_EXC_MATCH_data_holes[1];

// _BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 d8 00 00 00             je      0x1d4 <_JIT_ENTRY+0x1d4>
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c1                      movzwl  %cx, %eax
// 109: 0f b7 c9                      movzwl  %cx, %ecx
// 10c: 48 c1 e1 03                   shlq    $0x3, %rcx
// 110: 48 f7 d9                      negq    %rcx
// 113: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 118: 49 89 14 08                   movq    %rdx, (%r8,%rcx)
// 11c: b9 01 00 00 00                movl    $0x1, %ecx
// 121: 29 c1                         subl    %eax, %ecx
// 123: 48 63 c9                      movslq  %ecx, %rcx
// 126: 49 8d 34 c8                   leaq    (%r8,%rcx,8), %rsi
// 12a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 12f: 29 c2                         subl    %eax, %edx
// 131: 48 63 d2                      movslq  %edx, %rdx
// 134: 48 01 ca                      addq    %rcx, %rdx
// 137: 49 8b 14 d0                   movq    (%r8,%rdx,8), %rdx
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  PyFunction_Type
// 145: 48 39 7a 08                   cmpq    %rdi, 0x8(%rdx)
// 149: 75 5b                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  _JIT_OPERAND
// 155: 39 ba 88 00 00 00             cmpl    %edi, 0x88(%rdx)
// 15b: 75 49                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 15d: f7 d0                         notl    %eax
// 15f: 48 98                         cltq
// 161: 48 01 c8                      addq    %rcx, %rax
// 164: 48 8b 4a 30                   movq    0x30(%rdx), %rcx
// 168: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000016a:  R_X86_64_64  _JIT_OPARG
// 172: 0f b7 d2                      movzwl  %dx, %edx
// 175: 49 83 3c c0 01                cmpq    $0x1, (%r8,%rax,8)
// 17a: 83 da ff                      sbbl    $-0x1, %edx
// 17d: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 180: 75 24                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _JIT_CONTINUE
// 18c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 191: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 196: 48 83 c4 28                   addq    $0x28, %rsp
// 19a: 5b                            popq    %rbx
// 19b: 41 5c                         popq    %r12
// 19d: 41 5d                         popq    %r13
// 19f: 41 5e                         popq    %r14
// 1a1: 41 5f                         popq    %r15
// 1a3: 5d                            popq    %rbp
// 1a4: ff e0                         jmpq    *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 29 c6                      subq    %rax, %rsi
// 1ae: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1b2: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1b6: 89 70 40                      movl    %esi, 0x40(%rax)
// 1b9: 48 8b 00                      movq    (%rax), %rax
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  _JIT_TARGET
// 1c6: 89 c9                         movl    %ecx, %ecx
// 1c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d2: eb 16                         jmp     0x1ea <_JIT_ENTRY+0x1ea>
// 1d4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1d9: 49 29 c4                      subq    %rax, %r12
// 1dc: 49 83 c4 b8                   addq    $-0x48, %r12
// 1e0: 49 c1 ec 03                   shrq    $0x3, %r12
// 1e4: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1e8: 31 c0                         xorl    %eax, %eax
// 1ea: 48 83 c4 28                   addq    $0x28, %rsp
// 1ee: 5b                            popq    %rbx
// 1ef: 41 5c                         popq    %r12
// 1f1: 41 5d                         popq    %r13
// 1f3: 41 5e                         popq    %r14
// 1f5: 41 5f                         popq    %r15
// 1f7: 5d                            popq    %rbp
// 1f8: c3                            retq
// 1f9: 
static const unsigned char _BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS_code_body[506] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x89, 0x14, 0x08, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8d, 0x34, 0xc8, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x49, 0x8b, 0x14, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x7a, 0x08, 0x75, 0x5b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xba, 0x88, 0x00, 0x00, 0x00, 0x75, 0x49, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x48, 0x8b, 0x4a, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x49, 0x83, 0x3c, 0xc0, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[15] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 73                         je      0x16b <_JIT_ENTRY+0x16b>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8d 34 c2                   leaq    (%rdx,%rax,8), %r14
// 125: 48 8b 7c c2 f8                movq    -0x8(%rdx,%rax,8), %rdi
// 12a: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 12e: 75 14                         jne     0x144 <_JIT_ENTRY+0x144>
// 130: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 13e: ff d0                         callq   *%rax
// 140: 84 c0                         testb   %al, %al
// 142: 74 3f                         je      0x183 <_JIT_ENTRY+0x183>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _JIT_CONTINUE
// 14e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 153: 4c 89 f6                      movq    %r14, %rsi
// 156: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 15b: 48 83 c4 28                   addq    $0x28, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: ff e0                         jmpq    *%rax
// 16b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 170: 49 29 c4                      subq    %rax, %r12
// 173: 49 83 c4 b8                   addq    $-0x48, %r12
// 177: 49 c1 ec 03                   shrq    $0x3, %r12
// 17b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17f: 31 c0                         xorl    %eax, %eax
// 181: eb 2d                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 183: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 188: 49 29 c6                      subq    %rax, %r14
// 18b: 49 83 c6 b8                   addq    $-0x48, %r14
// 18f: 49 c1 ee 03                   shrq    $0x3, %r14
// 193: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 197: 48 8b 00                      movq    (%rax), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 28                   addq    $0x28, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 
static const unsigned char _BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[448] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x7c, 0xc2, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _BUILD_STRINGplus_CHECK_PEP_523
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_PEP_523.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 6e                         je      0x166 <_JIT_ENTRY+0x166>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 12a: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 12e: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 136: 74 53                         je      0x18b <_JIT_ENTRY+0x18b>
// 138: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13d: 48 29 c6                      subq    %rax, %rsi
// 140: 48 83 c6 b8                   addq    $-0x48, %rsi
// 144: 48 c1 ee 03                   shrq    $0x3, %rsi
// 148: 89 70 40                      movl    %esi, 0x40(%rax)
// 14b: 48 8b 00                      movq    (%rax), %rax
// 14e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000150:  R_X86_64_64  _JIT_TARGET
// 158: 89 c9                         movl    %ecx, %ecx
// 15a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 164: eb 16                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 49 29 c4                      subq    %rax, %r12
// 16e: 49 83 c4 b8                   addq    $-0x48, %r12
// 172: 49 c1 ec 03                   shrq    $0x3, %r12
// 176: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17a: 31 c0                         xorl    %eax, %eax
// 17c: 48 83 c4 28                   addq    $0x28, %rsp
// 180: 5b                            popq    %rbx
// 181: 41 5c                         popq    %r12
// 183: 41 5d                         popq    %r13
// 185: 41 5e                         popq    %r14
// 187: 41 5f                         popq    %r15
// 189: 5d                            popq    %rbp
// 18a: c3                            retq
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_CONTINUE
// 195: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19a: 48 83 c4 28                   addq    $0x28, %rsp
// 19e: 5b                            popq    %rbx
// 19f: 41 5c                         popq    %r12
// 1a1: 41 5d                         popq    %r13
// 1a3: 41 5e                         popq    %r14
// 1a5: 41 5f                         popq    %r15
// 1a7: 5d                            popq    %rbp
// 1a8: ff e0                         jmpq    *%rax
// 1aa: 
static const unsigned char _BUILD_STRINGplus_CHECK_PEP_523_code_body[427] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CHECK_PEP_523_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_PEP_523_data_holes[1];

// _BUILD_STRINGplus_CHECK_STACK_SPACE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_STACK_SPACE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// f3: 48 85 c9                      testq   %rcx, %rcx
// f6: 0f 84 b8 00 00 00             je      0x1b4 <_JIT_ENTRY+0x1b4>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 d0                      movzwl  %ax, %edx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 4c 24 10                movq    0x10(%rsp), %r9
// 118: 49 89 0c 01                   movq    %rcx, (%r9,%rax)
// 11c: b9 01 00 00 00                movl    $0x1, %ecx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 d0                         subl    %edx, %eax
// 128: 48 98                         cltq
// 12a: 49 8d 34 c1                   leaq    (%r9,%rax,8), %rsi
// 12e: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 133: 48 8b 82 00 01 00 00          movq    0x100(%rdx), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 74 47                         je      0x186 <_JIT_ENTRY+0x186>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  _JIT_OPARG
// 149: 44 0f b7 c7                   movzwl  %di, %r8d
// 14d: 44 29 c1                      subl    %r8d, %ecx
// 150: 48 63 c9                      movslq  %ecx, %rcx
// 153: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 158: 44 29 c7                      subl    %r8d, %edi
// 15b: 48 63 ff                      movslq  %edi, %rdi
// 15e: 48 01 cf                      addq    %rcx, %rdi
// 161: 49 8b 0c f9                   movq    (%r9,%rdi,8), %rcx
// 165: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 169: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 16d: 48 8b ba 08 01 00 00          movq    0x108(%rdx), %rdi
// 174: 48 29 c7                      subq    %rax, %rdi
// 177: 48 c1 ff 03                   sarq    $0x3, %rdi
// 17b: 48 39 cf                      cmpq    %rcx, %rdi
// 17e: 7e 06                         jle     0x186 <_JIT_ENTRY+0x186>
// 180: 83 7a 24 02                   cmpl    $0x2, 0x24(%rdx)
// 184: 7d 53                         jge     0x1d9 <_JIT_ENTRY+0x1d9>
// 186: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18b: 48 29 c6                      subq    %rax, %rsi
// 18e: 48 83 c6 b8                   addq    $-0x48, %rsi
// 192: 48 c1 ee 03                   shrq    $0x3, %rsi
// 196: 89 70 40                      movl    %esi, 0x40(%rax)
// 199: 48 8b 00                      movq    (%rax), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  _JIT_TARGET
// 1a6: 89 c9                         movl    %ecx, %ecx
// 1a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b2: eb 16                         jmp     0x1ca <_JIT_ENTRY+0x1ca>
// 1b4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b9: 49 29 c4                      subq    %rax, %r12
// 1bc: 49 83 c4 b8                   addq    $-0x48, %r12
// 1c0: 49 c1 ec 03                   shrq    $0x3, %r12
// 1c4: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1c8: 31 c0                         xorl    %eax, %eax
// 1ca: 48 83 c4 28                   addq    $0x28, %rsp
// 1ce: 5b                            popq    %rbx
// 1cf: 41 5c                         popq    %r12
// 1d1: 41 5d                         popq    %r13
// 1d3: 41 5e                         popq    %r14
// 1d5: 41 5f                         popq    %r15
// 1d7: 5d                            popq    %rbp
// 1d8: c3                            retq
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e8: 48 83 c4 28                   addq    $0x28, %rsp
// 1ec: 5b                            popq    %rbx
// 1ed: 41 5c                         popq    %r12
// 1ef: 41 5d                         popq    %r13
// 1f1: 41 5e                         popq    %r14
// 1f3: 41 5f                         popq    %r15
// 1f5: 5d                            popq    %rbp
// 1f6: ff e0                         jmpq    *%rax
// 1f8: 
static const unsigned char _BUILD_STRINGplus_CHECK_STACK_SPACE_code_body[505] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x0c, 0x01, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc1, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x82, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc7, 0x44, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xc7, 0x48, 0x63, 0xff, 0x48, 0x01, 0xcf, 0x49, 0x8b, 0x0c, 0xf9, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x48, 0x8b, 0xba, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc7, 0x48, 0xc1, 0xff, 0x03, 0x48, 0x39, 0xcf, 0x7e, 0x06, 0x83, 0x7a, 0x24, 0x02, 0x7d, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_CHECK_STACK_SPACE_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_STACK_SPACE_data_holes[1];

// _BUILD_STRINGplus_CHECK_VALIDITY
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CHECK_VALIDITY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 61                         je      0x159 <_JIT_ENTRY+0x159>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _JIT_EXECUTOR
// 12f: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 133: 74 3c                         je      0x171 <_JIT_ENTRY+0x171>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _JIT_CONTINUE
// 13f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 144: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 149: 48 83 c4 28                   addq    $0x28, %rsp
// 14d: 5b                            popq    %rbx
// 14e: 41 5c                         popq    %r12
// 150: 41 5d                         popq    %r13
// 152: 41 5e                         popq    %r14
// 154: 41 5f                         popq    %r15
// 156: 5d                            popq    %rbp
// 157: ff e0                         jmpq    *%rax
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 49 29 c4                      subq    %rax, %r12
// 161: 49 83 c4 b8                   addq    $-0x48, %r12
// 165: 49 c1 ec 03                   shrq    $0x3, %r12
// 169: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 16d: 31 c0                         xorl    %eax, %eax
// 16f: eb 2c                         jmp     0x19d <_JIT_ENTRY+0x19d>
// 171: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 176: 48 29 c6                      subq    %rax, %rsi
// 179: 48 83 c6 b8                   addq    $-0x48, %rsi
// 17d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 181: 89 70 40                      movl    %esi, 0x40(%rax)
// 184: 48 8b 00                      movq    (%rax), %rax
// 187: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000189:  R_X86_64_64  _JIT_TARGET
// 191: 89 c9                         movl    %ecx, %ecx
// 193: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 197: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19d: 48 83 c4 28                   addq    $0x28, %rsp
// 1a1: 5b                            popq    %rbx
// 1a2: 41 5c                         popq    %r12
// 1a4: 41 5d                         popq    %r13
// 1a6: 41 5e                         popq    %r14
// 1a8: 41 5f                         popq    %r15
// 1aa: 5d                            popq    %rbp
// 1ab: c3                            retq
// 1ac: 
static const unsigned char _BUILD_STRINGplus_CHECK_VALIDITY_code_body[429] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CHECK_VALIDITY_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CHECK_VALIDITY_data_holes[1];

// _BUILD_STRINGplus_COMPARE_OP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_COMPARE_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// f3: 48 85 c9                      testq   %rcx, %rcx
// f6: 0f 84 f2 01 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 d0                      movzwl  %ax, %edx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 0c 03                   movq    %rcx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 d0                         subl    %edx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4a 8b 6c f3 f0                movq    -0x10(%rbx,%r14,8), %rbp
// 12b: 4e 8b 6c f3 f8                movq    -0x8(%rbx,%r14,8), %r13
// 130: c1 ea 05                      shrl    $0x5, %edx
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  PyObject_RichCompare
// 13d: 48 89 ef                      movq    %rbp, %rdi
// 140: 4c 89 ee                      movq    %r13, %rsi
// 143: ff d0                         callq   *%rax
// 145: 49 89 c4                      movq    %rax, %r12
// 148: 48 8b 45 00                   movq    (%rbp), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7e 06                         jle     0x157 <_JIT_ENTRY+0x157>
// 151: 85 c0                         testl   %eax, %eax
// 153: 79 28                         jns     0x17d <_JIT_ENTRY+0x17d>
// 155: eb 38                         jmp     0x18f <_JIT_ENTRY+0x18f>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 170: 48 89 ea                      movq    %rbp, %rdx
// 173: ff d0                         callq   *%rax
// 175: 48 8b 45 00                   movq    (%rbp), %rax
// 179: 85 c0                         testl   %eax, %eax
// 17b: 78 12                         js      0x18f <_JIT_ENTRY+0x18f>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 48 ff 4d 00                   decq    (%rbp)
// 18d: 74 0f                         je      0x19e <_JIT_ENTRY+0x19e>
// 18f: 49 8b 45 00                   movq    (%r13), %rax
// 193: 48 85 c0                      testq   %rax, %rax
// 196: 7e 1e                         jle     0x1b6 <_JIT_ENTRY+0x1b6>
// 198: 85 c0                         testl   %eax, %eax
// 19a: 79 40                         jns     0x1dc <_JIT_ENTRY+0x1dc>
// 19c: eb 54                         jmp     0x1f2 <_JIT_ENTRY+0x1f2>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_Dealloc
// 1a8: 48 89 ef                      movq    %rbp, %rdi
// 1ab: ff d0                         callq   *%rax
// 1ad: 49 8b 45 00                   movq    (%r13), %rax
// 1b1: 48 85 c0                      testq   %rax, %rax
// 1b4: 7f e2                         jg      0x198 <_JIT_ENTRY+0x198>
// 1b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b8:  R_X86_64_64  .rodata.str1.1
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_NegativeRefcount
// 1ca: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 1cf: 4c 89 ea                      movq    %r13, %rdx
// 1d2: ff d0                         callq   *%rax
// 1d4: 49 8b 45 00                   movq    (%r13), %rax
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 78 16                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e6: ff d0                         callq   *%rax
// 1e8: 49 ff 4d 00                   decq    (%r13)
// 1ec: 0f 84 dc 00 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 1f2: 4d 85 e4                      testq   %r12, %r12
// 1f5: 0f 84 eb 00 00 00             je      0x2e6 <_JIT_ENTRY+0x2e6>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_OPARG
// 205: a8 10                         testb   $0x10, %al
// 207: 74 7d                         je      0x286 <_JIT_ENTRY+0x286>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  PyObject_IsTrue
// 213: 4c 89 e7                      movq    %r12, %rdi
// 216: ff d0                         callq   *%rax
// 218: 89 c5                         movl    %eax, %ebp
// 21a: 49 8b 04 24                   movq    (%r12), %rax
// 21e: 48 85 c0                      testq   %rax, %rax
// 221: 7f 22                         jg      0x245 <_JIT_ENTRY+0x245>
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 23c: 4c 89 e2                      movq    %r12, %rdx
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 04 24                   movq    (%r12), %rax
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 21                         js      0x26a <_JIT_ENTRY+0x26a>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 0c 24                   decq    (%r12)
// 259: 75 0f                         jne     0x26a <_JIT_ENTRY+0x26a>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 e7                      movq    %r12, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_FalseStruct
// 274: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000276:  R_X86_64_64  _Py_TrueStruct
// 27e: 85 ed                         testl   %ebp, %ebp
// 280: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 284: 78 60                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 286: 4a 8d 34 f3                   leaq    (%rbx,%r14,8), %rsi
// 28a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_OPARG
// 298: 0f b7 c0                      movzwl  %ax, %eax
// 29b: b9 01 00 00 00                movl    $0x1, %ecx
// 2a0: 29 c1                         subl    %eax, %ecx
// 2a2: 48 63 c1                      movslq  %ecx, %rax
// 2a5: 4c 89 64 c3 f0                movq    %r12, -0x10(%rbx,%rax,8)
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _JIT_CONTINUE
// 2b4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b9: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2be: 48 83 c4 28                   addq    $0x28, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: ff e0                         jmpq    *%rax
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 4d 85 e4                      testq   %r12, %r12
// 2e0: 0f 85 15 ff ff ff             jne     0x1fb <_JIT_ENTRY+0x1fb>
// 2e6: 4e 8d 24 f3                   leaq    (%rbx,%r14,8), %r12
// 2ea: 49 83 c4 f0                   addq    $-0x10, %r12
// 2ee: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2f3: 49 29 c4                      subq    %rax, %r12
// 2f6: 49 83 c4 b8                   addq    $-0x48, %r12
// 2fa: 49 c1 ec 03                   shrq    $0x3, %r12
// 2fe: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 302: 31 c0                         xorl    %eax, %eax
// 304: 48 83 c4 28                   addq    $0x28, %rsp
// 308: 5b                            popq    %rbx
// 309: 41 5c                         popq    %r12
// 30b: 41 5d                         popq    %r13
// 30d: 41 5e                         popq    %r14
// 30f: 41 5f                         popq    %r15
// 311: 5d                            popq    %rbp
// 312: c3                            retq
// 313: 
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_code_body[788] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xf2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x0c, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x6c, 0xf3, 0xf0, 0x4e, 0x8b, 0x6c, 0xf3, 0xf8, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x60, 0x4a, 0x8d, 0x34, 0xf3, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x64, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x15, 0xff, 0xff, 0xff, 0x4e, 0x8d, 0x24, 0xf3, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_COMPARE_OP_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_COMPARE_OP_data_holes[1];

// _BUILD_STRINGplus_COMPARE_OP_FLOAT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_COMPARE_OP_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 83 00 00 00             je      0x17f <_JIT_ENTRY+0x17f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 118: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 63 d8                      movslq  %eax, %rbx
// 127: 4c 8b 74 dd f0                movq    -0x10(%rbp,%rbx,8), %r14
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  PyFloat_Type
// 136: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 13a: 75 0b                         jne     0x147 <_JIT_ENTRY+0x147>
// 13c: 4c 8b 6c dd f8                movq    -0x8(%rbp,%rbx,8), %r13
// 141: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 145: 74 5c                         je      0x1a3 <_JIT_ENTRY+0x1a3>
// 147: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
// 14f: 48 01 e8                      addq    %rbp, %rax
// 152: 48 8b 0c 24                   movq    (%rsp), %rcx
// 156: 48 29 c8                      subq    %rcx, %rax
// 159: 48 83 c0 b8                   addq    $-0x48, %rax
// 15d: 48 c1 e8 03                   shrq    $0x3, %rax
// 161: 89 41 40                      movl    %eax, 0x40(%rcx)
// 164: 48 8b 01                      movq    (%rcx), %rax
// 167: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000169:  R_X86_64_64  _JIT_TARGET
// 171: 89 c9                         movl    %ecx, %ecx
// 173: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 177: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 17d: eb 15                         jmp     0x194 <_JIT_ENTRY+0x194>
// 17f: 48 8b 04 24                   movq    (%rsp), %rax
// 183: 49 29 c4                      subq    %rax, %r12
// 186: 49 83 c4 b8                   addq    $-0x48, %r12
// 18a: 49 c1 ec 03                   shrq    $0x3, %r12
// 18e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 192: 31 c0                         xorl    %eax, %eax
// 194: 48 83 c4 28                   addq    $0x28, %rsp
// 198: 5b                            popq    %rbx
// 199: 41 5c                         popq    %r12
// 19b: 41 5d                         popq    %r13
// 19d: 41 5e                         popq    %r14
// 19f: 41 5f                         popq    %r15
// 1a1: 5d                            popq    %rbp
// 1a2: c3                            retq
// 1a3: f2 41 0f 10 46 10             movsd   0x10(%r14), %xmm0       # xmm0 = mem[0],zero
// 1a9: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 1af: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1b5: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 1bb: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 1c0: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001c2:  R_X86_64_64  PyInterpreterState_Get
// 1ca: 75 1e                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1cc: 41 ff d7                      callq   *%r15
// 1cf: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d6: 49 ff 0e                      decq    (%r14)
// 1d9: 75 0f                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _PyFloat_ExactDealloc
// 1e5: 4c 89 f7                      movq    %r14, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 4c 8d 24 dd f8 ff ff ff       leaq    -0x8(,%rbx,8), %r12
// 1f2: 49 01 ec                      addq    %rbp, %r12
// 1f5: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1fa: 75 1f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 1fc: 41 ff d7                      callq   *%r15
// 1ff: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 206: 49 ff 4d 00                   decq    (%r13)
// 20a: 75 0f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _PyFloat_ExactDealloc
// 216: 4c 89 ef                      movq    %r13, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 31 c0                         xorl    %eax, %eax
// 21d: f2 0f 10 44 24 08             movsd   0x8(%rsp), %xmm0        # xmm0 = mem[0],zero
// 223: f2 0f 10 4c 24 10             movsd   0x10(%rsp), %xmm1       # xmm1 = mem[0],zero
// 229: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 22d: 0f 93 c0                      setae   %al
// 230: 01 c0                         addl    %eax, %eax
// 232: 31 c9                         xorl    %ecx, %ecx
// 234: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 238: 0f 93 c1                      setae   %cl
// 23b: 09 c1                         orl     %eax, %ecx
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_OPARG
// 247: 0f b7 c0                      movzwl  %ax, %eax
// 24a: 0f a3 c8                      btl     %ecx, %eax
// 24d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024f:  R_X86_64_64  _Py_FalseStruct
// 257: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000259:  R_X86_64_64  _Py_TrueStruct
// 261: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 265: b9 01 00 00 00                movl    $0x1, %ecx
// 26a: 29 c1                         subl    %eax, %ecx
// 26c: 48 63 c1                      movslq  %ecx, %rax
// 26f: 48 89 54 c5 f0                movq    %rdx, -0x10(%rbp,%rax,8)
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _JIT_CONTINUE
// 27e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 282: 4c 89 e6                      movq    %r12, %rsi
// 285: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_FLOAT_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x20, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4c, 0x8b, 0x74, 0xdd, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x75, 0x0b, 0x4c, 0x8b, 0x6c, 0xdd, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x74, 0x5c, 0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x15, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0xf2, 0x41, 0x0f, 0x10, 0x46, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4c, 0x8d, 0x24, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0x49, 0x01, 0xec, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1f, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x08, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x10, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xc8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x54, 0xc5, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_COMPARE_OP_FLOAT_code_holes[19] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_COMPARE_OP_FLOAT_data_holes[1];

// _BUILD_STRINGplus_COMPARE_OP_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_COMPARE_OP_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 92 00 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 118: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f8                      movslq  %eax, %r15
// 126: 4e 8b 64 ff f0                movq    -0x10(%rdi,%r15,8), %r12
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyLong_Type
// 135: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 13a: 75 20                         jne     0x15c <_JIT_ENTRY+0x15c>
// 13c: 4e 8b 6c ff f8                movq    -0x8(%rdi,%r15,8), %r13
// 141: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 145: 75 15                         jne     0x15c <_JIT_ENTRY+0x15c>
// 147: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 14c: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 150: 77 0a                         ja      0x15c <_JIT_ENTRY+0x15c>
// 152: 4d 8b 75 10                   movq    0x10(%r13), %r14
// 156: 49 83 fe 0f                   cmpq    $0xf, %r14
// 15a: 76 57                         jbe     0x1b3 <_JIT_ENTRY+0x1b3>
// 15c: 4a 8d 04 ff                   leaq    (%rdi,%r15,8), %rax
// 160: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 165: 48 29 c8                      subq    %rcx, %rax
// 168: 48 83 c0 b8                   addq    $-0x48, %rax
// 16c: 48 c1 e8 03                   shrq    $0x3, %rax
// 170: 89 41 40                      movl    %eax, 0x40(%rcx)
// 173: 48 8b 01                      movq    (%rcx), %rax
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  _JIT_TARGET
// 180: 89 c9                         movl    %ecx, %ecx
// 182: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 186: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 193: 49 29 c4                      subq    %rax, %r12
// 196: 49 83 c4 b8                   addq    $-0x48, %r12
// 19a: 49 c1 ec 03                   shrq    $0x3, %r12
// 19e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a2: 31 c0                         xorl    %eax, %eax
// 1a4: 48 83 c4 28                   addq    $0x28, %rsp
// 1a8: 5b                            popq    %rbx
// 1a9: 41 5c                         popq    %r12
// 1ab: 41 5d                         popq    %r13
// 1ad: 41 5e                         popq    %r14
// 1af: 41 5f                         popq    %r15
// 1b1: 5d                            popq    %rbp
// 1b2: c3                            retq
// 1b3: 41 8b 5c 24 18                movl    0x18(%r12), %ebx
// 1b8: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1bc: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 1c1: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  PyInterpreterState_Get
// 1d1: 75 46                         jne     0x219 <_JIT_ENTRY+0x219>
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  PyInterpreterState_Get
// 1dd: ff d0                         callq   *%rax
// 1df: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ed:  R_X86_64_64  PyInterpreterState_Get
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 1e                         jne     0x219 <_JIT_ENTRY+0x219>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  PyObject_Free
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  PyInterpreterState_Get
// 214: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 219: 4e 8d 24 ff                   leaq    (%rdi,%r15,8), %r12
// 21d: 49 83 c4 f8                   addq    $-0x8, %r12
// 221: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 226: 75 28                         jne     0x250 <_JIT_ENTRY+0x250>
// 228: ff d1                         callq   *%rcx
// 22a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 22f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 236: 49 ff 4d 00                   decq    (%r13)
// 23a: 75 14                         jne     0x250 <_JIT_ENTRY+0x250>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  PyObject_Free
// 246: 4c 89 ef                      movq    %r13, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 250: 83 e5 03                      andl    $0x3, %ebp
// 253: b8 01 00 00 00                movl    $0x1, %eax
// 258: b9 01 00 00 00                movl    $0x1, %ecx
// 25d: 48 29 e9                      subq    %rbp, %rcx
// 260: 48 0f af cb                   imulq   %rbx, %rcx
// 264: 41 83 e6 03                   andl    $0x3, %r14d
// 268: 4c 29 f0                      subq    %r14, %rax
// 26b: 48 0f af 44 24 18             imulq   0x18(%rsp), %rax
// 271: 31 d2                         xorl    %edx, %edx
// 273: 31 f6                         xorl    %esi, %esi
// 275: 48 39 c1                      cmpq    %rax, %rcx
// 278: 0f 9d c2                      setge   %dl
// 27b: 40 0f 9e c6                   setle   %sil
// 27f: 01 d2                         addl    %edx, %edx
// 281: 09 d6                         orl     %edx, %esi
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: 0f b7 c0                      movzwl  %ax, %eax
// 290: 0f a3 f0                      btl     %esi, %eax
// 293: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000295:  R_X86_64_64  _Py_FalseStruct
// 29d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000029f:  R_X86_64_64  _Py_TrueStruct
// 2a7: 48 0f 43 d1                   cmovaeq %rcx, %rdx
// 2ab: b9 01 00 00 00                movl    $0x1, %ecx
// 2b0: 29 c1                         subl    %eax, %ecx
// 2b2: 48 63 c1                      movslq  %ecx, %rax
// 2b5: 48 89 54 c7 f0                movq    %rdx, -0x10(%rdi,%rax,8)
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _JIT_CONTINUE
// 2c4: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2c9: 4c 89 e6                      movq    %r12, %rsi
// 2cc: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 2d1: 48 83 c4 28                   addq    $0x28, %rsp
// 2d5: 5b                            popq    %rbx
// 2d6: 41 5c                         popq    %r12
// 2d8: 41 5d                         popq    %r13
// 2da: 41 5e                         popq    %r14
// 2dc: 41 5f                         popq    %r15
// 2de: 5d                            popq    %rbp
// 2df: ff e0                         jmpq    *%rax
// 2e1: 
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_INT_code_body[738] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4e, 0x8b, 0x64, 0xff, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x20, 0x4e, 0x8b, 0x6c, 0xff, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x75, 0x15, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x77, 0x0a, 0x4d, 0x8b, 0x75, 0x10, 0x49, 0x83, 0xfe, 0x0f, 0x76, 0x57, 0x4a, 0x8d, 0x04, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x5c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x18, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4e, 0x8d, 0x24, 0xff, 0x49, 0x83, 0xc4, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0xff, 0xd1, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0xcb, 0x41, 0x83, 0xe6, 0x03, 0x4c, 0x29, 0xf0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x18, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x0f, 0xa3, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_COMPARE_OP_INT_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_COMPARE_OP_INT_data_holes[1];

// _BUILD_STRINGplus_COMPARE_OP_STR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_COMPARE_OP_STR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 7d                         je      0x175 <_JIT_ENTRY+0x175>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 114: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 63 d8                      movslq  %eax, %rbx
// 122: 4d 8b 6c df f0                movq    -0x10(%r15,%rbx,8), %r13
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  PyUnicode_Type
// 131: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 135: 75 0c                         jne     0x143 <_JIT_ENTRY+0x143>
// 137: 4d 8b 64 df f8                movq    -0x8(%r15,%rbx,8), %r12
// 13c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 141: 74 57                         je      0x19a <_JIT_ENTRY+0x19a>
// 143: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 147: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 14c: 48 29 c8                      subq    %rcx, %rax
// 14f: 48 83 c0 b8                   addq    $-0x48, %rax
// 153: 48 c1 e8 03                   shrq    $0x3, %rax
// 157: 89 41 40                      movl    %eax, 0x40(%rcx)
// 15a: 48 8b 01                      movq    (%rcx), %rax
// 15d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015f:  R_X86_64_64  _JIT_TARGET
// 167: 89 c9                         movl    %ecx, %ecx
// 169: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 16d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 173: eb 16                         jmp     0x18b <_JIT_ENTRY+0x18b>
// 175: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17a: 49 29 c4                      subq    %rax, %r12
// 17d: 49 83 c4 b8                   addq    $-0x48, %r12
// 181: 49 c1 ec 03                   shrq    $0x3, %r12
// 185: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 189: 31 c0                         xorl    %eax, %eax
// 18b: 48 83 c4 28                   addq    $0x28, %rsp
// 18f: 5b                            popq    %rbx
// 190: 41 5c                         popq    %r12
// 192: 41 5d                         popq    %r13
// 194: 41 5e                         popq    %r14
// 196: 41 5f                         popq    %r15
// 198: 5d                            popq    %rbp
// 199: c3                            retq
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _PyUnicode_Equal
// 1a4: 4c 89 ef                      movq    %r13, %rdi
// 1a7: 4c 89 e6                      movq    %r12, %rsi
// 1aa: ff d0                         callq   *%rax
// 1ac: 89 c5                         movl    %eax, %ebp
// 1ae: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1b3: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001b5:  R_X86_64_64  PyInterpreterState_Get
// 1bd: 75 1f                         jne     0x1de <_JIT_ENTRY+0x1de>
// 1bf: 41 ff d6                      callq   *%r14
// 1c2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c9: 49 ff 4d 00                   decq    (%r13)
// 1cd: 75 0f                         jne     0x1de <_JIT_ENTRY+0x1de>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _PyUnicode_ExactDealloc
// 1d9: 4c 89 ef                      movq    %r13, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 4d 8d 2c df                   leaq    (%r15,%rbx,8), %r13
// 1e2: 49 83 c5 f8                   addq    $-0x8, %r13
// 1e6: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1ec: 75 1f                         jne     0x20d <_JIT_ENTRY+0x20d>
// 1ee: 41 ff d6                      callq   *%r14
// 1f1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f8: 49 ff 0c 24                   decq    (%r12)
// 1fc: 75 0f                         jne     0x20d <_JIT_ENTRY+0x20d>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _PyUnicode_ExactDealloc
// 208: 4c 89 e7                      movq    %r12, %rdi
// 20b: ff d0                         callq   *%rax
// 20d: 83 c5 07                      addl    $0x7, %ebp
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_OPARG
// 21a: 0f b7 c0                      movzwl  %ax, %eax
// 21d: 85 c5                         testl   %eax, %ebp
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  _Py_FalseStruct
// 229: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000022b:  R_X86_64_64  _Py_TrueStruct
// 233: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 237: b9 01 00 00 00                movl    $0x1, %ecx
// 23c: 29 c1                         subl    %eax, %ecx
// 23e: 48 63 c1                      movslq  %ecx, %rax
// 241: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_CONTINUE
// 250: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 255: 4c 89 ee                      movq    %r13, %rsi
// 258: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 25d: 48 83 c4 28                   addq    $0x28, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: ff e0                         jmpq    *%rax
// 26d: 
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_STR_code_body[622] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x0c, 0x4d, 0x8b, 0x64, 0xdf, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x57, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1f, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x2c, 0xdf, 0x49, 0x83, 0xc5, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1f, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x85, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_COMPARE_OP_STR_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_COMPARE_OP_STR_data_holes[1];

// _BUILD_STRINGplus_CONTAINS_OP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CONTAINS_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7f: 49 ff c7                      incq    %r15
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 0f 84 5b 01 00 00             je      0x256 <_JIT_ENTRY+0x256>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 0f b7 c0                      movzwl  %ax, %eax
// 10b: 48 c1 e0 03                   shlq    $0x3, %rax
// 10f: 48 f7 d8                      negq    %rax
// 112: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 117: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11b: b8 01 00 00 00                movl    $0x1, %eax
// 120: 29 c8                         subl    %ecx, %eax
// 122: 4c 63 f0                      movslq  %eax, %r14
// 125: 4f 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %r13
// 12a: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  PySequence_Contains
// 139: 4c 89 e7                      movq    %r12, %rdi
// 13c: 4c 89 ee                      movq    %r13, %rsi
// 13f: ff d0                         callq   *%rax
// 141: 89 c5                         movl    %eax, %ebp
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 48 85 c0                      testq   %rax, %rax
// 14a: 7e 06                         jle     0x152 <_JIT_ENTRY+0x152>
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 79 28                         jns     0x178 <_JIT_ENTRY+0x178>
// 150: eb 2e                         jmp     0x180 <_JIT_ENTRY+0x180>
// 152: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000154:  R_X86_64_64  .rodata.str1.1
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_NegativeRefcount
// 166: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 16b: 4c 89 ea                      movq    %r13, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 49 8b 45 00                   movq    (%r13), %rax
// 174: 85 c0                         testl   %eax, %eax
// 176: 78 08                         js      0x180 <_JIT_ENTRY+0x180>
// 178: ff d3                         callq   *%rbx
// 17a: 49 ff 4d 00                   decq    (%r13)
// 17e: 74 0f                         je      0x18f <_JIT_ENTRY+0x18f>
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7e 1e                         jle     0x1a7 <_JIT_ENTRY+0x1a7>
// 189: 85 c0                         testl   %eax, %eax
// 18b: 79 40                         jns     0x1cd <_JIT_ENTRY+0x1cd>
// 18d: eb 46                         jmp     0x1d5 <_JIT_ENTRY+0x1d5>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: 4c 89 ef                      movq    %r13, %rdi
// 19c: ff d0                         callq   *%rax
// 19e: 49 8b 04 24                   movq    (%r12), %rax
// 1a2: 48 85 c0                      testq   %rax, %rax
// 1a5: 7f e2                         jg      0x189 <_JIT_ENTRY+0x189>
// 1a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_NegativeRefcount
// 1bb: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 1c0: 4c 89 e2                      movq    %r12, %rdx
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 8b 04 24                   movq    (%r12), %rax
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 78 08                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1cd: ff d3                         callq   *%rbx
// 1cf: 49 ff 0c 24                   decq    (%r12)
// 1d3: 74 66                         je      0x23b <_JIT_ENTRY+0x23b>
// 1d5: 85 ed                         testl   %ebp, %ebp
// 1d7: 78 75                         js      0x24e <_JIT_ENTRY+0x24e>
// 1d9: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 1dd: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c0                      movzwl  %ax, %eax
// 1ee: 39 c5                         cmpl    %eax, %ebp
// 1f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f2:  R_X86_64_64  _Py_FalseStruct
// 1fa: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fc:  R_X86_64_64  _Py_TrueStruct
// 204: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 208: b9 01 00 00 00                movl    $0x1, %ecx
// 20d: 29 c1                         subl    %eax, %ecx
// 20f: 48 63 c1                      movslq  %ecx, %rax
// 212: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_CONTINUE
// 221: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 226: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 22b: 48 83 c4 28                   addq    $0x28, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: ff e0                         jmpq    *%rax
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 e7                      movq    %r12, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 85 ed                         testl   %ebp, %ebp
// 24c: 79 8b                         jns     0x1d9 <_JIT_ENTRY+0x1d9>
// 24e: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 252: 49 83 c4 f0                   addq    $-0x10, %r12
// 256: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 25b: 49 29 c4                      subq    %rax, %r12
// 25e: 49 83 c4 b8                   addq    $-0x48, %r12
// 262: 49 c1 ec 03                   shrq    $0x3, %r12
// 266: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 26a: 31 c0                         xorl    %eax, %eax
// 26c: 48 83 c4 28                   addq    $0x28, %rsp
// 270: 5b                            popq    %rbx
// 271: 41 5c                         popq    %r12
// 273: 41 5d                         popq    %r13
// 275: 41 5e                         popq    %r14
// 277: 41 5f                         popq    %r15
// 279: 5d                            popq    %rbp
// 27a: c3                            retq
// 27b: 
static const unsigned char _BUILD_STRINGplus_CONTAINS_OP_code_body[636] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x66, 0x85, 0xed, 0x78, 0x75, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x39, 0xc5, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x8b, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CONTAINS_OP_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CONTAINS_OP_data_holes[1];

// _BUILD_STRINGplus_CONVERT_VALUE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_CONVERT_VALUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 f2 00 00 00             je      0x1ee <_JIT_ENTRY+0x1ee>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 114: 48 f7 da                      negq    %rdx
// 117: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 11c: 49 89 34 16                   movq    %rsi, (%r14,%rdx)
// 120: ba 01 00 00 00                movl    $0x1, %edx
// 125: 29 ca                         subl    %ecx, %edx
// 127: 48 63 da                      movslq  %edx, %rbx
// 12a: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  .rodata
// 139: 4c 89 ef                      movq    %r13, %rdi
// 13c: ff 14 c1                      callq   *(%rcx,%rax,8)
// 13f: 49 89 c4                      movq    %rax, %r12
// 142: 49 8b 45 00                   movq    (%r13), %rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 7e 06                         jle     0x151 <_JIT_ENTRY+0x151>
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 79 28                         jns     0x177 <_JIT_ENTRY+0x177>
// 14f: eb 38                         jmp     0x189 <_JIT_ENTRY+0x189>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 16a: 4c 89 ea                      movq    %r13, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 45 00                   movq    (%r13), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 12                         js      0x189 <_JIT_ENTRY+0x189>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 4d 00                   decq    (%r13)
// 187: 74 49                         je      0x1d2 <_JIT_ENTRY+0x1d2>
// 189: 4d 85 e4                      testq   %r12, %r12
// 18c: 74 58                         je      0x1e6 <_JIT_ENTRY+0x1e6>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c0                      movzwl  %ax, %eax
// 19b: b9 01 00 00 00                movl    $0x1, %ecx
// 1a0: 29 c1                         subl    %eax, %ecx
// 1a2: 48 63 c1                      movslq  %ecx, %rax
// 1a5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1a9: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _JIT_CONTINUE
// 1b8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1bd: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c2: 48 83 c4 28                   addq    $0x28, %rsp
// 1c6: 5b                            popq    %rbx
// 1c7: 41 5c                         popq    %r12
// 1c9: 41 5d                         popq    %r13
// 1cb: 41 5e                         popq    %r14
// 1cd: 41 5f                         popq    %r15
// 1cf: 5d                            popq    %rbp
// 1d0: ff e0                         jmpq    *%rax
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_Dealloc
// 1dc: 4c 89 ef                      movq    %r13, %rdi
// 1df: ff d0                         callq   *%rax
// 1e1: 4d 85 e4                      testq   %r12, %r12
// 1e4: 75 a8                         jne     0x18e <_JIT_ENTRY+0x18e>
// 1e6: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 1ea: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ee: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f3: 49 29 c4                      subq    %rax, %r12
// 1f6: 49 83 c4 b8                   addq    $-0x48, %r12
// 1fa: 49 c1 ec 03                   shrq    $0x3, %r12
// 1fe: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 202: 31 c0                         xorl    %eax, %eax
// 204: 48 83 c4 28                   addq    $0x28, %rsp
// 208: 5b                            popq    %rbx
// 209: 41 5c                         popq    %r12
// 20b: 41 5d                         popq    %r13
// 20d: 41 5e                         popq    %r14
// 20f: 41 5f                         popq    %r15
// 211: 5d                            popq    %rbp
// 212: c3                            retq
// 213: 
static const unsigned char _BUILD_STRINGplus_CONVERT_VALUE_code_body[532] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x34, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x4d, 0x85, 0xe4, 0x74, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa8, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_CONVERT_VALUE_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _BUILD_STRINGplus_COPY
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_COPY.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 92 00 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 114: 48 f7 da                      negq    %rdx
// 117: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 11c: 49 89 34 17                   movq    %rsi, (%r15,%rdx)
// 120: bb 01 00 00 00                movl    $0x1, %ebx
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 ca                      movslq  %edx, %rcx
// 12f: 48 29 c1                      subq    %rax, %rcx
// 132: 4d 8b 34 cf                   movq    (%r15,%rcx,8), %r14
// 136: 41 8b 06                      movl    (%r14), %eax
// 139: ff c0                         incl    %eax
// 13b: 74 0f                         je      0x14c <_JIT_ENTRY+0x14c>
// 13d: 41 89 06                      movl    %eax, (%r14)
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 14a: ff d0                         callq   *%rax
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _JIT_OPARG
// 156: 0f b7 c0                      movzwl  %ax, %eax
// 159: 29 c3                         subl    %eax, %ebx
// 15b: 48 63 c3                      movslq  %ebx, %rax
// 15e: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 162: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 166: 48 83 c6 08                   addq    $0x8, %rsi
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _JIT_CONTINUE
// 174: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 179: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 17e: 48 83 c4 28                   addq    $0x28, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: ff e0                         jmpq    *%rax
// 18e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 193: 49 29 c4                      subq    %rax, %r12
// 196: 49 83 c4 b8                   addq    $-0x48, %r12
// 19a: 49 c1 ec 03                   shrq    $0x3, %r12
// 19e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a2: 31 c0                         xorl    %eax, %eax
// 1a4: 48 83 c4 28                   addq    $0x28, %rsp
// 1a8: 5b                            popq    %rbx
// 1a9: 41 5c                         popq    %r12
// 1ab: 41 5d                         popq    %r13
// 1ad: 41 5e                         popq    %r14
// 1af: 41 5f                         popq    %r15
// 1b1: 5d                            popq    %rbp
// 1b2: c3                            retq
// 1b3: 
static const unsigned char _BUILD_STRINGplus_COPY_code_body[436] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x34, 0x17, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x29, 0xc1, 0x4d, 0x8b, 0x34, 0xcf, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_COPY_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_COPY_data_holes[1];

// _BUILD_STRINGplus_COPY_FREE_VARS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_COPY_FREE_VARS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f8                   movzwl  %ax, %r15d
// 77: 49 ff c7                      incq    %r15
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 15                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: ff d3                         callq   *%rbx
// cd: 49 8b 06                      movq    (%r14), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d5                      callq   *%r13
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// f2: 48 85 c0                      testq   %rax, %rax
// f5: 0f 84 c9 00 00 00             je      0x1c4 <_JIT_ENTRY+0x1c4>
// fb: 49 89 04 24                   movq    %rax, (%r12)
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _JIT_OPARG
// 109: 66 85 c0                      testw   %ax, %ax
// 10c: 74 72                         je      0x180 <_JIT_ENTRY+0x180>
// 10e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 113: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 117: 48 8b 58 48                   movq    0x48(%rax), %rbx
// 11b: 48 8b 02                      movq    (%rdx), %rax
// 11e: 8b 40 48                      movl    0x48(%rax), %eax
// 121: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000123:  R_X86_64_64  _JIT_OPARG
// 12b: 0f b7 c9                      movzwl  %cx, %ecx
// 12e: 29 c8                         subl    %ecx, %eax
// 130: 83 f9 02                      cmpl    $0x2, %ecx
// 133: 41 be 01 00 00 00             movl    $0x1, %r14d
// 139: 44 0f 43 f1                   cmovael %ecx, %r14d
// 13d: 48 98                         cltq
// 13f: 4c 8d 3c c2                   leaq    (%rdx,%rax,8), %r15
// 143: 49 83 c7 48                   addq    $0x48, %r15
// 147: 45 31 e4                      xorl    %r12d, %r12d
// 14a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000014c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 154: eb 16                         jmp     0x16c <_JIT_ENTRY+0x16c>
// 156: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 160: 4b 89 2c e7                   movq    %rbp, (%r15,%r12,8)
// 164: 49 ff c4                      incq    %r12
// 167: 4d 39 e6                      cmpq    %r12, %r14
// 16a: 74 14                         je      0x180 <_JIT_ENTRY+0x180>
// 16c: 4a 8b 6c e3 18                movq    0x18(%rbx,%r12,8), %rbp
// 171: 8b 45 00                      movl    (%rbp), %eax
// 174: ff c0                         incl    %eax
// 176: 74 e8                         je      0x160 <_JIT_ENTRY+0x160>
// 178: 89 45 00                      movl    %eax, (%rbp)
// 17b: 41 ff d5                      callq   *%r13
// 17e: eb e0                         jmp     0x160 <_JIT_ENTRY+0x160>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _JIT_OPARG
// 18a: 0f b7 c0                      movzwl  %ax, %eax
// 18d: b9 01 00 00 00                movl    $0x1, %ecx
// 192: 29 c1                         subl    %eax, %ecx
// 194: 48 63 c1                      movslq  %ecx, %rax
// 197: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 19c: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _JIT_CONTINUE
// 1aa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1af: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1b4: 48 83 c4 28                   addq    $0x28, %rsp
// 1b8: 5b                            popq    %rbx
// 1b9: 41 5c                         popq    %r12
// 1bb: 41 5d                         popq    %r13
// 1bd: 41 5e                         popq    %r14
// 1bf: 41 5f                         popq    %r15
// 1c1: 5d                            popq    %rbp
// 1c2: ff e0                         jmpq    *%rax
// 1c4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c9: 49 29 c4                      subq    %rax, %r12
// 1cc: 49 83 c4 b8                   addq    $-0x48, %r12
// 1d0: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d4: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1d8: 31 c0                         xorl    %eax, %eax
// 1da: 48 83 c4 28                   addq    $0x28, %rsp
// 1de: 5b                            popq    %rbx
// 1df: 41 5c                         popq    %r12
// 1e1: 41 5d                         popq    %r13
// 1e3: 41 5e                         popq    %r14
// 1e5: 41 5f                         popq    %r15
// 1e7: 5d                            popq    %rbp
// 1e8: c3                            retq
// 1e9: 
static const unsigned char _BUILD_STRINGplus_COPY_FREE_VARS_code_body[490] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd3, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x72, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x58, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf1, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc2, 0x49, 0x83, 0xc7, 0x48, 0x45, 0x31, 0xe4, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x89, 0x2c, 0xe7, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe6, 0x74, 0x14, 0x4a, 0x8b, 0x6c, 0xe3, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe8, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0xeb, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_COPY_FREE_VARS_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_COPY_FREE_VARS_data_holes[1];

// _BUILD_STRINGplus_DELETE_ATTR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DELETE_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fb: 0f 84 bb 00 00 00             je      0x1bc <_JIT_ENTRY+0x1bc>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 121: 49 89 34 17                   movq    %rsi, (%r15,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 da                      movslq  %edx, %rbx
// 12f: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 134: 49 8b 0e                      movq    (%r14), %rcx
// 137: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13b: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  PyObject_DelAttr
// 14a: 4c 89 ef                      movq    %r13, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 89 c5                         movl    %eax, %ebp
// 151: 49 8b 45 00                   movq    (%r13), %rax
// 155: 48 85 c0                      testq   %rax, %rax
// 158: 7e 12                         jle     0x16c <_JIT_ENTRY+0x16c>
// 15a: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 15e: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 162: 48 83 c3 f8                   addq    $-0x8, %rbx
// 166: 85 c0                         testl   %eax, %eax
// 168: 79 34                         jns     0x19e <_JIT_ENTRY+0x19e>
// 16a: eb 44                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 16c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016e:  R_X86_64_64  .rodata.str1.1
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_NegativeRefcount
// 180: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 185: 4c 89 ea                      movq    %r13, %rdx
// 188: ff d0                         callq   *%rax
// 18a: 49 8b 45 00                   movq    (%r13), %rax
// 18e: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 192: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 196: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 12                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a8: ff d0                         callq   *%rax
// 1aa: 49 ff 4d 00                   decq    (%r13)
// 1ae: 74 2c                         je      0x1dc <_JIT_ENTRY+0x1dc>
// 1b0: 85 ed                         testl   %ebp, %ebp
// 1b2: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 1b6: 74 3b                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1b8: 49 83 c4 f8                   addq    $-0x8, %r12
// 1bc: 4d 29 f4                      subq    %r14, %r12
// 1bf: 49 83 c4 b8                   addq    $-0x48, %r12
// 1c3: 49 c1 ec 03                   shrq    $0x3, %r12
// 1c7: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 1cb: 31 c0                         xorl    %eax, %eax
// 1cd: 48 83 c4 28                   addq    $0x28, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: c3                            retq
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 ef                      movq    %r13, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 1f1: 75 c5                         jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 4c 89 f7                      movq    %r14, %rdi
// 200: 4c 89 e6                      movq    %r12, %rsi
// 203: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 208: 48 83 c4 28                   addq    $0x28, %rsp
// 20c: 5b                            popq    %rbx
// 20d: 41 5c                         popq    %r12
// 20f: 41 5d                         popq    %r13
// 211: 41 5e                         popq    %r14
// 213: 41 5f                         popq    %r15
// 215: 5d                            popq    %rbp
// 216: ff e0                         jmpq    *%rax
// 218: 
static const unsigned char _BUILD_STRINGplus_DELETE_ATTR_code_body[537] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x34, 0x17, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x49, 0x8b, 0x0e, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2c, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x3b, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_DELETE_ATTR_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DELETE_ATTR_data_holes[1];

// _BUILD_STRINGplus_DELETE_DEREF
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DELETE_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 74 7b                         je      0x178 <_JIT_ENTRY+0x178>
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _JIT_OPARG
// 107: 0f b7 c8                      movzwl  %ax, %ecx
// 10a: 0f b7 c0                      movzwl  %ax, %eax
// 10d: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 115: 48 f7 da                      negq    %rdx
// 118: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 11d: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 ca                      movslq  %edx, %rcx
// 12b: 4c 8d 3c ce                   leaq    (%rsi,%rcx,8), %r15
// 12f: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 134: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 138: 4d 85 e4                      testq   %r12, %r12
// 13b: 74 1a                         je      0x157 <_JIT_ENTRY+0x157>
// 13d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 145: 49 8b 04 24                   movq    (%r12), %rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 7e 4a                         jle     0x198 <_JIT_ENTRY+0x198>
// 14e: 85 c0                         testl   %eax, %eax
// 150: 79 6c                         jns     0x1be <_JIT_ENTRY+0x1be>
// 152: e9 88 00 00 00                jmp     0x1df <_JIT_ENTRY+0x1df>
// 157: 48 8b 33                      movq    (%rbx), %rsi
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _JIT_OPARG
// 164: 0f b7 d0                      movzwl  %ax, %edx
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _PyEval_FormatExcUnbound
// 171: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 176: ff d0                         callq   *%rax
// 178: 49 29 df                      subq    %rbx, %r15
// 17b: 49 83 c7 b8                   addq    $-0x48, %r15
// 17f: 49 c1 ef 03                   shrq    $0x3, %r15
// 183: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 187: 31 c0                         xorl    %eax, %eax
// 189: 48 83 c4 28                   addq    $0x28, %rsp
// 18d: 5b                            popq    %rbx
// 18e: 41 5c                         popq    %r12
// 190: 41 5d                         popq    %r13
// 192: 41 5e                         popq    %r14
// 194: 41 5f                         popq    %r15
// 196: 5d                            popq    %rbp
// 197: c3                            retq
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NegativeRefcount
// 1ac: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 1b1: 4c 89 e2                      movq    %r12, %rdx
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 8b 04 24                   movq    (%r12), %rax
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 21                         js      0x1df <_JIT_ENTRY+0x1df>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 ff 0c 24                   decq    (%r12)
// 1ce: 75 0f                         jne     0x1df <_JIT_ENTRY+0x1df>
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_Dealloc
// 1da: 4c 89 e7                      movq    %r12, %rdi
// 1dd: ff d0                         callq   *%rax
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_CONTINUE
// 1e9: 48 89 df                      movq    %rbx, %rdi
// 1ec: 4c 89 fe                      movq    %r15, %rsi
// 1ef: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f4: 48 83 c4 28                   addq    $0x28, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 
static const unsigned char _BUILD_STRINGplus_DELETE_DEREF_code_body[517] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x3c, 0xce, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4a, 0x85, 0xc0, 0x79, 0x6c, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_DELETE_DEREF_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DELETE_DEREF_data_holes[1];

// _BUILD_STRINGplus_DELETE_FAST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DELETE_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 b7 00 00 00             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 121: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 ca                      movslq  %edx, %rcx
// 12f: 4c 8d 3c ce                   leaq    (%rsi,%rcx,8), %r15
// 133: 4c 8b 64 c3 48                movq    0x48(%rbx,%rax,8), %r12
// 138: 4d 85 e4                      testq   %r12, %r12
// 13b: 74 2c                         je      0x169 <_JIT_ENTRY+0x169>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _JIT_OPARG
// 147: 0f b7 c0                      movzwl  %ax, %eax
// 14a: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 48 85 c0                      testq   %rax, %rax
// 15a: 7e 7c                         jle     0x1d8 <_JIT_ENTRY+0x1d8>
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 89 9a 00 00 00             jns     0x1fe <_JIT_ENTRY+0x1fe>
// 164: e9 b6 00 00 00                jmp     0x21f <_JIT_ENTRY+0x21f>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  PyExc_UnboundLocalError
// 173: 4c 8b 30                      movq    (%rax), %r14
// 176: 48 8b 03                      movq    (%rbx), %rax
// 179: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _JIT_OPARG
// 187: 0f b7 f0                      movzwl  %ax, %esi
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  PyTuple_GetItem
// 194: ff d0                         callq   *%rax
// 196: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000198:  R_X86_64_64  .rodata.str1.1+0x39
// 1a0: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001a2:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1aa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1af: 4c 89 f6                      movq    %r14, %rsi
// 1b2: 48 89 c1                      movq    %rax, %rcx
// 1b5: 41 ff d0                      callq   *%r8
// 1b8: 49 29 df                      subq    %rbx, %r15
// 1bb: 49 83 c7 b8                   addq    $-0x48, %r15
// 1bf: 49 c1 ef 03                   shrq    $0x3, %r15
// 1c3: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: 48 83 c4 28                   addq    $0x28, %rsp
// 1cd: 5b                            popq    %rbx
// 1ce: 41 5c                         popq    %r12
// 1d0: 41 5d                         popq    %r13
// 1d2: 41 5e                         popq    %r14
// 1d4: 41 5f                         popq    %r15
// 1d6: 5d                            popq    %rbp
// 1d7: c3                            retq
// 1d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001da:  R_X86_64_64  .rodata.str1.1+0x83
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1f1: 4c 89 e2                      movq    %r12, %rdx
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 8b 04 24                   movq    (%r12), %rax
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 21                         js      0x21f <_JIT_ENTRY+0x21f>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 208: ff d0                         callq   *%rax
// 20a: 49 ff 0c 24                   decq    (%r12)
// 20e: 75 0f                         jne     0x21f <_JIT_ENTRY+0x21f>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_Dealloc
// 21a: 4c 89 e7                      movq    %r12, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_CONTINUE
// 229: 48 89 df                      movq    %rbx, %rdi
// 22c: 4c 89 fe                      movq    %r15, %rsi
// 22f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 234: 48 83 c4 28                   addq    $0x28, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: ff e0                         jmpq    *%rax
// 244: 
static const unsigned char _BUILD_STRINGplus_DELETE_FAST_code_body[581] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x3c, 0xce, 0x4c, 0x8b, 0x64, 0xc3, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7c, 0x85, 0xc0, 0x0f, 0x89, 0x9a, 0x00, 0x00, 0x00, 0xe9, 0xb6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x30, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_DELETE_FAST_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DELETE_FAST_data_holes[1];

// _BUILD_STRINGplus_DELETE_GLOBAL
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DELETE_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 a3 00 00 00             je      0x1a4 <_JIT_ENTRY+0x1a4>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 121: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 ca                      movslq  %edx, %rcx
// 12f: 4c 8d 3c ce                   leaq    (%rsi,%rcx,8), %r15
// 133: 48 8b 0b                      movq    (%rbx), %rcx
// 136: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 13a: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13e: 4c 8b 64 c1 18                movq    0x18(%rcx,%rax,8), %r12
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  PyDict_DelItem
// 14d: 4c 89 e6                      movq    %r12, %rsi
// 150: ff d0                         callq   *%rax
// 152: 85 c0                         testl   %eax, %eax
// 154: 74 6e                         je      0x1c4 <_JIT_ENTRY+0x1c4>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  PyExc_KeyError
// 160: 48 8b 30                      movq    (%rax), %rsi
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _PyErr_ExceptionMatches
// 16d: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 172: 4c 89 f7                      movq    %r14, %rdi
// 175: ff d0                         callq   *%rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 74 29                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyExc_NameError
// 185: 48 8b 30                      movq    (%rax), %rsi
// 188: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000018a:  R_X86_64_64  .rodata.str1.1+0x39
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 19c: 4c 89 f7                      movq    %r14, %rdi
// 19f: 4c 89 e1                      movq    %r12, %rcx
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 29 df                      subq    %rbx, %r15
// 1a7: 49 83 c7 b8                   addq    $-0x48, %r15
// 1ab: 49 c1 ef 03                   shrq    $0x3, %r15
// 1af: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: 48 83 c4 28                   addq    $0x28, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: c3                            retq
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_CONTINUE
// 1ce: 48 89 df                      movq    %rbx, %rdi
// 1d1: 4c 89 fe                      movq    %r15, %rsi
// 1d4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d9: 48 83 c4 28                   addq    $0x28, %rsp
// 1dd: 5b                            popq    %rbx
// 1de: 41 5c                         popq    %r12
// 1e0: 41 5d                         popq    %r13
// 1e2: 41 5e                         popq    %r14
// 1e4: 41 5f                         popq    %r15
// 1e6: 5d                            popq    %rbp
// 1e7: ff e0                         jmpq    *%rax
// 1e9: 
static const unsigned char _BUILD_STRINGplus_DELETE_GLOBAL_code_body[490] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x3c, 0xce, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x4c, 0x8b, 0x64, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_DELETE_GLOBAL_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BUILD_STRINGplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DELETE_GLOBAL_data_holes[1];

// _BUILD_STRINGplus_DELETE_NAME
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DELETE_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 b5 00 00 00             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 121: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 ca                      movslq  %edx, %rcx
// 12f: 4c 8d 3c ce                   leaq    (%rsi,%rcx,8), %r15
// 133: 48 8b 0b                      movq    (%rbx), %rcx
// 136: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 13a: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13e: 4c 8b 64 c1 18                movq    0x18(%rcx,%rax,8), %r12
// 143: 48 85 ff                      testq   %rdi, %rdi
// 146: 74 40                         je      0x188 <_JIT_ENTRY+0x188>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  PyObject_DelItem
// 152: 4c 89 e6                      movq    %r12, %rsi
// 155: ff d0                         callq   *%rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 74 7b                         je      0x1d6 <_JIT_ENTRY+0x1d6>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  PyExc_NameError
// 165: 48 8b 30                      movq    (%rax), %rsi
// 168: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000016a:  R_X86_64_64  .rodata.str1.1+0x54
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 17c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 181: 4c 89 e1                      movq    %r12, %rcx
// 184: ff d0                         callq   *%rax
// 186: eb 2e                         jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  PyExc_SystemError
// 192: 48 8b 30                      movq    (%rax), %rsi
// 195: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000197:  R_X86_64_64  .rodata.str1.1+0x39
// 19f: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001a1:  R_X86_64_64  _PyErr_Format
// 1a9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ae: 4c 89 e1                      movq    %r12, %rcx
// 1b1: 31 c0                         xorl    %eax, %eax
// 1b3: 41 ff d0                      callq   *%r8
// 1b6: 49 29 df                      subq    %rbx, %r15
// 1b9: 49 83 c7 b8                   addq    $-0x48, %r15
// 1bd: 49 c1 ef 03                   shrq    $0x3, %r15
// 1c1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1c5: 31 c0                         xorl    %eax, %eax
// 1c7: 48 83 c4 28                   addq    $0x28, %rsp
// 1cb: 5b                            popq    %rbx
// 1cc: 41 5c                         popq    %r12
// 1ce: 41 5d                         popq    %r13
// 1d0: 41 5e                         popq    %r14
// 1d2: 41 5f                         popq    %r15
// 1d4: 5d                            popq    %rbp
// 1d5: c3                            retq
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_CONTINUE
// 1e0: 48 89 df                      movq    %rbx, %rdi
// 1e3: 4c 89 fe                      movq    %r15, %rsi
// 1e6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1eb: 48 83 c4 28                   addq    $0x28, %rsp
// 1ef: 5b                            popq    %rbx
// 1f0: 41 5c                         popq    %r12
// 1f2: 41 5d                         popq    %r13
// 1f4: 41 5e                         popq    %r14
// 1f6: 41 5f                         popq    %r15
// 1f8: 5d                            popq    %rbp
// 1f9: ff e0                         jmpq    *%rax
// 1fb: 
static const unsigned char _BUILD_STRINGplus_DELETE_NAME_code_body[508] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x3c, 0xce, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x49, 0x20, 0x4c, 0x8b, 0x64, 0xc1, 0x18, 0x48, 0x85, 0xff, 0x74, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_DELETE_NAME_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DELETE_NAME_data_holes[1];

// _BUILD_STRINGplus_DELETE_SUBSCR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DELETE_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 e8                   movzwl  %ax, %r13d
// 7f: 49 ff c5                      incq    %r13
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cd                      decq    %r13
// a3: 49 83 fd 01                   cmpq    $0x1, %r13
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 0f 84 fe 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 0f b7 c0                      movzwl  %ax, %eax
// 10b: 48 c1 e0 03                   shlq    $0x3, %rax
// 10f: 48 f7 d8                      negq    %rax
// 112: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 117: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11b: b8 01 00 00 00                movl    $0x1, %eax
// 120: 29 c8                         subl    %ecx, %eax
// 122: 4c 63 f0                      movslq  %eax, %r14
// 125: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 12a: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  PyObject_DelItem
// 139: 4c 89 e7                      movq    %r12, %rdi
// 13c: 4c 89 ee                      movq    %r13, %rsi
// 13f: ff d0                         callq   *%rax
// 141: 89 c5                         movl    %eax, %ebp
// 143: 49 8b 04 24                   movq    (%r12), %rax
// 147: 48 85 c0                      testq   %rax, %rax
// 14a: 7e 06                         jle     0x152 <_JIT_ENTRY+0x152>
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 79 28                         jns     0x178 <_JIT_ENTRY+0x178>
// 150: eb 2e                         jmp     0x180 <_JIT_ENTRY+0x180>
// 152: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000154:  R_X86_64_64  .rodata.str1.1
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_NegativeRefcount
// 166: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 16b: 4c 89 e2                      movq    %r12, %rdx
// 16e: ff d0                         callq   *%rax
// 170: 49 8b 04 24                   movq    (%r12), %rax
// 174: 85 c0                         testl   %eax, %eax
// 176: 78 08                         js      0x180 <_JIT_ENTRY+0x180>
// 178: ff d3                         callq   *%rbx
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 74 1b                         je      0x19b <_JIT_ENTRY+0x19b>
// 180: 49 8b 45 00                   movq    (%r13), %rax
// 184: 48 85 c0                      testq   %rax, %rax
// 187: 7e 2a                         jle     0x1b3 <_JIT_ENTRY+0x1b3>
// 189: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 18d: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 191: 49 83 c6 f0                   addq    $-0x10, %r14
// 195: 85 c0                         testl   %eax, %eax
// 197: 79 4c                         jns     0x1e5 <_JIT_ENTRY+0x1e5>
// 199: eb 52                         jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_Dealloc
// 1a5: 4c 89 e7                      movq    %r12, %rdi
// 1a8: ff d0                         callq   *%rax
// 1aa: 49 8b 45 00                   movq    (%r13), %rax
// 1ae: 48 85 c0                      testq   %rax, %rax
// 1b1: 7f d6                         jg      0x189 <_JIT_ENTRY+0x189>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 1cc: 4c 89 ea                      movq    %r13, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 8b 45 00                   movq    (%r13), %rax
// 1d5: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 1d9: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 1dd: 49 83 c6 f0                   addq    $-0x10, %r14
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 78 08                         js      0x1ed <_JIT_ENTRY+0x1ed>
// 1e5: ff d3                         callq   *%rbx
// 1e7: 49 ff 4d 00                   decq    (%r13)
// 1eb: 74 31                         je      0x21e <_JIT_ENTRY+0x21e>
// 1ed: 85 ed                         testl   %ebp, %ebp
// 1ef: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 1f3: 74 40                         je      0x235 <_JIT_ENTRY+0x235>
// 1f5: 49 83 c4 f0                   addq    $-0x10, %r12
// 1f9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1fe: 49 29 c4                      subq    %rax, %r12
// 201: 49 83 c4 b8                   addq    $-0x48, %r12
// 205: 49 c1 ec 03                   shrq    $0x3, %r12
// 209: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 20d: 31 c0                         xorl    %eax, %eax
// 20f: 48 83 c4 28                   addq    $0x28, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: c3                            retq
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 85 ed                         testl   %ebp, %ebp
// 22f: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 233: 75 c0                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 244: 4c 89 e6                      movq    %r12, %rsi
// 247: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 24c: 48 83 c4 28                   addq    $0x28, %rsp
// 250: 5b                            popq    %rbx
// 251: 41 5c                         popq    %r12
// 253: 41 5d                         popq    %r13
// 255: 41 5e                         popq    %r14
// 257: 41 5f                         popq    %r15
// 259: 5d                            popq    %rbp
// 25a: ff e0                         jmpq    *%rax
// 25c: 
static const unsigned char _BUILD_STRINGplus_DELETE_SUBSCR_code_body[605] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x4f, 0x8d, 0x24, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd6, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4f, 0x8d, 0x24, 0xf7, 0x4f, 0x8d, 0x34, 0xf7, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x31, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x40, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x75, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_DELETE_SUBSCR_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DELETE_SUBSCR_data_holes[1];

// _BUILD_STRINGplus_DICT_MERGE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DICT_MERGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d6                      callq   *%r14
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 77 01 00 00             je      0x273 <_JIT_ENTRY+0x273>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 e0                      movslq  %eax, %r12
// 126: 4e 8b 6c e3 f8                movq    -0x8(%rbx,%r12,8), %r13
// 12b: b8 fc ff ff ff                movl    $0xfffffffc, %eax       # imm = 0xFFFFFFFC
// 130: 29 c8                         subl    %ecx, %eax
// 132: f7 d1                         notl    %ecx
// 134: 48 63 c9                      movslq  %ecx, %rcx
// 137: 4c 01 e1                      addq    %r12, %rcx
// 13a: 48 8b 3c cb                   movq    (%rbx,%rcx,8), %rdi
// 13e: 48 98                         cltq
// 140: 4c 01 e0                      addq    %r12, %rax
// 143: 4c 8b 3c c3                   movq    (%rbx,%rax,8), %r15
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _PyDict_MergeEx
// 151: 4c 89 ee                      movq    %r13, %rsi
// 154: ba 02 00 00 00                movl    $0x2, %edx
// 159: ff d0                         callq   *%rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 78 1a                         js      0x179 <_JIT_ENTRY+0x179>
// 15f: 49 8b 45 00                   movq    (%r13), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7e 46                         jle     0x1ae <_JIT_ENTRY+0x1ae>
// 168: 4e 8d 34 e3                   leaq    (%rbx,%r12,8), %r14
// 16c: 49 83 c6 f8                   addq    $-0x8, %r14
// 170: 85 c0                         testl   %eax, %eax
// 172: 79 68                         jns     0x1dc <_JIT_ENTRY+0x1dc>
// 174: e9 84 00 00 00                jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _PyEval_FormatKwargsError
// 183: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 188: 4c 89 fe                      movq    %r15, %rsi
// 18b: 4c 89 ea                      movq    %r13, %rdx
// 18e: ff d0                         callq   *%rax
// 190: 49 8b 45 00                   movq    (%r13), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 0f 8e 87 00 00 00             jle     0x224 <_JIT_ENTRY+0x224>
// 19d: 4e 8d 24 e3                   leaq    (%rbx,%r12,8), %r12
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 0f 89 a5 00 00 00             jns     0x24e <_JIT_ENTRY+0x24e>
// 1a9: e9 c1 00 00 00                jmp     0x26f <_JIT_ENTRY+0x26f>
// 1ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b0:  R_X86_64_64  .rodata.str1.1
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_NegativeRefcount
// 1c2: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 1c7: 4c 89 ea                      movq    %r13, %rdx
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 8b 45 00                   movq    (%r13), %rax
// 1d0: 4e 8d 34 e3                   leaq    (%rbx,%r12,8), %r14
// 1d4: 49 83 c6 f8                   addq    $-0x8, %r14
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 78 21                         js      0x1fd <_JIT_ENTRY+0x1fd>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e6: ff d0                         callq   *%rax
// 1e8: 49 ff 4d 00                   decq    (%r13)
// 1ec: 75 0f                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_Dealloc
// 1f8: 4c 89 ef                      movq    %r13, %rdi
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_CONTINUE
// 207: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 20c: 4c 89 f6                      movq    %r14, %rsi
// 20f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 214: 48 83 c4 28                   addq    $0x28, %rsp
// 218: 5b                            popq    %rbx
// 219: 41 5c                         popq    %r12
// 21b: 41 5d                         popq    %r13
// 21d: 41 5e                         popq    %r14
// 21f: 41 5f                         popq    %r15
// 221: 5d                            popq    %rbp
// 222: ff e0                         jmpq    *%rax
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 23d: 4c 89 ea                      movq    %r13, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 45 00                   movq    (%r13), %rax
// 246: 4e 8d 24 e3                   leaq    (%rbx,%r12,8), %r12
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 21                         js      0x26f <_JIT_ENTRY+0x26f>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 49 ff 4d 00                   decq    (%r13)
// 25e: 75 0f                         jne     0x26f <_JIT_ENTRY+0x26f>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_Dealloc
// 26a: 4c 89 ef                      movq    %r13, %rdi
// 26d: ff d0                         callq   *%rax
// 26f: 49 83 c4 f8                   addq    $-0x8, %r12
// 273: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 278: 49 29 c4                      subq    %rax, %r12
// 27b: 49 83 c4 b8                   addq    $-0x48, %r12
// 27f: 49 c1 ec 03                   shrq    $0x3, %r12
// 283: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 287: 31 c0                         xorl    %eax, %eax
// 289: 48 83 c4 28                   addq    $0x28, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: c3                            retq
// 298: 
static const unsigned char _BUILD_STRINGplus_DICT_MERGE_code_body[665] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x77, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xe0, 0x4e, 0x8b, 0x6c, 0xe3, 0xf8, 0xb8, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x01, 0xe1, 0x48, 0x8b, 0x3c, 0xcb, 0x48, 0x98, 0x4c, 0x01, 0xe0, 0x4c, 0x8b, 0x3c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x1a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x46, 0x4e, 0x8d, 0x34, 0xe3, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x68, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x87, 0x00, 0x00, 0x00, 0x4e, 0x8d, 0x24, 0xe3, 0x85, 0xc0, 0x0f, 0x89, 0xa5, 0x00, 0x00, 0x00, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4e, 0x8d, 0x34, 0xe3, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4e, 0x8d, 0x24, 0xe3, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_DICT_MERGE_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DICT_MERGE_data_holes[1];

// _BUILD_STRINGplus_DICT_UPDATE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_DICT_UPDATE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f5                      movq    %rsi, %r13
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c5                      subq    %rax, %r13
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 ee                      movq    %r13, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// b1: 49 8b 07                      movq    (%r15), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 aa 01 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f8                      movslq  %eax, %r15
// 126: 4e 8b 64 fb f8                movq    -0x8(%rbx,%r15,8), %r12
// 12b: f7 d1                         notl    %ecx
// 12d: 48 63 c1                      movslq  %ecx, %rax
// 130: 4c 01 f8                      addq    %r15, %rax
// 133: 48 8b 3c c3                   movq    (%rbx,%rax,8), %rdi
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyDict_Update
// 141: 4c 89 e6                      movq    %r12, %rsi
// 144: ff d0                         callq   *%rax
// 146: 85 c0                         testl   %eax, %eax
// 148: 78 22                         js      0x16c <_JIT_ENTRY+0x16c>
// 14a: 49 8b 04 24                   movq    (%r12), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 0f 8e 8a 00 00 00             jle     0x1e1 <_JIT_ENTRY+0x1e1>
// 157: 4e 8d 34 fb                   leaq    (%rbx,%r15,8), %r14
// 15b: 49 83 c6 f8                   addq    $-0x8, %r14
// 15f: 85 c0                         testl   %eax, %eax
// 161: 0f 89 a8 00 00 00             jns     0x20f <_JIT_ENTRY+0x20f>
// 167: e9 c4 00 00 00                jmp     0x230 <_JIT_ENTRY+0x230>
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  PyExc_AttributeError
// 176: 48 8b 30                      movq    (%rax), %rsi
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _PyErr_ExceptionMatches
// 183: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 188: 4c 89 f7                      movq    %r14, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 74 32                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PyExc_TypeError
// 19b: 48 8b 30                      movq    (%rax), %rsi
// 19e: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1a3: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1a7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1+0x39
// 1b1: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001b3:  R_X86_64_64  _PyErr_Format
// 1bb: 4c 89 f7                      movq    %r14, %rdi
// 1be: 31 c0                         xorl    %eax, %eax
// 1c0: 41 ff d0                      callq   *%r8
// 1c3: 49 8b 04 24                   movq    (%r12), %rax
// 1c7: 48 85 c0                      testq   %rax, %rax
// 1ca: 0f 8e 87 00 00 00             jle     0x257 <_JIT_ENTRY+0x257>
// 1d0: 4e 8d 2c fb                   leaq    (%rbx,%r15,8), %r13
// 1d4: 85 c0                         testl   %eax, %eax
// 1d6: 0f 89 a5 00 00 00             jns     0x281 <_JIT_ENTRY+0x281>
// 1dc: e9 c1 00 00 00                jmp     0x2a2 <_JIT_ENTRY+0x2a2>
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_NegativeRefcount
// 1f5: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 1fa: 4c 89 e2                      movq    %r12, %rdx
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 8b 04 24                   movq    (%r12), %rax
// 203: 4e 8d 34 fb                   leaq    (%rbx,%r15,8), %r14
// 207: 49 83 c6 f8                   addq    $-0x8, %r14
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 78 21                         js      0x230 <_JIT_ENTRY+0x230>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 219: ff d0                         callq   *%rax
// 21b: 49 ff 0c 24                   decq    (%r12)
// 21f: 75 0f                         jne     0x230 <_JIT_ENTRY+0x230>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_Dealloc
// 22b: 4c 89 e7                      movq    %r12, %rdi
// 22e: ff d0                         callq   *%rax
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_CONTINUE
// 23a: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 23f: 4c 89 f6                      movq    %r14, %rsi
// 242: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 247: 48 83 c4 28                   addq    $0x28, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 270: 4c 89 e2                      movq    %r12, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 4e 8d 2c fb                   leaq    (%rbx,%r15,8), %r13
// 27d: 85 c0                         testl   %eax, %eax
// 27f: 78 21                         js      0x2a2 <_JIT_ENTRY+0x2a2>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28b: ff d0                         callq   *%rax
// 28d: 49 ff 0c 24                   decq    (%r12)
// 291: 75 0f                         jne     0x2a2 <_JIT_ENTRY+0x2a2>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_Dealloc
// 29d: 4c 89 e7                      movq    %r12, %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 83 c5 f8                   addq    $-0x8, %r13
// 2a6: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2ab: 49 29 c5                      subq    %rax, %r13
// 2ae: 49 83 c5 b8                   addq    $-0x48, %r13
// 2b2: 49 c1 ed 03                   shrq    $0x3, %r13
// 2b6: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: 48 83 c4 28                   addq    $0x28, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: c3                            retq
// 2cb: 
static const unsigned char _BUILD_STRINGplus_DICT_UPDATE_code_body[716] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf5, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xaa, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4e, 0x8b, 0x64, 0xfb, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x4c, 0x01, 0xf8, 0x48, 0x8b, 0x3c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x8a, 0x00, 0x00, 0x00, 0x4e, 0x8d, 0x34, 0xfb, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0xa8, 0x00, 0x00, 0x00, 0xe9, 0xc4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x87, 0x00, 0x00, 0x00, 0x4e, 0x8d, 0x2c, 0xfb, 0x85, 0xc0, 0x0f, 0x89, 0xa5, 0x00, 0x00, 0x00, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xfb, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x2c, 0xfb, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_DICT_UPDATE_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_DICT_UPDATE_data_holes[1];

// _BUILD_STRINGplus_END_SEND
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_END_SEND.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 4b                         je      0x143 <_JIT_ENTRY+0x143>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 114: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 4c 63 f0                      movslq  %eax, %r14
// 122: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 127: 4b 8b 5c f7 f8                movq    -0x8(%r15,%r14,8), %rbx
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7e 33                         jle     0x168 <_JIT_ENTRY+0x168>
// 135: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 139: 49 83 c5 f8                   addq    $-0x8, %r13
// 13d: 85 c0                         testl   %eax, %eax
// 13f: 79 55                         jns     0x196 <_JIT_ENTRY+0x196>
// 141: eb 74                         jmp     0x1b7 <_JIT_ENTRY+0x1b7>
// 143: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 148: 49 29 c4                      subq    %rax, %r12
// 14b: 49 83 c4 b8                   addq    $-0x48, %r12
// 14f: 49 c1 ec 03                   shrq    $0x3, %r12
// 153: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 157: 31 c0                         xorl    %eax, %eax
// 159: 48 83 c4 28                   addq    $0x28, %rsp
// 15d: 5b                            popq    %rbx
// 15e: 41 5c                         popq    %r12
// 160: 41 5d                         popq    %r13
// 162: 41 5e                         popq    %r14
// 164: 41 5f                         popq    %r15
// 166: 5d                            popq    %rbp
// 167: c3                            retq
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be 66 00 00 00                movl    $0x66, %esi
// 181: 4c 89 e2                      movq    %r12, %rdx
// 184: ff d0                         callq   *%rax
// 186: 49 8b 04 24                   movq    (%r12), %rax
// 18a: 4f 8d 2c f7                   leaq    (%r15,%r14,8), %r13
// 18e: 49 83 c5 f8                   addq    $-0x8, %r13
// 192: 85 c0                         testl   %eax, %eax
// 194: 78 21                         js      0x1b7 <_JIT_ENTRY+0x1b7>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 ff 0c 24                   decq    (%r12)
// 1a6: 75 0f                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_Dealloc
// 1b2: 4c 89 e7                      movq    %r12, %rdi
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_OPARG
// 1c1: 0f b7 c0                      movzwl  %ax, %eax
// 1c4: b9 01 00 00 00                movl    $0x1, %ecx
// 1c9: 29 c1                         subl    %eax, %ecx
// 1cb: 48 63 c1                      movslq  %ecx, %rax
// 1ce: 49 89 5c c7 f0                movq    %rbx, -0x10(%r15,%rax,8)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e2: 4c 89 ee                      movq    %r13, %rsi
// 1e5: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1ea: 48 83 c4 28                   addq    $0x28, %rsp
// 1ee: 5b                            popq    %rbx
// 1ef: 41 5c                         popq    %r12
// 1f1: 41 5d                         popq    %r13
// 1f3: 41 5e                         popq    %r14
// 1f5: 41 5f                         popq    %r15
// 1f7: 5d                            popq    %rbp
// 1f8: ff e0                         jmpq    *%rax
// 1fa: 
static const unsigned char _BUILD_STRINGplus_END_SEND_code_body[507] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x4b, 0x8b, 0x5c, 0xf7, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x4f, 0x8d, 0x2c, 0xf7, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x74, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xf7, 0x49, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x5c, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_END_SEND_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_END_SEND_data_holes[1];

// _BUILD_STRINGplus_EXIT_INIT_CHECK
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_EXIT_INIT_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d6                      callq   *%r14
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// f3: 48 85 c9                      testq   %rcx, %rcx
// f6: 0f 84 86 00 00 00             je      0x182 <_JIT_ENTRY+0x182>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 d0                      movzwl  %ax, %edx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 118: 48 89 0c 07                   movq    %rcx, (%rdi,%rax)
// 11c: b9 01 00 00 00                movl    $0x1, %ecx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 d0                         subl    %edx, %eax
// 128: 48 63 d0                      movslq  %eax, %rdx
// 12b: 48 8b 44 d7 f8                movq    -0x8(%rdi,%rdx,8), %rax
// 130: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000132:  R_X86_64_64  _Py_NoneStruct
// 13a: 48 39 f0                      cmpq    %rsi, %rax
// 13d: 74 68                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 13f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000141:  R_X86_64_64  _JIT_OPARG
// 149: 0f b7 d2                      movzwl  %dx, %edx
// 14c: 29 d1                         subl    %edx, %ecx
// 14e: 48 63 c9                      movslq  %ecx, %rcx
// 151: 4c 8d 24 cf                   leaq    (%rdi,%rcx,8), %r12
// 155: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000157:  R_X86_64_64  PyExc_TypeError
// 15f: 48 8b 39                      movq    (%rcx), %rdi
// 162: 48 8b 40 08                   movq    0x8(%rax), %rax
// 166: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 16a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000016c:  R_X86_64_64  .rodata.str1.1+0x39
// 174: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000176:  R_X86_64_64  PyErr_Format
// 17e: 31 c0                         xorl    %eax, %eax
// 180: ff d1                         callq   *%rcx
// 182: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 187: 49 29 c4                      subq    %rax, %r12
// 18a: 49 83 c4 b8                   addq    $-0x48, %r12
// 18e: 49 c1 ec 03                   shrq    $0x3, %r12
// 192: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 196: 31 c0                         xorl    %eax, %eax
// 198: 48 83 c4 28                   addq    $0x28, %rsp
// 19c: 5b                            popq    %rbx
// 19d: 41 5c                         popq    %r12
// 19f: 41 5d                         popq    %r13
// 1a1: 41 5e                         popq    %r14
// 1a3: 41 5f                         popq    %r15
// 1a5: 5d                            popq    %rbp
// 1a6: c3                            retq
// 1a7: 48 8d 34 d7                   leaq    (%rdi,%rdx,8), %rsi
// 1ab: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1be: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c3: 48 83 c4 28                   addq    $0x28, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: ff e0                         jmpq    *%rax
// 1d3: 
static const unsigned char _BUILD_STRINGplus_EXIT_INIT_CHECK_code_body[468] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x0c, 0x07, 0xb9, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x8b, 0x44, 0xd7, 0xf8, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf0, 0x74, 0x68, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x24, 0xcf, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8d, 0x34, 0xd7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_EXIT_INIT_CHECK_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _BUILD_STRINGplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_EXIT_INIT_CHECK_data_holes[1];

// _BUILD_STRINGplus_EXIT_TRACE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_EXIT_TRACE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 3c 24                   movq    %rdi, (%rsp)
// 15: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000017:  R_X86_64_64  _JIT_OPARG
// 1f: 0f b7 d3                      movzwl  %bx, %edx
// 22: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2a: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 2f: 49 29 c6                      subq    %rax, %r14
// 32: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000034:  R_X86_64_64  _PyUnicode_JoinArray
// 3c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000003e:  R_X86_64_64  _PyRuntime
// 46: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 4d: 4c 89 f6                      movq    %r14, %rsi
// 50: ff d0                         callq   *%rax
// 52: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 57: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 5d: 0f 8e 8d 00 00 00             jle     0xf0 <_JIT_ENTRY+0xf0>
// 63: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000065:  R_X86_64_64  _JIT_OPARG
// 6d: 0f b7 d8                      movzwl  %ax, %ebx
// 70: 48 ff c3                      incq    %rbx
// 73: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000075:  R_X86_64_64  .rodata.str1.1
// 7d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000007f:  R_X86_64_64  _Py_NegativeRefcount
// 87: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000089:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 91: eb 16                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 93: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 47                         jle     0xf0 <_JIT_ENTRY+0xf0>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// b0: 48 8b 45 00                   movq    (%rbp), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 17                         jmp     0xd6 <_JIT_ENTRY+0xd6>
// bf: 90                            nop
// c0: 4c 89 ef                      movq    %r13, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 ea                      movq    %rbp, %rdx
// cb: 41 ff d4                      callq   *%r12
// ce: 48 8b 45 00                   movq    (%rbp), %rax
// d2: 85 c0                         testl   %eax, %eax
// d4: 78 ca                         js      0xa0 <_JIT_ENTRY+0xa0>
// d6: 41 ff d7                      callq   *%r15
// d9: 48 ff 4d 00                   decq    (%rbp)
// dd: 75 c1                         jne     0xa0 <_JIT_ENTRY+0xa0>
// df: 48 89 ef                      movq    %rbp, %rdi
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_Dealloc
// ec: ff d0                         callq   *%rax
// ee: eb b0                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// f0: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// f5: 48 85 f6                      testq   %rsi, %rsi
// f8: 74 53                         je      0x14d <_JIT_ENTRY+0x14d>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _JIT_OPARG
// 104: 0f b7 c8                      movzwl  %ax, %ecx
// 107: 0f b7 c0                      movzwl  %ax, %eax
// 10a: 48 c1 e0 03                   shlq    $0x3, %rax
// 10e: 48 f7 d8                      negq    %rax
// 111: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 116: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11a: b8 01 00 00 00                movl    $0x1, %eax
// 11f: 29 c8                         subl    %ecx, %eax
// 121: 48 98                         cltq
// 123: 4c 8d 34 c2                   leaq    (%rdx,%rax,8), %r14
// 127: 48 8b 14 24                   movq    (%rsp), %rdx
// 12b: 49 29 d6                      subq    %rdx, %r14
// 12e: 49 83 c6 b8                   addq    $-0x48, %r14
// 132: 48 8b 02                      movq    (%rdx), %rax
// 135: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000137:  R_X86_64_64  _JIT_TARGET
// 13f: 89 c9                         movl    %ecx, %ecx
// 141: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 145: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 14b: eb 0d                         jmp     0x15a <_JIT_ENTRY+0x15a>
// 14d: 48 8b 14 24                   movq    (%rsp), %rdx
// 151: 49 29 d6                      subq    %rdx, %r14
// 154: 49 83 c6 b8                   addq    $-0x48, %r14
// 158: 31 c0                         xorl    %eax, %eax
// 15a: 49 c1 ee 03                   shrq    $0x3, %r14
// 15e: 44 89 72 40                   movl    %r14d, 0x40(%rdx)
// 162: 48 83 c4 18                   addq    $0x18, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 
static const unsigned char _BUILD_STRINGplus_EXIT_TRACE_code_body[370] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x47, 0x8d, 0x43, 0xfe, 0x49, 0x8b, 0x2c, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x17, 0x90, 0x4c, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xca, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0xc1, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb0, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x74, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x29, 0xd6, 0x49, 0x83, 0xc6, 0xb8, 0x48, 0x8b, 0x02, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x0d, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x29, 0xd6, 0x49, 0x83, 0xc6, 0xb8, 0x31, 0xc0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x72, 0x40, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_EXIT_TRACE_code_holes[11] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_EXIT_TRACE_data_holes[1];

// _BUILD_STRINGplus_FORMAT_SIMPLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_FORMAT_SIMPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 06 01 00 00             je      0x202 <_JIT_ENTRY+0x202>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: bd 01 00 00 00                movl    $0x1, %ebp
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 4c 63 f0                      movslq  %eax, %r14
// 12b: 4e 8b 64 f3 f8                movq    -0x8(%rbx,%r14,8), %r12
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  PyUnicode_Type
// 13a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 13f: 74 63                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  PyObject_Format
// 14b: 4c 89 e7                      movq    %r12, %rdi
// 14e: 31 f6                         xorl    %esi, %esi
// 150: ff d0                         callq   *%rax
// 152: 49 89 c5                      movq    %rax, %r13
// 155: 49 8b 04 24                   movq    (%r12), %rax
// 159: 48 85 c0                      testq   %rax, %rax
// 15c: 7e 06                         jle     0x164 <_JIT_ENTRY+0x164>
// 15e: 85 c0                         testl   %eax, %eax
// 160: 79 28                         jns     0x18a <_JIT_ENTRY+0x18a>
// 162: eb 38                         jmp     0x19c <_JIT_ENTRY+0x19c>
// 164: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000166:  R_X86_64_64  .rodata.str1.1
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_NegativeRefcount
// 178: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 17d: 4c 89 e2                      movq    %r12, %rdx
// 180: ff d0                         callq   *%rax
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 85 c0                         testl   %eax, %eax
// 188: 78 12                         js      0x19c <_JIT_ENTRY+0x19c>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 194: ff d0                         callq   *%rax
// 196: 49 ff 0c 24                   decq    (%r12)
// 19a: 74 47                         je      0x1e3 <_JIT_ENTRY+0x1e3>
// 19c: 4d 89 ec                      movq    %r13, %r12
// 19f: 4d 85 ed                      testq   %r13, %r13
// 1a2: 74 56                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _JIT_OPARG
// 1ae: 0f b7 c0                      movzwl  %ax, %eax
// 1b1: 29 c5                         subl    %eax, %ebp
// 1b3: 48 63 c5                      movslq  %ebp, %rax
// 1b6: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 1ba: 4c 89 64 c3 f8                movq    %r12, -0x8(%rbx,%rax,8)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ce: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1d3: 48 83 c4 28                   addq    $0x28, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: ff e0                         jmpq    *%rax
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_Dealloc
// 1ed: 4c 89 e7                      movq    %r12, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 4d 89 ec                      movq    %r13, %r12
// 1f5: 4d 85 ed                      testq   %r13, %r13
// 1f8: 75 aa                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 1fa: 4e 8d 24 f3                   leaq    (%rbx,%r14,8), %r12
// 1fe: 49 83 c4 f8                   addq    $-0x8, %r12
// 202: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 207: 49 29 c4                      subq    %rax, %r12
// 20a: 49 83 c4 b8                   addq    $-0x48, %r12
// 20e: 49 c1 ec 03                   shrq    $0x3, %r12
// 212: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 216: 31 c0                         xorl    %eax, %eax
// 218: 48 83 c4 28                   addq    $0x28, %rsp
// 21c: 5b                            popq    %rbx
// 21d: 41 5c                         popq    %r12
// 21f: 41 5d                         popq    %r13
// 221: 41 5e                         popq    %r14
// 223: 41 5f                         popq    %r15
// 225: 5d                            popq    %rbp
// 226: c3                            retq
// 227: 
static const unsigned char _BUILD_STRINGplus_FORMAT_SIMPLE_code_body[552] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xbd, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4e, 0x8b, 0x64, 0xf3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x47, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc5, 0x48, 0x63, 0xc5, 0x48, 0x8d, 0x34, 0xc3, 0x4c, 0x89, 0x64, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x75, 0xaa, 0x4e, 0x8d, 0x24, 0xf3, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_FORMAT_SIMPLE_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_FORMAT_SIMPLE_data_holes[1];

// _BUILD_STRINGplus_FORMAT_WITH_SPEC
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_FORMAT_WITH_SPEC.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7f: 49 ff c7                      incq    %r15
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 0f 84 44 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 0f b7 c8                      movzwl  %ax, %ecx
// 108: 0f b7 c0                      movzwl  %ax, %eax
// 10b: 48 c1 e0 03                   shlq    $0x3, %rax
// 10f: 48 f7 d8                      negq    %rax
// 112: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 117: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11b: b8 01 00 00 00                movl    $0x1, %eax
// 120: 29 c8                         subl    %ecx, %eax
// 122: 4c 63 f0                      movslq  %eax, %r14
// 125: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 12a: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  PyObject_Format
// 139: 48 89 ef                      movq    %rbp, %rdi
// 13c: 4c 89 ee                      movq    %r13, %rsi
// 13f: ff d0                         callq   *%rax
// 141: 49 89 c4                      movq    %rax, %r12
// 144: 48 8b 45 00                   movq    (%rbp), %rax
// 148: 48 85 c0                      testq   %rax, %rax
// 14b: 7e 06                         jle     0x153 <_JIT_ENTRY+0x153>
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 79 28                         jns     0x179 <_JIT_ENTRY+0x179>
// 151: eb 2e                         jmp     0x181 <_JIT_ENTRY+0x181>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 16c: 48 89 ea                      movq    %rbp, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 48 8b 45 00                   movq    (%rbp), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 08                         js      0x181 <_JIT_ENTRY+0x181>
// 179: ff d3                         callq   *%rbx
// 17b: 48 ff 4d 00                   decq    (%rbp)
// 17f: 74 0f                         je      0x190 <_JIT_ENTRY+0x190>
// 181: 49 8b 45 00                   movq    (%r13), %rax
// 185: 48 85 c0                      testq   %rax, %rax
// 188: 7e 1e                         jle     0x1a8 <_JIT_ENTRY+0x1a8>
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 79 40                         jns     0x1ce <_JIT_ENTRY+0x1ce>
// 18e: eb 46                         jmp     0x1d6 <_JIT_ENTRY+0x1d6>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 48 89 ef                      movq    %rbp, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 45 00                   movq    (%r13), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 7f e2                         jg      0x18a <_JIT_ENTRY+0x18a>
// 1a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001aa:  R_X86_64_64  .rodata.str1.1
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 1c1: 4c 89 ea                      movq    %r13, %rdx
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 8b 45 00                   movq    (%r13), %rax
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 08                         js      0x1d6 <_JIT_ENTRY+0x1d6>
// 1ce: ff d3                         callq   *%rbx
// 1d0: 49 ff 4d 00                   decq    (%r13)
// 1d4: 74 4d                         je      0x223 <_JIT_ENTRY+0x223>
// 1d6: 4d 85 e4                      testq   %r12, %r12
// 1d9: 74 5c                         je      0x237 <_JIT_ENTRY+0x237>
// 1db: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 1df: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _JIT_OPARG
// 1ed: 0f b7 c0                      movzwl  %ax, %eax
// 1f0: b9 01 00 00 00                movl    $0x1, %ecx
// 1f5: 29 c1                         subl    %eax, %ecx
// 1f7: 48 63 c1                      movslq  %ecx, %rax
// 1fa: 4d 89 64 c7 f0                movq    %r12, -0x10(%r15,%rax,8)
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_CONTINUE
// 209: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 20e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 213: 48 83 c4 28                   addq    $0x28, %rsp
// 217: 5b                            popq    %rbx
// 218: 41 5c                         popq    %r12
// 21a: 41 5d                         popq    %r13
// 21c: 41 5e                         popq    %r14
// 21e: 41 5f                         popq    %r15
// 220: 5d                            popq    %rbp
// 221: ff e0                         jmpq    *%rax
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 ef                      movq    %r13, %rdi
// 230: ff d0                         callq   *%rax
// 232: 4d 85 e4                      testq   %r12, %r12
// 235: 75 a4                         jne     0x1db <_JIT_ENTRY+0x1db>
// 237: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 23b: 49 83 c4 f0                   addq    $-0x10, %r12
// 23f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 244: 49 29 c4                      subq    %rax, %r12
// 247: 49 83 c4 b8                   addq    $-0x48, %r12
// 24b: 49 c1 ec 03                   shrq    $0x3, %r12
// 24f: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 253: 31 c0                         xorl    %eax, %eax
// 255: 48 83 c4 28                   addq    $0x28, %rsp
// 259: 5b                            popq    %rbx
// 25a: 41 5c                         popq    %r12
// 25c: 41 5d                         popq    %r13
// 25e: 41 5e                         popq    %r14
// 260: 41 5f                         popq    %r15
// 262: 5d                            popq    %rbp
// 263: c3                            retq
// 264: 
static const unsigned char _BUILD_STRINGplus_FORMAT_WITH_SPEC_code_body[613] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4d, 0x4d, 0x85, 0xe4, 0x74, 0x5c, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa4, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x83, 0xc4, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_FORMAT_WITH_SPEC_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_FORMAT_WITH_SPEC_data_holes[1];

// _BUILD_STRINGplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_FOR_ITER_TIER_TWO.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 5b 01 00 00             je      0x257 <_JIT_ENTRY+0x257>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 4c 63 f8                      movslq  %eax, %r15
// 12b: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 130: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 135: 4c 89 e7                      movq    %r12, %rdi
// 138: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 74 42                         je      0x185 <_JIT_ENTRY+0x185>
// 143: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000145:  R_X86_64_64  _JIT_OPARG
// 14d: 0f b7 c9                      movzwl  %cx, %ecx
// 150: 29 cb                         subl    %ecx, %ebx
// 152: 48 63 cb                      movslq  %ebx, %rcx
// 155: 49 89 04 ce                   movq    %rax, (%r14,%rcx,8)
// 159: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 15d: 48 83 c6 08                   addq    $0x8, %rsi
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _JIT_CONTINUE
// 16b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 170: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 175: 48 83 c4 28                   addq    $0x28, %rsp
// 179: 5b                            popq    %rbx
// 17a: 41 5c                         popq    %r12
// 17c: 41 5d                         popq    %r13
// 17e: 41 5e                         popq    %r14
// 180: 41 5f                         popq    %r15
// 182: 5d                            popq    %rbp
// 183: ff e0                         jmpq    *%rax
// 185: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 18a: 48 8b 43 68                   movq    0x68(%rbx), %rax
// 18e: 48 85 c0                      testq   %rax, %rax
// 191: 74 3a                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 193: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 198: 74 33                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyExc_StopIteration
// 1a4: 48 8b 30                      movq    (%rax), %rsi
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _PyErr_ExceptionMatches
// 1b1: 48 89 df                      movq    %rbx, %rdi
// 1b4: ff d0                         callq   *%rax
// 1b6: 85 c0                         testl   %eax, %eax
// 1b8: 0f 84 95 00 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _PyErr_Clear
// 1c8: 48 89 df                      movq    %rbx, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 22                         jg      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 1ef: 4c 89 e2                      movq    %r12, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 04 24                   movq    (%r12), %rax
// 1f8: 4b 8d 1c fe                   leaq    (%r14,%r15,8), %rbx
// 1fc: 48 83 c3 f8                   addq    $-0x8, %rbx
// 200: 85 c0                         testl   %eax, %eax
// 202: 78 21                         js      0x225 <_JIT_ENTRY+0x225>
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20e: ff d0                         callq   *%rax
// 210: 49 ff 0c 24                   decq    (%r12)
// 214: 75 0f                         jne     0x225 <_JIT_ENTRY+0x225>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_Dealloc
// 220: 4c 89 e7                      movq    %r12, %rdi
// 223: ff d0                         callq   *%rax
// 225: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 22a: 48 29 c3                      subq    %rax, %rbx
// 22d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 231: 48 c1 eb 03                   shrq    $0x3, %rbx
// 235: 89 58 40                      movl    %ebx, 0x40(%rax)
// 238: 48 8b 00                      movq    (%rax), %rax
// 23b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023d:  R_X86_64_64  _JIT_TARGET
// 245: 89 c9                         movl    %ecx, %ecx
// 247: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 251: eb 1a                         jmp     0x26d <_JIT_ENTRY+0x26d>
// 253: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 257: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 25c: 49 29 c4                      subq    %rax, %r12
// 25f: 49 83 c4 b8                   addq    $-0x48, %r12
// 263: 49 c1 ec 03                   shrq    $0x3, %r12
// 267: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: 48 83 c4 28                   addq    $0x28, %rsp
// 271: 5b                            popq    %rbx
// 272: 41 5c                         popq    %r12
// 274: 41 5d                         popq    %r13
// 276: 41 5e                         popq    %r14
// 278: 41 5f                         popq    %r15
// 27a: 5d                            popq    %rbp
// 27b: c3                            retq
// 27c: 
static const unsigned char _BUILD_STRINGplus_FOR_ITER_TIER_TWO_code_body[637] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x42, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcb, 0x48, 0x63, 0xcb, 0x49, 0x89, 0x04, 0xce, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x43, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4b, 0x8d, 0x1c, 0xfe, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x1a, 0x4f, 0x8d, 0x24, 0xfe, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_FOR_ITER_TIER_TWO_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_FOR_ITER_TIER_TWO_data_holes[1];

// _BUILD_STRINGplus_GET_AITER
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GET_AITER.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c6                      subq    %rax, %r14
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 f6                      movq    %r14, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d4                      callq   *%r12
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 2f 02 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 4c 8d 34 c3                   leaq    (%rbx,%rax,8), %r14
// 129: 49 83 c6 f8                   addq    $-0x8, %r14
// 12d: 48 8b 6c c3 f8                movq    -0x8(%rbx,%rax,8), %rbp
// 132: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 136: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 13a: 48 85 c9                      testq   %rcx, %rcx
// 13d: 0f 84 c3 00 00 00             je      0x206 <_JIT_ENTRY+0x206>
// 143: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 147: 48 85 c9                      testq   %rcx, %rcx
// 14a: 0f 84 b6 00 00 00             je      0x206 <_JIT_ENTRY+0x206>
// 150: 48 89 ef                      movq    %rbp, %rdi
// 153: ff d1                         callq   *%rcx
// 155: 49 89 c5                      movq    %rax, %r13
// 158: 48 8b 45 00                   movq    (%rbp), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7f 22                         jg      0x183 <_JIT_ENTRY+0x183>
// 161: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_NegativeRefcount
// 175: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 17a: 48 89 ea                      movq    %rbp, %rdx
// 17d: ff d0                         callq   *%rax
// 17f: 48 8b 45 00                   movq    (%rbp), %rax
// 183: 85 c0                         testl   %eax, %eax
// 185: 78 16                         js      0x19d <_JIT_ENTRY+0x19d>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 191: ff d0                         callq   *%rax
// 193: 48 ff 4d 00                   decq    (%rbp)
// 197: 0f 84 76 01 00 00             je      0x313 <_JIT_ENTRY+0x313>
// 19d: 4d 85 ed                      testq   %r13, %r13
// 1a0: 0f 84 85 01 00 00             je      0x32b <_JIT_ENTRY+0x32b>
// 1a6: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1aa: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1ae: 48 85 c9                      testq   %rcx, %rcx
// 1b1: 0f 84 e4 00 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 1b7: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 1bc: 0f 84 d9 00 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_OPARG
// 1cc: 0f b7 c0                      movzwl  %ax, %eax
// 1cf: b9 01 00 00 00                movl    $0x1, %ecx
// 1d4: 29 c1                         subl    %eax, %ecx
// 1d6: 48 63 c1                      movslq  %ecx, %rax
// 1d9: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 1dd: 4c 89 6c c3 f8                movq    %r13, -0x8(%rbx,%rax,8)
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1f1: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1f6: 48 83 c4 28                   addq    $0x28, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: ff e0                         jmpq    *%rax
// 206: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000208:  R_X86_64_64  PyExc_TypeError
// 210: 48 8b 31                      movq    (%rcx), %rsi
// 213: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 217: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000219:  R_X86_64_64  .rodata.str1.1+0x39
// 221: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000223:  R_X86_64_64  _PyErr_Format
// 22b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 230: 31 c0                         xorl    %eax, %eax
// 232: 41 ff d0                      callq   *%r8
// 235: 48 8b 45 00                   movq    (%rbp), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 7e 09                         jle     0x247 <_JIT_ENTRY+0x247>
// 23e: 85 c0                         testl   %eax, %eax
// 240: 79 2f                         jns     0x271 <_JIT_ENTRY+0x271>
// 242: e9 e4 00 00 00                jmp     0x32b <_JIT_ENTRY+0x32b>
// 247: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_NegativeRefcount
// 25b: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 260: 48 89 ea                      movq    %rbp, %rdx
// 263: ff d0                         callq   *%rax
// 265: 48 8b 45 00                   movq    (%rbp), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 0f 88 ba 00 00 00             js      0x32b <_JIT_ENTRY+0x32b>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27b: ff d0                         callq   *%rax
// 27d: 48 ff 4d 00                   decq    (%rbp)
// 281: 0f 85 a4 00 00 00             jne     0x32b <_JIT_ENTRY+0x32b>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_Dealloc
// 291: 48 89 ef                      movq    %rbp, %rdi
// 294: ff d0                         callq   *%rax
// 296: e9 90 00 00 00                jmp     0x32b <_JIT_ENTRY+0x32b>
// 29b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029d:  R_X86_64_64  PyExc_TypeError
// 2a5: 48 8b 31                      movq    (%rcx), %rsi
// 2a8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ac: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1+0x7a
// 2b6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002b8:  R_X86_64_64  _PyErr_Format
// 2c0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2c5: 31 c0                         xorl    %eax, %eax
// 2c7: 41 ff d0                      callq   *%r8
// 2ca: 49 8b 45 00                   movq    (%r13), %rax
// 2ce: 48 85 c0                      testq   %rax, %rax
// 2d1: 7f 22                         jg      0x2f5 <_JIT_ENTRY+0x2f5>
// 2d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d5:  R_X86_64_64  .rodata.str1.1
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_NegativeRefcount
// 2e7: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 2ec: 4c 89 ea                      movq    %r13, %rdx
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 8b 45 00                   movq    (%r13), %rax
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 78 32                         js      0x32b <_JIT_ENTRY+0x32b>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 303: ff d0                         callq   *%rax
// 305: 49 ff 4d 00                   decq    (%r13)
// 309: 4c 89 ed                      movq    %r13, %rbp
// 30c: 75 1d                         jne     0x32b <_JIT_ENTRY+0x32b>
// 30e: e9 74 ff ff ff                jmp     0x287 <_JIT_ENTRY+0x287>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_Dealloc
// 31d: 48 89 ef                      movq    %rbp, %rdi
// 320: ff d0                         callq   *%rax
// 322: 4d 85 ed                      testq   %r13, %r13
// 325: 0f 85 7b fe ff ff             jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 32b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 330: 49 29 c6                      subq    %rax, %r14
// 333: 49 83 c6 b8                   addq    $-0x48, %r14
// 337: 49 c1 ee 03                   shrq    $0x3, %r14
// 33b: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 33f: 31 c0                         xorl    %eax, %eax
// 341: 48 83 c4 28                   addq    $0x28, %rsp
// 345: 5b                            popq    %rbx
// 346: 41 5c                         popq    %r12
// 348: 41 5d                         popq    %r13
// 34a: 41 5e                         popq    %r14
// 34c: 41 5f                         popq    %r15
// 34e: 5d                            popq    %rbp
// 34f: c3                            retq
// 350: 
static const unsigned char _BUILD_STRINGplus_GET_AITER_code_body[849] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf6, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc6, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd4, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x2f, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc3, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x6c, 0xc3, 0xf8, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x76, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x85, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0x34, 0xc3, 0x4c, 0x89, 0x6c, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x4c, 0x89, 0xed, 0x75, 0x1d, 0xe9, 0x74, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x7b, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GET_AITER_code_holes[29] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GET_AITER_data_holes[1];

// _BUILD_STRINGplus_GET_ANEXT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GET_ANEXT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d4                      callq   *%r12
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 ea 01 00 00             je      0x2e6 <_JIT_ENTRY+0x2e6>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 4c 8d 3c c2                   leaq    (%rdx,%rax,8), %r15
// 129: 48 8b 7c c2 f8                movq    -0x8(%rdx,%rax,8), %rdi
// 12e: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  PyAsyncGen_Type
// 13c: 48 39 c8                      cmpq    %rcx, %rax
// 13f: 0f 84 c5 00 00 00             je      0x20a <_JIT_ENTRY+0x20a>
// 145: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 149: 48 85 c9                      testq   %rcx, %rcx
// 14c: 0f 84 84 00 00 00             je      0x1d6 <_JIT_ENTRY+0x1d6>
// 152: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 156: 48 85 c9                      testq   %rcx, %rcx
// 159: 74 7b                         je      0x1d6 <_JIT_ENTRY+0x1d6>
// 15b: ff d1                         callq   *%rcx
// 15d: 48 85 c0                      testq   %rax, %rax
// 160: 0f 84 80 01 00 00             je      0x2e6 <_JIT_ENTRY+0x2e6>
// 166: 49 89 c5                      movq    %rax, %r13
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 173: 4c 89 ef                      movq    %r13, %rdi
// 176: ff d0                         callq   *%rax
// 178: 48 85 c0                      testq   %rax, %rax
// 17b: 0f 84 e8 00 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 181: 48 89 c5                      movq    %rax, %rbp
// 184: 49 8b 45 00                   movq    (%r13), %rax
// 188: 48 85 c0                      testq   %rax, %rax
// 18b: 7f 22                         jg      0x1af <_JIT_ENTRY+0x1af>
// 18d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018f:  R_X86_64_64  .rodata.str1.1
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_NegativeRefcount
// 1a1: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 1a6: 4c 89 ea                      movq    %r13, %rdx
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8b 45 00                   movq    (%r13), %rax
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 78 6a                         js      0x21d <_JIT_ENTRY+0x21d>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 ff 4d 00                   decq    (%r13)
// 1c3: 75 58                         jne     0x21d <_JIT_ENTRY+0x21d>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_Dealloc
// 1cf: 4c 89 ef                      movq    %r13, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: eb 47                         jmp     0x21d <_JIT_ENTRY+0x21d>
// 1d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d8:  R_X86_64_64  PyExc_TypeError
// 1e0: 48 8b 31                      movq    (%rcx), %rsi
// 1e3: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1e7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x39
// 1f1: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001f3:  R_X86_64_64  _PyErr_Format
// 1fb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 200: 31 c0                         xorl    %eax, %eax
// 202: 41 ff d0                      callq   *%r8
// 205: e9 dc 00 00 00                jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 20a: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 20e: ff 50 10                      callq   *0x10(%rax)
// 211: 48 89 c5                      movq    %rax, %rbp
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 0f 84 c9 00 00 00             je      0x2e6 <_JIT_ENTRY+0x2e6>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _JIT_OPARG
// 227: 0f b7 c0                      movzwl  %ax, %eax
// 22a: b9 01 00 00 00                movl    $0x1, %ecx
// 22f: 29 c1                         subl    %eax, %ecx
// 231: 48 63 c1                      movslq  %ecx, %rax
// 234: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 239: 48 89 2c c1                   movq    %rbp, (%rcx,%rax,8)
// 23d: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 241: 48 83 c6 08                   addq    $0x8, %rsi
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 254: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 259: 48 83 c4 28                   addq    $0x28, %rsp
// 25d: 5b                            popq    %rbx
// 25e: 41 5c                         popq    %r12
// 260: 41 5d                         popq    %r13
// 262: 41 5e                         popq    %r14
// 264: 41 5f                         popq    %r15
// 266: 5d                            popq    %rbp
// 267: ff e0                         jmpq    *%rax
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  PyExc_TypeError
// 273: 48 8b 38                      movq    (%rax), %rdi
// 276: 49 8b 45 08                   movq    0x8(%r13), %rax
// 27a: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 27e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1+0x7c
// 288: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028a:  R_X86_64_64  _PyErr_FormatFromCause
// 292: 31 c0                         xorl    %eax, %eax
// 294: ff d1                         callq   *%rcx
// 296: 49 8b 45 00                   movq    (%r13), %rax
// 29a: 48 85 c0                      testq   %rax, %rax
// 29d: 7f 22                         jg      0x2c1 <_JIT_ENTRY+0x2c1>
// 29f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a1:  R_X86_64_64  .rodata.str1.1
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_NegativeRefcount
// 2b3: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 2b8: 4c 89 ea                      movq    %r13, %rdx
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 8b 45 00                   movq    (%r13), %rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 21                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 ff 4d 00                   decq    (%r13)
// 2d5: 75 0f                         jne     0x2e6 <_JIT_ENTRY+0x2e6>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_Dealloc
// 2e1: 4c 89 ef                      movq    %r13, %rdi
// 2e4: ff d0                         callq   *%rax
// 2e6: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 2eb: 49 29 c7                      subq    %rax, %r15
// 2ee: 49 83 c7 b8                   addq    $-0x48, %r15
// 2f2: 49 c1 ef 03                   shrq    $0x3, %r15
// 2f6: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 2fa: 31 c0                         xorl    %eax, %eax
// 2fc: 48 83 c4 28                   addq    $0x28, %rsp
// 300: 5b                            popq    %rbx
// 301: 41 5c                         popq    %r12
// 303: 41 5d                         popq    %r13
// 305: 41 5e                         popq    %r14
// 307: 41 5f                         popq    %r15
// 309: 5d                            popq    %rbp
// 30a: c3                            retq
// 30b: 
static const unsigned char _BUILD_STRINGplus_GET_ANEXT_code_body[780] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd4, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xea, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc2, 0x48, 0x8b, 0x7c, 0xc2, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7b, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xdc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x48, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x2c, 0xc1, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GET_ANEXT_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GET_ANEXT_data_holes[1];

// _BUILD_STRINGplus_GET_AWAITABLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GET_AWAITABLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d4                      callq   *%r12
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 13 02 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4e 8b 7c f3 f8                movq    -0x8(%rbx,%r14,8), %r15
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 135: 4c 89 ff                      movq    %r15, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 49 89 c5                      movq    %rax, %r13
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 74 0e                         je      0x150 <_JIT_ENTRY+0x150>
// 142: 49 8b 07                      movq    (%r15), %rax
// 145: 48 85 c0                      testq   %rax, %rax
// 148: 7e 30                         jle     0x17a <_JIT_ENTRY+0x17a>
// 14a: 85 c0                         testl   %eax, %eax
// 14c: 79 51                         jns     0x19f <_JIT_ENTRY+0x19f>
// 14e: eb 64                         jmp     0x1b4 <_JIT_ENTRY+0x1b4>
// 150: 49 8b 77 08                   movq    0x8(%r15), %rsi
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: 0f b7 d0                      movzwl  %ax, %edx
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _PyEval_FormatAwaitableError
// 16b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 170: ff d0                         callq   *%rax
// 172: 49 8b 07                      movq    (%r15), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 7f d0                         jg      0x14a <_JIT_ENTRY+0x14a>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 193: 4c 89 fa                      movq    %r15, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 78 15                         js      0x1b4 <_JIT_ENTRY+0x1b4>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 ff 0f                      decq    (%r15)
// 1ae: 0f 84 3b 01 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 1b4: 4e 8d 3c f3                   leaq    (%rbx,%r14,8), %r15
// 1b8: 49 83 c7 f8                   addq    $-0x8, %r15
// 1bc: 4d 85 ed                      testq   %r13, %r13
// 1bf: 0f 84 4a 01 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyCoro_Type
// 1cf: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1d3: 74 44                         je      0x219 <_JIT_ENTRY+0x219>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c0                      movzwl  %ax, %eax
// 1e2: b9 01 00 00 00                movl    $0x1, %ecx
// 1e7: 29 c1                         subl    %eax, %ecx
// 1e9: 48 63 c1                      movslq  %ecx, %rax
// 1ec: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 1f0: 4c 89 6c c3 f8                movq    %r13, -0x8(%rbx,%rax,8)
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _JIT_CONTINUE
// 1ff: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 204: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 209: 48 83 c4 28                   addq    $0x28, %rsp
// 20d: 5b                            popq    %rbx
// 20e: 41 5c                         popq    %r12
// 210: 41 5d                         popq    %r13
// 212: 41 5e                         popq    %r14
// 214: 41 5f                         popq    %r15
// 216: 5d                            popq    %rbp
// 217: ff e0                         jmpq    *%rax
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _PyGen_yf
// 223: 4c 89 ef                      movq    %r13, %rdi
// 226: ff d0                         callq   *%rax
// 228: 48 85 c0                      testq   %rax, %rax
// 22b: 74 a8                         je      0x1d5 <_JIT_ENTRY+0x1d5>
// 22d: 48 89 c5                      movq    %rax, %rbp
// 230: 48 8b 00                      movq    (%rax), %rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 7f 22                         jg      0x25a <_JIT_ENTRY+0x25a>
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 251: 48 89 ea                      movq    %rbp, %rdx
// 254: ff d0                         callq   *%rax
// 256: 48 8b 45 00                   movq    (%rbp), %rax
// 25a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000025c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 264: 85 c0                         testl   %eax, %eax
// 266: 78 17                         js      0x27f <_JIT_ENTRY+0x27f>
// 268: ff d3                         callq   *%rbx
// 26a: 48 ff 4d 00                   decq    (%rbp)
// 26e: 75 0f                         jne     0x27f <_JIT_ENTRY+0x27f>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_Dealloc
// 27a: 48 89 ef                      movq    %rbp, %rdi
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 45 00                   movq    (%r13), %rax
// 283: 48 85 c0                      testq   %rax, %rax
// 286: 7f 22                         jg      0x2aa <_JIT_ENTRY+0x2aa>
// 288: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028a:  R_X86_64_64  .rodata.str1.1
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NegativeRefcount
// 29c: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 2a1: 4c 89 ea                      movq    %r13, %rdx
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 8b 45 00                   movq    (%r13), %rax
// 2aa: 85 c0                         testl   %eax, %eax
// 2ac: 78 17                         js      0x2c5 <_JIT_ENTRY+0x2c5>
// 2ae: ff d3                         callq   *%rbx
// 2b0: 49 ff 4d 00                   decq    (%r13)
// 2b4: 75 0f                         jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 4c 89 ef                      movq    %r13, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  PyExc_RuntimeError
// 2cf: 48 8b 30                      movq    (%rax), %rsi
// 2d2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002d4:  R_X86_64_64  .rodata.str1.1+0x39
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _PyErr_SetString
// 2e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: eb 20                         jmp     0x30f <_JIT_ENTRY+0x30f>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 4c 89 ff                      movq    %r15, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 4e 8d 3c f3                   leaq    (%rbx,%r14,8), %r15
// 302: 49 83 c7 f8                   addq    $-0x8, %r15
// 306: 4d 85 ed                      testq   %r13, %r13
// 309: 0f 85 b6 fe ff ff             jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 30f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 314: 49 29 c7                      subq    %rax, %r15
// 317: 49 83 c7 b8                   addq    $-0x48, %r15
// 31b: 49 c1 ef 03                   shrq    $0x3, %r15
// 31f: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 323: 31 c0                         xorl    %eax, %eax
// 325: 48 83 c4 28                   addq    $0x28, %rsp
// 329: 5b                            popq    %rbx
// 32a: 41 5c                         popq    %r12
// 32c: 41 5d                         popq    %r13
// 32e: 41 5e                         popq    %r14
// 330: 41 5f                         popq    %r15
// 332: 5d                            popq    %rbp
// 333: c3                            retq
// 334: 
static const unsigned char _BUILD_STRINGplus_GET_AWAITABLE_code_body[821] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd4, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x13, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4e, 0x8b, 0x7c, 0xf3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x74, 0x0e, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x79, 0x51, 0xeb, 0x64, 0x49, 0x8b, 0x77, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x3b, 0x01, 0x00, 0x00, 0x4e, 0x8d, 0x3c, 0xf3, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x4a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0x34, 0xc3, 0x4c, 0x89, 0x6c, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xa8, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0xeb, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4e, 0x8d, 0x3c, 0xf3, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xb6, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GET_AWAITABLE_code_holes[31] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GET_AWAITABLE_data_holes[1];

// _BUILD_STRINGplus_GET_ITER
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GET_ITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 ed 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyObject_GetIter
// 135: 4c 89 ef                      movq    %r13, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 49 89 c4                      movq    %rax, %r12
// 13d: 49 8b 45 00                   movq    (%r13), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7e 06                         jle     0x14c <_JIT_ENTRY+0x14c>
// 146: 85 c0                         testl   %eax, %eax
// 148: 79 28                         jns     0x172 <_JIT_ENTRY+0x172>
// 14a: eb 38                         jmp     0x184 <_JIT_ENTRY+0x184>
// 14c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014e:  R_X86_64_64  .rodata.str1.1
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_NegativeRefcount
// 160: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 165: 4c 89 ea                      movq    %r13, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 49 8b 45 00                   movq    (%r13), %rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 12                         js      0x184 <_JIT_ENTRY+0x184>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 4d 00                   decq    (%r13)
// 182: 74 49                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 184: 4d 85 e4                      testq   %r12, %r12
// 187: 74 58                         je      0x1e1 <_JIT_ENTRY+0x1e1>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 c0                      movzwl  %ax, %eax
// 196: b9 01 00 00 00                movl    $0x1, %ecx
// 19b: 29 c1                         subl    %eax, %ecx
// 19d: 48 63 c1                      movslq  %ecx, %rax
// 1a0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1a4: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_CONTINUE
// 1b3: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1bd: 48 83 c4 28                   addq    $0x28, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: ff e0                         jmpq    *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_Dealloc
// 1d7: 4c 89 ef                      movq    %r13, %rdi
// 1da: ff d0                         callq   *%rax
// 1dc: 4d 85 e4                      testq   %r12, %r12
// 1df: 75 a8                         jne     0x189 <_JIT_ENTRY+0x189>
// 1e1: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 1e5: 49 83 c4 f8                   addq    $-0x8, %r12
// 1e9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ee: 49 29 c4                      subq    %rax, %r12
// 1f1: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f5: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f9: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1fd: 31 c0                         xorl    %eax, %eax
// 1ff: 48 83 c4 28                   addq    $0x28, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: c3                            retq
// 20e: 
static const unsigned char _BUILD_STRINGplus_GET_ITER_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x4d, 0x85, 0xe4, 0x74, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa8, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GET_ITER_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GET_ITER_data_holes[1];

// _BUILD_STRINGplus_GET_LEN
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GET_LEN.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 a3 00 00 00             je      0x19f <_JIT_ENTRY+0x19f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 4c 8d 24 c2                   leaq    (%rdx,%rax,8), %r12
// 129: 48 8b 7c c2 f8                movq    -0x8(%rdx,%rax,8), %rdi
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  PyObject_Size
// 138: ff d0                         callq   *%rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 78 60                         js      0x19f <_JIT_ENTRY+0x19f>
// 13f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000141:  R_X86_64_64  PyLong_FromSsize_t
// 149: 48 89 c7                      movq    %rax, %rdi
// 14c: ff d1                         callq   *%rcx
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 74 4c                         je      0x19f <_JIT_ENTRY+0x19f>
// 153: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: 0f b7 c9                      movzwl  %cx, %ecx
// 160: ba 01 00 00 00                movl    $0x1, %edx
// 165: 29 ca                         subl    %ecx, %edx
// 167: 48 63 ca                      movslq  %edx, %rcx
// 16a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 16f: 48 89 04 ca                   movq    %rax, (%rdx,%rcx,8)
// 173: 48 8d 34 ca                   leaq    (%rdx,%rcx,8), %rsi
// 177: 48 83 c6 08                   addq    $0x8, %rsi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _JIT_CONTINUE
// 185: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 18a: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 18f: 48 83 c4 28                   addq    $0x28, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: ff e0                         jmpq    *%rax
// 19f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1a4: 49 29 c4                      subq    %rax, %r12
// 1a7: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ab: 49 c1 ec 03                   shrq    $0x3, %r12
// 1af: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: 48 83 c4 28                   addq    $0x28, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: c3                            retq
// 1c4: 
static const unsigned char _BUILD_STRINGplus_GET_LEN_code_body[453] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc2, 0x48, 0x8b, 0x7c, 0xc2, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x60, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x4c, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x04, 0xca, 0x48, 0x8d, 0x34, 0xca, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GET_LEN_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GET_LEN_data_holes[1];

// _BUILD_STRINGplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GET_YIELD_FROM_ITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d4                      callq   *%r12
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 45 01 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 c1 e0 03                   shlq    $0x3, %rax
// 115: 48 f7 d8                      negq    %rax
// 118: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 11d: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 98                         cltq
// 12a: 4d 8d 3c c6                   leaq    (%r14,%rax,8), %r15
// 12e: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 133: 49 8b 45 08                   movq    0x8(%r13), %rax
// 137: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000139:  R_X86_64_64  PyCoro_Type
// 141: 48 39 c8                      cmpq    %rcx, %rax
// 144: 0f 84 84 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 14a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014c:  R_X86_64_64  PyGen_Type
// 154: 48 39 c8                      cmpq    %rcx, %rax
// 157: 74 6e                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  PyObject_GetIter
// 163: 4c 89 ef                      movq    %r13, %rdi
// 166: ff d0                         callq   *%rax
// 168: 48 85 c0                      testq   %rax, %rax
// 16b: 0f 84 d5 00 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 171: 48 89 c5                      movq    %rax, %rbp
// 174: 49 8b 45 00                   movq    (%r13), %rax
// 178: 48 85 c0                      testq   %rax, %rax
// 17b: 7f 22                         jg      0x19f <_JIT_ENTRY+0x19f>
// 17d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017f:  R_X86_64_64  .rodata.str1.1
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_NegativeRefcount
// 191: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 196: 4c 89 ea                      movq    %r13, %rdx
// 199: ff d0                         callq   *%rax
// 19b: 49 8b 45 00                   movq    (%r13), %rax
// 19f: 85 c0                         testl   %eax, %eax
// 1a1: 78 21                         js      0x1c4 <_JIT_ENTRY+0x1c4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ad: ff d0                         callq   *%rax
// 1af: 49 ff 4d 00                   decq    (%r13)
// 1b3: 75 0f                         jne     0x1c4 <_JIT_ENTRY+0x1c4>
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _Py_Dealloc
// 1bf: 4c 89 ef                      movq    %r13, %rdi
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 89 ed                      movq    %rbp, %r13
// 1c7: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1cc: eb 13                         jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 1ce: 48 8b 03                      movq    (%rbx), %rax
// 1d1: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 1d5: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 1da: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 1df: 74 3f                         je      0x220 <_JIT_ENTRY+0x220>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c0                      movzwl  %ax, %eax
// 1ee: b9 01 00 00 00                movl    $0x1, %ecx
// 1f3: 29 c1                         subl    %eax, %ecx
// 1f5: 48 63 c1                      movslq  %ecx, %rax
// 1f8: 4d 89 6c c6 f8                movq    %r13, -0x8(%r14,%rax,8)
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_CONTINUE
// 207: 48 89 df                      movq    %rbx, %rdi
// 20a: 4c 89 fe                      movq    %r15, %rsi
// 20d: 4c 89 c2                      movq    %r8, %rdx
// 210: 48 83 c4 28                   addq    $0x28, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: ff e0                         jmpq    *%rax
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  PyExc_TypeError
// 22a: 48 8b 30                      movq    (%rax), %rsi
// 22d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000022f:  R_X86_64_64  .rodata.str1.1+0x39
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _PyErr_SetString
// 241: 4c 89 c7                      movq    %r8, %rdi
// 244: ff d0                         callq   *%rax
// 246: 49 29 df                      subq    %rbx, %r15
// 249: 49 83 c7 b8                   addq    $-0x48, %r15
// 24d: 49 c1 ef 03                   shrq    $0x3, %r15
// 251: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 255: 31 c0                         xorl    %eax, %eax
// 257: 48 83 c4 28                   addq    $0x28, %rsp
// 25b: 5b                            popq    %rbx
// 25c: 41 5c                         popq    %r12
// 25e: 41 5d                         popq    %r13
// 260: 41 5e                         popq    %r14
// 262: 41 5f                         popq    %r15
// 264: 5d                            popq    %rbp
// 265: c3                            retq
// 266: 
static const unsigned char _BUILD_STRINGplus_GET_YIELD_FROM_ITER_code_body[615] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd4, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8d, 0x3c, 0xc6, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xed, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0xeb, 0x13, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xc2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xc7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GET_YIELD_FROM_ITER_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _BUILD_STRINGplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GET_YIELD_FROM_ITER_data_holes[1];

// _BUILD_STRINGplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_BOTH_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 92 00 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 118: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 ca                      movslq  %edx, %rcx
// 12b: 48 8d 34 cf                   leaq    (%rdi,%rcx,8), %rsi
// 12f: 48 8b 54 cf f0                movq    -0x10(%rdi,%rcx,8), %rdx
// 134: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000136:  R_X86_64_64  PyFloat_Type
// 13e: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 142: 75 1c                         jne     0x160 <_JIT_ENTRY+0x160>
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  _JIT_OPARG
// 14e: 0f b7 d2                      movzwl  %dx, %edx
// 151: 29 d0                         subl    %edx, %eax
// 153: 48 98                         cltq
// 155: 48 8b 44 c7 f8                movq    -0x8(%rdi,%rax,8), %rax
// 15a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 15e: 74 53                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 160: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 165: 48 29 c6                      subq    %rax, %rsi
// 168: 48 83 c6 b8                   addq    $-0x48, %rsi
// 16c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 170: 89 70 40                      movl    %esi, 0x40(%rax)
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  _JIT_TARGET
// 180: 89 c9                         movl    %ecx, %ecx
// 182: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 186: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 193: 49 29 c4                      subq    %rax, %r12
// 196: 49 83 c4 b8                   addq    $-0x48, %r12
// 19a: 49 c1 ec 03                   shrq    $0x3, %r12
// 19e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a2: 31 c0                         xorl    %eax, %eax
// 1a4: 48 83 c4 28                   addq    $0x28, %rsp
// 1a8: 5b                            popq    %rbx
// 1a9: 41 5c                         popq    %r12
// 1ab: 41 5d                         popq    %r13
// 1ad: 41 5e                         popq    %r14
// 1af: 41 5f                         popq    %r15
// 1b1: 5d                            popq    %rbp
// 1b2: c3                            retq
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_CONTINUE
// 1bd: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1c2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c7: 48 83 c4 28                   addq    $0x28, %rsp
// 1cb: 5b                            popq    %rbx
// 1cc: 41 5c                         popq    %r12
// 1ce: 41 5d                         popq    %r13
// 1d0: 41 5e                         popq    %r14
// 1d2: 41 5f                         popq    %r15
// 1d4: 5d                            popq    %rbp
// 1d5: ff e0                         jmpq    *%rax
// 1d7: 
static const unsigned char _BUILD_STRINGplus_GUARD_BOTH_FLOAT_code_body[472] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcf, 0x48, 0x8b, 0x54, 0xcf, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x1c, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_GUARD_BOTH_FLOAT_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_BOTH_FLOAT_data_holes[1];

// _BUILD_STRINGplus_GUARD_BOTH_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_BOTH_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 92 00 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 118: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 ca                      movslq  %edx, %rcx
// 12b: 48 8d 34 cf                   leaq    (%rdi,%rcx,8), %rsi
// 12f: 48 8b 54 cf f0                movq    -0x10(%rdi,%rcx,8), %rdx
// 134: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000136:  R_X86_64_64  PyLong_Type
// 13e: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 142: 75 1c                         jne     0x160 <_JIT_ENTRY+0x160>
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  _JIT_OPARG
// 14e: 0f b7 d2                      movzwl  %dx, %edx
// 151: 29 d0                         subl    %edx, %eax
// 153: 48 98                         cltq
// 155: 48 8b 44 c7 f8                movq    -0x8(%rdi,%rax,8), %rax
// 15a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 15e: 74 53                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 160: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 165: 48 29 c6                      subq    %rax, %rsi
// 168: 48 83 c6 b8                   addq    $-0x48, %rsi
// 16c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 170: 89 70 40                      movl    %esi, 0x40(%rax)
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  _JIT_TARGET
// 180: 89 c9                         movl    %ecx, %ecx
// 182: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 186: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 193: 49 29 c4                      subq    %rax, %r12
// 196: 49 83 c4 b8                   addq    $-0x48, %r12
// 19a: 49 c1 ec 03                   shrq    $0x3, %r12
// 19e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a2: 31 c0                         xorl    %eax, %eax
// 1a4: 48 83 c4 28                   addq    $0x28, %rsp
// 1a8: 5b                            popq    %rbx
// 1a9: 41 5c                         popq    %r12
// 1ab: 41 5d                         popq    %r13
// 1ad: 41 5e                         popq    %r14
// 1af: 41 5f                         popq    %r15
// 1b1: 5d                            popq    %rbp
// 1b2: c3                            retq
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_CONTINUE
// 1bd: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1c2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c7: 48 83 c4 28                   addq    $0x28, %rsp
// 1cb: 5b                            popq    %rbx
// 1cc: 41 5c                         popq    %r12
// 1ce: 41 5d                         popq    %r13
// 1d0: 41 5e                         popq    %r14
// 1d2: 41 5f                         popq    %r15
// 1d4: 5d                            popq    %rbp
// 1d5: ff e0                         jmpq    *%rax
// 1d7: 
static const unsigned char _BUILD_STRINGplus_GUARD_BOTH_INT_code_body[472] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcf, 0x48, 0x8b, 0x54, 0xcf, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x1c, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_GUARD_BOTH_INT_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_BOTH_INT_data_holes[1];

// _BUILD_STRINGplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_BOTH_UNICODE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 92 00 00 00             je      0x18e <_JIT_ENTRY+0x18e>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 118: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 ca                      movslq  %edx, %rcx
// 12b: 48 8d 34 cf                   leaq    (%rdi,%rcx,8), %rsi
// 12f: 48 8b 54 cf f0                movq    -0x10(%rdi,%rcx,8), %rdx
// 134: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000136:  R_X86_64_64  PyUnicode_Type
// 13e: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 142: 75 1c                         jne     0x160 <_JIT_ENTRY+0x160>
// 144: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000146:  R_X86_64_64  _JIT_OPARG
// 14e: 0f b7 d2                      movzwl  %dx, %edx
// 151: 29 d0                         subl    %edx, %eax
// 153: 48 98                         cltq
// 155: 48 8b 44 c7 f8                movq    -0x8(%rdi,%rax,8), %rax
// 15a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 15e: 74 53                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 160: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 165: 48 29 c6                      subq    %rax, %rsi
// 168: 48 83 c6 b8                   addq    $-0x48, %rsi
// 16c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 170: 89 70 40                      movl    %esi, 0x40(%rax)
// 173: 48 8b 00                      movq    (%rax), %rax
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  _JIT_TARGET
// 180: 89 c9                         movl    %ecx, %ecx
// 182: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 186: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18c: eb 16                         jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// 18e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 193: 49 29 c4                      subq    %rax, %r12
// 196: 49 83 c4 b8                   addq    $-0x48, %r12
// 19a: 49 c1 ec 03                   shrq    $0x3, %r12
// 19e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a2: 31 c0                         xorl    %eax, %eax
// 1a4: 48 83 c4 28                   addq    $0x28, %rsp
// 1a8: 5b                            popq    %rbx
// 1a9: 41 5c                         popq    %r12
// 1ab: 41 5d                         popq    %r13
// 1ad: 41 5e                         popq    %r14
// 1af: 41 5f                         popq    %r15
// 1b1: 5d                            popq    %rbp
// 1b2: c3                            retq
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_CONTINUE
// 1bd: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1c2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c7: 48 83 c4 28                   addq    $0x28, %rsp
// 1cb: 5b                            popq    %rbx
// 1cc: 41 5c                         popq    %r12
// 1ce: 41 5d                         popq    %r13
// 1d0: 41 5e                         popq    %r14
// 1d2: 41 5f                         popq    %r15
// 1d4: 5d                            popq    %rbp
// 1d5: ff e0                         jmpq    *%rax
// 1d7: 
static const unsigned char _BUILD_STRINGplus_GUARD_BOTH_UNICODE_code_body[472] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcf, 0x48, 0x8b, 0x54, 0xcf, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x1c, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x29, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_GUARD_BOTH_UNICODE_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_BOTH_UNICODE_data_holes[1];

// _BUILD_STRINGplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_BUILTINS_VERSION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 a4 00 00 00             je      0x1a0 <_JIT_ENTRY+0x1a0>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 129: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12e: 48 8b 47 20                   movq    0x20(%rdi), %rax
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  PyDict_Type
// 13c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 140: 75 35                         jne     0x177 <_JIT_ENTRY+0x177>
// 142: 48 8b 40 20                   movq    0x20(%rax), %rax
// 146: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000148:  R_X86_64_64  _JIT_OPERAND
// 150: 0f b7 c9                      movzwl  %cx, %ecx
// 153: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 156: 75 1f                         jne     0x177 <_JIT_ENTRY+0x177>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _JIT_CONTINUE
// 162: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: ff e0                         jmpq    *%rax
// 177: 48 29 fe                      subq    %rdi, %rsi
// 17a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 17e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 182: 89 77 40                      movl    %esi, 0x40(%rdi)
// 185: 48 8b 07                      movq    (%rdi), %rax
// 188: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018a:  R_X86_64_64  _JIT_TARGET
// 192: 89 c9                         movl    %ecx, %ecx
// 194: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 198: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19e: eb 16                         jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 1a0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a5: 49 29 c4                      subq    %rax, %r12
// 1a8: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ac: 49 c1 ec 03                   shrq    $0x3, %r12
// 1b0: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: 48 83 c4 28                   addq    $0x28, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: 5d                            popq    %rbp
// 1c4: c3                            retq
// 1c5: 
static const unsigned char _BUILD_STRINGplus_GUARD_BUILTINS_VERSION_code_body[454] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x35, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_BUILTINS_VERSION_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _BUILD_STRINGplus_GUARD_DORV_VALUES
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_DORV_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 66                         je      0x15e <_JIT_ENTRY+0x15e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 12e: 75 53                         jne     0x183 <_JIT_ENTRY+0x183>
// 130: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 135: 48 29 c6                      subq    %rax, %rsi
// 138: 48 83 c6 b8                   addq    $-0x48, %rsi
// 13c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 140: 89 70 40                      movl    %esi, 0x40(%rax)
// 143: 48 8b 00                      movq    (%rax), %rax
// 146: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000148:  R_X86_64_64  _JIT_TARGET
// 150: 89 c9                         movl    %ecx, %ecx
// 152: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 156: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 15c: eb 16                         jmp     0x174 <_JIT_ENTRY+0x174>
// 15e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 163: 49 29 c4                      subq    %rax, %r12
// 166: 49 83 c4 b8                   addq    $-0x48, %r12
// 16a: 49 c1 ec 03                   shrq    $0x3, %r12
// 16e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 172: 31 c0                         xorl    %eax, %eax
// 174: 48 83 c4 28                   addq    $0x28, %rsp
// 178: 5b                            popq    %rbx
// 179: 41 5c                         popq    %r12
// 17b: 41 5d                         popq    %r13
// 17d: 41 5e                         popq    %r14
// 17f: 41 5f                         popq    %r15
// 181: 5d                            popq    %rbp
// 182: c3                            retq
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _JIT_CONTINUE
// 18d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 192: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 197: 48 83 c4 28                   addq    $0x28, %rsp
// 19b: 5b                            popq    %rbx
// 19c: 41 5c                         popq    %r12
// 19e: 41 5d                         popq    %r13
// 1a0: 41 5e                         popq    %r14
// 1a2: 41 5f                         popq    %r15
// 1a4: 5d                            popq    %rbp
// 1a5: ff e0                         jmpq    *%rax
// 1a7: 
static const unsigned char _BUILD_STRINGplus_GUARD_DORV_VALUES_code_body[424] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_GUARD_DORV_VALUES_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_DORV_VALUES_data_holes[1];

// _BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 73                         je      0x16b <_JIT_ENTRY+0x16b>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8d 34 c2                   leaq    (%rdx,%rax,8), %r14
// 125: 48 8b 7c c2 f8                movq    -0x8(%rdx,%rax,8), %rdi
// 12a: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 12e: 75 14                         jne     0x144 <_JIT_ENTRY+0x144>
// 130: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 13e: ff d0                         callq   *%rax
// 140: 84 c0                         testb   %al, %al
// 142: 74 3f                         je      0x183 <_JIT_ENTRY+0x183>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _JIT_CONTINUE
// 14e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 153: 4c 89 f6                      movq    %r14, %rsi
// 156: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 15b: 48 83 c4 28                   addq    $0x28, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: ff e0                         jmpq    *%rax
// 16b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 170: 49 29 c4                      subq    %rax, %r12
// 173: 49 83 c4 b8                   addq    $-0x48, %r12
// 177: 49 c1 ec 03                   shrq    $0x3, %r12
// 17b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17f: 31 c0                         xorl    %eax, %eax
// 181: eb 2d                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 183: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 188: 49 29 c6                      subq    %rax, %r14
// 18b: 49 83 c6 b8                   addq    $-0x48, %r14
// 18f: 49 c1 ee 03                   shrq    $0x3, %r14
// 193: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 197: 48 8b 00                      movq    (%rax), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 28                   addq    $0x28, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 
static const unsigned char _BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[448] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x7c, 0xc2, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _BUILD_STRINGplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_GLOBALS_VERSION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 a4 00 00 00             je      0x1a0 <_JIT_ENTRY+0x1a0>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 129: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12e: 48 8b 47 18                   movq    0x18(%rdi), %rax
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  PyDict_Type
// 13c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 140: 75 35                         jne     0x177 <_JIT_ENTRY+0x177>
// 142: 48 8b 40 20                   movq    0x20(%rax), %rax
// 146: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000148:  R_X86_64_64  _JIT_OPERAND
// 150: 0f b7 c9                      movzwl  %cx, %ecx
// 153: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 156: 75 1f                         jne     0x177 <_JIT_ENTRY+0x177>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _JIT_CONTINUE
// 162: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 167: 48 83 c4 28                   addq    $0x28, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: ff e0                         jmpq    *%rax
// 177: 48 29 fe                      subq    %rdi, %rsi
// 17a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 17e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 182: 89 77 40                      movl    %esi, 0x40(%rdi)
// 185: 48 8b 07                      movq    (%rdi), %rax
// 188: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018a:  R_X86_64_64  _JIT_TARGET
// 192: 89 c9                         movl    %ecx, %ecx
// 194: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 198: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19e: eb 16                         jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 1a0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a5: 49 29 c4                      subq    %rax, %r12
// 1a8: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ac: 49 c1 ec 03                   shrq    $0x3, %r12
// 1b0: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b4: 31 c0                         xorl    %eax, %eax
// 1b6: 48 83 c4 28                   addq    $0x28, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: 5d                            popq    %rbp
// 1c4: c3                            retq
// 1c5: 
static const unsigned char _BUILD_STRINGplus_GUARD_GLOBALS_VERSION_code_body[454] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x47, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x35, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_GLOBALS_VERSION_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _BUILD_STRINGplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_IS_FALSE_POP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 6e                         je      0x166 <_JIT_ENTRY+0x166>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 114: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 0c c7                   leaq    (%rdi,%rax,8), %rcx
// 125: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 129: 48 83 c6 f8                   addq    $-0x8, %rsi
// 12d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012f:  R_X86_64_64  _Py_TrueStruct
// 137: 48 39 54 c7 f8                cmpq    %rdx, -0x8(%rdi,%rax,8)
// 13c: 48 0f 44 f1                   cmoveq  %rcx, %rsi
// 140: 74 3c                         je      0x17e <_JIT_ENTRY+0x17e>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _JIT_CONTINUE
// 14c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 151: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 156: 48 83 c4 28                   addq    $0x28, %rsp
// 15a: 5b                            popq    %rbx
// 15b: 41 5c                         popq    %r12
// 15d: 41 5d                         popq    %r13
// 15f: 41 5e                         popq    %r14
// 161: 41 5f                         popq    %r15
// 163: 5d                            popq    %rbp
// 164: ff e0                         jmpq    *%rax
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 49 29 c4                      subq    %rax, %r12
// 16e: 49 83 c4 b8                   addq    $-0x48, %r12
// 172: 49 c1 ec 03                   shrq    $0x3, %r12
// 176: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17a: 31 c0                         xorl    %eax, %eax
// 17c: eb 2c                         jmp     0x1aa <_JIT_ENTRY+0x1aa>
// 17e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 183: 48 29 c6                      subq    %rax, %rsi
// 186: 48 83 c6 b8                   addq    $-0x48, %rsi
// 18a: 48 c1 ee 03                   shrq    $0x3, %rsi
// 18e: 89 70 40                      movl    %esi, 0x40(%rax)
// 191: 48 8b 00                      movq    (%rax), %rax
// 194: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000196:  R_X86_64_64  _JIT_TARGET
// 19e: 89 c9                         movl    %ecx, %ecx
// 1a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1aa: 48 83 c4 28                   addq    $0x28, %rsp
// 1ae: 5b                            popq    %rbx
// 1af: 41 5c                         popq    %r12
// 1b1: 41 5d                         popq    %r13
// 1b3: 41 5e                         popq    %r14
// 1b5: 41 5f                         popq    %r15
// 1b7: 5d                            popq    %rbp
// 1b8: c3                            retq
// 1b9: 
static const unsigned char _BUILD_STRINGplus_GUARD_IS_FALSE_POP_code_body[442] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc7, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x54, 0xc7, 0xf8, 0x48, 0x0f, 0x44, 0xf1, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_IS_FALSE_POP_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_IS_FALSE_POP_data_holes[1];

// _BUILD_STRINGplus_GUARD_IS_NONE_POP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_IS_NONE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 78                         je      0x170 <_JIT_ENTRY+0x170>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 114: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 0c c7                   leaq    (%rdi,%rax,8), %rcx
// 125: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 129: 48 83 c6 f8                   addq    $-0x8, %rsi
// 12d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012f:  R_X86_64_64  _Py_NoneStruct
// 137: 48 39 54 c7 f8                cmpq    %rdx, -0x8(%rdi,%rax,8)
// 13c: 48 0f 45 f1                   cmovneq %rcx, %rsi
// 140: 74 53                         je      0x195 <_JIT_ENTRY+0x195>
// 142: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 147: 48 29 c6                      subq    %rax, %rsi
// 14a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 14e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 152: 89 70 40                      movl    %esi, 0x40(%rax)
// 155: 48 8b 00                      movq    (%rax), %rax
// 158: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015a:  R_X86_64_64  _JIT_TARGET
// 162: 89 c9                         movl    %ecx, %ecx
// 164: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 168: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 16e: eb 16                         jmp     0x186 <_JIT_ENTRY+0x186>
// 170: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 175: 49 29 c4                      subq    %rax, %r12
// 178: 49 83 c4 b8                   addq    $-0x48, %r12
// 17c: 49 c1 ec 03                   shrq    $0x3, %r12
// 180: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 184: 31 c0                         xorl    %eax, %eax
// 186: 48 83 c4 28                   addq    $0x28, %rsp
// 18a: 5b                            popq    %rbx
// 18b: 41 5c                         popq    %r12
// 18d: 41 5d                         popq    %r13
// 18f: 41 5e                         popq    %r14
// 191: 41 5f                         popq    %r15
// 193: 5d                            popq    %rbp
// 194: c3                            retq
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_CONTINUE
// 19f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a4: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a9: 48 83 c4 28                   addq    $0x28, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: 5d                            popq    %rbp
// 1b7: ff e0                         jmpq    *%rax
// 1b9: 
static const unsigned char _BUILD_STRINGplus_GUARD_IS_NONE_POP_code_body[442] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc7, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x54, 0xc7, 0xf8, 0x48, 0x0f, 0x45, 0xf1, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_GUARD_IS_NONE_POP_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_IS_NONE_POP_data_holes[1];

// _BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 61                         je      0x159 <_JIT_ENTRY+0x159>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 114: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: ba 01 00 00 00                movl    $0x1, %edx
// 122: 29 ca                         subl    %ecx, %edx
// 124: 48 63 da                      movslq  %edx, %rbx
// 127: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 12c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012e:  R_X86_64_64  _Py_NoneStruct
// 136: 49 39 cc                      cmpq    %rcx, %r12
// 139: 74 36                         je      0x171 <_JIT_ENTRY+0x171>
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 48 85 c0                      testq   %rax, %rax
// 142: 7e 7b                         jle     0x1bf <_JIT_ENTRY+0x1bf>
// 144: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 148: 49 83 c6 f8                   addq    $-0x8, %r14
// 14c: 85 c0                         testl   %eax, %eax
// 14e: 0f 89 99 00 00 00             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 154: e9 b5 00 00 00                jmp     0x20e <_JIT_ENTRY+0x20e>
// 159: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15e: 49 29 c4                      subq    %rax, %r12
// 161: 49 83 c4 b8                   addq    $-0x48, %r12
// 165: 49 c1 ec 03                   shrq    $0x3, %r12
// 169: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 16d: 31 c0                         xorl    %eax, %eax
// 16f: eb 3f                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_OPARG
// 17b: 0f b7 c9                      movzwl  %cx, %ecx
// 17e: 29 c8                         subl    %ecx, %eax
// 180: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 184: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 189: 48 29 c8                      subq    %rcx, %rax
// 18c: 48 83 c0 b8                   addq    $-0x48, %rax
// 190: 48 c1 e8 03                   shrq    $0x3, %rax
// 194: 89 41 40                      movl    %eax, 0x40(%rcx)
// 197: 48 8b 01                      movq    (%rcx), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 28                   addq    $0x28, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_NegativeRefcount
// 1d3: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 1d8: 4c 89 e2                      movq    %r12, %rdx
// 1db: ff d0                         callq   *%rax
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 1e5: 49 83 c6 f8                   addq    $-0x8, %r14
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 21                         js      0x20e <_JIT_ENTRY+0x20e>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 ff 0c 24                   decq    (%r12)
// 1fd: 75 0f                         jne     0x20e <_JIT_ENTRY+0x20e>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_CONTINUE
// 218: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 21d: 4c 89 f6                      movq    %r14, %rsi
// 220: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 225: 48 83 c4 28                   addq    $0x28, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 
static const unsigned char _BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xcc, 0x74, 0x36, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x4d, 0x8d, 0x34, 0xde, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xb5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x3f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xde, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _BUILD_STRINGplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_IS_TRUE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 6e                         je      0x166 <_JIT_ENTRY+0x166>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 114: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 0c c7                   leaq    (%rdi,%rax,8), %rcx
// 125: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 129: 48 83 c6 f8                   addq    $-0x8, %rsi
// 12d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012f:  R_X86_64_64  _Py_FalseStruct
// 137: 48 39 54 c7 f8                cmpq    %rdx, -0x8(%rdi,%rax,8)
// 13c: 48 0f 44 f1                   cmoveq  %rcx, %rsi
// 140: 74 3c                         je      0x17e <_JIT_ENTRY+0x17e>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _JIT_CONTINUE
// 14c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 151: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 156: 48 83 c4 28                   addq    $0x28, %rsp
// 15a: 5b                            popq    %rbx
// 15b: 41 5c                         popq    %r12
// 15d: 41 5d                         popq    %r13
// 15f: 41 5e                         popq    %r14
// 161: 41 5f                         popq    %r15
// 163: 5d                            popq    %rbp
// 164: ff e0                         jmpq    *%rax
// 166: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16b: 49 29 c4                      subq    %rax, %r12
// 16e: 49 83 c4 b8                   addq    $-0x48, %r12
// 172: 49 c1 ec 03                   shrq    $0x3, %r12
// 176: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17a: 31 c0                         xorl    %eax, %eax
// 17c: eb 2c                         jmp     0x1aa <_JIT_ENTRY+0x1aa>
// 17e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 183: 48 29 c6                      subq    %rax, %rsi
// 186: 48 83 c6 b8                   addq    $-0x48, %rsi
// 18a: 48 c1 ee 03                   shrq    $0x3, %rsi
// 18e: 89 70 40                      movl    %esi, 0x40(%rax)
// 191: 48 8b 00                      movq    (%rax), %rax
// 194: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000196:  R_X86_64_64  _JIT_TARGET
// 19e: 89 c9                         movl    %ecx, %ecx
// 1a0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1aa: 48 83 c4 28                   addq    $0x28, %rsp
// 1ae: 5b                            popq    %rbx
// 1af: 41 5c                         popq    %r12
// 1b1: 41 5d                         popq    %r13
// 1b3: 41 5e                         popq    %r14
// 1b5: 41 5f                         popq    %r15
// 1b7: 5d                            popq    %rbp
// 1b8: c3                            retq
// 1b9: 
static const unsigned char _BUILD_STRINGplus_GUARD_IS_TRUE_POP_code_body[442] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc7, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x54, 0xc7, 0xf8, 0x48, 0x0f, 0x44, 0xf1, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_IS_TRUE_POP_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_IS_TRUE_POP_data_holes[1];

// _BUILD_STRINGplus_GUARD_KEYS_VERSION
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_KEYS_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 70                         je      0x168 <_JIT_ENTRY+0x168>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 8b 40 08                   movq    0x8(%rax), %rax
// 12e: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 135: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000137:  R_X86_64_64  _JIT_OPERAND
// 13f: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 142: 75 3c                         jne     0x180 <_JIT_ENTRY+0x180>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _JIT_CONTINUE
// 14e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 153: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 158: 48 83 c4 28                   addq    $0x28, %rsp
// 15c: 5b                            popq    %rbx
// 15d: 41 5c                         popq    %r12
// 15f: 41 5d                         popq    %r13
// 161: 41 5e                         popq    %r14
// 163: 41 5f                         popq    %r15
// 165: 5d                            popq    %rbp
// 166: ff e0                         jmpq    *%rax
// 168: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16d: 49 29 c4                      subq    %rax, %r12
// 170: 49 83 c4 b8                   addq    $-0x48, %r12
// 174: 49 c1 ec 03                   shrq    $0x3, %r12
// 178: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17c: 31 c0                         xorl    %eax, %eax
// 17e: eb 2c                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 180: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 185: 48 29 c6                      subq    %rax, %rsi
// 188: 48 83 c6 b8                   addq    $-0x48, %rsi
// 18c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 190: 89 70 40                      movl    %esi, 0x40(%rax)
// 193: 48 8b 00                      movq    (%rax), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_TARGET
// 1a0: 89 c9                         movl    %ecx, %ecx
// 1a2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ac: 48 83 c4 28                   addq    $0x28, %rsp
// 1b0: 5b                            popq    %rbx
// 1b1: 41 5c                         popq    %r12
// 1b3: 41 5d                         popq    %r13
// 1b5: 41 5e                         popq    %r14
// 1b7: 41 5f                         popq    %r15
// 1b9: 5d                            popq    %rbp
// 1ba: c3                            retq
// 1bb: 
static const unsigned char _BUILD_STRINGplus_GUARD_KEYS_VERSION_code_body[444] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_KEYS_VERSION_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_KEYS_VERSION_data_holes[1];

// _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 97 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 129: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 132: 48 85 c9                      testq   %rcx, %rcx
// 135: 74 2e                         je      0x165 <_JIT_ENTRY+0x165>
// 137: 48 8b 40 10                   movq    0x10(%rax), %rax
// 13b: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 13f: 7d 24                         jge     0x165 <_JIT_ENTRY+0x165>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _JIT_CONTINUE
// 14b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 150: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 155: 48 83 c4 28                   addq    $0x28, %rsp
// 159: 5b                            popq    %rbx
// 15a: 41 5c                         popq    %r12
// 15c: 41 5d                         popq    %r13
// 15e: 41 5e                         popq    %r14
// 160: 41 5f                         popq    %r15
// 162: 5d                            popq    %rbp
// 163: ff e0                         jmpq    *%rax
// 165: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16a: 48 29 c6                      subq    %rax, %rsi
// 16d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 171: 48 c1 ee 03                   shrq    $0x3, %rsi
// 175: 89 70 40                      movl    %esi, 0x40(%rax)
// 178: 48 8b 00                      movq    (%rax), %rax
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  _JIT_TARGET
// 185: 89 c9                         movl    %ecx, %ecx
// 187: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 191: eb 16                         jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 49 29 c4                      subq    %rax, %r12
// 19b: 49 83 c4 b8                   addq    $-0x48, %r12
// 19f: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a3: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a7: 31 c0                         xorl    %eax, %eax
// 1a9: 48 83 c4 28                   addq    $0x28, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: 5d                            popq    %rbp
// 1b7: c3                            retq
// 1b8: 
static const unsigned char _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST_code_body[441] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 5d                         je      0x155 <_JIT_ENTRY+0x155>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 12f: 7e 3c                         jle     0x16d <_JIT_ENTRY+0x16d>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _JIT_CONTINUE
// 13b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 140: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 145: 48 83 c4 28                   addq    $0x28, %rsp
// 149: 5b                            popq    %rbx
// 14a: 41 5c                         popq    %r12
// 14c: 41 5d                         popq    %r13
// 14e: 41 5e                         popq    %r14
// 150: 41 5f                         popq    %r15
// 152: 5d                            popq    %rbp
// 153: ff e0                         jmpq    *%rax
// 155: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 83 c4 b8                   addq    $-0x48, %r12
// 161: 49 c1 ec 03                   shrq    $0x3, %r12
// 165: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: eb 2c                         jmp     0x199 <_JIT_ENTRY+0x199>
// 16d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 172: 48 29 c6                      subq    %rax, %rsi
// 175: 48 83 c6 b8                   addq    $-0x48, %rsi
// 179: 48 c1 ee 03                   shrq    $0x3, %rsi
// 17d: 89 70 40                      movl    %esi, 0x40(%rax)
// 180: 48 8b 00                      movq    (%rax), %rax
// 183: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000185:  R_X86_64_64  _JIT_TARGET
// 18d: 89 c9                         movl    %ecx, %ecx
// 18f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 193: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 199: 48 83 c4 28                   addq    $0x28, %rsp
// 19d: 5b                            popq    %rbx
// 19e: 41 5c                         popq    %r12
// 1a0: 41 5d                         popq    %r13
// 1a2: 41 5e                         popq    %r14
// 1a4: 41 5f                         popq    %r15
// 1a6: 5d                            popq    %rbp
// 1a7: c3                            retq
// 1a8: 
static const unsigned char _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[425] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 97 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 129: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 132: 48 85 c9                      testq   %rcx, %rcx
// 135: 74 2e                         je      0x165 <_JIT_ENTRY+0x165>
// 137: 48 8b 40 10                   movq    0x10(%rax), %rax
// 13b: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 13f: 7d 24                         jge     0x165 <_JIT_ENTRY+0x165>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _JIT_CONTINUE
// 14b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 150: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 155: 48 83 c4 28                   addq    $0x28, %rsp
// 159: 5b                            popq    %rbx
// 15a: 41 5c                         popq    %r12
// 15c: 41 5d                         popq    %r13
// 15e: 41 5e                         popq    %r14
// 160: 41 5f                         popq    %r15
// 162: 5d                            popq    %rbp
// 163: ff e0                         jmpq    *%rax
// 165: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16a: 48 29 c6                      subq    %rax, %rsi
// 16d: 48 83 c6 b8                   addq    $-0x48, %rsi
// 171: 48 c1 ee 03                   shrq    $0x3, %rsi
// 175: 89 70 40                      movl    %esi, 0x40(%rax)
// 178: 48 8b 00                      movq    (%rax), %rax
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  _JIT_TARGET
// 185: 89 c9                         movl    %ecx, %ecx
// 187: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 191: eb 16                         jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// 193: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 198: 49 29 c4                      subq    %rax, %r12
// 19b: 49 83 c4 b8                   addq    $-0x48, %r12
// 19f: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a3: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a7: 31 c0                         xorl    %eax, %eax
// 1a9: 48 83 c4 28                   addq    $0x28, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: 5d                            popq    %rbp
// 1b7: c3                            retq
// 1b8: 
static const unsigned char _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[441] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _BUILD_STRINGplus_GUARD_TYPE_VERSION
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_GUARD_TYPE_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 6c                         je      0x164 <_JIT_ENTRY+0x164>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 8b 40 08                   movq    0x8(%rax), %rax
// 12e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000130:  R_X86_64_64  _JIT_OPERAND
// 138: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 13e: 75 3c                         jne     0x17c <_JIT_ENTRY+0x17c>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_CONTINUE
// 14a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 14f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 154: 48 83 c4 28                   addq    $0x28, %rsp
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: 5d                            popq    %rbp
// 162: ff e0                         jmpq    *%rax
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 b8                   addq    $-0x48, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: eb 2c                         jmp     0x1a8 <_JIT_ENTRY+0x1a8>
// 17c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 181: 48 29 c6                      subq    %rax, %rsi
// 184: 48 83 c6 b8                   addq    $-0x48, %rsi
// 188: 48 c1 ee 03                   shrq    $0x3, %rsi
// 18c: 89 70 40                      movl    %esi, 0x40(%rax)
// 18f: 48 8b 00                      movq    (%rax), %rax
// 192: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000194:  R_X86_64_64  _JIT_TARGET
// 19c: 89 c9                         movl    %ecx, %ecx
// 19e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a8: 48 83 c4 28                   addq    $0x28, %rsp
// 1ac: 5b                            popq    %rbx
// 1ad: 41 5c                         popq    %r12
// 1af: 41 5d                         popq    %r13
// 1b1: 41 5e                         popq    %r14
// 1b3: 41 5f                         popq    %r15
// 1b5: 5d                            popq    %rbp
// 1b6: c3                            retq
// 1b7: 
static const unsigned char _BUILD_STRINGplus_GUARD_TYPE_VERSION_code_body[440] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_GUARD_TYPE_VERSION_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_GUARD_TYPE_VERSION_data_holes[1];

// _BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 c1 00 00 00             je      0x1bd <_JIT_ENTRY+0x1bd>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: bd 01 00 00 00                movl    $0x1, %ebp
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 98                         cltq
// 12a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 12f: 29 ca                         subl    %ecx, %edx
// 131: 48 63 ca                      movslq  %edx, %rcx
// 134: 48 01 c1                      addq    %rax, %rcx
// 137: 4d 8b 24 cf                   movq    (%r15,%rcx,8), %r12
// 13b: 4d 8b 74 24 18                movq    0x18(%r12), %r14
// 140: 41 8b 06                      movl    (%r14), %eax
// 143: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000145:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 14d: ff c0                         incl    %eax
// 14f: 74 05                         je      0x156 <_JIT_ENTRY+0x156>
// 151: 41 89 06                      movl    %eax, (%r14)
// 154: ff d3                         callq   *%rbx
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _JIT_OPARG
// 160: 0f b7 c0                      movzwl  %ax, %eax
// 163: 29 c5                         subl    %eax, %ebp
// 165: 48 63 cd                      movslq  %ebp, %rcx
// 168: f7 d0                         notl    %eax
// 16a: 48 98                         cltq
// 16c: 48 01 c8                      addq    %rcx, %rax
// 16f: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 173: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 178: 41 8b 45 00                   movl    (%r13), %eax
// 17c: ff c0                         incl    %eax
// 17e: 74 06                         je      0x186 <_JIT_ENTRY+0x186>
// 180: 41 89 45 00                   movl    %eax, (%r13)
// 184: ff d3                         callq   *%rbx
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _JIT_OPARG
// 190: 0f b7 c0                      movzwl  %ax, %eax
// 193: b9 01 00 00 00                movl    $0x1, %ecx
// 198: 29 c1                         subl    %eax, %ecx
// 19a: 48 63 c9                      movslq  %ecx, %rcx
// 19d: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1a2: 29 c2                         subl    %eax, %edx
// 1a4: 48 63 c2                      movslq  %edx, %rax
// 1a7: 48 01 c8                      addq    %rcx, %rax
// 1aa: 4d 89 2c c7                   movq    %r13, (%r15,%rax,8)
// 1ae: 49 8b 04 24                   movq    (%r12), %rax
// 1b2: 48 85 c0                      testq   %rax, %rax
// 1b5: 7e 2b                         jle     0x1e2 <_JIT_ENTRY+0x1e2>
// 1b7: 85 c0                         testl   %eax, %eax
// 1b9: 79 4d                         jns     0x208 <_JIT_ENTRY+0x208>
// 1bb: eb 6c                         jmp     0x229 <_JIT_ENTRY+0x229>
// 1bd: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c2: 49 29 c4                      subq    %rax, %r12
// 1c5: 49 83 c4 b8                   addq    $-0x48, %r12
// 1c9: 49 c1 ec 03                   shrq    $0x3, %r12
// 1cd: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1d1: 31 c0                         xorl    %eax, %eax
// 1d3: 48 83 c4 28                   addq    $0x28, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: c3                            retq
// 1e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e4:  R_X86_64_64  .rodata.str1.1
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_NegativeRefcount
// 1f6: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 1fb: 4c 89 e2                      movq    %r12, %rdx
// 1fe: ff d0                         callq   *%rax
// 200: 49 8b 04 24                   movq    (%r12), %rax
// 204: 85 c0                         testl   %eax, %eax
// 206: 78 21                         js      0x229 <_JIT_ENTRY+0x229>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 212: ff d0                         callq   *%rax
// 214: 49 ff 0c 24                   decq    (%r12)
// 218: 75 0f                         jne     0x229 <_JIT_ENTRY+0x229>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_Dealloc
// 224: 4c 89 e7                      movq    %r12, %rdi
// 227: ff d0                         callq   *%rax
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _JIT_OPARG
// 233: 0f b7 c0                      movzwl  %ax, %eax
// 236: b9 01 00 00 00                movl    $0x1, %ecx
// 23b: 29 c1                         subl    %eax, %ecx
// 23d: 48 63 c9                      movslq  %ecx, %rcx
// 240: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 244: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 249: 29 c2                         subl    %eax, %edx
// 24b: 48 63 d2                      movslq  %edx, %rdx
// 24e: 48 01 ca                      addq    %rcx, %rdx
// 251: 4d 89 2c d7                   movq    %r13, (%r15,%rdx,8)
// 255: f7 d0                         notl    %eax
// 257: 48 98                         cltq
// 259: 48 01 c8                      addq    %rcx, %rax
// 25c: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 26f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 274: 48 83 c4 28                   addq    $0x28, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 
static const unsigned char _BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[645] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x07, 0xbd, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x01, 0xc1, 0x4d, 0x8b, 0x24, 0xcf, 0x4d, 0x8b, 0x74, 0x24, 0x18, 0x41, 0x8b, 0x06, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x05, 0x41, 0x89, 0x06, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc5, 0x48, 0x63, 0xcd, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x34, 0xc7, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x2c, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4d, 0xeb, 0x6c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x8d, 0x34, 0xcf, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x48, 0x01, 0xca, 0x4d, 0x89, 0x2c, 0xd7, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f0                   movzwl  %ax, %r14d
// 77: 49 ff c6                      incq    %r14
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff ce                      decq    %r14
// a3: 49 83 fe 01                   cmpq    $0x1, %r14
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// ad: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// b1: 48 8b 03                      movq    (%rbx), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 48 8b 03                      movq    (%rbx), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 48 ff 0b                      decq    (%rbx)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 48 89 df                      movq    %rbx, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 48 01 00 00             je      0x244 <_JIT_ENTRY+0x244>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 118: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 e8                      movslq  %eax, %r13
// 126: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 12b: 29 c8                         subl    %ecx, %eax
// 12d: f7 d1                         notl    %ecx
// 12f: 48 63 c9                      movslq  %ecx, %rcx
// 132: 4c 01 e9                      addq    %r13, %rcx
// 135: 48 98                         cltq
// 137: 4c 01 e8                      addq    %r13, %rax
// 13a: 4c 8b 3c c7                   movq    (%rdi,%rax,8), %r15
// 13e: 48 8b 14 cf                   movq    (%rdi,%rcx,8), %rdx
// 142: 4d 8b 77 30                   movq    0x30(%r15), %r14
// 146: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 14b: 48 8b 9e 00 01 00 00          movq    0x100(%rsi), %rbx
// 152: 49 63 46 4c                   movslq  0x4c(%r14), %rax
// 156: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// 15a: 48 89 86 00 01 00 00          movq    %rax, 0x100(%rsi)
// 161: 4c 89 7b 10                   movq    %r15, 0x10(%rbx)
// 165: 41 8b 06                      movl    (%r14), %eax
// 168: ff c0                         incl    %eax
// 16a: 4c 8d 24 cf                   leaq    (%rdi,%rcx,8), %r12
// 16e: 48 85 d2                      testq   %rdx, %rdx
// 171: 0f 84 f2 00 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 177: 85 c0                         testl   %eax, %eax
// 179: 74 0f                         je      0x18a <_JIT_ENTRY+0x18a>
// 17b: 41 89 06                      movl    %eax, (%r14)
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 4c 89 33                      movq    %r14, (%rbx)
// 18d: 41 0f 10 47 10                movups  0x10(%r15), %xmm0
// 192: 0f 11 43 18                   movups  %xmm0, 0x18(%rbx)
// 196: 48 c7 43 28 00 00 00 00       movq    $0x0, 0x28(%rbx)
// 19e: 41 8b 4e 48                   movl    0x48(%r14), %ecx
// 1a2: 89 4b 40                      movl    %ecx, 0x40(%rbx)
// 1a5: 48 c7 43 30 00 00 00 00       movq    $0x0, 0x30(%rbx)
// 1ad: 49 81 c6 c8 00 00 00          addq    $0xc8, %r14
// 1b4: 4c 89 73 38                   movq    %r14, 0x38(%rbx)
// 1b8: 66 c7 43 44 00 00             movw    $0x0, 0x44(%rbx)
// 1be: c6 43 46 00                   movb    $0x0, 0x46(%rbx)
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_OPARG
// 1cc: 0f b7 e8                      movzwl  %ax, %ebp
// 1cf: ff c5                         incl    %ebp
// 1d1: 85 ed                         testl   %ebp, %ebp
// 1d3: 0f 9f c2                      setg    %dl
// 1d6: 39 e9                         cmpl    %ebp, %ecx
// 1d8: 0f 8e 37 01 00 00             jle     0x315 <_JIT_ENTRY+0x315>
// 1de: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001e0:  R_X86_64_64  _JIT_OPARG
// 1e8: 45 0f b7 fe                   movzwl  %r14w, %r15d
// 1ec: 41 8d 6f 01                   leal    0x1(%r15), %ebp
// 1f0: 48 8d 3c eb                   leaq    (%rbx,%rbp,8), %rdi
// 1f4: 48 83 c7 48                   addq    $0x48, %rdi
// 1f8: 89 e8                         movl    %ebp, %eax
// 1fa: f7 d0                         notl    %eax
// 1fc: 01 c1                         addl    %eax, %ecx
// 1fe: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  memset
// 210: 31 f6                         xorl    %esi, %esi
// 212: ff d0                         callq   *%rax
// 214: 85 ed                         testl   %ebp, %ebp
// 216: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 21b: 0f 8e f4 01 00 00             jle     0x415 <_JIT_ENTRY+0x415>
// 221: b8 01 00 00 00                movl    $0x1, %eax
// 226: 44 29 f8                      subl    %r15d, %eax
// 229: 48 98                         cltq
// 22b: 41 0f b7 ce                   movzwl  %r14w, %ecx
// 22f: 48 29 c8                      subq    %rcx, %rax
// 232: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 237: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 23b: 48 83 c0 f8                   addq    $-0x8, %rax
// 23f: e9 09 01 00 00                jmp     0x34d <_JIT_ENTRY+0x34d>
// 244: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 249: 49 29 c4                      subq    %rax, %r12
// 24c: 49 83 c4 b8                   addq    $-0x48, %r12
// 250: 49 c1 ec 03                   shrq    $0x3, %r12
// 254: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 258: 31 c0                         xorl    %eax, %eax
// 25a: 48 83 c4 28                   addq    $0x28, %rsp
// 25e: 5b                            popq    %rbx
// 25f: 41 5c                         popq    %r12
// 261: 41 5d                         popq    %r13
// 263: 41 5e                         popq    %r14
// 265: 41 5f                         popq    %r15
// 267: 5d                            popq    %rbp
// 268: c3                            retq
// 269: 85 c0                         testl   %eax, %eax
// 26b: 74 0f                         je      0x27c <_JIT_ENTRY+0x27c>
// 26d: 41 89 06                      movl    %eax, (%r14)
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 4c 89 33                      movq    %r14, (%rbx)
// 27f: 41 0f 10 47 10                movups  0x10(%r15), %xmm0
// 284: 0f 11 43 18                   movups  %xmm0, 0x18(%rbx)
// 288: 48 c7 43 28 00 00 00 00       movq    $0x0, 0x28(%rbx)
// 290: 41 8b 46 48                   movl    0x48(%r14), %eax
// 294: 89 43 40                      movl    %eax, 0x40(%rbx)
// 297: 48 c7 43 30 00 00 00 00       movq    $0x0, 0x30(%rbx)
// 29f: 49 81 c6 c8 00 00 00          addq    $0xc8, %r14
// 2a6: 4c 89 73 38                   movq    %r14, 0x38(%rbx)
// 2aa: 66 c7 43 44 00 00             movw    $0x0, 0x44(%rbx)
// 2b0: c6 43 46 00                   movb    $0x0, 0x46(%rbx)
// 2b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b6:  R_X86_64_64  _JIT_OPARG
// 2be: 0f b7 e9                      movzwl  %cx, %ebp
// 2c1: 85 ed                         testl   %ebp, %ebp
// 2c3: 0f 9f c2                      setg    %dl
// 2c6: 39 e8                         cmpl    %ebp, %eax
// 2c8: 7e 62                         jle     0x32c <_JIT_ENTRY+0x32c>
// 2ca: 44 0f b7 f1                   movzwl  %cx, %r14d
// 2ce: 4a 8d 3c f3                   leaq    (%rbx,%r14,8), %rdi
// 2d2: 48 83 c7 48                   addq    $0x48, %rdi
// 2d6: 0f b7 e9                      movzwl  %cx, %ebp
// 2d9: 89 e9                         movl    %ebp, %ecx
// 2db: f7 d1                         notl    %ecx
// 2dd: 01 c8                         addl    %ecx, %eax
// 2df: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  memset
// 2f1: 31 f6                         xorl    %esi, %esi
// 2f3: ff d0                         callq   *%rax
// 2f5: 85 ed                         testl   %ebp, %ebp
// 2f7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2fc: 0f 8e 13 01 00 00             jle     0x415 <_JIT_ENTRY+0x415>
// 302: b8 01 00 00 00                movl    $0x1, %eax
// 307: 29 e8                         subl    %ebp, %eax
// 309: 48 98                         cltq
// 30b: 4c 29 f0                      subq    %r14, %rax
// 30e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 313: eb 34                         jmp     0x349 <_JIT_ENTRY+0x349>
// 315: f7 d0                         notl    %eax
// 317: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 31d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 322: f6 c2 01                      testb   $0x1, %dl
// 325: 75 19                         jne     0x340 <_JIT_ENTRY+0x340>
// 327: e9 e9 00 00 00                jmp     0x415 <_JIT_ENTRY+0x415>
// 32c: 0f b7 c1                      movzwl  %cx, %eax
// 32f: 48 f7 d8                      negq    %rax
// 332: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 337: f6 c2 01                      testb   $0x1, %dl
// 33a: 0f 84 d5 00 00 00             je      0x415 <_JIT_ENTRY+0x415>
// 340: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 345: 4a 8d 0c e9                   leaq    (%rcx,%r13,8), %rcx
// 349: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
// 34d: 83 fd 02                      cmpl    $0x2, %ebp
// 350: b9 01 00 00 00                movl    $0x1, %ecx
// 355: 0f 4d cd                      cmovgel %ebp, %ecx
// 358: 83 f9 08                      cmpl    $0x8, %ecx
// 35b: 72 10                         jb      0x36d <_JIT_ENTRY+0x36d>
// 35d: 48 89 da                      movq    %rbx, %rdx
// 360: 48 29 c2                      subq    %rax, %rdx
// 363: 48 83 c2 48                   addq    $0x48, %rdx
// 367: 48 83 fa 20                   cmpq    $0x20, %rdx
// 36b: 73 75                         jae     0x3e2 <_JIT_ENTRY+0x3e2>
// 36d: 31 d2                         xorl    %edx, %edx
// 36f: 48 89 d6                      movq    %rdx, %rsi
// 372: 48 f7 d6                      notq    %rsi
// 375: 48 01 ce                      addq    %rcx, %rsi
// 378: 49 89 c9                      movq    %rcx, %r9
// 37b: 49 83 e1 03                   andq    $0x3, %r9
// 37f: 74 20                         je      0x3a1 <_JIT_ENTRY+0x3a1>
// 381: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 390: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 394: 4c 89 44 d3 48                movq    %r8, 0x48(%rbx,%rdx,8)
// 399: 48 ff c2                      incq    %rdx
// 39c: 49 ff c9                      decq    %r9
// 39f: 75 ef                         jne     0x390 <_JIT_ENTRY+0x390>
// 3a1: 48 83 fe 03                   cmpq    $0x3, %rsi
// 3a5: 72 6e                         jb      0x415 <_JIT_ENTRY+0x415>
// 3a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 3b0: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 3b4: 48 89 74 d3 48                movq    %rsi, 0x48(%rbx,%rdx,8)
// 3b9: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 3be: 48 89 74 d3 50                movq    %rsi, 0x50(%rbx,%rdx,8)
// 3c3: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 3c8: 48 89 74 d3 58                movq    %rsi, 0x58(%rbx,%rdx,8)
// 3cd: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 3d2: 48 89 74 d3 60                movq    %rsi, 0x60(%rbx,%rdx,8)
// 3d7: 48 83 c2 04                   addq    $0x4, %rdx
// 3db: 48 39 d1                      cmpq    %rdx, %rcx
// 3de: 75 d0                         jne     0x3b0 <_JIT_ENTRY+0x3b0>
// 3e0: eb 33                         jmp     0x415 <_JIT_ENTRY+0x415>
// 3e2: 89 ca                         movl    %ecx, %edx
// 3e4: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 3ea: 31 f6                         xorl    %esi, %esi
// 3ec: 0f 1f 40 00                   nopl    (%rax)
// 3f0: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 3f4: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 3f9: 0f 11 44 f3 48                movups  %xmm0, 0x48(%rbx,%rsi,8)
// 3fe: 0f 11 4c f3 58                movups  %xmm1, 0x58(%rbx,%rsi,8)
// 403: 48 83 c6 04                   addq    $0x4, %rsi
// 407: 48 39 f2                      cmpq    %rsi, %rdx
// 40a: 75 e4                         jne     0x3f0 <_JIT_ENTRY+0x3f0>
// 40c: 48 39 ca                      cmpq    %rcx, %rdx
// 40f: 0f 85 5a ff ff ff             jne     0x36f <_JIT_ENTRY+0x36f>
// 415: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000417:  R_X86_64_64  _JIT_OPARG
// 41f: 0f b7 c0                      movzwl  %ax, %eax
// 422: b9 01 00 00 00                movl    $0x1, %ecx
// 427: 29 c1                         subl    %eax, %ecx
// 429: 48 63 c9                      movslq  %ecx, %rcx
// 42c: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 431: 29 c2                         subl    %eax, %edx
// 433: 48 63 c2                      movslq  %edx, %rax
// 436: 48 01 c8                      addq    %rcx, %rax
// 439: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 43e: 48 89 1c c1                   movq    %rbx, (%rcx,%rax,8)
// 442: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000444:  R_X86_64_64  _JIT_CONTINUE
// 44c: 4c 89 e6                      movq    %r12, %rsi
// 44f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 454: 48 83 c4 28                   addq    $0x28, %rsp
// 458: 5b                            popq    %rbx
// 459: 41 5c                         popq    %r12
// 45b: 41 5d                         popq    %r13
// 45d: 41 5e                         popq    %r14
// 45f: 41 5f                         popq    %r15
// 461: 5d                            popq    %rbp
// 462: ff e0                         jmpq    *%rax
// 464: 
static const unsigned char _BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS_code_body[1125] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x45, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xff, 0xd7, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc3, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x48, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xe8, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x01, 0xe9, 0x48, 0x98, 0x4c, 0x01, 0xe8, 0x4c, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x14, 0xcf, 0x4d, 0x8b, 0x77, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x9e, 0x00, 0x01, 0x00, 0x00, 0x49, 0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x89, 0x86, 0x00, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7b, 0x10, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x4c, 0x8d, 0x24, 0xcf, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x33, 0x41, 0x0f, 0x10, 0x47, 0x10, 0x0f, 0x11, 0x43, 0x18, 0x48, 0xc7, 0x43, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4e, 0x48, 0x89, 0x4b, 0x40, 0x48, 0xc7, 0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc6, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x73, 0x38, 0x66, 0xc7, 0x43, 0x44, 0x00, 0x00, 0xc6, 0x43, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0x37, 0x01, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xfe, 0x41, 0x8d, 0x6f, 0x01, 0x48, 0x8d, 0x3c, 0xeb, 0x48, 0x83, 0xc7, 0x48, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x8e, 0xf4, 0x01, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x44, 0x29, 0xf8, 0x48, 0x98, 0x41, 0x0f, 0xb7, 0xce, 0x48, 0x29, 0xc8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8d, 0x04, 0xc1, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x85, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x33, 0x41, 0x0f, 0x10, 0x47, 0x10, 0x0f, 0x11, 0x43, 0x18, 0x48, 0xc7, 0x43, 0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x46, 0x48, 0x89, 0x43, 0x40, 0x48, 0xc7, 0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc6, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x73, 0x38, 0x66, 0xc7, 0x43, 0x44, 0x00, 0x00, 0xc6, 0x43, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x7e, 0x62, 0x44, 0x0f, 0xb7, 0xf1, 0x4a, 0x8d, 0x3c, 0xf3, 0x48, 0x83, 0xc7, 0x48, 0x0f, 0xb7, 0xe9, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x0f, 0x8e, 0x13, 0x01, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xe8, 0x48, 0x98, 0x4c, 0x29, 0xf0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0xeb, 0x34, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xf6, 0xc2, 0x01, 0x75, 0x19, 0xe9, 0xe9, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xd5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x4a, 0x8d, 0x0c, 0xe9, 0x48, 0x8d, 0x04, 0xc1, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x48, 0x89, 0xda, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x75, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x49, 0x89, 0xc9, 0x49, 0x83, 0xe1, 0x03, 0x74, 0x20, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4c, 0x89, 0x44, 0xd3, 0x48, 0x48, 0xff, 0xc2, 0x49, 0xff, 0xc9, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x6e, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x48, 0x89, 0x74, 0xd3, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x48, 0x89, 0x74, 0xd3, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x48, 0x89, 0x74, 0xd3, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x48, 0x89, 0x74, 0xd3, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x33, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x0f, 0x11, 0x44, 0xf3, 0x48, 0x0f, 0x11, 0x4c, 0xf3, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe4, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x5a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x48, 0x01, 0xc8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x1c, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x417, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x444, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _BUILD_STRINGplus_INSERT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_INSERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 0f 84 83 00 00 00             je      0x17f <_JIT_ENTRY+0x17f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 111: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 116: 4c 89 e6                      movq    %r12, %rsi
// 119: 48 29 d6                      subq    %rdx, %rsi
// 11c: 0f b7 c0                      movzwl  %ax, %eax
// 11f: 48 89 3e                      movq    %rdi, (%rsi)
// 122: be 01 00 00 00                movl    $0x1, %esi
// 127: 29 c6                         subl    %eax, %esi
// 129: 48 63 f6                      movslq  %esi, %rsi
// 12c: 4d 8d 34 f4                   leaq    (%r12,%rsi,8), %r14
// 130: 49 8b 5c f4 f8                movq    -0x8(%r12,%rsi,8), %rbx
// 135: f7 d0                         notl    %eax
// 137: 4c 63 f8                      movslq  %eax, %r15
// 13a: 49 01 f7                      addq    %rsi, %r15
// 13d: 4b 8d 3c fc                   leaq    (%r12,%r15,8), %rdi
// 141: 48 29 ce                      subq    %rcx, %rsi
// 144: 49 8d 34 f4                   leaq    (%r12,%rsi,8), %rsi
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  memmove
// 152: ff d0                         callq   *%rax
// 154: 4b 89 1c fc                   movq    %rbx, (%r12,%r15,8)
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _JIT_CONTINUE
// 162: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 167: 4c 89 f6                      movq    %r14, %rsi
// 16a: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 16f: 48 83 c4 28                   addq    $0x28, %rsp
// 173: 5b                            popq    %rbx
// 174: 41 5c                         popq    %r12
// 176: 41 5d                         popq    %r13
// 178: 41 5e                         popq    %r14
// 17a: 41 5f                         popq    %r15
// 17c: 5d                            popq    %rbp
// 17d: ff e0                         jmpq    *%rax
// 17f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 184: 49 29 c4                      subq    %rax, %r12
// 187: 49 83 c4 b8                   addq    $-0x48, %r12
// 18b: 49 c1 ec 03                   shrq    $0x3, %r12
// 18f: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 193: 31 c0                         xorl    %eax, %eax
// 195: 48 83 c4 28                   addq    $0x28, %rsp
// 199: 5b                            popq    %rbx
// 19a: 41 5c                         popq    %r12
// 19c: 41 5d                         popq    %r13
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: 5d                            popq    %rbp
// 1a3: c3                            retq
// 1a4: 
static const unsigned char _BUILD_STRINGplus_INSERT_code_body[421] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c, 0x89, 0xe6, 0x48, 0x29, 0xd6, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0x3e, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc6, 0x48, 0x63, 0xf6, 0x4d, 0x8d, 0x34, 0xf4, 0x49, 0x8b, 0x5c, 0xf4, 0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xf8, 0x49, 0x01, 0xf7, 0x4b, 0x8d, 0x3c, 0xfc, 0x48, 0x29, 0xce, 0x49, 0x8d, 0x34, 0xf4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x89, 0x1c, 0xfc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_INSERT_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_INSERT_data_holes[1];

// _BUILD_STRINGplus_IS_NONE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_IS_NONE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 5e                         je      0x156 <_JIT_ENTRY+0x156>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 114: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 118: bd 01 00 00 00                movl    $0x1, %ebp
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 98                         cltq
// 126: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_NoneStruct
// 135: 49 39 c4                      cmpq    %rax, %r12
// 138: 74 41                         je      0x17b <_JIT_ENTRY+0x17b>
// 13a: 49 8b 04 24                   movq    (%r12), %rax
// 13e: 48 85 c0                      testq   %rax, %rax
// 141: 7e 44                         jle     0x187 <_JIT_ENTRY+0x187>
// 143: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000145:  R_X86_64_64  _Py_FalseStruct
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 79 66                         jns     0x1b7 <_JIT_ENTRY+0x1b7>
// 151: e9 82 00 00 00                jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// 156: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15b: 49 29 c4                      subq    %rax, %r12
// 15e: 49 83 c4 b8                   addq    $-0x48, %r12
// 162: 49 c1 ec 03                   shrq    $0x3, %r12
// 166: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 16a: 31 c0                         xorl    %eax, %eax
// 16c: 48 83 c4 28                   addq    $0x28, %rsp
// 170: 5b                            popq    %rbx
// 171: 41 5c                         popq    %r12
// 173: 41 5d                         popq    %r13
// 175: 41 5e                         popq    %r14
// 177: 41 5f                         popq    %r15
// 179: 5d                            popq    %rbp
// 17a: c3                            retq
// 17b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000017d:  R_X86_64_64  _Py_TrueStruct
// 185: eb 51                         jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_NegativeRefcount
// 19b: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 1a0: 4c 89 e2                      movq    %r12, %rdx
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 8b 04 24                   movq    (%r12), %rax
// 1a9: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001ab:  R_X86_64_64  _Py_FalseStruct
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 49 ff 0c 24                   decq    (%r12)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1dd: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_OPARG
// 1ec: 0f b7 c0                      movzwl  %ax, %eax
// 1ef: 29 c5                         subl    %eax, %ebp
// 1f1: 48 63 c5                      movslq  %ebp, %rax
// 1f4: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1f8: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _JIT_CONTINUE
// 207: 48 83 c4 28                   addq    $0x28, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 
static const unsigned char _BUILD_STRINGplus_IS_NONE_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xbd, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x41, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x44, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x66, 0xe9, 0x82, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x51, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc5, 0x48, 0x63, 0xc5, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_IS_NONE_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_IS_NONE_data_holes[1];

// _BUILD_STRINGplus_IS_OP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_IS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7f: 49 ff c7                      incq    %r15
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 74 43                         je      0x13a <_JIT_ENTRY+0x13a>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_OPARG
// 101: 0f b7 c8                      movzwl  %ax, %ecx
// 104: 0f b7 c0                      movzwl  %ax, %eax
// 107: 48 c1 e0 03                   shlq    $0x3, %rax
// 10b: 48 f7 d8                      negq    %rax
// 10e: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 113: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 117: b8 01 00 00 00                movl    $0x1, %eax
// 11c: 29 c8                         subl    %ecx, %eax
// 11e: 4c 63 f0                      movslq  %eax, %r14
// 121: 4f 8b 64 f7 f0                movq    -0x10(%r15,%r14,8), %r12
// 126: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 12b: 49 8b 04 24                   movq    (%r12), %rax
// 12f: 48 85 c0                      testq   %rax, %rax
// 132: 7e 2b                         jle     0x15f <_JIT_ENTRY+0x15f>
// 134: 85 c0                         testl   %eax, %eax
// 136: 79 4d                         jns     0x185 <_JIT_ENTRY+0x185>
// 138: eb 53                         jmp     0x18d <_JIT_ENTRY+0x18d>
// 13a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13f: 49 29 c4                      subq    %rax, %r12
// 142: 49 83 c4 b8                   addq    $-0x48, %r12
// 146: 49 c1 ec 03                   shrq    $0x3, %r12
// 14a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 14e: 31 c0                         xorl    %eax, %eax
// 150: 48 83 c4 28                   addq    $0x28, %rsp
// 154: 5b                            popq    %rbx
// 155: 41 5c                         popq    %r12
// 157: 41 5d                         popq    %r13
// 159: 41 5e                         popq    %r14
// 15b: 41 5f                         popq    %r15
// 15d: 5d                            popq    %rbp
// 15e: c3                            retq
// 15f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000161:  R_X86_64_64  .rodata.str1.1
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_NegativeRefcount
// 173: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 178: 4c 89 e2                      movq    %r12, %rdx
// 17b: ff d0                         callq   *%rax
// 17d: 49 8b 04 24                   movq    (%r12), %rax
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 08                         js      0x18d <_JIT_ENTRY+0x18d>
// 185: ff d3                         callq   *%rbx
// 187: 49 ff 0c 24                   decq    (%r12)
// 18b: 74 17                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 18d: 49 8b 45 00                   movq    (%r13), %rax
// 191: 48 85 c0                      testq   %rax, %rax
// 194: 7e 26                         jle     0x1bc <_JIT_ENTRY+0x1bc>
// 196: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 19a: 48 83 c5 f8                   addq    $-0x8, %rbp
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 79 48                         jns     0x1ea <_JIT_ENTRY+0x1ea>
// 1a2: eb 5d                         jmp     0x201 <_JIT_ENTRY+0x201>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_Dealloc
// 1ae: 4c 89 e7                      movq    %r12, %rdi
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 8b 45 00                   movq    (%r13), %rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 7f da                         jg      0x196 <_JIT_ENTRY+0x196>
// 1bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_NegativeRefcount
// 1d0: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 1d5: 4c 89 ea                      movq    %r13, %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8b 45 00                   movq    (%r13), %rax
// 1de: 4b 8d 2c f7                   leaq    (%r15,%r14,8), %rbp
// 1e2: 48 83 c5 f8                   addq    $-0x8, %rbp
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 78 17                         js      0x201 <_JIT_ENTRY+0x201>
// 1ea: ff d3                         callq   *%rbx
// 1ec: 49 ff 4d 00                   decq    (%r13)
// 1f0: 75 0f                         jne     0x201 <_JIT_ENTRY+0x201>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_Dealloc
// 1fc: 4c 89 ef                      movq    %r13, %rdi
// 1ff: ff d0                         callq   *%rax
// 201: 31 c0                         xorl    %eax, %eax
// 203: 4d 39 ec                      cmpq    %r13, %r12
// 206: 0f 94 c0                      sete    %al
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 66 39 c8                      cmpw    %cx, %ax
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_FalseStruct
// 220: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000222:  R_X86_64_64  _Py_TrueStruct
// 22a: 48 0f 44 d0                   cmoveq  %rax, %rdx
// 22e: 0f b7 c1                      movzwl  %cx, %eax
// 231: b9 01 00 00 00                movl    $0x1, %ecx
// 236: 29 c1                         subl    %eax, %ecx
// 238: 48 63 c1                      movslq  %ecx, %rax
// 23b: 49 89 54 c7 f0                movq    %rdx, -0x10(%r15,%rax,8)
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _JIT_CONTINUE
// 24a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 24f: 48 89 ee                      movq    %rbp, %rsi
// 252: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 257: 48 83 c4 28                   addq    $0x28, %rsp
// 25b: 5b                            popq    %rbx
// 25c: 41 5c                         popq    %r12
// 25e: 41 5d                         popq    %r13
// 260: 41 5e                         popq    %r14
// 262: 41 5f                         popq    %r15
// 264: 5d                            popq    %rbp
// 265: ff e0                         jmpq    *%rax
// 267: 
static const unsigned char _BUILD_STRINGplus_IS_OP_code_body[616] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xf0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4d, 0xeb, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x17, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x26, 0x4b, 0x8d, 0x2c, 0xf7, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xda, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4b, 0x8d, 0x2c, 0xf7, 0x48, 0x83, 0xc5, 0xf8, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd0, 0x0f, 0xb7, 0xc1, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x54, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_IS_OP_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_IS_OP_data_holes[1];

// _BUILD_STRINGplus_ITER_CHECK_LIST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_ITER_CHECK_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 70                         je      0x168 <_JIT_ENTRY+0x168>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012c:  R_X86_64_64  PyListIter_Type
// 134: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 138: 74 53                         je      0x18d <_JIT_ENTRY+0x18d>
// 13a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13f: 48 29 c6                      subq    %rax, %rsi
// 142: 48 83 c6 b8                   addq    $-0x48, %rsi
// 146: 48 c1 ee 03                   shrq    $0x3, %rsi
// 14a: 89 70 40                      movl    %esi, 0x40(%rax)
// 14d: 48 8b 00                      movq    (%rax), %rax
// 150: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000152:  R_X86_64_64  _JIT_TARGET
// 15a: 89 c9                         movl    %ecx, %ecx
// 15c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 160: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 166: eb 16                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 168: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16d: 49 29 c4                      subq    %rax, %r12
// 170: 49 83 c4 b8                   addq    $-0x48, %r12
// 174: 49 c1 ec 03                   shrq    $0x3, %r12
// 178: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17c: 31 c0                         xorl    %eax, %eax
// 17e: 48 83 c4 28                   addq    $0x28, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: c3                            retq
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_CONTINUE
// 197: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a1: 48 83 c4 28                   addq    $0x28, %rsp
// 1a5: 5b                            popq    %rbx
// 1a6: 41 5c                         popq    %r12
// 1a8: 41 5d                         popq    %r13
// 1aa: 41 5e                         popq    %r14
// 1ac: 41 5f                         popq    %r15
// 1ae: 5d                            popq    %rbp
// 1af: ff e0                         jmpq    *%rax
// 1b1: 
static const unsigned char _BUILD_STRINGplus_ITER_CHECK_LIST_code_body[434] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_ITER_CHECK_LIST_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_ITER_CHECK_LIST_data_holes[1];

// _BUILD_STRINGplus_ITER_CHECK_RANGE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_ITER_CHECK_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 70                         je      0x168 <_JIT_ENTRY+0x168>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012c:  R_X86_64_64  PyRangeIter_Type
// 134: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 138: 74 53                         je      0x18d <_JIT_ENTRY+0x18d>
// 13a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13f: 48 29 c6                      subq    %rax, %rsi
// 142: 48 83 c6 b8                   addq    $-0x48, %rsi
// 146: 48 c1 ee 03                   shrq    $0x3, %rsi
// 14a: 89 70 40                      movl    %esi, 0x40(%rax)
// 14d: 48 8b 00                      movq    (%rax), %rax
// 150: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000152:  R_X86_64_64  _JIT_TARGET
// 15a: 89 c9                         movl    %ecx, %ecx
// 15c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 160: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 166: eb 16                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 168: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16d: 49 29 c4                      subq    %rax, %r12
// 170: 49 83 c4 b8                   addq    $-0x48, %r12
// 174: 49 c1 ec 03                   shrq    $0x3, %r12
// 178: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17c: 31 c0                         xorl    %eax, %eax
// 17e: 48 83 c4 28                   addq    $0x28, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: c3                            retq
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_CONTINUE
// 197: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a1: 48 83 c4 28                   addq    $0x28, %rsp
// 1a5: 5b                            popq    %rbx
// 1a6: 41 5c                         popq    %r12
// 1a8: 41 5d                         popq    %r13
// 1aa: 41 5e                         popq    %r14
// 1ac: 41 5f                         popq    %r15
// 1ae: 5d                            popq    %rbp
// 1af: ff e0                         jmpq    *%rax
// 1b1: 
static const unsigned char _BUILD_STRINGplus_ITER_CHECK_RANGE_code_body[434] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_ITER_CHECK_RANGE_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_ITER_CHECK_RANGE_data_holes[1];

// _BUILD_STRINGplus_ITER_CHECK_TUPLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_ITER_CHECK_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 70                         je      0x168 <_JIT_ENTRY+0x168>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012c:  R_X86_64_64  PyTupleIter_Type
// 134: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 138: 74 53                         je      0x18d <_JIT_ENTRY+0x18d>
// 13a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13f: 48 29 c6                      subq    %rax, %rsi
// 142: 48 83 c6 b8                   addq    $-0x48, %rsi
// 146: 48 c1 ee 03                   shrq    $0x3, %rsi
// 14a: 89 70 40                      movl    %esi, 0x40(%rax)
// 14d: 48 8b 00                      movq    (%rax), %rax
// 150: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000152:  R_X86_64_64  _JIT_TARGET
// 15a: 89 c9                         movl    %ecx, %ecx
// 15c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 160: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 166: eb 16                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 168: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16d: 49 29 c4                      subq    %rax, %r12
// 170: 49 83 c4 b8                   addq    $-0x48, %r12
// 174: 49 c1 ec 03                   shrq    $0x3, %r12
// 178: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17c: 31 c0                         xorl    %eax, %eax
// 17e: 48 83 c4 28                   addq    $0x28, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: c3                            retq
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_CONTINUE
// 197: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a1: 48 83 c4 28                   addq    $0x28, %rsp
// 1a5: 5b                            popq    %rbx
// 1a6: 41 5c                         popq    %r12
// 1a8: 41 5d                         popq    %r13
// 1aa: 41 5e                         popq    %r14
// 1ac: 41 5f                         popq    %r15
// 1ae: 5d                            popq    %rbp
// 1af: ff e0                         jmpq    *%rax
// 1b1: 
static const unsigned char _BUILD_STRINGplus_ITER_CHECK_TUPLE_code_body[434] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_ITER_CHECK_TUPLE_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_ITER_CHECK_TUPLE_data_holes[1];

// _BUILD_STRINGplus_ITER_NEXT_LIST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_ITER_NEXT_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 a3 00 00 00             je      0x19f <_JIT_ENTRY+0x19f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 98                         cltq
// 12a: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 12f: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 133: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 137: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 13b: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 13f: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 143: 4c 8b 34 ca                   movq    (%rdx,%rcx,8), %r14
// 147: 41 8b 06                      movl    (%r14), %eax
// 14a: ff c0                         incl    %eax
// 14c: 74 0f                         je      0x15d <_JIT_ENTRY+0x15d>
// 14e: 41 89 06                      movl    %eax, (%r14)
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _JIT_OPARG
// 167: 0f b7 c0                      movzwl  %ax, %eax
// 16a: 29 c3                         subl    %eax, %ebx
// 16c: 48 63 c3                      movslq  %ebx, %rax
// 16f: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 173: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 177: 48 83 c6 08                   addq    $0x8, %rsi
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _JIT_CONTINUE
// 185: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18a: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 18f: 48 83 c4 28                   addq    $0x28, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: ff e0                         jmpq    *%rax
// 19f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a4: 49 29 c4                      subq    %rax, %r12
// 1a7: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ab: 49 c1 ec 03                   shrq    $0x3, %r12
// 1af: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b3: 31 c0                         xorl    %eax, %eax
// 1b5: 48 83 c4 28                   addq    $0x28, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: c3                            retq
// 1c4: 
static const unsigned char _BUILD_STRINGplus_ITER_NEXT_LIST_code_body[453] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x07, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x34, 0xca, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_ITER_NEXT_LIST_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_ITER_NEXT_LIST_data_holes[1];

// _BUILD_STRINGplus_ITER_NEXT_RANGE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_ITER_NEXT_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 9e 00 00 00             je      0x19a <_JIT_ENTRY+0x19a>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 4c 63 f0                      movslq  %eax, %r14
// 12b: 4b 8b 44 f7 f8                movq    -0x8(%r15,%r14,8), %rax
// 130: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 134: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 138: 48 01 f9                      addq    %rdi, %rcx
// 13b: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 13f: 48 ff 48 20                   decq    0x20(%rax)
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  PyLong_FromLong
// 14d: ff d0                         callq   *%rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 74 42                         je      0x196 <_JIT_ENTRY+0x196>
// 154: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: 0f b7 c9                      movzwl  %cx, %ecx
// 161: 29 cb                         subl    %ecx, %ebx
// 163: 48 63 cb                      movslq  %ebx, %rcx
// 166: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 16a: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 16e: 48 83 c6 08                   addq    $0x8, %rsi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_CONTINUE
// 17c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 181: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 186: 48 83 c4 28                   addq    $0x28, %rsp
// 18a: 5b                            popq    %rbx
// 18b: 41 5c                         popq    %r12
// 18d: 41 5d                         popq    %r13
// 18f: 41 5e                         popq    %r14
// 191: 41 5f                         popq    %r15
// 193: 5d                            popq    %rbp
// 194: ff e0                         jmpq    *%rax
// 196: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 19a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19f: 49 29 c4                      subq    %rax, %r12
// 1a2: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a6: 49 c1 ec 03                   shrq    $0x3, %r12
// 1aa: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1ae: 31 c0                         xorl    %eax, %eax
// 1b0: 48 83 c4 28                   addq    $0x28, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 
static const unsigned char _BUILD_STRINGplus_ITER_NEXT_RANGE_code_body[448] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x44, 0xf7, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x42, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcb, 0x48, 0x63, 0xcb, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x24, 0xf7, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_ITER_NEXT_RANGE_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_ITER_NEXT_RANGE_data_holes[1];

// _BUILD_STRINGplus_ITER_NEXT_TUPLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_ITER_NEXT_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 a0 00 00 00             je      0x19c <_JIT_ENTRY+0x19c>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 98                         cltq
// 12a: 49 8b 44 c7 f8                movq    -0x8(%r15,%rax,8), %rax
// 12f: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 133: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 137: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 13b: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 13f: 4c 8b 74 ca 18                movq    0x18(%rdx,%rcx,8), %r14
// 144: 41 8b 06                      movl    (%r14), %eax
// 147: ff c0                         incl    %eax
// 149: 74 0f                         je      0x15a <_JIT_ENTRY+0x15a>
// 14b: 41 89 06                      movl    %eax, (%r14)
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 158: ff d0                         callq   *%rax
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _JIT_OPARG
// 164: 0f b7 c0                      movzwl  %ax, %eax
// 167: 29 c3                         subl    %eax, %ebx
// 169: 48 63 c3                      movslq  %ebx, %rax
// 16c: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 170: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 174: 48 83 c6 08                   addq    $0x8, %rsi
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _JIT_CONTINUE
// 182: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 187: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 18c: 48 83 c4 28                   addq    $0x28, %rsp
// 190: 5b                            popq    %rbx
// 191: 41 5c                         popq    %r12
// 193: 41 5d                         popq    %r13
// 195: 41 5e                         popq    %r14
// 197: 41 5f                         popq    %r15
// 199: 5d                            popq    %rbp
// 19a: ff e0                         jmpq    *%rax
// 19c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a1: 49 29 c4                      subq    %rax, %r12
// 1a4: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a8: 49 c1 ec 03                   shrq    $0x3, %r12
// 1ac: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b0: 31 c0                         xorl    %eax, %eax
// 1b2: 48 83 c4 28                   addq    $0x28, %rsp
// 1b6: 5b                            popq    %rbx
// 1b7: 41 5c                         popq    %r12
// 1b9: 41 5d                         popq    %r13
// 1bb: 41 5e                         popq    %r14
// 1bd: 41 5f                         popq    %r15
// 1bf: 5d                            popq    %rbp
// 1c0: c3                            retq
// 1c1: 
static const unsigned char _BUILD_STRINGplus_ITER_NEXT_TUPLE_code_body[450] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x07, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8b, 0x44, 0xc7, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x74, 0xca, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x34, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_ITER_NEXT_TUPLE_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_ITER_NEXT_TUPLE_data_holes[1];

// _BUILD_STRINGplus_JUMP_TO_TOP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_JUMP_TO_TOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 50                         je      0x148 <_JIT_ENTRY+0x148>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8d 3c c2                   leaq    (%rdx,%rax,8), %r15
// 125: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 12a: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 12e: 48 8b 00                      movq    (%rax), %rax
// 131: 84 c0                         testb   %al, %al
// 133: 74 38                         je      0x16d <_JIT_ENTRY+0x16d>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_HandlePending
// 13f: 48 89 df                      movq    %rbx, %rdi
// 142: ff d0                         callq   *%rax
// 144: 85 c0                         testl   %eax, %eax
// 146: 74 25                         je      0x16d <_JIT_ENTRY+0x16d>
// 148: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 14d: 49 29 c7                      subq    %rax, %r15
// 150: 49 83 c7 b8                   addq    $-0x48, %r15
// 154: 49 c1 ef 03                   shrq    $0x3, %r15
// 158: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 15c: 31 c0                         xorl    %eax, %eax
// 15e: 48 83 c4 28                   addq    $0x28, %rsp
// 162: 5b                            popq    %rbx
// 163: 41 5c                         popq    %r12
// 165: 41 5d                         popq    %r13
// 167: 41 5e                         popq    %r14
// 169: 41 5f                         popq    %r15
// 16b: 5d                            popq    %rbp
// 16c: c3                            retq
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _JIT_CONTINUE
// 177: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 17c: 4c 89 fe                      movq    %r15, %rsi
// 17f: 48 89 da                      movq    %rbx, %rdx
// 182: 48 83 c4 28                   addq    $0x28, %rsp
// 186: 5b                            popq    %rbx
// 187: 41 5c                         popq    %r12
// 189: 41 5d                         popq    %r13
// 18b: 41 5e                         popq    %r14
// 18d: 41 5f                         popq    %r15
// 18f: 5d                            popq    %rbp
// 190: ff e0                         jmpq    *%rax
// 192: 
static const unsigned char _BUILD_STRINGplus_JUMP_TO_TOP_code_body[403] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc2, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x25, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_JUMP_TO_TOP_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_JUMP_TO_TOP_data_holes[1];

// _BUILD_STRINGplus_LIST_APPEND
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LIST_APPEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d6                      callq   *%r14
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 b1 00 00 00             je      0x1ad <_JIT_ENTRY+0x1ad>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 49 8b 74 de f8                movq    -0x8(%r14,%rbx,8), %rsi
// 12b: f7 d1                         notl    %ecx
// 12d: 48 63 c1                      movslq  %ecx, %rax
// 130: 48 01 d8                      addq    %rbx, %rax
// 133: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 137: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 13b: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 13f: 7e 11                         jle     0x152 <_JIT_ENTRY+0x152>
// 141: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 145: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 149: 48 ff c0                      incq    %rax
// 14c: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 150: eb 10                         jmp     0x162 <_JIT_ENTRY+0x162>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 15c: ff d0                         callq   *%rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 2c                         js      0x18e <_JIT_ENTRY+0x18e>
// 162: 49 8d 34 de                   leaq    (%r14,%rbx,8), %rsi
// 166: 48 83 c6 f8                   addq    $-0x8, %rsi
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _JIT_CONTINUE
// 174: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 179: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 17e: 48 83 c4 28                   addq    $0x28, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: ff e0                         jmpq    *%rax
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_OPARG
// 198: 0f b7 c0                      movzwl  %ax, %eax
// 19b: b9 01 00 00 00                movl    $0x1, %ecx
// 1a0: 29 c1                         subl    %eax, %ecx
// 1a2: 48 63 c1                      movslq  %ecx, %rax
// 1a5: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1a9: 49 83 c4 f8                   addq    $-0x8, %r12
// 1ad: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b2: 49 29 c4                      subq    %rax, %r12
// 1b5: 49 83 c4 b8                   addq    $-0x48, %r12
// 1b9: 49 c1 ec 03                   shrq    $0x3, %r12
// 1bd: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1c1: 31 c0                         xorl    %eax, %eax
// 1c3: 48 83 c4 28                   addq    $0x28, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: c3                            retq
// 1d2: 
static const unsigned char _BUILD_STRINGplus_LIST_APPEND_code_body[467] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x74, 0xde, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd8, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x2c, 0x49, 0x8d, 0x34, 0xde, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x24, 0xc6, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LIST_APPEND_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LIST_APPEND_data_holes[1];

// _BUILD_STRINGplus_LIST_EXTEND
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LIST_EXTEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f5                      movq    %rsi, %r13
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c5                      subq    %rax, %r13
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 ee                      movq    %r13, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 7c c5 00                movq    (%r13,%rax,8), %r15
// b1: 49 8b 07                      movq    (%r15), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 4c 01 00 00             je      0x248 <_JIT_ENTRY+0x248>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f8                      movslq  %eax, %r15
// 126: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 12b: f7 d1                         notl    %ecx
// 12d: 48 63 c1                      movslq  %ecx, %rax
// 130: 4c 01 f8                      addq    %r15, %rax
// 133: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _PyList_Extend
// 141: 4c 89 e6                      movq    %r12, %rsi
// 144: ff d0                         callq   *%rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 74 27                         je      0x172 <_JIT_ENTRY+0x172>
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 157: 0f 8e 10 01 00 00             jle     0x26d <_JIT_ENTRY+0x26d>
// 15d: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 161: 49 83 c6 f8                   addq    $-0x8, %r14
// 165: 85 c0                         testl   %eax, %eax
// 167: 0f 89 2e 01 00 00             jns     0x29b <_JIT_ENTRY+0x29b>
// 16d: e9 4a 01 00 00                jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 172: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000174:  R_X86_64_64  PyExc_TypeError
// 17c: 48 8b 33                      movq    (%rbx), %rsi
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _PyErr_ExceptionMatches
// 189: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 18e: 4c 89 ef                      movq    %r13, %rdi
// 191: ff d0                         callq   *%rax
// 193: 85 c0                         testl   %eax, %eax
// 195: 74 59                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 197: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 19c: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 1a4: 75 4a                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  PySequence_Check
// 1b0: 4c 89 e7                      movq    %r12, %rdi
// 1b3: ff d0                         callq   *%rax
// 1b5: 85 c0                         testl   %eax, %eax
// 1b7: 75 37                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _PyErr_Clear
// 1c3: 4c 89 ef                      movq    %r13, %rdi
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 8b 33                      movq    (%rbx), %rsi
// 1cb: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1d0: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1d4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x39
// 1de: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001e0:  R_X86_64_64  _PyErr_Format
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: 31 c0                         xorl    %eax, %eax
// 1ed: 41 ff d0                      callq   *%r8
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7f 22                         jg      0x21b <_JIT_ENTRY+0x21b>
// 1f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_NegativeRefcount
// 20d: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 212: 4c 89 e2                      movq    %r12, %rdx
// 215: ff d0                         callq   *%rax
// 217: 49 8b 04 24                   movq    (%r12), %rax
// 21b: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 21f: 85 c0                         testl   %eax, %eax
// 221: 78 21                         js      0x244 <_JIT_ENTRY+0x244>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22d: ff d0                         callq   *%rax
// 22f: 49 ff 0c 24                   decq    (%r12)
// 233: 75 0f                         jne     0x244 <_JIT_ENTRY+0x244>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_Dealloc
// 23f: 4c 89 e7                      movq    %r12, %rdi
// 242: ff d0                         callq   *%rax
// 244: 49 83 c5 f8                   addq    $-0x8, %r13
// 248: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 24d: 49 29 c5                      subq    %rax, %r13
// 250: 49 83 c5 b8                   addq    $-0x48, %r13
// 254: 49 c1 ed 03                   shrq    $0x3, %r13
// 258: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 25c: 31 c0                         xorl    %eax, %eax
// 25e: 48 83 c4 28                   addq    $0x28, %rsp
// 262: 5b                            popq    %rbx
// 263: 41 5c                         popq    %r12
// 265: 41 5d                         popq    %r13
// 267: 41 5e                         popq    %r14
// 269: 41 5f                         popq    %r15
// 26b: 5d                            popq    %rbp
// 26c: c3                            retq
// 26d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026f:  R_X86_64_64  .rodata.str1.1
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_NegativeRefcount
// 281: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 286: 4c 89 e2                      movq    %r12, %rdx
// 289: ff d0                         callq   *%rax
// 28b: 49 8b 04 24                   movq    (%r12), %rax
// 28f: 4f 8d 34 fe                   leaq    (%r14,%r15,8), %r14
// 293: 49 83 c6 f8                   addq    $-0x8, %r14
// 297: 85 c0                         testl   %eax, %eax
// 299: 78 21                         js      0x2bc <_JIT_ENTRY+0x2bc>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 ff 0c 24                   decq    (%r12)
// 2ab: 75 0f                         jne     0x2bc <_JIT_ENTRY+0x2bc>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_Dealloc
// 2b7: 4c 89 e7                      movq    %r12, %rdi
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _JIT_CONTINUE
// 2c6: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2cb: 4c 89 f6                      movq    %r14, %rsi
// 2ce: 48 89 da                      movq    %rbx, %rdx
// 2d1: 48 83 c4 28                   addq    $0x28, %rsp
// 2d5: 5b                            popq    %rbx
// 2d6: 41 5c                         popq    %r12
// 2d8: 41 5d                         popq    %r13
// 2da: 41 5e                         popq    %r14
// 2dc: 41 5f                         popq    %r15
// 2de: 5d                            popq    %rbp
// 2df: ff e0                         jmpq    *%rax
// 2e1: 
static const unsigned char _BUILD_STRINGplus_LIST_EXTEND_code_body[738] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf5, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x7c, 0xc5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x4c, 0x01, 0xf8, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x8e, 0x10, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0x2e, 0x01, 0x00, 0x00, 0xe9, 0x4a, 0x01, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x59, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x33, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xfe, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x34, 0xfe, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_LIST_EXTEND_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _BUILD_STRINGplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LIST_EXTEND_data_holes[1];

// _BUILD_STRINGplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ASSERTION_ERROR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 74 71                         je      0x169 <_JIT_ENTRY+0x169>
// f8: 49 89 04 24                   movq    %rax, (%r12)
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  PyExc_AssertionError
// 106: 48 8b 18                      movq    (%rax), %rbx
// 109: 8b 03                         movl    (%rbx), %eax
// 10b: ff c0                         incl    %eax
// 10d: 74 0e                         je      0x11d <_JIT_ENTRY+0x11d>
// 10f: 89 03                         movl    %eax, (%rbx)
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _JIT_OPARG
// 127: 0f b7 c0                      movzwl  %ax, %eax
// 12a: b9 01 00 00 00                movl    $0x1, %ecx
// 12f: 29 c1                         subl    %eax, %ecx
// 131: 48 63 c1                      movslq  %ecx, %rax
// 134: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 139: 48 89 1c c1                   movq    %rbx, (%rcx,%rax,8)
// 13d: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 141: 48 83 c6 08                   addq    $0x8, %rsi
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_CONTINUE
// 14f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 154: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 159: 48 83 c4 28                   addq    $0x28, %rsp
// 15d: 5b                            popq    %rbx
// 15e: 41 5c                         popq    %r12
// 160: 41 5d                         popq    %r13
// 162: 41 5e                         popq    %r14
// 164: 41 5f                         popq    %r15
// 166: 5d                            popq    %rbp
// 167: ff e0                         jmpq    *%rax
// 169: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16e: 49 29 c4                      subq    %rax, %r12
// 171: 49 83 c4 b8                   addq    $-0x48, %r12
// 175: 49 c1 ec 03                   shrq    $0x3, %r12
// 179: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17d: 31 c0                         xorl    %eax, %eax
// 17f: 48 83 c4 28                   addq    $0x28, %rsp
// 183: 5b                            popq    %rbx
// 184: 41 5c                         popq    %r12
// 186: 41 5d                         popq    %r13
// 188: 41 5e                         popq    %r14
// 18a: 41 5f                         popq    %r15
// 18c: 5d                            popq    %rbp
// 18d: c3                            retq
// 18e: 
static const unsigned char _BUILD_STRINGplus_LOAD_ASSERTION_ERROR_code_body[399] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x74, 0x71, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x1c, 0xc1, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_ASSERTION_ERROR_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 96 01 00 00             je      0x297 <_JIT_ENTRY+0x297>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 d0                      movzwl  %ax, %edx
// 111: 48 c1 e2 03                   shlq    $0x3, %rdx
// 115: 48 f7 da                      negq    %rdx
// 118: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 11d: 49 89 34 16                   movq    %rsi, (%r14,%rdx)
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 ca                      movslq  %edx, %rcx
// 12b: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 12f: 49 83 c4 f8                   addq    $-0x8, %r12
// 133: 4d 8b 6c ce f8                movq    -0x8(%r14,%rcx,8), %r13
// 138: 48 8b 0b                      movq    (%rbx), %rcx
// 13b: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13f: 89 c2                         movl    %eax, %edx
// 141: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 147: 48 8b 74 91 18                movq    0x18(%rcx,%rdx,4), %rsi
// 14c: a8 01                         testb   $0x1, %al
// 14e: 74 3d                         je      0x18d <_JIT_ENTRY+0x18d>
// 150: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _PyObject_GetMethod
// 162: 48 89 e2                      movq    %rsp, %rdx
// 165: 4c 89 ef                      movq    %r13, %rdi
// 168: ff d0                         callq   *%rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 74 56                         je      0x1c4 <_JIT_ENTRY+0x1c4>
// 16e: 48 8b 04 24                   movq    (%rsp), %rax
// 172: 49 89 04 24                   movq    %rax, (%r12)
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _JIT_OPARG
// 180: a8 01                         testb   $0x1, %al
// 182: 0f 85 9f 00 00 00             jne     0x227 <_JIT_ENTRY+0x227>
// 188: e9 ab 00 00 00                jmp     0x238 <_JIT_ENTRY+0x238>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  PyObject_GetAttr
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 48 89 04 24                   movq    %rax, (%rsp)
// 1a0: 49 8b 45 00                   movq    (%r13), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 46                         jg      0x1ef <_JIT_ENTRY+0x1ef>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 1c2: eb 22                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1c4: 49 8b 45 00                   movq    (%r13), %rax
// 1c8: 48 85 c0                      testq   %rax, %rax
// 1cb: 7f 22                         jg      0x1ef <_JIT_ENTRY+0x1ef>
// 1cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cf:  R_X86_64_64  .rodata.str1.1
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_NegativeRefcount
// 1e1: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 1e6: 4c 89 ea                      movq    %r13, %rdx
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 8b 45 00                   movq    (%r13), %rax
// 1ef: 85 c0                         testl   %eax, %eax
// 1f1: 78 12                         js      0x205 <_JIT_ENTRY+0x205>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 ff 4d 00                   decq    (%r13)
// 203: 74 76                         je      0x27b <_JIT_ENTRY+0x27b>
// 205: 48 8b 04 24                   movq    (%rsp), %rax
// 209: 48 85 c0                      testq   %rax, %rax
// 20c: 0f 84 85 00 00 00             je      0x297 <_JIT_ENTRY+0x297>
// 212: 45 31 ed                      xorl    %r13d, %r13d
// 215: 49 89 04 24                   movq    %rax, (%r12)
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: a8 01                         testb   $0x1, %al
// 225: 74 11                         je      0x238 <_JIT_ENTRY+0x238>
// 227: 0f b7 c0                      movzwl  %ax, %eax
// 22a: b9 01 00 00 00                movl    $0x1, %ecx
// 22f: 29 c1                         subl    %eax, %ecx
// 231: 48 63 c1                      movslq  %ecx, %rax
// 234: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_OPARG
// 242: 0f b7 c8                      movzwl  %ax, %ecx
// 245: ba 01 00 00 00                movl    $0x1, %edx
// 24a: 29 ca                         subl    %ecx, %edx
// 24c: 48 63 ca                      movslq  %edx, %rcx
// 24f: 83 e0 01                      andl    $0x1, %eax
// 252: 48 01 c8                      addq    %rcx, %rax
// 255: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _JIT_CONTINUE
// 263: 48 89 df                      movq    %rbx, %rdi
// 266: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 26b: 48 83 c4 28                   addq    $0x28, %rsp
// 26f: 5b                            popq    %rbx
// 270: 41 5c                         popq    %r12
// 272: 41 5d                         popq    %r13
// 274: 41 5e                         popq    %r14
// 276: 41 5f                         popq    %r15
// 278: 5d                            popq    %rbp
// 279: ff e0                         jmpq    *%rax
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 ef                      movq    %r13, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 8b 04 24                   movq    (%rsp), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 0f 85 7b ff ff ff             jne     0x212 <_JIT_ENTRY+0x212>
// 297: 49 29 dc                      subq    %rbx, %r12
// 29a: 49 83 c4 b8                   addq    $-0x48, %r12
// 29e: 49 c1 ec 03                   shrq    $0x3, %r12
// 2a2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2a6: 31 c0                         xorl    %eax, %eax
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: c3                            retq
// 2b7: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_code_body[696] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0x96, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x34, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x24, 0xce, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x8b, 0x6c, 0xce, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x20, 0x89, 0xc2, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x91, 0x18, 0xa8, 0x01, 0x74, 0x3d, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x56, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x9f, 0x00, 0x00, 0x00, 0xe9, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x76, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x45, 0x31, 0xed, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x11, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x7b, 0xff, 0xff, 0xff, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_CLASS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 51                         je      0x149 <_JIT_ENTRY+0x149>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 114: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8b 64 c3 f8                movq    -0x8(%rbx,%rax,8), %r12
// 126: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000128:  R_X86_64_64  _JIT_OPERAND
// 130: 41 8b 06                      movl    (%r14), %eax
// 133: ff c0                         incl    %eax
// 135: 75 37                         jne     0x16e <_JIT_ENTRY+0x16e>
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7e 46                         jle     0x186 <_JIT_ENTRY+0x186>
// 140: 85 c0                         testl   %eax, %eax
// 142: 79 68                         jns     0x1ac <_JIT_ENTRY+0x1ac>
// 144: e9 84 00 00 00                jmp     0x1cd <_JIT_ENTRY+0x1cd>
// 149: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 14e: 49 29 c4                      subq    %rax, %r12
// 151: 49 83 c4 b8                   addq    $-0x48, %r12
// 155: 49 c1 ec 03                   shrq    $0x3, %r12
// 159: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 15d: 31 c0                         xorl    %eax, %eax
// 15f: 48 83 c4 28                   addq    $0x28, %rsp
// 163: 5b                            popq    %rbx
// 164: 41 5c                         popq    %r12
// 166: 41 5d                         popq    %r13
// 168: 41 5e                         popq    %r14
// 16a: 41 5f                         popq    %r15
// 16c: 5d                            popq    %rbp
// 16d: c3                            retq
// 16e: 41 89 06                      movl    %eax, (%r14)
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 49 8b 04 24                   movq    (%r12), %rax
// 181: 48 85 c0                      testq   %rax, %rax
// 184: 7f ba                         jg      0x140 <_JIT_ENTRY+0x140>
// 186: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NegativeRefcount
// 19a: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 19f: 4c 89 e2                      movq    %r12, %rdx
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 8b 04 24                   movq    (%r12), %rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 78 21                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 ff 0c 24                   decq    (%r12)
// 1bc: 75 0f                         jne     0x1cd <_JIT_ENTRY+0x1cd>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_Dealloc
// 1c8: 4c 89 e7                      movq    %r12, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 d1                      movzwl  %cx, %edx
// 1da: b8 01 00 00 00                movl    $0x1, %eax
// 1df: be 01 00 00 00                movl    $0x1, %esi
// 1e4: 29 d6                         subl    %edx, %esi
// 1e6: 48 63 d6                      movslq  %esi, %rdx
// 1e9: 4c 89 74 d3 f8                movq    %r14, -0x8(%rbx,%rdx,8)
// 1ee: f6 c1 01                      testb   $0x1, %cl
// 1f1: 74 15                         je      0x208 <_JIT_ENTRY+0x208>
// 1f3: 0f b7 c9                      movzwl  %cx, %ecx
// 1f6: ba 01 00 00 00                movl    $0x1, %edx
// 1fb: 29 ca                         subl    %ecx, %edx
// 1fd: 48 63 ca                      movslq  %edx, %rcx
// 200: 48 c7 04 cb 00 00 00 00       movq    $0x0, (%rbx,%rcx,8)
// 208: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020a:  R_X86_64_64  _JIT_OPARG
// 212: 0f b7 d1                      movzwl  %cx, %edx
// 215: 29 d0                         subl    %edx, %eax
// 217: 48 98                         cltq
// 219: 83 e1 01                      andl    $0x1, %ecx
// 21c: 48 01 c1                      addq    %rax, %rcx
// 21f: 48 8d 34 cb                   leaq    (%rbx,%rcx,8), %rsi
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 232: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 237: 48 83 c4 28                   addq    $0x28, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: ff e0                         jmpq    *%rax
// 247: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_CLASS_code_body[584] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x64, 0xc3, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x75, 0x37, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x46, 0x85, 0xc0, 0x79, 0x68, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xba, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4c, 0x89, 0x74, 0xd3, 0xf8, 0xf6, 0xc1, 0x01, 0x74, 0x15, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0xc7, 0x04, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_CLASS_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_CLASS_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 6c                         je      0x164 <_JIT_ENTRY+0x164>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 114: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8d 34 c3                   leaq    (%rbx,%rax,8), %r14
// 125: 4c 8b 64 c3 f8                movq    -0x8(%rbx,%rax,8), %r12
// 12a: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  _JIT_OPERAND
// 139: 0f b7 c9                      movzwl  %cx, %ecx
// 13c: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// 141: 4d 85 ed                      testq   %r13, %r13
// 144: 74 36                         je      0x17c <_JIT_ENTRY+0x17c>
// 146: 41 8b 45 00                   movl    (%r13), %eax
// 14a: ff c0                         incl    %eax
// 14c: 75 6a                         jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 14e: 49 8b 04 24                   movq    (%r12), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7e 7a                         jle     0x1d1 <_JIT_ENTRY+0x1d1>
// 157: 85 c0                         testl   %eax, %eax
// 159: 0f 89 98 00 00 00             jns     0x1f7 <_JIT_ENTRY+0x1f7>
// 15f: e9 b4 00 00 00                jmp     0x218 <_JIT_ENTRY+0x218>
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 b8                   addq    $-0x48, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: eb 2d                         jmp     0x1a9 <_JIT_ENTRY+0x1a9>
// 17c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 181: 49 29 c6                      subq    %rax, %r14
// 184: 49 83 c6 b8                   addq    $-0x48, %r14
// 188: 49 c1 ee 03                   shrq    $0x3, %r14
// 18c: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 190: 48 8b 00                      movq    (%rax), %rax
// 193: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000195:  R_X86_64_64  _JIT_TARGET
// 19d: 89 c9                         movl    %ecx, %ecx
// 19f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a9: 48 83 c4 28                   addq    $0x28, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: 5d                            popq    %rbp
// 1b7: c3                            retq
// 1b8: 41 89 45 00                   movl    %eax, (%r13)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 8b 04 24                   movq    (%r12), %rax
// 1cc: 48 85 c0                      testq   %rax, %rax
// 1cf: 7f 86                         jg      0x157 <_JIT_ENTRY+0x157>
// 1d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d3:  R_X86_64_64  .rodata.str1.1
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_NegativeRefcount
// 1e5: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 1ea: 4c 89 e2                      movq    %r12, %rdx
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 78 21                         js      0x218 <_JIT_ENTRY+0x218>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 201: ff d0                         callq   *%rax
// 203: 49 ff 0c 24                   decq    (%r12)
// 207: 75 0f                         jne     0x218 <_JIT_ENTRY+0x218>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 e7                      movq    %r12, %rdi
// 216: ff d0                         callq   *%rax
// 218: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021a:  R_X86_64_64  _JIT_OPARG
// 222: 0f b7 d1                      movzwl  %cx, %edx
// 225: b8 01 00 00 00                movl    $0x1, %eax
// 22a: be 01 00 00 00                movl    $0x1, %esi
// 22f: 29 d6                         subl    %edx, %esi
// 231: 48 63 d6                      movslq  %esi, %rdx
// 234: 4c 89 6c d3 f8                movq    %r13, -0x8(%rbx,%rdx,8)
// 239: f6 c1 01                      testb   $0x1, %cl
// 23c: 74 07                         je      0x245 <_JIT_ENTRY+0x245>
// 23e: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 245: 0f b7 d1                      movzwl  %cx, %edx
// 248: 29 d0                         subl    %edx, %eax
// 24a: 48 98                         cltq
// 24c: 83 e1 01                      andl    $0x1, %ecx
// 24f: 48 01 c1                      addq    %rax, %rcx
// 252: 48 8d 34 cb                   leaq    (%rbx,%rcx,8), %rsi
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _JIT_CONTINUE
// 260: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 265: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 26a: 48 83 c4 28                   addq    $0x28, %rsp
// 26e: 5b                            popq    %rbx
// 26f: 41 5c                         popq    %r12
// 271: 41 5d                         popq    %r13
// 273: 41 5e                         popq    %r14
// 275: 41 5f                         popq    %r15
// 277: 5d                            popq    %rbp
// 278: ff e0                         jmpq    *%rax
// 27a: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE_code_body[635] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc3, 0x4c, 0x8b, 0x64, 0xc3, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x36, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x6a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7a, 0x85, 0xc0, 0x0f, 0x89, 0x98, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x86, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4c, 0x89, 0x6c, 0xd3, 0xf8, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 9a 00 00 00             je      0x196 <_JIT_ENTRY+0x196>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 118: 49 89 14 04                   movq    %rdx, (%r12,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 98                         cltq
// 12a: 4d 8b 74 c4 f8                movq    -0x8(%r12,%rax,8), %r14
// 12f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000131:  R_X86_64_64  _JIT_OPERAND
// 139: 41 8b 07                      movl    (%r15), %eax
// 13c: ff c0                         incl    %eax
// 13e: 74 0f                         je      0x14f <_JIT_ENTRY+0x14f>
// 140: 41 89 07                      movl    %eax, (%r15)
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _JIT_OPARG
// 159: 0f b7 c0                      movzwl  %ax, %eax
// 15c: 29 c3                         subl    %eax, %ebx
// 15e: 48 63 c3                      movslq  %ebx, %rax
// 161: 4d 89 7c c4 f8                movq    %r15, -0x8(%r12,%rax,8)
// 166: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 16a: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 16e: 48 83 c6 08                   addq    $0x8, %rsi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_CONTINUE
// 17c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 181: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 186: 48 83 c4 28                   addq    $0x28, %rsp
// 18a: 5b                            popq    %rbx
// 18b: 41 5c                         popq    %r12
// 18d: 41 5d                         popq    %r13
// 18f: 41 5e                         popq    %r14
// 191: 41 5f                         popq    %r15
// 193: 5d                            popq    %rbp
// 194: ff e0                         jmpq    *%rax
// 196: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19b: 49 29 c4                      subq    %rax, %r12
// 19e: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a2: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a6: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1aa: 31 c0                         xorl    %eax, %eax
// 1ac: 48 83 c4 28                   addq    $0x28, %rsp
// 1b0: 5b                            popq    %rbx
// 1b1: 41 5c                         popq    %r12
// 1b3: 41 5d                         popq    %r13
// 1b5: 41 5e                         popq    %r14
// 1b7: 41 5f                         popq    %r15
// 1b9: 5d                            popq    %rbp
// 1ba: c3                            retq
// 1bb: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[444] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x89, 0x14, 0x04, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x74, 0xc4, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x7c, 0xc4, 0xf8, 0x4d, 0x89, 0x34, 0xc4, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 9a 00 00 00             je      0x196 <_JIT_ENTRY+0x196>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 118: 49 89 14 04                   movq    %rdx, (%r12,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 98                         cltq
// 12a: 4d 8b 74 c4 f8                movq    -0x8(%r12,%rax,8), %r14
// 12f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000131:  R_X86_64_64  _JIT_OPERAND
// 139: 41 8b 07                      movl    (%r15), %eax
// 13c: ff c0                         incl    %eax
// 13e: 74 0f                         je      0x14f <_JIT_ENTRY+0x14f>
// 140: 41 89 07                      movl    %eax, (%r15)
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _JIT_OPARG
// 159: 0f b7 c0                      movzwl  %ax, %eax
// 15c: 29 c3                         subl    %eax, %ebx
// 15e: 48 63 c3                      movslq  %ebx, %rax
// 161: 4d 89 7c c4 f8                movq    %r15, -0x8(%r12,%rax,8)
// 166: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 16a: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 16e: 48 83 c6 08                   addq    $0x8, %rsi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_CONTINUE
// 17c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 181: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 186: 48 83 c4 28                   addq    $0x28, %rsp
// 18a: 5b                            popq    %rbx
// 18b: 41 5c                         popq    %r12
// 18d: 41 5d                         popq    %r13
// 18f: 41 5e                         popq    %r14
// 191: 41 5f                         popq    %r15
// 193: 5d                            popq    %rbp
// 194: ff e0                         jmpq    *%rax
// 196: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19b: 49 29 c4                      subq    %rax, %r12
// 19e: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a2: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a6: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1aa: 31 c0                         xorl    %eax, %eax
// 1ac: 48 83 c4 28                   addq    $0x28, %rsp
// 1b0: 5b                            popq    %rbx
// 1b1: 41 5c                         popq    %r12
// 1b3: 41 5d                         popq    %r13
// 1b5: 41 5e                         popq    %r14
// 1b7: 41 5f                         popq    %r15
// 1b9: 5d                            popq    %rbp
// 1ba: c3                            retq
// 1bb: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT_code_body[444] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x89, 0x14, 0x04, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x74, 0xc4, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x7c, 0xc4, 0xf8, 0x4d, 0x89, 0x34, 0xc4, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 9a 00 00 00             je      0x196 <_JIT_ENTRY+0x196>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 118: 49 89 14 04                   movq    %rdx, (%r12,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 98                         cltq
// 12a: 4d 8b 74 c4 f8                movq    -0x8(%r12,%rax,8), %r14
// 12f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000131:  R_X86_64_64  _JIT_OPERAND
// 139: 41 8b 07                      movl    (%r15), %eax
// 13c: ff c0                         incl    %eax
// 13e: 74 0f                         je      0x14f <_JIT_ENTRY+0x14f>
// 140: 41 89 07                      movl    %eax, (%r15)
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _JIT_OPARG
// 159: 0f b7 c0                      movzwl  %ax, %eax
// 15c: 29 c3                         subl    %eax, %ebx
// 15e: 48 63 c3                      movslq  %ebx, %rax
// 161: 4d 89 7c c4 f8                movq    %r15, -0x8(%r12,%rax,8)
// 166: 4d 89 34 c4                   movq    %r14, (%r12,%rax,8)
// 16a: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 16e: 48 83 c6 08                   addq    $0x8, %rsi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_CONTINUE
// 17c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 181: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 186: 48 83 c4 28                   addq    $0x28, %rsp
// 18a: 5b                            popq    %rbx
// 18b: 41 5c                         popq    %r12
// 18d: 41 5d                         popq    %r13
// 18f: 41 5e                         popq    %r14
// 191: 41 5f                         popq    %r15
// 193: 5d                            popq    %rbp
// 194: ff e0                         jmpq    *%rax
// 196: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19b: 49 29 c4                      subq    %rax, %r12
// 19e: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a2: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a6: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1aa: 31 c0                         xorl    %eax, %eax
// 1ac: 48 83 c4 28                   addq    $0x28, %rsp
// 1b0: 5b                            popq    %rbx
// 1b1: 41 5c                         popq    %r12
// 1b3: 41 5d                         popq    %r13
// 1b5: 41 5e                         popq    %r14
// 1b7: 41 5f                         popq    %r15
// 1b9: 5d                            popq    %rbp
// 1ba: c3                            retq
// 1bb: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[444] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x89, 0x14, 0x04, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x74, 0xc4, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x29, 0xc3, 0x48, 0x63, 0xc3, 0x4d, 0x89, 0x7c, 0xc4, 0xf8, 0x4d, 0x89, 0x34, 0xc4, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_MODULE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 83 00 00 00             je      0x17f <_JIT_ENTRY+0x17f>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 4c 8b 64 c3 f8                movq    -0x8(%rbx,%rax,8), %r12
// 12a: 49 8b 4c 24 10                movq    0x10(%r12), %rcx
// 12f: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 133: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 137: be 01 00 00 00                movl    $0x1, %esi
// 13c: 48 d3 e6                      shlq    %cl, %rsi
// 13f: 4c 8d 34 c3                   leaq    (%rbx,%rax,8), %r14
// 143: 48 01 d6                      addq    %rdx, %rsi
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_OPERAND
// 150: 0f b7 c0                      movzwl  %ax, %eax
// 153: 48 c1 e0 04                   shlq    $0x4, %rax
// 157: 4c 8b 6c 30 28                movq    0x28(%rax,%rsi), %r13
// 15c: 4d 85 ed                      testq   %r13, %r13
// 15f: 74 36                         je      0x197 <_JIT_ENTRY+0x197>
// 161: 41 8b 45 00                   movl    (%r13), %eax
// 165: ff c0                         incl    %eax
// 167: 75 6a                         jne     0x1d3 <_JIT_ENTRY+0x1d3>
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 48 85 c0                      testq   %rax, %rax
// 170: 7e 7a                         jle     0x1ec <_JIT_ENTRY+0x1ec>
// 172: 85 c0                         testl   %eax, %eax
// 174: 0f 89 98 00 00 00             jns     0x212 <_JIT_ENTRY+0x212>
// 17a: e9 b4 00 00 00                jmp     0x233 <_JIT_ENTRY+0x233>
// 17f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 184: 49 29 c4                      subq    %rax, %r12
// 187: 49 83 c4 b8                   addq    $-0x48, %r12
// 18b: 49 c1 ec 03                   shrq    $0x3, %r12
// 18f: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 193: 31 c0                         xorl    %eax, %eax
// 195: eb 2d                         jmp     0x1c4 <_JIT_ENTRY+0x1c4>
// 197: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19c: 49 29 c6                      subq    %rax, %r14
// 19f: 49 83 c6 b8                   addq    $-0x48, %r14
// 1a3: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a7: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 1ab: 48 8b 00                      movq    (%rax), %rax
// 1ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b0:  R_X86_64_64  _JIT_TARGET
// 1b8: 89 c9                         movl    %ecx, %ecx
// 1ba: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1be: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c4: 48 83 c4 28                   addq    $0x28, %rsp
// 1c8: 5b                            popq    %rbx
// 1c9: 41 5c                         popq    %r12
// 1cb: 41 5d                         popq    %r13
// 1cd: 41 5e                         popq    %r14
// 1cf: 41 5f                         popq    %r15
// 1d1: 5d                            popq    %rbp
// 1d2: c3                            retq
// 1d3: 41 89 45 00                   movl    %eax, (%r13)
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 8b 04 24                   movq    (%r12), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7f 86                         jg      0x172 <_JIT_ENTRY+0x172>
// 1ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ee:  R_X86_64_64  .rodata.str1.1
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_NegativeRefcount
// 200: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 205: 4c 89 e2                      movq    %r12, %rdx
// 208: ff d0                         callq   *%rax
// 20a: 49 8b 04 24                   movq    (%r12), %rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 78 21                         js      0x233 <_JIT_ENTRY+0x233>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21c: ff d0                         callq   *%rax
// 21e: 49 ff 0c 24                   decq    (%r12)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 4c 89 e7                      movq    %r12, %rdi
// 231: ff d0                         callq   *%rax
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: 0f b7 d1                      movzwl  %cx, %edx
// 240: b8 01 00 00 00                movl    $0x1, %eax
// 245: be 01 00 00 00                movl    $0x1, %esi
// 24a: 29 d6                         subl    %edx, %esi
// 24c: 48 63 d6                      movslq  %esi, %rdx
// 24f: 4c 89 6c d3 f8                movq    %r13, -0x8(%rbx,%rdx,8)
// 254: f6 c1 01                      testb   $0x1, %cl
// 257: 74 07                         je      0x260 <_JIT_ENTRY+0x260>
// 259: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 260: 0f b7 d1                      movzwl  %cx, %edx
// 263: 29 d0                         subl    %edx, %eax
// 265: 48 98                         cltq
// 267: 83 e1 01                      andl    $0x1, %ecx
// 26a: 48 01 c1                      addq    %rax, %rcx
// 26d: 48 8d 34 cb                   leaq    (%rbx,%rcx,8), %rsi
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _JIT_CONTINUE
// 27b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 280: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 285: 48 83 c4 28                   addq    $0x28, %rsp
// 289: 5b                            popq    %rbx
// 28a: 41 5c                         popq    %r12
// 28c: 41 5d                         popq    %r13
// 28e: 41 5e                         popq    %r14
// 290: 41 5f                         popq    %r15
// 292: 5d                            popq    %rbp
// 293: ff e0                         jmpq    *%rax
// 295: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_MODULE_code_body[662] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x64, 0xc3, 0xf8, 0x49, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x4c, 0x8d, 0x34, 0xc3, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x30, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x36, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x6a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7a, 0x85, 0xc0, 0x0f, 0x89, 0x98, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x86, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4c, 0x89, 0x6c, 0xd3, 0xf8, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_MODULE_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_MODULE_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 3d                         je      0x135 <_JIT_ENTRY+0x135>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 114: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 126: 49 8b 04 24                   movq    (%r12), %rax
// 12a: 48 85 c0                      testq   %rax, %rax
// 12d: 7e 2b                         jle     0x15a <_JIT_ENTRY+0x15a>
// 12f: 85 c0                         testl   %eax, %eax
// 131: 79 4d                         jns     0x180 <_JIT_ENTRY+0x180>
// 133: eb 5d                         jmp     0x192 <_JIT_ENTRY+0x192>
// 135: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13a: 49 29 c4                      subq    %rax, %r12
// 13d: 49 83 c4 b8                   addq    $-0x48, %r12
// 141: 49 c1 ec 03                   shrq    $0x3, %r12
// 145: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 149: 31 c0                         xorl    %eax, %eax
// 14b: 48 83 c4 28                   addq    $0x28, %rsp
// 14f: 5b                            popq    %rbx
// 150: 41 5c                         popq    %r12
// 152: 41 5d                         popq    %r13
// 154: 41 5e                         popq    %r14
// 156: 41 5f                         popq    %r15
// 158: 5d                            popq    %rbp
// 159: c3                            retq
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 173: 4c 89 e2                      movq    %r12, %rdx
// 176: ff d0                         callq   *%rax
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 78 12                         js      0x192 <_JIT_ENTRY+0x192>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 49 ff 0c 24                   decq    (%r12)
// 190: 74 62                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 192: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000194:  R_X86_64_64  _JIT_OPERAND
// 19c: 8b 03                         movl    (%rbx), %eax
// 19e: ff c0                         incl    %eax
// 1a0: 74 0e                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 1a2: 89 03                         movl    %eax, (%rbx)
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c0                      movzwl  %ax, %eax
// 1bd: b9 01 00 00 00                movl    $0x1, %ecx
// 1c2: 29 c1                         subl    %eax, %ecx
// 1c4: 48 63 c1                      movslq  %ecx, %rax
// 1c7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1cb: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1df: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1e4: 48 83 c4 28                   addq    $0x28, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_Dealloc
// 1fe: 4c 89 e7                      movq    %r12, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000205:  R_X86_64_64  _JIT_OPERAND
// 20d: 8b 03                         movl    (%rbx), %eax
// 20f: ff c0                         incl    %eax
// 211: 75 8f                         jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 213: eb 9b                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 215: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[534] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4d, 0xeb, 0x5d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x62, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x8f, 0xeb, 0x9b};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 3d                         je      0x135 <_JIT_ENTRY+0x135>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 114: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4d 8b 64 c6 f8                movq    -0x8(%r14,%rax,8), %r12
// 126: 49 8b 04 24                   movq    (%r12), %rax
// 12a: 48 85 c0                      testq   %rax, %rax
// 12d: 7e 2b                         jle     0x15a <_JIT_ENTRY+0x15a>
// 12f: 85 c0                         testl   %eax, %eax
// 131: 79 4d                         jns     0x180 <_JIT_ENTRY+0x180>
// 133: eb 5d                         jmp     0x192 <_JIT_ENTRY+0x192>
// 135: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13a: 49 29 c4                      subq    %rax, %r12
// 13d: 49 83 c4 b8                   addq    $-0x48, %r12
// 141: 49 c1 ec 03                   shrq    $0x3, %r12
// 145: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 149: 31 c0                         xorl    %eax, %eax
// 14b: 48 83 c4 28                   addq    $0x28, %rsp
// 14f: 5b                            popq    %rbx
// 150: 41 5c                         popq    %r12
// 152: 41 5d                         popq    %r13
// 154: 41 5e                         popq    %r14
// 156: 41 5f                         popq    %r15
// 158: 5d                            popq    %rbp
// 159: c3                            retq
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 173: 4c 89 e2                      movq    %r12, %rdx
// 176: ff d0                         callq   *%rax
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 78 12                         js      0x192 <_JIT_ENTRY+0x192>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 49 ff 0c 24                   decq    (%r12)
// 190: 74 62                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 192: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000194:  R_X86_64_64  _JIT_OPERAND
// 19c: 8b 03                         movl    (%rbx), %eax
// 19e: ff c0                         incl    %eax
// 1a0: 74 0e                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 1a2: 89 03                         movl    %eax, (%rbx)
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c0                      movzwl  %ax, %eax
// 1bd: b9 01 00 00 00                movl    $0x1, %ecx
// 1c2: 29 c1                         subl    %eax, %ecx
// 1c4: 48 63 c1                      movslq  %ecx, %rax
// 1c7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1cb: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1df: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1e4: 48 83 c4 28                   addq    $0x28, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_Dealloc
// 1fe: 4c 89 e7                      movq    %r12, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000205:  R_X86_64_64  _JIT_OPERAND
// 20d: 8b 03                         movl    (%rbx), %eax
// 20f: ff c0                         incl    %eax
// 211: 75 8f                         jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 213: eb 9b                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 215: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[534] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8b, 0x64, 0xc6, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4d, 0xeb, 0x5d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x62, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0, 0x75, 0x8f, 0xeb, 0x9b};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_SLOT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_SLOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 66                         je      0x15e <_JIT_ENTRY+0x15e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 114: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8d 34 c3                   leaq    (%rbx,%rax,8), %r14
// 125: 4c 8b 64 c3 f8                movq    -0x8(%rbx,%rax,8), %r12
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _JIT_OPERAND
// 134: 0f b7 c0                      movzwl  %ax, %eax
// 137: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 13b: 4d 85 ed                      testq   %r13, %r13
// 13e: 74 36                         je      0x176 <_JIT_ENTRY+0x176>
// 140: 41 8b 45 00                   movl    (%r13), %eax
// 144: ff c0                         incl    %eax
// 146: 75 6a                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7e 7a                         jle     0x1cb <_JIT_ENTRY+0x1cb>
// 151: 85 c0                         testl   %eax, %eax
// 153: 0f 89 98 00 00 00             jns     0x1f1 <_JIT_ENTRY+0x1f1>
// 159: e9 b4 00 00 00                jmp     0x212 <_JIT_ENTRY+0x212>
// 15e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 163: 49 29 c4                      subq    %rax, %r12
// 166: 49 83 c4 b8                   addq    $-0x48, %r12
// 16a: 49 c1 ec 03                   shrq    $0x3, %r12
// 16e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 172: 31 c0                         xorl    %eax, %eax
// 174: eb 2d                         jmp     0x1a3 <_JIT_ENTRY+0x1a3>
// 176: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17b: 49 29 c6                      subq    %rax, %r14
// 17e: 49 83 c6 b8                   addq    $-0x48, %r14
// 182: 49 c1 ee 03                   shrq    $0x3, %r14
// 186: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 18a: 48 8b 00                      movq    (%rax), %rax
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  _JIT_TARGET
// 197: 89 c9                         movl    %ecx, %ecx
// 199: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 19d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a3: 48 83 c4 28                   addq    $0x28, %rsp
// 1a7: 5b                            popq    %rbx
// 1a8: 41 5c                         popq    %r12
// 1aa: 41 5d                         popq    %r13
// 1ac: 41 5e                         popq    %r14
// 1ae: 41 5f                         popq    %r15
// 1b0: 5d                            popq    %rbp
// 1b1: c3                            retq
// 1b2: 41 89 45 00                   movl    %eax, (%r13)
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 04 24                   movq    (%r12), %rax
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7f 86                         jg      0x151 <_JIT_ENTRY+0x151>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 1e4: 4c 89 e2                      movq    %r12, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 8b 04 24                   movq    (%r12), %rax
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 78 21                         js      0x212 <_JIT_ENTRY+0x212>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fb: ff d0                         callq   *%rax
// 1fd: 49 ff 0c 24                   decq    (%r12)
// 201: 75 0f                         jne     0x212 <_JIT_ENTRY+0x212>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_Dealloc
// 20d: 4c 89 e7                      movq    %r12, %rdi
// 210: ff d0                         callq   *%rax
// 212: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000214:  R_X86_64_64  _JIT_OPARG
// 21c: 0f b7 d1                      movzwl  %cx, %edx
// 21f: b8 01 00 00 00                movl    $0x1, %eax
// 224: be 01 00 00 00                movl    $0x1, %esi
// 229: 29 d6                         subl    %edx, %esi
// 22b: 48 63 d6                      movslq  %esi, %rdx
// 22e: 4c 89 6c d3 f8                movq    %r13, -0x8(%rbx,%rdx,8)
// 233: f6 c1 01                      testb   $0x1, %cl
// 236: 74 07                         je      0x23f <_JIT_ENTRY+0x23f>
// 238: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 23f: 0f b7 d1                      movzwl  %cx, %edx
// 242: 29 d0                         subl    %edx, %eax
// 244: 48 98                         cltq
// 246: 83 e1 01                      andl    $0x1, %ecx
// 249: 48 01 c1                      addq    %rax, %rcx
// 24c: 48 8d 34 cb                   leaq    (%rbx,%rcx,8), %rsi
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _JIT_CONTINUE
// 25a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 25f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 264: 48 83 c4 28                   addq    $0x28, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_SLOT_code_body[629] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x34, 0xc3, 0x4c, 0x8b, 0x64, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x36, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x6a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7a, 0x85, 0xc0, 0x0f, 0x89, 0x98, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x86, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4c, 0x89, 0x6c, 0xd3, 0xf8, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x48, 0x8d, 0x34, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_SLOT_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_SLOT_data_holes[1];

// _BUILD_STRINGplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_ATTR_WITH_HINT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 c4 00 00 00             je      0x1c0 <_JIT_ENTRY+0x1c0>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 129: 4d 8b 64 c7 f8                movq    -0x8(%r15,%rax,8), %r12
// 12e: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 133: 48 8b 50 20                   movq    0x20(%rax), %rdx
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _JIT_OPERAND
// 141: 0f b7 c8                      movzwl  %ax, %ecx
// 144: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 149: 48 8b 03                      movq    (%rbx), %rax
// 14c: 48 39 4a 18                   cmpq    %rcx, 0x18(%rdx)
// 150: 0f 86 8d 00 00 00             jbe     0x1e3 <_JIT_ENTRY+0x1e3>
// 156: 48 8b 70 20                   movq    0x20(%rax), %rsi
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  _JIT_OPARG
// 164: 81 e7 fe ff 00 00             andl    $0xfffe, %edi           # imm = 0xFFFE
// 16a: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 16e: 41 b8 01 00 00 00             movl    $0x1, %r8d
// 174: 49 d3 e0                      shlq    %cl, %r8
// 177: 48 8b 74 be 18                movq    0x18(%rsi,%rdi,4), %rsi
// 17c: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
// 180: 4a 8d 4c 02 20                leaq    0x20(%rdx,%r8), %rcx
// 185: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000187:  R_X86_64_64  _JIT_OPERAND
// 18f: 0f b7 d2                      movzwl  %dx, %edx
// 192: 74 44                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 194: 48 c1 e2 04                   shlq    $0x4, %rdx
// 198: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
// 19c: 75 45                         jne     0x1e3 <_JIT_ENTRY+0x1e3>
// 19e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a0:  R_X86_64_64  _JIT_OPERAND
// 1a8: 0f b7 d2                      movzwl  %dx, %edx
// 1ab: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1af: 48 01 d1                      addq    %rdx, %rcx
// 1b2: 48 83 c1 08                   addq    $0x8, %rcx
// 1b6: 4c 8b 29                      movq    (%rcx), %r13
// 1b9: 4d 85 ed                      testq   %r13, %r13
// 1bc: 75 7a                         jne     0x238 <_JIT_ENTRY+0x238>
// 1be: eb 23                         jmp     0x1e3 <_JIT_ENTRY+0x1e3>
// 1c0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c5: 49 29 c4                      subq    %rax, %r12
// 1c8: 49 83 c4 b8                   addq    $-0x48, %r12
// 1cc: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d0: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1d4: 31 c0                         xorl    %eax, %eax
// 1d6: eb 30                         jmp     0x208 <_JIT_ENTRY+0x208>
// 1d8: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 1dc: 48 39 74 d1 08                cmpq    %rsi, 0x8(%rcx,%rdx,8)
// 1e1: 74 34                         je      0x217 <_JIT_ENTRY+0x217>
// 1e3: 49 29 de                      subq    %rbx, %r14
// 1e6: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ea: 49 c1 ee 03                   shrq    $0x3, %r14
// 1ee: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f4:  R_X86_64_64  _JIT_TARGET
// 1fc: 89 c9                         movl    %ecx, %ecx
// 1fe: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 202: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 208: 48 83 c4 28                   addq    $0x28, %rsp
// 20c: 5b                            popq    %rbx
// 20d: 41 5c                         popq    %r12
// 20f: 41 5d                         popq    %r13
// 211: 41 5e                         popq    %r14
// 213: 41 5f                         popq    %r15
// 215: 5d                            popq    %rbp
// 216: c3                            retq
// 217: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000219:  R_X86_64_64  _JIT_OPERAND
// 221: 0f b7 d2                      movzwl  %dx, %edx
// 224: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 228: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 22c: 48 83 c1 10                   addq    $0x10, %rcx
// 230: 4c 8b 29                      movq    (%rcx), %r13
// 233: 4d 85 ed                      testq   %r13, %r13
// 236: 74 ab                         je      0x1e3 <_JIT_ENTRY+0x1e3>
// 238: 41 8b 45 00                   movl    (%r13), %eax
// 23c: ff c0                         incl    %eax
// 23e: 75 0f                         jne     0x24f <_JIT_ENTRY+0x24f>
// 240: 49 8b 04 24                   movq    (%r12), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7e 1f                         jle     0x268 <_JIT_ENTRY+0x268>
// 249: 85 c0                         testl   %eax, %eax
// 24b: 79 41                         jns     0x28e <_JIT_ENTRY+0x28e>
// 24d: eb 60                         jmp     0x2af <_JIT_ENTRY+0x2af>
// 24f: 41 89 45 00                   movl    %eax, (%r13)
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 25d: ff d0                         callq   *%rax
// 25f: 49 8b 04 24                   movq    (%r12), %rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 7f e1                         jg      0x249 <_JIT_ENTRY+0x249>
// 268: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026a:  R_X86_64_64  .rodata.str1.1
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 281: 4c 89 e2                      movq    %r12, %rdx
// 284: ff d0                         callq   *%rax
// 286: 49 8b 04 24                   movq    (%r12), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 21                         js      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 49 ff 0c 24                   decq    (%r12)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 4c 89 e7                      movq    %r12, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b1:  R_X86_64_64  _JIT_OPARG
// 2b9: 0f b7 d1                      movzwl  %cx, %edx
// 2bc: b8 01 00 00 00                movl    $0x1, %eax
// 2c1: be 01 00 00 00                movl    $0x1, %esi
// 2c6: 29 d6                         subl    %edx, %esi
// 2c8: 48 63 d6                      movslq  %esi, %rdx
// 2cb: 4d 89 6c d7 f8                movq    %r13, -0x8(%r15,%rdx,8)
// 2d0: f6 c1 01                      testb   $0x1, %cl
// 2d3: 74 07                         je      0x2dc <_JIT_ENTRY+0x2dc>
// 2d5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 2dc: 0f b7 d1                      movzwl  %cx, %edx
// 2df: 29 d0                         subl    %edx, %eax
// 2e1: 48 98                         cltq
// 2e3: 83 e1 01                      andl    $0x1, %ecx
// 2e6: 48 01 c1                      addq    %rax, %rcx
// 2e9: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _JIT_CONTINUE
// 2f7: 48 89 df                      movq    %rbx, %rdi
// 2fa: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ff: 48 83 c4 28                   addq    $0x28, %rsp
// 303: 5b                            popq    %rbx
// 304: 41 5c                         popq    %r12
// 306: 41 5d                         popq    %r13
// 308: 41 5e                         popq    %r14
// 30a: 41 5f                         popq    %r15
// 30c: 5d                            popq    %rbp
// 30d: ff e0                         jmpq    *%rax
// 30f: 
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_WITH_HINT_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8d, 0x34, 0xc7, 0x4d, 0x8b, 0x64, 0xc7, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x50, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x03, 0x48, 0x39, 0x4a, 0x18, 0x0f, 0x86, 0x8d, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x70, 0x20, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x48, 0x8b, 0x74, 0xbe, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d, 0x4c, 0x02, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x44, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x75, 0x45, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x01, 0xd1, 0x48, 0x83, 0xc1, 0x08, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x75, 0x7a, 0xeb, 0x23, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x30, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x74, 0xd1, 0x08, 0x74, 0x34, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x83, 0xc1, 0x10, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x74, 0xab, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd6, 0x48, 0x63, 0xd6, 0x4d, 0x89, 0x6c, 0xd7, 0xf8, 0xf6, 0xc1, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x29, 0xd0, 0x48, 0x98, 0x83, 0xe1, 0x01, 0x48, 0x01, 0xc1, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_WITH_HINT_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _BUILD_STRINGplus_LOAD_BUILD_CLASS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_BUILD_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 14 24                   movq    %rdx, (%rsp)
// 12: 49 89 f5                      movq    %rsi, %r13
// 15: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 34: 49 29 c5                      subq    %rax, %r13
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 8d b9 00 a1 00 00          leaq    0xa100(%rcx), %rdi
// 52: 4c 89 ee                      movq    %r13, %rsi
// 55: ff d0                         callq   *%rax
// 57: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 85 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 44 0f b7 f0                   movzwl  %ax, %r14d
// 76: 49 ff c6                      incq    %r14
// 79: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 49 ff ce                      decq    %r14
// a3: 49 83 fe 01                   cmpq    $0x1, %r14
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// ad: 49 8b 5c c5 00                movq    (%r13,%rax,8), %rbx
// b2: 48 8b 03                      movq    (%rbx), %rax
// b5: 48 85 c0                      testq   %rax, %rax
// b8: 7e 06                         jle     0xc0 <_JIT_ENTRY+0xc0>
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 e2                         js      0xa0 <_JIT_ENTRY+0xa0>
// be: eb 14                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// c0: 4c 89 ff                      movq    %r15, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: ff d5                         callq   *%rbp
// cd: 48 8b 03                      movq    (%rbx), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d4                      callq   *%r12
// d7: 48 ff 0b                      decq    (%rbx)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 48 89 df                      movq    %rbx, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// f2: 48 85 c9                      testq   %rcx, %rcx
// f5: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// fa: 0f 84 cd 00 00 00             je      0x1cd <_JIT_ENTRY+0x1cd>
// 100: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 0f b7 c3                      movzwl  %bx, %eax
// 10d: 48 c1 e0 03                   shlq    $0x3, %rax
// 111: 48 f7 d8                      negq    %rax
// 114: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 119: 49 89 0c 07                   movq    %rcx, (%r15,%rax)
// 11d: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 121: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000123:  R_X86_64_64  PyMapping_GetOptionalItem
// 12b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000012d:  R_X86_64_64  _PyRuntime
// 135: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 13c: 48 8d 54 24 20                leaq    0x20(%rsp), %rdx
// 141: ff d0                         callq   *%rax
// 143: 85 c0                         testl   %eax, %eax
// 145: 78 75                         js      0x1bc <_JIT_ENTRY+0x1bc>
// 147: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 74 44                         je      0x195 <_JIT_ENTRY+0x195>
// 151: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000153:  R_X86_64_64  _JIT_OPARG
// 15b: 0f b7 c9                      movzwl  %cx, %ecx
// 15e: ba 01 00 00 00                movl    $0x1, %edx
// 163: 29 ca                         subl    %ecx, %edx
// 165: 48 63 ca                      movslq  %edx, %rcx
// 168: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 16c: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 170: 48 83 c6 08                   addq    $0x8, %rsi
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_CONTINUE
// 17e: 4c 89 f7                      movq    %r14, %rdi
// 181: 48 8b 14 24                   movq    (%rsp), %rdx
// 185: 48 83 c4 28                   addq    $0x28, %rsp
// 189: 5b                            popq    %rbx
// 18a: 41 5c                         popq    %r12
// 18c: 41 5d                         popq    %r13
// 18e: 41 5e                         popq    %r14
// 190: 41 5f                         popq    %r15
// 192: 5d                            popq    %rbp
// 193: ff e0                         jmpq    *%rax
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  PyExc_NameError
// 19f: 48 8b 30                      movq    (%rax), %rsi
// 1a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a4:  R_X86_64_64  .rodata.str1.1+0x39
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _PyErr_SetString
// 1b6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ba: ff d0                         callq   *%rax
// 1bc: 0f b7 c3                      movzwl  %bx, %eax
// 1bf: b9 01 00 00 00                movl    $0x1, %ecx
// 1c4: 29 c1                         subl    %eax, %ecx
// 1c6: 48 63 c1                      movslq  %ecx, %rax
// 1c9: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 1cd: 4d 29 f5                      subq    %r14, %r13
// 1d0: 49 83 c5 b8                   addq    $-0x48, %r13
// 1d4: 49 c1 ed 03                   shrq    $0x3, %r13
// 1d8: 45 89 6e 40                   movl    %r13d, 0x40(%r14)
// 1dc: 31 c0                         xorl    %eax, %eax
// 1de: 48 83 c4 28                   addq    $0x28, %rsp
// 1e2: 5b                            popq    %rbx
// 1e3: 41 5c                         popq    %r12
// 1e5: 41 5d                         popq    %r13
// 1e7: 41 5e                         popq    %r14
// 1e9: 41 5f                         popq    %r15
// 1eb: 5d                            popq    %rbp
// 1ec: c3                            retq
// 1ed: 
static const unsigned char _BUILD_STRINGplus_LOAD_BUILD_CLASS_code_body[494] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf5, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xb9, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x5c, 0xc5, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x14, 0x4c, 0x89, 0xff, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc3, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x89, 0x0c, 0x07, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x75, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x0f, 0xb7, 0xc3, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x2c, 0xc7, 0x4d, 0x29, 0xf5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x89, 0x6e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_BUILD_CLASS_code_holes[17] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_BUILD_CLASS_data_holes[1];

// _BUILD_STRINGplus_LOAD_CONST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_CONST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 0f 84 80 00 00 00             je      0x17c <_JIT_ENTRY+0x17c>
// fc: 49 89 04 24                   movq    %rax, (%r12)
// 100: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 105: 49 8b 06                      movq    (%r14), %rax
// 108: 48 8b 40 18                   movq    0x18(%rax), %rax
// 10c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010e:  R_X86_64_64  _JIT_OPARG
// 116: 0f b7 c9                      movzwl  %cx, %ecx
// 119: 48 8b 5c c8 18                movq    0x18(%rax,%rcx,8), %rbx
// 11e: 8b 03                         movl    (%rbx), %eax
// 120: ff c0                         incl    %eax
// 122: 74 0e                         je      0x132 <_JIT_ENTRY+0x132>
// 124: 89 03                         movl    %eax, (%rbx)
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 130: ff d0                         callq   *%rax
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: 0f b7 c0                      movzwl  %ax, %eax
// 13f: b9 01 00 00 00                movl    $0x1, %ecx
// 144: 29 c1                         subl    %eax, %ecx
// 146: 48 63 c1                      movslq  %ecx, %rax
// 149: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 14e: 48 89 1c c1                   movq    %rbx, (%rcx,%rax,8)
// 152: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 156: 48 83 c6 08                   addq    $0x8, %rsi
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _JIT_CONTINUE
// 164: 4c 89 f7                      movq    %r14, %rdi
// 167: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 16c: 48 83 c4 28                   addq    $0x28, %rsp
// 170: 5b                            popq    %rbx
// 171: 41 5c                         popq    %r12
// 173: 41 5d                         popq    %r13
// 175: 41 5e                         popq    %r14
// 177: 41 5f                         popq    %r15
// 179: 5d                            popq    %rbp
// 17a: ff e0                         jmpq    *%rax
// 17c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 181: 49 29 c4                      subq    %rax, %r12
// 184: 49 83 c4 b8                   addq    $-0x48, %r12
// 188: 49 c1 ec 03                   shrq    $0x3, %r12
// 18c: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 190: 31 c0                         xorl    %eax, %eax
// 192: 48 83 c4 28                   addq    $0x28, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: c3                            retq
// 1a1: 
static const unsigned char _BUILD_STRINGplus_LOAD_CONST_code_body[418] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x49, 0x89, 0x04, 0x24, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x5c, 0xc8, 0x18, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x1c, 0xc1, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_CONST_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_CONST_data_holes[1];

// _BUILD_STRINGplus_LOAD_DEREF
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fb: 0f 84 ba 00 00 00             je      0x1bb <_JIT_ENTRY+0x1bb>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 116: 48 f7 da                      negq    %rdx
// 119: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 11e: 49 89 34 17                   movq    %rsi, (%r15,%rdx)
// 122: 49 8b 4c ce 48                movq    0x48(%r14,%rcx,8), %rcx
// 127: 48 8b 59 10                   movq    0x10(%rcx), %rbx
// 12b: 48 85 db                      testq   %rbx, %rbx
// 12e: 74 59                         je      0x189 <_JIT_ENTRY+0x189>
// 130: 8b 03                         movl    (%rbx), %eax
// 132: ff c0                         incl    %eax
// 134: 74 0e                         je      0x144 <_JIT_ENTRY+0x144>
// 136: 89 03                         movl    %eax, (%rbx)
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 142: ff d0                         callq   *%rax
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _JIT_OPARG
// 14e: 0f b7 c0                      movzwl  %ax, %eax
// 151: b9 01 00 00 00                movl    $0x1, %ecx
// 156: 29 c1                         subl    %eax, %ecx
// 158: 48 63 c1                      movslq  %ecx, %rax
// 15b: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 15f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 163: 48 83 c6 08                   addq    $0x8, %rsi
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _JIT_CONTINUE
// 171: 4c 89 f7                      movq    %r14, %rdi
// 174: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 179: 48 83 c4 28                   addq    $0x28, %rsp
// 17d: 5b                            popq    %rbx
// 17e: 41 5c                         popq    %r12
// 180: 41 5d                         popq    %r13
// 182: 41 5e                         popq    %r14
// 184: 41 5f                         popq    %r15
// 186: 5d                            popq    %rbp
// 187: ff e0                         jmpq    *%rax
// 189: 0f b7 c0                      movzwl  %ax, %eax
// 18c: b9 01 00 00 00                movl    $0x1, %ecx
// 191: 29 c1                         subl    %eax, %ecx
// 193: 48 63 c1                      movslq  %ecx, %rax
// 196: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 19a: 49 8b 36                      movq    (%r14), %rsi
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: 0f b7 d0                      movzwl  %ax, %edx
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _PyEval_FormatExcUnbound
// 1b4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b9: ff d0                         callq   *%rax
// 1bb: 4d 29 f4                      subq    %r14, %r12
// 1be: 49 83 c4 b8                   addq    $-0x48, %r12
// 1c2: 49 c1 ec 03                   shrq    $0x3, %r12
// 1c6: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 1ca: 31 c0                         xorl    %eax, %eax
// 1cc: 48 83 c4 28                   addq    $0x28, %rsp
// 1d0: 5b                            popq    %rbx
// 1d1: 41 5c                         popq    %r12
// 1d3: 41 5d                         popq    %r13
// 1d5: 41 5e                         popq    %r14
// 1d7: 41 5f                         popq    %r15
// 1d9: 5d                            popq    %rbp
// 1da: c3                            retq
// 1db: 
static const unsigned char _BUILD_STRINGplus_LOAD_DEREF_code_body[476] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x34, 0x17, 0x49, 0x8b, 0x4c, 0xce, 0x48, 0x48, 0x8b, 0x59, 0x10, 0x48, 0x85, 0xdb, 0x74, 0x59, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x1c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_DEREF_code_holes[15] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_DEREF_data_holes[1];

// _BUILD_STRINGplus_LOAD_FAST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 74 79                         je      0x171 <_JIT_ENTRY+0x171>
// f8: 49 89 04 24                   movq    %rax, (%r12)
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c0                      movzwl  %ax, %eax
// 109: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 10e: 49 8b 5c c6 48                movq    0x48(%r14,%rax,8), %rbx
// 113: 8b 03                         movl    (%rbx), %eax
// 115: ff c0                         incl    %eax
// 117: 74 0e                         je      0x127 <_JIT_ENTRY+0x127>
// 119: 89 03                         movl    %eax, (%rbx)
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 125: ff d0                         callq   *%rax
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _JIT_OPARG
// 131: 0f b7 c0                      movzwl  %ax, %eax
// 134: b9 01 00 00 00                movl    $0x1, %ecx
// 139: 29 c1                         subl    %eax, %ecx
// 13b: 48 63 c1                      movslq  %ecx, %rax
// 13e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 143: 48 89 1c c1                   movq    %rbx, (%rcx,%rax,8)
// 147: 48 8d 34 c1                   leaq    (%rcx,%rax,8), %rsi
// 14b: 48 83 c6 08                   addq    $0x8, %rsi
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _JIT_CONTINUE
// 159: 4c 89 f7                      movq    %r14, %rdi
// 15c: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 161: 48 83 c4 28                   addq    $0x28, %rsp
// 165: 5b                            popq    %rbx
// 166: 41 5c                         popq    %r12
// 168: 41 5d                         popq    %r13
// 16a: 41 5e                         popq    %r14
// 16c: 41 5f                         popq    %r15
// 16e: 5d                            popq    %rbp
// 16f: ff e0                         jmpq    *%rax
// 171: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 176: 49 29 c4                      subq    %rax, %r12
// 179: 49 83 c4 b8                   addq    $-0x48, %r12
// 17d: 49 c1 ec 03                   shrq    $0x3, %r12
// 181: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 185: 31 c0                         xorl    %eax, %eax
// 187: 48 83 c4 28                   addq    $0x28, %rsp
// 18b: 5b                            popq    %rbx
// 18c: 41 5c                         popq    %r12
// 18e: 41 5d                         popq    %r13
// 190: 41 5e                         popq    %r14
// 192: 41 5f                         popq    %r15
// 194: 5d                            popq    %rbp
// 195: c3                            retq
// 196: 
static const unsigned char _BUILD_STRINGplus_LOAD_FAST_code_body[407] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x74, 0x79, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x5c, 0xc6, 0x48, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x1c, 0xc1, 0x48, 0x8d, 0x34, 0xc1, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_FAST_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_FAST_data_holes[1];

// _BUILD_STRINGplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_FAST_AND_CLEAR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 e8                   movzwl  %ax, %r13d
// 77: 49 ff c5                      incq    %r13
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cd                      decq    %r13
// a3: 49 83 fd 01                   cmpq    $0x1, %r13
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 15                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: ff d3                         callq   *%rbx
// cd: 49 8b 06                      movq    (%r14), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d7                      callq   *%r15
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f2: 48 85 ff                      testq   %rdi, %rdi
// f5: 74 6c                         je      0x163 <_JIT_ENTRY+0x163>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_OPARG
// 101: 0f b7 c8                      movzwl  %ax, %ecx
// 104: 0f b7 c0                      movzwl  %ax, %eax
// 107: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 10f: 48 f7 da                      negq    %rdx
// 112: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 117: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 11b: ba 01 00 00 00                movl    $0x1, %edx
// 120: 29 ca                         subl    %ecx, %edx
// 122: 48 63 ca                      movslq  %edx, %rcx
// 125: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12a: 48 8b 54 c7 48                movq    0x48(%rdi,%rax,8), %rdx
// 12f: 48 c7 44 c7 48 00 00 00 00    movq    $0x0, 0x48(%rdi,%rax,8)
// 138: 48 89 14 ce                   movq    %rdx, (%rsi,%rcx,8)
// 13c: 48 8d 34 ce                   leaq    (%rsi,%rcx,8), %rsi
// 140: 48 83 c6 08                   addq    $0x8, %rsi
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _JIT_CONTINUE
// 14e: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 153: 48 83 c4 28                   addq    $0x28, %rsp
// 157: 5b                            popq    %rbx
// 158: 41 5c                         popq    %r12
// 15a: 41 5d                         popq    %r13
// 15c: 41 5e                         popq    %r14
// 15e: 41 5f                         popq    %r15
// 160: 5d                            popq    %rbp
// 161: ff e0                         jmpq    *%rax
// 163: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 168: 49 29 c4                      subq    %rax, %r12
// 16b: 49 83 c4 b8                   addq    $-0x48, %r12
// 16f: 49 c1 ec 03                   shrq    $0x3, %r12
// 173: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 177: 31 c0                         xorl    %eax, %eax
// 179: 48 83 c4 28                   addq    $0x28, %rsp
// 17d: 5b                            popq    %rbx
// 17e: 41 5c                         popq    %r12
// 180: 41 5d                         popq    %r13
// 182: 41 5e                         popq    %r14
// 184: 41 5f                         popq    %r15
// 186: 5d                            popq    %rbp
// 187: c3                            retq
// 188: 
static const unsigned char _BUILD_STRINGplus_LOAD_FAST_AND_CLEAR_code_body[393] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd3, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x74, 0x6c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0xc7, 0x48, 0x48, 0xc7, 0x44, 0xc7, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x14, 0xce, 0x48, 0x8d, 0x34, 0xce, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_FAST_AND_CLEAR_code_holes[11] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _BUILD_STRINGplus_LOAD_FAST_CHECK
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_FAST_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// fb: 0f 84 e4 00 00 00             je      0x1e5 <_JIT_ENTRY+0x1e5>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
// 116: 48 f7 da                      negq    %rdx
// 119: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 11e: 49 89 34 16                   movq    %rsi, (%r14,%rdx)
// 122: 49 8b 5c cf 48                movq    0x48(%r15,%rcx,8), %rbx
// 127: 48 85 db                      testq   %rbx, %rbx
// 12a: 74 59                         je      0x185 <_JIT_ENTRY+0x185>
// 12c: 8b 03                         movl    (%rbx), %eax
// 12e: ff c0                         incl    %eax
// 130: 74 0e                         je      0x140 <_JIT_ENTRY+0x140>
// 132: 89 03                         movl    %eax, (%rbx)
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_OPARG
// 14a: 0f b7 c0                      movzwl  %ax, %eax
// 14d: b9 01 00 00 00                movl    $0x1, %ecx
// 152: 29 c1                         subl    %eax, %ecx
// 154: 48 63 c1                      movslq  %ecx, %rax
// 157: 49 89 1c c6                   movq    %rbx, (%r14,%rax,8)
// 15b: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 15f: 48 83 c6 08                   addq    $0x8, %rsi
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _JIT_CONTINUE
// 16d: 4c 89 ff                      movq    %r15, %rdi
// 170: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 175: 48 83 c4 28                   addq    $0x28, %rsp
// 179: 5b                            popq    %rbx
// 17a: 41 5c                         popq    %r12
// 17c: 41 5d                         popq    %r13
// 17e: 41 5e                         popq    %r14
// 180: 41 5f                         popq    %r15
// 182: 5d                            popq    %rbp
// 183: ff e0                         jmpq    *%rax
// 185: 0f b7 c0                      movzwl  %ax, %eax
// 188: b9 01 00 00 00                movl    $0x1, %ecx
// 18d: 29 c1                         subl    %eax, %ecx
// 18f: 48 63 c1                      movslq  %ecx, %rax
// 192: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  PyExc_UnboundLocalError
// 1a0: 4c 8b 30                      movq    (%rax), %r14
// 1a3: 49 8b 07                      movq    (%r15), %rax
// 1a6: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _JIT_OPARG
// 1b4: 0f b7 f0                      movzwl  %ax, %esi
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  PyTuple_GetItem
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c5:  R_X86_64_64  .rodata.str1.1+0x39
// 1cd: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001cf:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1d7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1dc: 4c 89 f6                      movq    %r14, %rsi
// 1df: 48 89 c1                      movq    %rax, %rcx
// 1e2: 41 ff d0                      callq   *%r8
// 1e5: 4d 29 fc                      subq    %r15, %r12
// 1e8: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ec: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f0: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 1f4: 31 c0                         xorl    %eax, %eax
// 1f6: 48 83 c4 28                   addq    $0x28, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: c3                            retq
// 205: 
static const unsigned char _BUILD_STRINGplus_LOAD_FAST_CHECK_code_body[518] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x34, 0x16, 0x49, 0x8b, 0x5c, 0xcf, 0x48, 0x48, 0x85, 0xdb, 0x74, 0x59, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x1c, 0xc6, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x30, 0x49, 0x8b, 0x07, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_FAST_CHECK_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_FAST_CHECK_data_holes[1];

// _BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d4                      callq   *%r12
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 5c 01 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 121: 49 89 34 16                   movq    %rsi, (%r14,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 ca                      movslq  %edx, %rcx
// 12f: 4d 8d 3c ce                   leaq    (%r14,%rcx,8), %r15
// 133: 4d 8b 6c ce f8                movq    -0x8(%r14,%rcx,8), %r13
// 138: 48 8b 0b                      movq    (%rbx), %rcx
// 13b: 48 8b 49 60                   movq    0x60(%rcx), %rcx
// 13f: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyMapping_GetOptionalItem
// 14e: 48 89 e2                      movq    %rsp, %rdx
// 151: 4c 89 ef                      movq    %r13, %rdi
// 154: ff d0                         callq   *%rax
// 156: 85 c0                         testl   %eax, %eax
// 158: 0f 88 ff 00 00 00             js      0x25d <_JIT_ENTRY+0x25d>
// 15e: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 163: 74 12                         je      0x177 <_JIT_ENTRY+0x177>
// 165: 49 8b 45 00                   movq    (%r13), %rax
// 169: 48 85 c0                      testq   %rax, %rax
// 16c: 7e 42                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 16e: 85 c0                         testl   %eax, %eax
// 170: 79 64                         jns     0x1d6 <_JIT_ENTRY+0x1d6>
// 172: e9 80 00 00 00                jmp     0x1f7 <_JIT_ENTRY+0x1f7>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_OPARG
// 181: 0f b7 c0                      movzwl  %ax, %eax
// 184: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 189: 48 8b 40 10                   movq    0x10(%rax), %rax
// 18d: 48 89 04 24                   movq    %rax, (%rsp)
// 191: 48 85 c0                      testq   %rax, %rax
// 194: 0f 84 a2 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 19a: 8b 08                         movl    (%rax), %ecx
// 19c: ff c1                         incl    %ecx
// 19e: 74 c5                         je      0x165 <_JIT_ENTRY+0x165>
// 1a0: 89 08                         movl    %ecx, (%rax)
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ac: ff d0                         callq   *%rax
// 1ae: eb b5                         jmp     0x165 <_JIT_ENTRY+0x165>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 1c9: 4c 89 ea                      movq    %r13, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 21                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 75 0f                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_Dealloc
// 1f2: 4c 89 ef                      movq    %r13, %rdi
// 1f5: ff d0                         callq   *%rax
// 1f7: 48 8b 04 24                   movq    (%rsp), %rax
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  _JIT_OPARG
// 205: 0f b7 c9                      movzwl  %cx, %ecx
// 208: ba 01 00 00 00                movl    $0x1, %edx
// 20d: 29 ca                         subl    %ecx, %edx
// 20f: 48 63 ca                      movslq  %edx, %rcx
// 212: 49 89 44 ce f8                movq    %rax, -0x8(%r14,%rcx,8)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_CONTINUE
// 221: 48 89 df                      movq    %rbx, %rdi
// 224: 4c 89 fe                      movq    %r15, %rsi
// 227: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 22c: 48 83 c4 28                   addq    $0x28, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 48 8b 33                      movq    (%rbx), %rsi
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_OPARG
// 249: 0f b7 d0                      movzwl  %ax, %edx
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _PyEval_FormatExcUnbound
// 256: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 49 29 df                      subq    %rbx, %r15
// 260: 49 83 c7 b8                   addq    $-0x48, %r15
// 264: 49 c1 ef 03                   shrq    $0x3, %r15
// 268: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 26c: 31 c0                         xorl    %eax, %eax
// 26e: 48 83 c4 28                   addq    $0x28, %rsp
// 272: 5b                            popq    %rbx
// 273: 41 5c                         popq    %r12
// 275: 41 5d                         popq    %r13
// 277: 41 5e                         popq    %r14
// 279: 41 5f                         popq    %r15
// 27b: 5d                            popq    %rbp
// 27c: c3                            retq
// 27d: 
static const unsigned char _BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF_code_body[638] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd4, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0x5c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x34, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x3c, 0xce, 0x4d, 0x8b, 0x6c, 0xce, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x49, 0x60, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xff, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x12, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x42, 0x85, 0xc0, 0x79, 0x64, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0xc5, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb5, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xce, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d4                      callq   *%r12
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fb: 0f 84 e4 00 00 00             je      0x1e5 <_JIT_ENTRY+0x1e5>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 121: 49 89 34 14                   movq    %rsi, (%r12,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 ca                      movslq  %edx, %rcx
// 12f: 4d 8d 3c cc                   leaq    (%r12,%rcx,8), %r15
// 133: 4d 8b 6c cc f8                movq    -0x8(%r12,%rcx,8), %r13
// 138: 49 8b 0e                      movq    (%r14), %rcx
// 13b: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13f: 48 8b 6c c1 18                movq    0x18(%rcx,%rax,8), %rbp
// 144: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000146:  R_X86_64_64  PyMapping_GetOptionalItem
// 14e: 48 89 e2                      movq    %rsp, %rdx
// 151: 4c 89 ef                      movq    %r13, %rdi
// 154: 48 89 ee                      movq    %rbp, %rsi
// 157: ff d3                         callq   *%rbx
// 159: 85 c0                         testl   %eax, %eax
// 15b: 0f 88 84 00 00 00             js      0x1e5 <_JIT_ENTRY+0x1e5>
// 161: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 166: 74 1a                         je      0x182 <_JIT_ENTRY+0x182>
// 168: 49 8b 45 00                   movq    (%r13), %rax
// 16c: 48 85 c0                      testq   %rax, %rax
// 16f: 0f 8e 90 00 00 00             jle     0x205 <_JIT_ENTRY+0x205>
// 175: 85 c0                         testl   %eax, %eax
// 177: 0f 89 ae 00 00 00             jns     0x22b <_JIT_ENTRY+0x22b>
// 17d: e9 ca 00 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// 182: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  PyDict_GetItemRef
// 190: 48 89 e2                      movq    %rsp, %rdx
// 193: 48 89 ee                      movq    %rbp, %rsi
// 196: ff d0                         callq   *%rax
// 198: 85 c0                         testl   %eax, %eax
// 19a: 78 49                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 19c: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 1a1: 75 c5                         jne     0x168 <_JIT_ENTRY+0x168>
// 1a3: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 1a7: 48 89 e2                      movq    %rsp, %rdx
// 1aa: 48 89 ee                      movq    %rbp, %rsi
// 1ad: ff d3                         callq   *%rbx
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 78 32                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1b3: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 1b8: 75 ae                         jne     0x168 <_JIT_ENTRY+0x168>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  PyExc_NameError
// 1c4: 48 8b 30                      movq    (%rax), %rsi
// 1c7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c9:  R_X86_64_64  .rodata.str1.1+0x39
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1db: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e0: 48 89 e9                      movq    %rbp, %rcx
// 1e3: ff d0                         callq   *%rax
// 1e5: 4d 29 f7                      subq    %r14, %r15
// 1e8: 49 83 c7 b8                   addq    $-0x48, %r15
// 1ec: 49 c1 ef 03                   shrq    $0x3, %r15
// 1f0: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 1f4: 31 c0                         xorl    %eax, %eax
// 1f6: 48 83 c4 28                   addq    $0x28, %rsp
// 1fa: 5b                            popq    %rbx
// 1fb: 41 5c                         popq    %r12
// 1fd: 41 5d                         popq    %r13
// 1ff: 41 5e                         popq    %r14
// 201: 41 5f                         popq    %r15
// 203: 5d                            popq    %rbp
// 204: c3                            retq
// 205: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 21e: 4c 89 ea                      movq    %r13, %rdx
// 221: ff d0                         callq   *%rax
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 85 c0                         testl   %eax, %eax
// 229: 78 21                         js      0x24c <_JIT_ENTRY+0x24c>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 235: ff d0                         callq   *%rax
// 237: 49 ff 4d 00                   decq    (%r13)
// 23b: 75 0f                         jne     0x24c <_JIT_ENTRY+0x24c>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _Py_Dealloc
// 247: 4c 89 ef                      movq    %r13, %rdi
// 24a: ff d0                         callq   *%rax
// 24c: 48 8b 04 24                   movq    (%rsp), %rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_OPARG
// 25a: 0f b7 c9                      movzwl  %cx, %ecx
// 25d: ba 01 00 00 00                movl    $0x1, %edx
// 262: 29 ca                         subl    %ecx, %edx
// 264: 48 63 ca                      movslq  %edx, %rcx
// 267: 49 89 44 cc f8                movq    %rax, -0x8(%r12,%rcx,8)
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _JIT_CONTINUE
// 276: 4c 89 f7                      movq    %r14, %rdi
// 279: 4c 89 fe                      movq    %r15, %rsi
// 27c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 281: 48 83 c4 28                   addq    $0x28, %rsp
// 285: 5b                            popq    %rbx
// 286: 41 5c                         popq    %r12
// 288: 41 5d                         popq    %r13
// 28a: 41 5e                         popq    %r14
// 28c: 41 5f                         popq    %r15
// 28e: 5d                            popq    %rbp
// 28f: ff e0                         jmpq    *%rax
// 291: 
static const unsigned char _BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[658] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd4, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x89, 0x34, 0x14, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x3c, 0xcc, 0x4d, 0x8b, 0x6c, 0xcc, 0xf8, 0x49, 0x8b, 0x0e, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x6c, 0xc1, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x1a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x90, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xae, 0x00, 0x00, 0x00, 0xe9, 0xca, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x49, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0xc5, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0x32, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0xae, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xe9, 0xff, 0xd0, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcc, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _BUILD_STRINGplus_LOAD_GLOBAL
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fb: 0f 84 8d 01 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 d0                      movzwl  %ax, %edx
// 111: 48 c1 e2 03                   shlq    $0x3, %rdx
// 115: 48 f7 da                      negq    %rdx
// 118: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 11d: 49 89 34 17                   movq    %rsi, (%r15,%rdx)
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 ca                      movslq  %edx, %rcx
// 12b: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 12f: 49 8b 0e                      movq    (%r14), %rcx
// 132: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 136: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13a: 25 fe ff 00 00                andl    $0xfffe, %eax           # imm = 0xFFFE
// 13f: 4c 8b 6c 81 18                movq    0x18(%rcx,%rax,4), %r13
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyDict_Type
// 14e: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 152: 75 0e                         jne     0x162 <_JIT_ENTRY+0x162>
// 154: 49 8b 76 20                   movq    0x20(%r14), %rsi
// 158: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 15c: 0f 84 b3 00 00 00             je      0x215 <_JIT_ENTRY+0x215>
// 162: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000164:  R_X86_64_64  PyMapping_GetOptionalItem
// 16c: 48 89 e2                      movq    %rsp, %rdx
// 16f: 4c 89 ee                      movq    %r13, %rsi
// 172: ff d3                         callq   *%rbx
// 174: 85 c0                         testl   %eax, %eax
// 176: 0f 88 12 01 00 00             js      0x28e <_JIT_ENTRY+0x28e>
// 17c: 48 8b 04 24                   movq    (%rsp), %rax
// 180: 48 85 c0                      testq   %rax, %rax
// 183: 74 6d                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 185: 49 89 04 24                   movq    %rax, (%r12)
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: a8 01                         testb   $0x1, %al
// 195: 74 16                         je      0x1ad <_JIT_ENTRY+0x1ad>
// 197: 0f b7 c0                      movzwl  %ax, %eax
// 19a: b9 01 00 00 00                movl    $0x1, %ecx
// 19f: 29 c1                         subl    %eax, %ecx
// 1a1: 48 63 c1                      movslq  %ecx, %rax
// 1a4: 49 c7 44 c7 08 00 00 00 00    movq    $0x0, 0x8(%r15,%rax,8)
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _JIT_OPARG
// 1b7: 0f b7 c8                      movzwl  %ax, %ecx
// 1ba: ba 01 00 00 00                movl    $0x1, %edx
// 1bf: 29 ca                         subl    %ecx, %edx
// 1c1: 48 63 ca                      movslq  %edx, %rcx
// 1c4: 83 e0 01                      andl    $0x1, %eax
// 1c7: ff c0                         incl    %eax
// 1c9: 48 01 c8                      addq    %rcx, %rax
// 1cc: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 4c 89 f7                      movq    %r14, %rdi
// 1dd: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1e2: 48 83 c4 28                   addq    $0x28, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 1f6: 48 89 e2                      movq    %rsp, %rdx
// 1f9: 4c 89 ee                      movq    %r13, %rsi
// 1fc: ff d3                         callq   *%rbx
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 0f 88 88 00 00 00             js      0x28e <_JIT_ENTRY+0x28e>
// 206: 48 8b 04 24                   movq    (%rsp), %rax
// 20a: 48 85 c0                      testq   %rax, %rax
// 20d: 0f 85 72 ff ff ff             jne     0x185 <_JIT_ENTRY+0x185>
// 213: eb 4e                         jmp     0x263 <_JIT_ENTRY+0x263>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _PyDict_LoadGlobal
// 21f: 4c 89 ea                      movq    %r13, %rdx
// 222: ff d0                         callq   *%rax
// 224: 48 89 04 24                   movq    %rax, (%rsp)
// 228: 48 85 c0                      testq   %rax, %rax
// 22b: 74 21                         je      0x24e <_JIT_ENTRY+0x24e>
// 22d: 8b 08                         movl    (%rax), %ecx
// 22f: ff c1                         incl    %ecx
// 231: 0f 84 4e ff ff ff             je      0x185 <_JIT_ENTRY+0x185>
// 237: 89 08                         movl    %ecx, (%rax)
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 243: ff d0                         callq   *%rax
// 245: 48 8b 04 24                   movq    (%rsp), %rax
// 249: e9 37 ff ff ff                jmp     0x185 <_JIT_ENTRY+0x185>
// 24e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 253: 48 8b 40 68                   movq    0x68(%rax), %rax
// 257: 48 85 c0                      testq   %rax, %rax
// 25a: 74 07                         je      0x263 <_JIT_ENTRY+0x263>
// 25c: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 261: 75 2b                         jne     0x28e <_JIT_ENTRY+0x28e>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  PyExc_NameError
// 26d: 48 8b 30                      movq    (%rax), %rsi
// 270: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000272:  R_X86_64_64  .rodata.str1.1+0x39
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 284: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 289: 4c 89 e9                      movq    %r13, %rcx
// 28c: ff d0                         callq   *%rax
// 28e: 4d 29 f4                      subq    %r14, %r12
// 291: 49 83 c4 b8                   addq    $-0x48, %r12
// 295: 49 c1 ec 03                   shrq    $0x3, %r12
// 299: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: 48 83 c4 28                   addq    $0x28, %rsp
// 2a3: 5b                            popq    %rbx
// 2a4: 41 5c                         popq    %r12
// 2a6: 41 5d                         popq    %r13
// 2a8: 41 5e                         popq    %r14
// 2aa: 41 5f                         popq    %r15
// 2ac: 5d                            popq    %rbp
// 2ad: c3                            retq
// 2ae: 
static const unsigned char _BUILD_STRINGplus_LOAD_GLOBAL_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x8d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x34, 0x17, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x8b, 0x0e, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x25, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x81, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x49, 0x8b, 0x76, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x12, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x6d, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x16, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xc7, 0x44, 0xc7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd3, 0x85, 0xc0, 0x0f, 0x88, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x72, 0xff, 0xff, 0xff, 0xeb, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x4e, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0xe9, 0x37, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_GLOBAL_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_GLOBAL_data_holes[1];

// _BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 ea 00 00 00             je      0x1e6 <_JIT_ENTRY+0x1e6>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 118: 49 89 14 04                   movq    %rdx, (%r12,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 128: 49 8b 4f 20                   movq    0x20(%r15), %rcx
// 12c: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 130: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 134: be 01 00 00 00                movl    $0x1, %esi
// 139: 48 d3 e6                      shlq    %cl, %rsi
// 13c: 48 98                         cltq
// 13e: 49 8d 1c c4                   leaq    (%r12,%rax,8), %rbx
// 142: 48 01 d6                      addq    %rdx, %rsi
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_OPERAND
// 14f: 0f b7 c0                      movzwl  %ax, %eax
// 152: 48 c1 e0 04                   shlq    $0x4, %rax
// 156: 4c 8b 74 30 28                movq    0x28(%rax,%rsi), %r14
// 15b: 4d 85 f6                      testq   %r14, %r14
// 15e: 0f 84 9a 00 00 00             je      0x1fe <_JIT_ENTRY+0x1fe>
// 164: 41 8b 06                      movl    (%r14), %eax
// 167: ff c0                         incl    %eax
// 169: 74 0f                         je      0x17a <_JIT_ENTRY+0x17a>
// 16b: 41 89 06                      movl    %eax, (%r14)
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 4c 89 33                      movq    %r14, (%rbx)
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _JIT_OPARG
// 187: a8 01                         testb   $0x1, %al
// 189: 74 16                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18b: 0f b7 c0                      movzwl  %ax, %eax
// 18e: b9 01 00 00 00                movl    $0x1, %ecx
// 193: 29 c1                         subl    %eax, %ecx
// 195: 48 63 c1                      movslq  %ecx, %rax
// 198: 49 c7 44 c4 08 00 00 00 00    movq    $0x0, 0x8(%r12,%rax,8)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: ba 01 00 00 00                movl    $0x1, %edx
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 48 63 ca                      movslq  %edx, %rcx
// 1b8: 83 e0 01                      andl    $0x1, %eax
// 1bb: ff c0                         incl    %eax
// 1bd: 48 01 c8                      addq    %rcx, %rax
// 1c0: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_CONTINUE
// 1ce: 4c 89 ff                      movq    %r15, %rdi
// 1d1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1d6: 48 83 c4 28                   addq    $0x28, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: ff e0                         jmpq    *%rax
// 1e6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1eb: 49 29 c4                      subq    %rax, %r12
// 1ee: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f2: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f6: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1fa: 31 c0                         xorl    %eax, %eax
// 1fc: eb 28                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1fe: 4c 29 fb                      subq    %r15, %rbx
// 201: 48 83 c3 b8                   addq    $-0x48, %rbx
// 205: 48 c1 eb 03                   shrq    $0x3, %rbx
// 209: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 20d: 49 8b 07                      movq    (%r15), %rax
// 210: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000212:  R_X86_64_64  _JIT_TARGET
// 21a: 89 c9                         movl    %ecx, %ecx
// 21c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 220: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 226: 48 83 c4 28                   addq    $0x28, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: c3                            retq
// 235: 
static const unsigned char _BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x89, 0x14, 0x04, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x4f, 0x20, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc4, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x74, 0x30, 0x28, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x16, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xc7, 0x44, 0xc4, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _BUILD_STRINGplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_GLOBAL_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 ea 00 00 00             je      0x1e6 <_JIT_ENTRY+0x1e6>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 118: 49 89 14 04                   movq    %rdx, (%r12,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 128: 49 8b 4f 18                   movq    0x18(%r15), %rcx
// 12c: 48 8b 51 20                   movq    0x20(%rcx), %rdx
// 130: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 134: be 01 00 00 00                movl    $0x1, %esi
// 139: 48 d3 e6                      shlq    %cl, %rsi
// 13c: 48 98                         cltq
// 13e: 49 8d 1c c4                   leaq    (%r12,%rax,8), %rbx
// 142: 48 01 d6                      addq    %rdx, %rsi
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_OPERAND
// 14f: 0f b7 c0                      movzwl  %ax, %eax
// 152: 48 c1 e0 04                   shlq    $0x4, %rax
// 156: 4c 8b 74 30 28                movq    0x28(%rax,%rsi), %r14
// 15b: 4d 85 f6                      testq   %r14, %r14
// 15e: 0f 84 9a 00 00 00             je      0x1fe <_JIT_ENTRY+0x1fe>
// 164: 41 8b 06                      movl    (%r14), %eax
// 167: ff c0                         incl    %eax
// 169: 74 0f                         je      0x17a <_JIT_ENTRY+0x17a>
// 16b: 41 89 06                      movl    %eax, (%r14)
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 4c 89 33                      movq    %r14, (%rbx)
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _JIT_OPARG
// 187: a8 01                         testb   $0x1, %al
// 189: 74 16                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 18b: 0f b7 c0                      movzwl  %ax, %eax
// 18e: b9 01 00 00 00                movl    $0x1, %ecx
// 193: 29 c1                         subl    %eax, %ecx
// 195: 48 63 c1                      movslq  %ecx, %rax
// 198: 49 c7 44 c4 08 00 00 00 00    movq    $0x0, 0x8(%r12,%rax,8)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_OPARG
// 1ab: 0f b7 c8                      movzwl  %ax, %ecx
// 1ae: ba 01 00 00 00                movl    $0x1, %edx
// 1b3: 29 ca                         subl    %ecx, %edx
// 1b5: 48 63 ca                      movslq  %edx, %rcx
// 1b8: 83 e0 01                      andl    $0x1, %eax
// 1bb: ff c0                         incl    %eax
// 1bd: 48 01 c8                      addq    %rcx, %rax
// 1c0: 49 8d 34 c4                   leaq    (%r12,%rax,8), %rsi
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_CONTINUE
// 1ce: 4c 89 ff                      movq    %r15, %rdi
// 1d1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1d6: 48 83 c4 28                   addq    $0x28, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: ff e0                         jmpq    *%rax
// 1e6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1eb: 49 29 c4                      subq    %rax, %r12
// 1ee: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f2: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f6: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1fa: 31 c0                         xorl    %eax, %eax
// 1fc: eb 28                         jmp     0x226 <_JIT_ENTRY+0x226>
// 1fe: 4c 29 fb                      subq    %r15, %rbx
// 201: 48 83 c3 b8                   addq    $-0x48, %rbx
// 205: 48 c1 eb 03                   shrq    $0x3, %rbx
// 209: 41 89 5f 40                   movl    %ebx, 0x40(%r15)
// 20d: 49 8b 07                      movq    (%r15), %rax
// 210: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000212:  R_X86_64_64  _JIT_TARGET
// 21a: 89 c9                         movl    %ecx, %ecx
// 21c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 220: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 226: 48 83 c4 28                   addq    $0x28, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: c3                            retq
// 235: 
static const unsigned char _BUILD_STRINGplus_LOAD_GLOBAL_MODULE_code_body[566] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x49, 0x89, 0x14, 0x04, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x4f, 0x18, 0x48, 0x8b, 0x51, 0x20, 0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc4, 0x48, 0x01, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x74, 0x30, 0x28, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x16, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xc7, 0x44, 0xc4, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x48, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x28, 0x4c, 0x29, 0xfb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5f, 0x40, 0x49, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_GLOBAL_MODULE_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _BUILD_STRINGplus_LOAD_LOCALS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_LOCALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fb: 0f 84 b8 00 00 00             je      0x1b9 <_JIT_ENTRY+0x1b9>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 48 c1 e1 03                   shlq    $0x3, %rcx
// 112: 48 f7 d9                      negq    %rcx
// 115: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 11a: 49 89 14 0f                   movq    %rdx, (%r15,%rcx)
// 11e: 49 8b 5e 28                   movq    0x28(%r14), %rbx
// 122: 48 85 db                      testq   %rbx, %rbx
// 125: 74 59                         je      0x180 <_JIT_ENTRY+0x180>
// 127: 8b 03                         movl    (%rbx), %eax
// 129: ff c0                         incl    %eax
// 12b: 74 0e                         je      0x13b <_JIT_ENTRY+0x13b>
// 12d: 89 03                         movl    %eax, (%rbx)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 139: ff d0                         callq   *%rax
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _JIT_OPARG
// 145: 0f b7 c0                      movzwl  %ax, %eax
// 148: b9 01 00 00 00                movl    $0x1, %ecx
// 14d: 29 c1                         subl    %eax, %ecx
// 14f: 48 63 c1                      movslq  %ecx, %rax
// 152: 49 89 1c c7                   movq    %rbx, (%r15,%rax,8)
// 156: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 15a: 48 83 c6 08                   addq    $0x8, %rsi
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _JIT_CONTINUE
// 168: 4c 89 f7                      movq    %r14, %rdi
// 16b: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 170: 48 83 c4 28                   addq    $0x28, %rsp
// 174: 5b                            popq    %rbx
// 175: 41 5c                         popq    %r12
// 177: 41 5d                         popq    %r13
// 179: 41 5e                         popq    %r14
// 17b: 41 5f                         popq    %r15
// 17d: 5d                            popq    %rbp
// 17e: ff e0                         jmpq    *%rax
// 180: 0f b7 c0                      movzwl  %ax, %eax
// 183: b9 01 00 00 00                movl    $0x1, %ecx
// 188: 29 c1                         subl    %eax, %ecx
// 18a: 48 63 c1                      movslq  %ecx, %rax
// 18d: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PyExc_SystemError
// 19b: 48 8b 30                      movq    (%rax), %rsi
// 19e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a0:  R_X86_64_64  .rodata.str1.1+0x39
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _PyErr_SetString
// 1b2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b7: ff d0                         callq   *%rax
// 1b9: 4d 29 f4                      subq    %r14, %r12
// 1bc: 49 83 c4 b8                   addq    $-0x48, %r12
// 1c0: 49 c1 ec 03                   shrq    $0x3, %r12
// 1c4: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 1c8: 31 c0                         xorl    %eax, %eax
// 1ca: 48 83 c4 28                   addq    $0x28, %rsp
// 1ce: 5b                            popq    %rbx
// 1cf: 41 5c                         popq    %r12
// 1d1: 41 5d                         popq    %r13
// 1d3: 41 5e                         popq    %r14
// 1d5: 41 5f                         popq    %r15
// 1d7: 5d                            popq    %rbp
// 1d8: c3                            retq
// 1d9: 
static const unsigned char _BUILD_STRINGplus_LOAD_LOCALS_code_body[474] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x0f, 0x49, 0x8b, 0x5e, 0x28, 0x48, 0x85, 0xdb, 0x74, 0x59, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x1c, 0xc7, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x24, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_LOCALS_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_LOCALS_data_holes[1];

// _BUILD_STRINGplus_LOAD_NAME
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f0                   movzwl  %ax, %r14d
// 77: 49 ff c6                      incq    %r14
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff ce                      decq    %r14
// a3: 49 83 fe 01                   cmpq    $0x1, %r14
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// ad: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b1: 49 8b 07                      movq    (%r15), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 15                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: ff d3                         callq   *%rbx
// cd: 49 8b 07                      movq    (%r15), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d5                      callq   *%r13
// d7: 49 ff 0f                      decq    (%r15)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 ff                      movq    %r15, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// f2: 48 85 c9                      testq   %rcx, %rcx
// f5: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fa: 0f 84 f2 00 00 00             je      0x1f2 <_JIT_ENTRY+0x1f2>
// 100: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 41 0f b7 c7                   movzwl  %r15w, %eax
// 10e: 48 c1 e0 03                   shlq    $0x3, %rax
// 112: 48 f7 d8                      negq    %rax
// 115: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 11a: 49 89 4c 05 00                movq    %rcx, (%r13,%rax)
// 11f: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 123: 48 85 ff                      testq   %rdi, %rdi
// 126: 0f 84 85 00 00 00             je      0x1b1 <_JIT_ENTRY+0x1b1>
// 12c: 49 8b 06                      movq    (%r14), %rax
// 12f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 133: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000135:  R_X86_64_64  _JIT_OPARG
// 13d: 0f b7 c9                      movzwl  %cx, %ecx
// 140: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 145: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000147:  R_X86_64_64  PyMapping_GetOptionalItem
// 14f: 48 89 e2                      movq    %rsp, %rdx
// 152: 4c 89 e6                      movq    %r12, %rsi
// 155: ff d3                         callq   *%rbx
// 157: 85 c0                         testl   %eax, %eax
// 159: 78 7e                         js      0x1d9 <_JIT_ENTRY+0x1d9>
// 15b: 48 8b 04 24                   movq    (%rsp), %rax
// 15f: 48 85 c0                      testq   %rax, %rax
// 162: 0f 84 aa 00 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 168: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016a:  R_X86_64_64  _JIT_OPARG
// 172: 0f b7 c9                      movzwl  %cx, %ecx
// 175: ba 01 00 00 00                movl    $0x1, %edx
// 17a: 29 ca                         subl    %ecx, %edx
// 17c: 48 63 ca                      movslq  %edx, %rcx
// 17f: 49 89 44 cd 00                movq    %rax, (%r13,%rcx,8)
// 184: 48 8d 34 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rsi
// 18c: 4c 01 ee                      addq    %r13, %rsi
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _JIT_CONTINUE
// 199: 4c 89 f7                      movq    %r14, %rdi
// 19c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1a1: 48 83 c4 28                   addq    $0x28, %rsp
// 1a5: 5b                            popq    %rbx
// 1a6: 41 5c                         popq    %r12
// 1a8: 41 5d                         popq    %r13
// 1aa: 41 5e                         popq    %r14
// 1ac: 41 5f                         popq    %r15
// 1ae: 5d                            popq    %rbp
// 1af: ff e0                         jmpq    *%rax
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PyExc_SystemError
// 1bb: 48 8b 30                      movq    (%rax), %rsi
// 1be: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c0:  R_X86_64_64  .rodata.str1.1+0x56
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _PyErr_SetString
// 1d2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d7: ff d0                         callq   *%rax
// 1d9: 41 0f b7 c7                   movzwl  %r15w, %eax
// 1dd: b9 01 00 00 00                movl    $0x1, %ecx
// 1e2: 29 c1                         subl    %eax, %ecx
// 1e4: 48 63 c1                      movslq  %ecx, %rax
// 1e7: 4c 8d 24 c5 00 00 00 00       leaq    (,%rax,8), %r12
// 1ef: 4d 01 ec                      addq    %r13, %r12
// 1f2: 4d 29 f4                      subq    %r14, %r12
// 1f5: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f9: 49 c1 ec 03                   shrq    $0x3, %r12
// 1fd: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 201: 31 c0                         xorl    %eax, %eax
// 203: 48 83 c4 28                   addq    $0x28, %rsp
// 207: 5b                            popq    %rbx
// 208: 41 5c                         popq    %r12
// 20a: 41 5d                         popq    %r13
// 20c: 41 5e                         popq    %r14
// 20e: 41 5f                         popq    %r15
// 210: 5d                            popq    %rbp
// 211: c3                            retq
// 212: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyDict_GetItemRef
// 220: 48 89 e2                      movq    %rsp, %rdx
// 223: 4c 89 e6                      movq    %r12, %rsi
// 226: ff d0                         callq   *%rax
// 228: 85 c0                         testl   %eax, %eax
// 22a: 78 ad                         js      0x1d9 <_JIT_ENTRY+0x1d9>
// 22c: 48 8b 04 24                   movq    (%rsp), %rax
// 230: 48 85 c0                      testq   %rax, %rax
// 233: 0f 85 2f ff ff ff             jne     0x168 <_JIT_ENTRY+0x168>
// 239: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 23d: 48 89 e2                      movq    %rsp, %rdx
// 240: 4c 89 e6                      movq    %r12, %rsi
// 243: ff d3                         callq   *%rbx
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 90                         js      0x1d9 <_JIT_ENTRY+0x1d9>
// 249: 48 8b 04 24                   movq    (%rsp), %rax
// 24d: 48 85 c0                      testq   %rax, %rax
// 250: 0f 85 12 ff ff ff             jne     0x168 <_JIT_ENTRY+0x168>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  PyExc_NameError
// 260: 48 8b 30                      movq    (%rax), %rsi
// 263: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000265:  R_X86_64_64  .rodata.str1.1+0x39
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 277: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 27c: 4c 89 e1                      movq    %r12, %rcx
// 27f: ff d0                         callq   *%rax
// 281: e9 53 ff ff ff                jmp     0x1d9 <_JIT_ENTRY+0x1d9>
// 286: 
static const unsigned char _BUILD_STRINGplus_LOAD_NAME_code_body[647] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x46, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xc7, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x49, 0x89, 0x4c, 0x05, 0x00, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0x7e, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xcd, 0x00, 0x48, 0x8d, 0x34, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x41, 0x0f, 0xb7, 0xc7, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xec, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xad, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd3, 0x85, 0xc0, 0x78, 0x90, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x12, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x53, 0xff, 0xff, 0xff};
static const Hole _BUILD_STRINGplus_LOAD_NAME_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_NAME_data_holes[1];

// _BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 ee 01 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 c1 e0 03                   shlq    $0x3, %rax
// 115: 48 f7 d8                      negq    %rax
// 118: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 11d: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 4c 63 f0                      movslq  %eax, %r14
// 12b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000012d:  R_X86_64_64  PySuper_Type
// 135: 4f 39 6c f7 e8                cmpq    %r13, -0x18(%r15,%r14,8)
// 13a: 75 12                         jne     0x14e <_JIT_ENTRY+0x14e>
// 13c: 4b 8b 6c f7 f0                movq    -0x10(%r15,%r14,8), %rbp
// 141: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 145: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 14c: 75 30                         jne     0x17e <_JIT_ENTRY+0x17e>
// 14e: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 152: 48 29 d8                      subq    %rbx, %rax
// 155: 48 83 c0 b8                   addq    $-0x48, %rax
// 159: 48 c1 e8 03                   shrq    $0x3, %rax
// 15d: 89 43 40                      movl    %eax, 0x40(%rbx)
// 160: 48 8b 03                      movq    (%rbx), %rax
// 163: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000165:  R_X86_64_64  _JIT_TARGET
// 16d: 89 c9                         movl    %ecx, %ecx
// 16f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 173: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 179: e9 82 01 00 00                jmp     0x300 <_JIT_ENTRY+0x300>
// 17e: 4f 8b 64 f7 f8                movq    -0x8(%r15,%r14,8), %r12
// 183: 48 8b 03                      movq    (%rbx), %rax
// 186: 48 8b 40 20                   movq    0x20(%rax), %rax
// 18a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 19a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _PySuper_Lookup
// 1a9: 48 89 ef                      movq    %rbp, %rdi
// 1ac: 4c 89 e6                      movq    %r12, %rsi
// 1af: 31 c9                         xorl    %ecx, %ecx
// 1b1: ff d0                         callq   *%rax
// 1b3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1b8: 49 8b 45 00                   movq    (%r13), %rax
// 1bc: 48 85 c0                      testq   %rax, %rax
// 1bf: 7f 22                         jg      0x1e3 <_JIT_ENTRY+0x1e3>
// 1c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c3:  R_X86_64_64  .rodata.str1.1
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_NegativeRefcount
// 1d5: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 1da: 4c 89 ea                      movq    %r13, %rdx
// 1dd: ff d0                         callq   *%rax
// 1df: 49 8b 45 00                   movq    (%r13), %rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 28                         js      0x20f <_JIT_ENTRY+0x20f>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f1: ff d0                         callq   *%rax
// 1f3: 49 ff 4d 00                   decq    (%r13)
// 1f7: 75 16                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fb:  R_X86_64_64  PySuper_Type
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_Dealloc
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 45 00                   movq    (%rbp), %rax
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 7f 22                         jg      0x23a <_JIT_ENTRY+0x23a>
// 218: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 231: 48 89 ea                      movq    %rbp, %rdx
// 234: ff d0                         callq   *%rax
// 236: 48 8b 45 00                   movq    (%rbp), %rax
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 21                         js      0x25f <_JIT_ENTRY+0x25f>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 48 ff 4d 00                   decq    (%rbp)
// 24e: 75 0f                         jne     0x25f <_JIT_ENTRY+0x25f>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 48 89 ef                      movq    %rbp, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 49 8b 04 24                   movq    (%r12), %rax
// 263: 48 85 c0                      testq   %rax, %rax
// 266: 7f 22                         jg      0x28a <_JIT_ENTRY+0x28a>
// 268: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026a:  R_X86_64_64  .rodata.str1.1
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_NegativeRefcount
// 27c: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 281: 4c 89 e2                      movq    %r12, %rdx
// 284: ff d0                         callq   *%rax
// 286: 49 8b 04 24                   movq    (%r12), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 21                         js      0x2af <_JIT_ENTRY+0x2af>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 49 ff 0c 24                   decq    (%r12)
// 29e: 75 0f                         jne     0x2af <_JIT_ENTRY+0x2af>
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _Py_Dealloc
// 2aa: 4c 89 e7                      movq    %r12, %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 2b3: 49 83 c4 e8                   addq    $-0x18, %r12
// 2b7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2bc: 48 85 c0                      testq   %rax, %rax
// 2bf: 74 2e                         je      0x2ef <_JIT_ENTRY+0x2ef>
// 2c1: 4b 8d 34 f7                   leaq    (%r15,%r14,8), %rsi
// 2c5: 48 83 c6 f0                   addq    $-0x10, %rsi
// 2c9: 49 89 04 24                   movq    %rax, (%r12)
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _JIT_CONTINUE
// 2d7: 48 89 df                      movq    %rbx, %rdi
// 2da: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2df: 48 83 c4 28                   addq    $0x28, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: ff e0                         jmpq    *%rax
// 2ef: 49 29 dc                      subq    %rbx, %r12
// 2f2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2f6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2fa: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2fe: 31 c0                         xorl    %eax, %eax
// 300: 48 83 c4 28                   addq    $0x28, %rsp
// 304: 5b                            popq    %rbx
// 305: 41 5c                         popq    %r12
// 307: 41 5d                         popq    %r13
// 309: 41 5e                         popq    %r14
// 30b: 41 5f                         popq    %r15
// 30d: 5d                            popq    %rbp
// 30e: c3                            retq
// 30f: 
static const unsigned char _BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR_code_body[784] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xee, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xf7, 0xe8, 0x75, 0x12, 0x4b, 0x8b, 0x6c, 0xf7, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x30, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x82, 0x01, 0x00, 0x00, 0x4f, 0x8b, 0x64, 0xf7, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xf7, 0x49, 0x83, 0xc4, 0xe8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x2e, 0x4b, 0x8d, 0x34, 0xf7, 0x48, 0x83, 0xc6, 0xf0, 0x49, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR_code_holes[28] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b0: 49 8b 07                      movq    (%r15), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0f                      decq    (%r15)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 92 02 00 00             je      0x393 <_JIT_ENTRY+0x393>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 c1 e0 03                   shlq    $0x3, %rax
// 115: 48 f7 d8                      negq    %rax
// 118: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 11d: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 4c 63 f8                      movslq  %eax, %r15
// 12b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000012d:  R_X86_64_64  PySuper_Type
// 135: 4f 39 6c fe e8                cmpq    %r13, -0x18(%r14,%r15,8)
// 13a: 75 12                         jne     0x14e <_JIT_ENTRY+0x14e>
// 13c: 4b 8b 6c fe f0                movq    -0x10(%r14,%r15,8), %rbp
// 141: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 145: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 14c: 75 30                         jne     0x17e <_JIT_ENTRY+0x17e>
// 14e: 4b 8d 04 fe                   leaq    (%r14,%r15,8), %rax
// 152: 48 29 d8                      subq    %rbx, %rax
// 155: 48 83 c0 b8                   addq    $-0x48, %rax
// 159: 48 c1 e8 03                   shrq    $0x3, %rax
// 15d: 89 43 40                      movl    %eax, 0x40(%rbx)
// 160: 48 8b 03                      movq    (%rbx), %rax
// 163: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000165:  R_X86_64_64  _JIT_TARGET
// 16d: 89 c9                         movl    %ecx, %ecx
// 16f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 173: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 179: e9 26 02 00 00                jmp     0x3a4 <_JIT_ENTRY+0x3a4>
// 17e: 4b 8b 74 fe f8                movq    -0x8(%r14,%r15,8), %rsi
// 183: 48 8b 03                      movq    (%rbx), %rax
// 186: 48 8b 40 20                   movq    0x20(%rax), %rax
// 18a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 19a: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 19f: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
// 1a7: 48 8b 46 08                   movq    0x8(%rsi), %rax
// 1ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ad:  R_X86_64_64  PyObject_GenericGetAttr
// 1b5: 31 ff                         xorl    %edi, %edi
// 1b7: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 1be: 48 8d 4c 24 04                leaq    0x4(%rsp), %rcx
// 1c3: 48 0f 45 cf                   cmovneq %rdi, %rcx
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _PySuper_Lookup
// 1d1: 48 89 ef                      movq    %rbp, %rdi
// 1d4: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 1d9: ff d0                         callq   *%rax
// 1db: 49 89 c4                      movq    %rax, %r12
// 1de: 49 8b 45 00                   movq    (%r13), %rax
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 7f 22                         jg      0x209 <_JIT_ENTRY+0x209>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 200: 4c 89 ea                      movq    %r13, %rdx
// 203: ff d0                         callq   *%rax
// 205: 49 8b 45 00                   movq    (%r13), %rax
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 28                         js      0x235 <_JIT_ENTRY+0x235>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 217: ff d0                         callq   *%rax
// 219: 49 ff 4d 00                   decq    (%r13)
// 21d: 75 16                         jne     0x235 <_JIT_ENTRY+0x235>
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  PySuper_Type
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: ff d0                         callq   *%rax
// 235: 48 8b 45 00                   movq    (%rbp), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 7f 22                         jg      0x260 <_JIT_ENTRY+0x260>
// 23e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_NegativeRefcount
// 252: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 257: 48 89 ea                      movq    %rbp, %rdx
// 25a: ff d0                         callq   *%rax
// 25c: 48 8b 45 00                   movq    (%rbp), %rax
// 260: 85 c0                         testl   %eax, %eax
// 262: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 48 ff 4d 00                   decq    (%rbp)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 48 89 ef                      movq    %rbp, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 4d 85 e4                      testq   %r12, %r12
// 28d: 0f 84 a8 00 00 00             je      0x33b <_JIT_ENTRY+0x33b>
// 293: 4b 8d 2c fe                   leaq    (%r14,%r15,8), %rbp
// 297: 48 83 c5 f8                   addq    $-0x8, %rbp
// 29b: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 2a0: 75 53                         jne     0x2f5 <_JIT_ENTRY+0x2f5>
// 2a2: 49 8b 45 00                   movq    (%r13), %rax
// 2a6: 48 85 c0                      testq   %rax, %rax
// 2a9: 7f 22                         jg      0x2cd <_JIT_ENTRY+0x2cd>
// 2ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ad:  R_X86_64_64  .rodata.str1.1
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_NegativeRefcount
// 2bf: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 2c4: 4c 89 ea                      movq    %r13, %rdx
// 2c7: ff d0                         callq   *%rax
// 2c9: 49 8b 45 00                   movq    (%r13), %rax
// 2cd: 85 c0                         testl   %eax, %eax
// 2cf: 78 21                         js      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2db: ff d0                         callq   *%rax
// 2dd: 49 ff 4d 00                   decq    (%r13)
// 2e1: 75 0f                         jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _Py_Dealloc
// 2ed: 4c 89 ef                      movq    %r13, %rdi
// 2f0: ff d0                         callq   *%rax
// 2f2: 45 31 ed                      xorl    %r13d, %r13d
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _JIT_OPARG
// 2ff: 0f b7 c0                      movzwl  %ax, %eax
// 302: b9 01 00 00 00                movl    $0x1, %ecx
// 307: 29 c1                         subl    %eax, %ecx
// 309: 48 63 c1                      movslq  %ecx, %rax
// 30c: 4d 89 64 c6 e8                movq    %r12, -0x18(%r14,%rax,8)
// 311: 4d 89 6c c6 f0                movq    %r13, -0x10(%r14,%rax,8)
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _JIT_CONTINUE
// 320: 48 89 df                      movq    %rbx, %rdi
// 323: 48 89 ee                      movq    %rbp, %rsi
// 326: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 32b: 48 83 c4 28                   addq    $0x28, %rsp
// 32f: 5b                            popq    %rbx
// 330: 41 5c                         popq    %r12
// 332: 41 5d                         popq    %r13
// 334: 41 5e                         popq    %r14
// 336: 41 5f                         popq    %r15
// 338: 5d                            popq    %rbp
// 339: ff e0                         jmpq    *%rax
// 33b: 49 8b 45 00                   movq    (%r13), %rax
// 33f: 48 85 c0                      testq   %rax, %rax
// 342: 7f 22                         jg      0x366 <_JIT_ENTRY+0x366>
// 344: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000346:  R_X86_64_64  .rodata.str1.1
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_NegativeRefcount
// 358: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 35d: 4c 89 ea                      movq    %r13, %rdx
// 360: ff d0                         callq   *%rax
// 362: 49 8b 45 00                   movq    (%r13), %rax
// 366: 85 c0                         testl   %eax, %eax
// 368: 78 21                         js      0x38b <_JIT_ENTRY+0x38b>
// 36a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 374: ff d0                         callq   *%rax
// 376: 49 ff 4d 00                   decq    (%r13)
// 37a: 75 0f                         jne     0x38b <_JIT_ENTRY+0x38b>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_Dealloc
// 386: 4c 89 ef                      movq    %r13, %rdi
// 389: ff d0                         callq   *%rax
// 38b: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 38f: 49 83 c4 e8                   addq    $-0x18, %r12
// 393: 49 29 dc                      subq    %rbx, %r12
// 396: 49 83 c4 b8                   addq    $-0x48, %r12
// 39a: 49 c1 ec 03                   shrq    $0x3, %r12
// 39e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 3a2: 31 c0                         xorl    %eax, %eax
// 3a4: 48 83 c4 28                   addq    $0x28, %rsp
// 3a8: 5b                            popq    %rbx
// 3a9: 41 5c                         popq    %r12
// 3ab: 41 5d                         popq    %r13
// 3ad: 41 5e                         popq    %r14
// 3af: 41 5f                         popq    %r15
// 3b1: 5d                            popq    %rbp
// 3b2: c3                            retq
// 3b3: 
static const unsigned char _BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD_code_body[948] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x41, 0xff, 0xd6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc3, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0x92, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x39, 0x6c, 0xfe, 0xe8, 0x75, 0x12, 0x4b, 0x8b, 0x6c, 0xfe, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x30, 0x4b, 0x8d, 0x04, 0xfe, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x26, 0x02, 0x00, 0x00, 0x4b, 0x8b, 0x74, 0xfe, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x46, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x04, 0x48, 0x0f, 0x45, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x2c, 0xfe, 0x48, 0x83, 0xc5, 0xf8, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x75, 0x53, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x31, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x64, 0xc6, 0xe8, 0x4d, 0x89, 0x6c, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4f, 0x8d, 0x24, 0xfe, 0x49, 0x83, 0xc4, 0xe8, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD_code_holes[34] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _BUILD_STRINGplus_MAKE_CELL
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_MAKE_CELL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fb: 0f 84 dd 00 00 00             je      0x1de <_JIT_ENTRY+0x1de>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 121: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 ca                      movslq  %edx, %rcx
// 12f: 4c 8d 3c ce                   leaq    (%rsi,%rcx,8), %r15
// 133: 48 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %rdi
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  PyCell_New
// 142: ff d0                         callq   *%rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 0f 84 91 00 00 00             je      0x1de <_JIT_ENTRY+0x1de>
// 14d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014f:  R_X86_64_64  _JIT_OPARG
// 157: 0f b7 c9                      movzwl  %cx, %ecx
// 15a: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 15f: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 164: 4d 85 e4                      testq   %r12, %r12
// 167: 74 50                         je      0x1b9 <_JIT_ENTRY+0x1b9>
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 48 85 c0                      testq   %rax, %rax
// 170: 7f 22                         jg      0x194 <_JIT_ENTRY+0x194>
// 172: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000174:  R_X86_64_64  .rodata.str1.1+0x39
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_NegativeRefcount
// 186: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 18b: 4c 89 e2                      movq    %r12, %rdx
// 18e: ff d0                         callq   *%rax
// 190: 49 8b 04 24                   movq    (%r12), %rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 78 21                         js      0x1b9 <_JIT_ENTRY+0x1b9>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 ff 0c 24                   decq    (%r12)
// 1a8: 75 0f                         jne     0x1b9 <_JIT_ENTRY+0x1b9>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_Dealloc
// 1b4: 4c 89 e7                      movq    %r12, %rdi
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _JIT_CONTINUE
// 1c3: 48 89 df                      movq    %rbx, %rdi
// 1c6: 4c 89 fe                      movq    %r15, %rsi
// 1c9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1ce: 48 83 c4 28                   addq    $0x28, %rsp
// 1d2: 5b                            popq    %rbx
// 1d3: 41 5c                         popq    %r12
// 1d5: 41 5d                         popq    %r13
// 1d7: 41 5e                         popq    %r14
// 1d9: 41 5f                         popq    %r15
// 1db: 5d                            popq    %rbp
// 1dc: ff e0                         jmpq    *%rax
// 1de: 49 29 df                      subq    %rbx, %r15
// 1e1: 49 83 c7 b8                   addq    $-0x48, %r15
// 1e5: 49 c1 ef 03                   shrq    $0x3, %r15
// 1e9: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1ed: 31 c0                         xorl    %eax, %eax
// 1ef: 48 83 c4 28                   addq    $0x28, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: c3                            retq
// 1fe: 
static const unsigned char _BUILD_STRINGplus_MAKE_CELL_code_body[511] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x3c, 0xce, 0x48, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_MAKE_CELL_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_MAKE_CELL_data_holes[1];

// _BUILD_STRINGplus_MAKE_FUNCTION
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_MAKE_FUNCTION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fb: 0f 84 00 01 00 00             je      0x201 <_JIT_ENTRY+0x201>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 c1 e0 03                   shlq    $0x3, %rax
// 115: 48 f7 d8                      negq    %rax
// 118: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 11d: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 48 63 d8                      movslq  %eax, %rbx
// 12b: 49 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %rbp
// 130: 49 8b 76 18                   movq    0x18(%r14), %rsi
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  PyFunction_New
// 13e: 48 89 ef                      movq    %rbp, %rdi
// 141: ff d0                         callq   *%rax
// 143: 49 89 c5                      movq    %rax, %r13
// 146: 48 8b 45 00                   movq    (%rbp), %rax
// 14a: 48 85 c0                      testq   %rax, %rax
// 14d: 7e 06                         jle     0x155 <_JIT_ENTRY+0x155>
// 14f: 85 c0                         testl   %eax, %eax
// 151: 79 28                         jns     0x17b <_JIT_ENTRY+0x17b>
// 153: eb 38                         jmp     0x18d <_JIT_ENTRY+0x18d>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 16e: 48 89 ea                      movq    %rbp, %rdx
// 171: ff d0                         callq   *%rax
// 173: 48 8b 45 00                   movq    (%rbp), %rax
// 177: 85 c0                         testl   %eax, %eax
// 179: 78 12                         js      0x18d <_JIT_ENTRY+0x18d>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 185: ff d0                         callq   *%rax
// 187: 48 ff 4d 00                   decq    (%rbp)
// 18b: 74 5c                         je      0x1e9 <_JIT_ENTRY+0x1e9>
// 18d: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 191: 4d 85 ed                      testq   %r13, %r13
// 194: 74 6b                         je      0x201 <_JIT_ENTRY+0x201>
// 196: 8b 75 5c                      movl    0x5c(%rbp), %esi
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _PyFunction_SetVersion
// 1a3: 4c 89 ef                      movq    %r13, %rdi
// 1a6: ff d0                         callq   *%rax
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _JIT_OPARG
// 1b2: 0f b7 c0                      movzwl  %ax, %eax
// 1b5: b9 01 00 00 00                movl    $0x1, %ecx
// 1ba: 29 c1                         subl    %eax, %ecx
// 1bc: 48 63 c1                      movslq  %ecx, %rax
// 1bf: 4d 89 6c c7 f8                movq    %r13, -0x8(%r15,%rax,8)
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_CONTINUE
// 1ce: 4c 89 f7                      movq    %r14, %rdi
// 1d1: 4c 89 e6                      movq    %r12, %rsi
// 1d4: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1d9: 48 83 c4 28                   addq    $0x28, %rsp
// 1dd: 5b                            popq    %rbx
// 1de: 41 5c                         popq    %r12
// 1e0: 41 5d                         popq    %r13
// 1e2: 41 5e                         popq    %r14
// 1e4: 41 5f                         popq    %r15
// 1e6: 5d                            popq    %rbp
// 1e7: ff e0                         jmpq    *%rax
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: 48 89 ef                      movq    %rbp, %rdi
// 1f6: ff d0                         callq   *%rax
// 1f8: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 1fc: 4d 85 ed                      testq   %r13, %r13
// 1ff: 75 95                         jne     0x196 <_JIT_ENTRY+0x196>
// 201: 4d 29 f4                      subq    %r14, %r12
// 204: 49 83 c4 b8                   addq    $-0x48, %r12
// 208: 49 c1 ec 03                   shrq    $0x3, %r12
// 20c: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 210: 31 c0                         xorl    %eax, %eax
// 212: 48 83 c4 28                   addq    $0x28, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: c3                            retq
// 221: 
static const unsigned char _BUILD_STRINGplus_MAKE_FUNCTION_code_body[546] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x6c, 0xdf, 0xf8, 0x49, 0x8b, 0x76, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x5c, 0x4d, 0x8d, 0x24, 0xdf, 0x4d, 0x85, 0xed, 0x74, 0x6b, 0x8b, 0x75, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x6c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x24, 0xdf, 0x4d, 0x85, 0xed, 0x75, 0x95, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_MAKE_FUNCTION_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_MAKE_FUNCTION_data_holes[1];

// _BUILD_STRINGplus_MAP_ADD
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_MAP_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 68                         je      0x160 <_JIT_ENTRY+0x160>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 114: 49 89 14 00                   movq    %rdx, (%r8,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 49 8d 1c c0                   leaq    (%r8,%rax,8), %rbx
// 125: 49 8b 74 c0 f0                movq    -0x10(%r8,%rax,8), %rsi
// 12a: 49 8b 54 c0 f8                movq    -0x8(%r8,%rax,8), %rdx
// 12f: 4d 8d 3c c0                   leaq    (%r8,%rax,8), %r15
// 133: 49 83 c7 f0                   addq    $-0x10, %r15
// 137: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 13c: 29 cf                         subl    %ecx, %edi
// 13e: 48 63 cf                      movslq  %edi, %rcx
// 141: 48 01 c1                      addq    %rax, %rcx
// 144: 49 8b 3c c8                   movq    (%r8,%rcx,8), %rdi
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _PyDict_SetItem_Take2
// 152: ff d0                         callq   *%rax
// 154: 85 c0                         testl   %eax, %eax
// 156: 4c 0f 45 fb                   cmovneq %rbx, %r15
// 15a: 74 29                         je      0x185 <_JIT_ENTRY+0x185>
// 15c: 49 83 c7 f0                   addq    $-0x10, %r15
// 160: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 165: 49 29 c7                      subq    %rax, %r15
// 168: 49 83 c7 b8                   addq    $-0x48, %r15
// 16c: 49 c1 ef 03                   shrq    $0x3, %r15
// 170: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 174: 31 c0                         xorl    %eax, %eax
// 176: 48 83 c4 28                   addq    $0x28, %rsp
// 17a: 5b                            popq    %rbx
// 17b: 41 5c                         popq    %r12
// 17d: 41 5d                         popq    %r13
// 17f: 41 5e                         popq    %r14
// 181: 41 5f                         popq    %r15
// 183: 5d                            popq    %rbp
// 184: c3                            retq
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _JIT_CONTINUE
// 18f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 194: 4c 89 fe                      movq    %r15, %rsi
// 197: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 19c: 48 83 c4 28                   addq    $0x28, %rsp
// 1a0: 5b                            popq    %rbx
// 1a1: 41 5c                         popq    %r12
// 1a3: 41 5d                         popq    %r13
// 1a5: 41 5e                         popq    %r14
// 1a7: 41 5f                         popq    %r15
// 1a9: 5d                            popq    %rbp
// 1aa: ff e0                         jmpq    *%rax
// 1ac: 
static const unsigned char _BUILD_STRINGplus_MAP_ADD_code_body[429] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x89, 0x14, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x1c, 0xc0, 0x49, 0x8b, 0x74, 0xc0, 0xf0, 0x49, 0x8b, 0x54, 0xc0, 0xf8, 0x4d, 0x8d, 0x3c, 0xc0, 0x49, 0x83, 0xc7, 0xf0, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xcf, 0x48, 0x63, 0xcf, 0x48, 0x01, 0xc1, 0x49, 0x8b, 0x3c, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4c, 0x0f, 0x45, 0xfb, 0x74, 0x29, 0x49, 0x83, 0xc7, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_MAP_ADD_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_MAP_ADD_data_holes[1];

// _BUILD_STRINGplus_MATCH_CLASS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_MATCH_CLASS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 49 89 c5                      movq    %rax, %r13
// 5a: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 60: 0f 8e 81 00 00 00             jle     0xe7 <_JIT_ENTRY+0xe7>
// 66: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 44 0f b7 f8                   movzwl  %ax, %r15d
// 74: 49 ff c7                      incq    %r15
// 77: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000079:  R_X86_64_64  .rodata.str1.1
// 81: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000083:  R_X86_64_64  _Py_NegativeRefcount
// 8b: eb 0c                         jmp     0x99 <_JIT_ENTRY+0x99>
// 8d: 0f 1f 00                      nopl    (%rax)
// 90: 49 ff cf                      decq    %r15
// 93: 49 83 ff 01                   cmpq    $0x1, %r15
// 97: 7e 4e                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 99: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 9d: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// a1: 48 8b 03                      movq    (%rbx), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7e 07                         jle     0xb0 <_JIT_ENTRY+0xb0>
// a9: 85 c0                         testl   %eax, %eax
// ab: 78 e3                         js      0x90 <_JIT_ENTRY+0x90>
// ad: eb 16                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// af: 90                            nop
// b0: 48 89 ef                      movq    %rbp, %rdi
// b3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// b8: 48 89 da                      movq    %rbx, %rdx
// bb: 41 ff d6                      callq   *%r14
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 85 c0                         testl   %eax, %eax
// c3: 78 cb                         js      0x90 <_JIT_ENTRY+0x90>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cf: ff d0                         callq   *%rax
// d1: 48 ff 0b                      decq    (%rbx)
// d4: 75 ba                         jne     0x90 <_JIT_ENTRY+0x90>
// d6: 48 89 df                      movq    %rbx, %rdi
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_Dealloc
// e3: ff d0                         callq   *%rax
// e5: eb a9                         jmp     0x90 <_JIT_ENTRY+0x90>
// e7: 4d 85 ed                      testq   %r13, %r13
// ea: 0f 84 e3 01 00 00             je      0x2d3 <_JIT_ENTRY+0x2d3>
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _JIT_OPARG
// fa: 0f b7 d0                      movzwl  %ax, %edx
// fd: 0f b7 c8                      movzwl  %ax, %ecx
// 100: 48 8d 04 cd 00 00 00 00       leaq    (,%rcx,8), %rax
// 108: 48 f7 d8                      negq    %rax
// 10b: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 110: 4d 89 2c 07                   movq    %r13, (%r15,%rax)
// 114: b8 01 00 00 00                movl    $0x1, %eax
// 119: 29 d0                         subl    %edx, %eax
// 11b: 4c 63 e0                      movslq  %eax, %r12
// 11e: 4f 8b 6c e7 f8                movq    -0x8(%r15,%r12,8), %r13
// 123: 4b 8b 5c e7 e8                movq    -0x18(%r15,%r12,8), %rbx
// 128: 4b 8b 6c e7 f0                movq    -0x10(%r15,%r12,8), %rbp
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _PyEval_MatchClass
// 137: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 13c: 48 89 de                      movq    %rbx, %rsi
// 13f: 48 89 ea                      movq    %rbp, %rdx
// 142: 4d 89 e8                      movq    %r13, %r8
// 145: ff d0                         callq   *%rax
// 147: 49 89 c6                      movq    %rax, %r14
// 14a: 48 8b 03                      movq    (%rbx), %rax
// 14d: 48 85 c0                      testq   %rax, %rax
// 150: 7e 06                         jle     0x158 <_JIT_ENTRY+0x158>
// 152: 85 c0                         testl   %eax, %eax
// 154: 79 27                         jns     0x17d <_JIT_ENTRY+0x17d>
// 156: eb 36                         jmp     0x18e <_JIT_ENTRY+0x18e>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 171: 48 89 da                      movq    %rbx, %rdx
// 174: ff d0                         callq   *%rax
// 176: 48 8b 03                      movq    (%rbx), %rax
// 179: 85 c0                         testl   %eax, %eax
// 17b: 78 11                         js      0x18e <_JIT_ENTRY+0x18e>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 187: ff d0                         callq   *%rax
// 189: 48 ff 0b                      decq    (%rbx)
// 18c: 74 0f                         je      0x19d <_JIT_ENTRY+0x19d>
// 18e: 48 8b 45 00                   movq    (%rbp), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7e 1e                         jle     0x1b5 <_JIT_ENTRY+0x1b5>
// 197: 85 c0                         testl   %eax, %eax
// 199: 79 40                         jns     0x1db <_JIT_ENTRY+0x1db>
// 19b: eb 50                         jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 89 df                      movq    %rbx, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 48 8b 45 00                   movq    (%rbp), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 7f e2                         jg      0x197 <_JIT_ENTRY+0x197>
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_NegativeRefcount
// 1c9: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 1ce: 48 89 ea                      movq    %rbp, %rdx
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 8b 45 00                   movq    (%rbp), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 12                         js      0x1ed <_JIT_ENTRY+0x1ed>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 ff 4d 00                   decq    (%rbp)
// 1eb: 74 0f                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1ed: 49 8b 45 00                   movq    (%r13), %rax
// 1f1: 48 85 c0                      testq   %rax, %rax
// 1f4: 7e 1e                         jle     0x214 <_JIT_ENTRY+0x214>
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 79 40                         jns     0x23a <_JIT_ENTRY+0x23a>
// 1fa: eb 50                         jmp     0x24c <_JIT_ENTRY+0x24c>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 48 89 ef                      movq    %rbp, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 49 8b 45 00                   movq    (%r13), %rax
// 20f: 48 85 c0                      testq   %rax, %rax
// 212: 7f e2                         jg      0x1f6 <_JIT_ENTRY+0x1f6>
// 214: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000216:  R_X86_64_64  .rodata.str1.1
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_NegativeRefcount
// 228: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 22d: 4c 89 ea                      movq    %r13, %rdx
// 230: ff d0                         callq   *%rax
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 85 c0                         testl   %eax, %eax
// 238: 78 12                         js      0x24c <_JIT_ENTRY+0x24c>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 244: ff d0                         callq   *%rax
// 246: 49 ff 4d 00                   decq    (%r13)
// 24a: 74 4c                         je      0x298 <_JIT_ENTRY+0x298>
// 24c: 4d 85 f6                      testq   %r14, %r14
// 24f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 254: 74 5b                         je      0x2b1 <_JIT_ENTRY+0x2b1>
// 256: 4b 8d 34 e7                   leaq    (%r15,%r12,8), %rsi
// 25a: 48 83 c6 f0                   addq    $-0x10, %rsi
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_OPARG
// 268: 0f b7 c0                      movzwl  %ax, %eax
// 26b: b9 01 00 00 00                movl    $0x1, %ecx
// 270: 29 c1                         subl    %eax, %ecx
// 272: 48 63 c1                      movslq  %ecx, %rax
// 275: 4d 89 74 c7 e8                movq    %r14, -0x18(%r15,%rax,8)
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_CONTINUE
// 284: 48 8b 3c 24                   movq    (%rsp), %rdi
// 288: 48 83 c4 18                   addq    $0x18, %rsp
// 28c: 5b                            popq    %rbx
// 28d: 41 5c                         popq    %r12
// 28f: 41 5d                         popq    %r13
// 291: 41 5e                         popq    %r14
// 293: 41 5f                         popq    %r15
// 295: 5d                            popq    %rbp
// 296: ff e0                         jmpq    *%rax
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ef                      movq    %r13, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 4d 85 f6                      testq   %r14, %r14
// 2aa: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2af: 75 a5                         jne     0x256 <_JIT_ENTRY+0x256>
// 2b1: 48 8b 42 68                   movq    0x68(%rdx), %rax
// 2b5: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000002b7:  R_X86_64_64  _Py_NoneStruct
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 74 92                         je      0x256 <_JIT_ENTRY+0x256>
// 2c4: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2c9: 74 8b                         je      0x256 <_JIT_ENTRY+0x256>
// 2cb: 4f 8d 24 e7                   leaq    (%r15,%r12,8), %r12
// 2cf: 49 83 c4 e8                   addq    $-0x18, %r12
// 2d3: 48 8b 04 24                   movq    (%rsp), %rax
// 2d7: 49 29 c4                      subq    %rax, %r12
// 2da: 49 83 c4 b8                   addq    $-0x48, %r12
// 2de: 49 c1 ec 03                   shrq    $0x3, %r12
// 2e2: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2e6: 31 c0                         xorl    %eax, %eax
// 2e8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ec: 5b                            popq    %rbx
// 2ed: 41 5c                         popq    %r12
// 2ef: 41 5d                         popq    %r13
// 2f1: 41 5e                         popq    %r14
// 2f3: 41 5f                         popq    %r15
// 2f5: 5d                            popq    %rbp
// 2f6: c3                            retq
// 2f7: 
static const unsigned char _BUILD_STRINGplus_MATCH_CLASS_code_body[760] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0c, 0x0f, 0x1f, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x4e, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0xba, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa9, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xe3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x04, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x4d, 0x89, 0x2c, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x4c, 0x63, 0xe0, 0x4f, 0x8b, 0x6c, 0xe7, 0xf8, 0x4b, 0x8b, 0x5c, 0xe7, 0xe8, 0x4b, 0x8b, 0x6c, 0xe7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x4c, 0x4d, 0x85, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x74, 0x5b, 0x4b, 0x8d, 0x34, 0xe7, 0x48, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x74, 0xc7, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x75, 0xa5, 0x48, 0x8b, 0x42, 0x68, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x92, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x8b, 0x4f, 0x8d, 0x24, 0xe7, 0x49, 0x83, 0xc4, 0xe8, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_MATCH_CLASS_code_holes[26] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_MATCH_CLASS_data_holes[1];

// _BUILD_STRINGplus_MATCH_KEYS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_MATCH_KEYS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 96 00 00 00             je      0x192 <_JIT_ENTRY+0x192>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 118: 49 89 14 04                   movq    %rdx, (%r12,%rax)
// 11c: bb 01 00 00 00                movl    $0x1, %ebx
// 121: b8 01 00 00 00                movl    $0x1, %eax
// 126: 29 c8                         subl    %ecx, %eax
// 128: 4c 63 f0                      movslq  %eax, %r14
// 12b: 4b 8b 74 f4 f0                movq    -0x10(%r12,%r14,8), %rsi
// 130: 4b 8b 54 f4 f8                movq    -0x8(%r12,%r14,8), %rdx
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _PyEval_MatchKeys
// 13f: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 144: 4c 89 ff                      movq    %r15, %rdi
// 147: ff d0                         callq   *%rax
// 149: 48 85 c0                      testq   %rax, %rax
// 14c: 74 40                         je      0x18e <_JIT_ENTRY+0x18e>
// 14e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000150:  R_X86_64_64  _JIT_OPARG
// 158: 0f b7 c9                      movzwl  %cx, %ecx
// 15b: 29 cb                         subl    %ecx, %ebx
// 15d: 48 63 cb                      movslq  %ebx, %rcx
// 160: 49 89 04 cc                   movq    %rax, (%r12,%rcx,8)
// 164: 49 8d 34 cc                   leaq    (%r12,%rcx,8), %rsi
// 168: 48 83 c6 08                   addq    $0x8, %rsi
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  _JIT_CONTINUE
// 176: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 17b: 4c 89 fa                      movq    %r15, %rdx
// 17e: 48 83 c4 28                   addq    $0x28, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: ff e0                         jmpq    *%rax
// 18e: 4f 8d 24 f4                   leaq    (%r12,%r14,8), %r12
// 192: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 197: 49 29 c4                      subq    %rax, %r12
// 19a: 49 83 c4 b8                   addq    $-0x48, %r12
// 19e: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a2: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1a6: 31 c0                         xorl    %eax, %eax
// 1a8: 48 83 c4 28                   addq    $0x28, %rsp
// 1ac: 5b                            popq    %rbx
// 1ad: 41 5c                         popq    %r12
// 1af: 41 5d                         popq    %r13
// 1b1: 41 5e                         popq    %r14
// 1b3: 41 5f                         popq    %r15
// 1b5: 5d                            popq    %rbp
// 1b6: c3                            retq
// 1b7: 
static const unsigned char _BUILD_STRINGplus_MATCH_KEYS_code_body[440] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x49, 0x89, 0x14, 0x04, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4b, 0x8b, 0x74, 0xf4, 0xf0, 0x4b, 0x8b, 0x54, 0xf4, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcb, 0x48, 0x63, 0xcb, 0x49, 0x89, 0x04, 0xcc, 0x49, 0x8d, 0x34, 0xcc, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x24, 0xf4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_MATCH_KEYS_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_MATCH_KEYS_data_holes[1];

// _BUILD_STRINGplus_MATCH_MAPPING
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_MATCH_MAPPING.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 81 00 00 00             je      0x17d <_JIT_ENTRY+0x17d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 118: 48 89 14 06                   movq    %rdx, (%rsi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8b 4c c6 f8                movq    -0x8(%rsi,%rax,8), %rcx
// 12a: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 12e: f6 81 a8 00 00 00 40          testb   $0x40, 0xa8(%rcx)
// 135: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000137:  R_X86_64_64  _Py_FalseStruct
// 13f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000141:  R_X86_64_64  _Py_TrueStruct
// 149: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 14d: 48 89 14 c6                   movq    %rdx, (%rsi,%rax,8)
// 151: 48 8d 34 c6                   leaq    (%rsi,%rax,8), %rsi
// 155: 48 83 c6 08                   addq    $0x8, %rsi
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_CONTINUE
// 163: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 168: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 16d: 48 83 c4 28                   addq    $0x28, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: ff e0                         jmpq    *%rax
// 17d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 182: 49 29 c4                      subq    %rax, %r12
// 185: 49 83 c4 b8                   addq    $-0x48, %r12
// 189: 49 c1 ec 03                   shrq    $0x3, %r12
// 18d: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 191: 31 c0                         xorl    %eax, %eax
// 193: 48 83 c4 28                   addq    $0x28, %rsp
// 197: 5b                            popq    %rbx
// 198: 41 5c                         popq    %r12
// 19a: 41 5d                         popq    %r13
// 19c: 41 5e                         popq    %r14
// 19e: 41 5f                         popq    %r15
// 1a0: 5d                            popq    %rbp
// 1a1: c3                            retq
// 1a2: 
static const unsigned char _BUILD_STRINGplus_MATCH_MAPPING_code_body[419] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x14, 0xc6, 0x48, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_MATCH_MAPPING_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_MATCH_MAPPING_data_holes[1];

// _BUILD_STRINGplus_MATCH_SEQUENCE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_MATCH_SEQUENCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 81 00 00 00             je      0x17d <_JIT_ENTRY+0x17d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 118: 48 89 14 06                   movq    %rdx, (%rsi,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8b 4c c6 f8                movq    -0x8(%rsi,%rax,8), %rcx
// 12a: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 12e: f6 81 a8 00 00 00 20          testb   $0x20, 0xa8(%rcx)
// 135: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000137:  R_X86_64_64  _Py_FalseStruct
// 13f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000141:  R_X86_64_64  _Py_TrueStruct
// 149: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 14d: 48 89 14 c6                   movq    %rdx, (%rsi,%rax,8)
// 151: 48 8d 34 c6                   leaq    (%rsi,%rax,8), %rsi
// 155: 48 83 c6 08                   addq    $0x8, %rsi
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_CONTINUE
// 163: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 168: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 16d: 48 83 c4 28                   addq    $0x28, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: ff e0                         jmpq    *%rax
// 17d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 182: 49 29 c4                      subq    %rax, %r12
// 185: 49 83 c4 b8                   addq    $-0x48, %r12
// 189: 49 c1 ec 03                   shrq    $0x3, %r12
// 18d: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 191: 31 c0                         xorl    %eax, %eax
// 193: 48 83 c4 28                   addq    $0x28, %rsp
// 197: 5b                            popq    %rbx
// 198: 41 5c                         popq    %r12
// 19a: 41 5d                         popq    %r13
// 19c: 41 5e                         popq    %r14
// 19e: 41 5f                         popq    %r15
// 1a0: 5d                            popq    %rbp
// 1a1: c3                            retq
// 1a2: 
static const unsigned char _BUILD_STRINGplus_MATCH_SEQUENCE_code_body[419] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8b, 0x4c, 0xc6, 0xf8, 0x48, 0x8b, 0x49, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x14, 0xc6, 0x48, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_MATCH_SEQUENCE_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_MATCH_SEQUENCE_data_holes[1];

// _BUILD_STRINGplus_NOP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_NOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 51                         je      0x149 <_JIT_ENTRY+0x149>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _JIT_CONTINUE
// 12f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 134: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 139: 48 83 c4 28                   addq    $0x28, %rsp
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5d                         popq    %r13
// 142: 41 5e                         popq    %r14
// 144: 41 5f                         popq    %r15
// 146: 5d                            popq    %rbp
// 147: ff e0                         jmpq    *%rax
// 149: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 14e: 49 29 c4                      subq    %rax, %r12
// 151: 49 83 c4 b8                   addq    $-0x48, %r12
// 155: 49 c1 ec 03                   shrq    $0x3, %r12
// 159: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 15d: 31 c0                         xorl    %eax, %eax
// 15f: 48 83 c4 28                   addq    $0x28, %rsp
// 163: 5b                            popq    %rbx
// 164: 41 5c                         popq    %r12
// 166: 41 5d                         popq    %r13
// 168: 41 5e                         popq    %r14
// 16a: 41 5f                         popq    %r15
// 16c: 5d                            popq    %rbp
// 16d: c3                            retq
// 16e: 
static const unsigned char _BUILD_STRINGplus_NOP_code_body[367] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_NOP_code_holes[11] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_NOP_data_holes[1];

// _BUILD_STRINGplus_POP_EXCEPT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_POP_EXCEPT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 6b                         je      0x163 <_JIT_ENTRY+0x163>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8d 24 c2                   leaq    (%rdx,%rax,8), %r12
// 125: 49 83 c4 f8                   addq    $-0x8, %r12
// 129: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12e: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 133: 48 8b 4b 70                   movq    0x70(%rbx), %rcx
// 137: 4c 8b 39                      movq    (%rcx), %r15
// 13a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000013c:  R_X86_64_64  _Py_NoneStruct
// 144: 31 f6                         xorl    %esi, %esi
// 146: 48 39 d0                      cmpq    %rdx, %rax
// 149: 48 0f 45 f0                   cmovneq %rax, %rsi
// 14d: 48 89 31                      movq    %rsi, (%rcx)
// 150: 4d 85 ff                      testq   %r15, %r15
// 153: 74 78                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 48 85 c0                      testq   %rax, %rax
// 15b: 7e 2b                         jle     0x188 <_JIT_ENTRY+0x188>
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 79 4c                         jns     0x1ad <_JIT_ENTRY+0x1ad>
// 161: eb 6a                         jmp     0x1cd <_JIT_ENTRY+0x1cd>
// 163: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 168: 49 29 c4                      subq    %rax, %r12
// 16b: 49 83 c4 b8                   addq    $-0x48, %r12
// 16f: 49 c1 ec 03                   shrq    $0x3, %r12
// 173: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 177: 31 c0                         xorl    %eax, %eax
// 179: 48 83 c4 28                   addq    $0x28, %rsp
// 17d: 5b                            popq    %rbx
// 17e: 41 5c                         popq    %r12
// 180: 41 5d                         popq    %r13
// 182: 41 5e                         popq    %r14
// 184: 41 5f                         popq    %r15
// 186: 5d                            popq    %rbp
// 187: c3                            retq
// 188: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018a:  R_X86_64_64  .rodata.str1.1+0x39
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_NegativeRefcount
// 19c: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1a1: 4c 89 fa                      movq    %r15, %rdx
// 1a4: ff d0                         callq   *%rax
// 1a6: 49 8b 07                      movq    (%r15), %rax
// 1a9: 85 c0                         testl   %eax, %eax
// 1ab: 78 20                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 ff 0f                      decq    (%r15)
// 1bc: 75 0f                         jne     0x1cd <_JIT_ENTRY+0x1cd>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_Dealloc
// 1c8: 4c 89 ff                      movq    %r15, %rdi
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_CONTINUE
// 1d7: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1dc: 4c 89 e6                      movq    %r12, %rsi
// 1df: 48 89 da                      movq    %rbx, %rdx
// 1e2: 48 83 c4 28                   addq    $0x28, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 
static const unsigned char _BUILD_STRINGplus_POP_EXCEPT_code_body[499] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc2, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x8b, 0x4b, 0x70, 0x4c, 0x8b, 0x39, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xff, 0x74, 0x78, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6a, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_POP_EXCEPT_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_POP_EXCEPT_data_holes[1];

// _BUILD_STRINGplus_POP_FRAME
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_POP_FRAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 e8                   movzwl  %ax, %r13d
// 77: 49 ff c5                      incq    %r13
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cd                      decq    %r13
// a3: 49 83 fd 01                   cmpq    $0x1, %r13
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// ad: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// b1: 48 8b 03                      movq    (%rbx), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: 41 ff d6                      callq   *%r14
// ce: 48 8b 03                      movq    (%rbx), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 48 ff 0b                      decq    (%rbx)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 48 89 df                      movq    %rbx, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 a1 00 00 00             je      0x19d <_JIT_ENTRY+0x19d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 0c c2                   leaq    (%rdx,%rax,8), %rcx
// 129: 48 83 c1 f8                   addq    $-0x8, %rcx
// 12d: 4c 8b 74 c2 f8                movq    -0x8(%rdx,%rax,8), %r14
// 132: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 137: 48 29 f1                      subq    %rsi, %rcx
// 13a: 48 83 c1 b8                   addq    $-0x48, %rcx
// 13e: 48 c1 e9 03                   shrq    $0x3, %rcx
// 142: 89 4e 40                      movl    %ecx, 0x40(%rsi)
// 145: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 14a: 41 ff 47 24                   incl    0x24(%r15)
// 14e: 48 8b 5e 08                   movq    0x8(%rsi), %rbx
// 152: 49 89 5f 40                   movq    %rbx, 0x40(%r15)
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _PyEval_FrameClearAndPop
// 160: 4c 89 ff                      movq    %r15, %rdi
// 163: ff d0                         callq   *%rax
// 165: 48 63 43 40                   movslq  0x40(%rbx), %rax
// 169: 4c 89 74 c3 48                movq    %r14, 0x48(%rbx,%rax,8)
// 16e: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 172: 48 83 c6 50                   addq    $0x50, %rsi
// 176: c7 43 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rbx) # imm = 0xFFFFFFFF
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _JIT_CONTINUE
// 187: 48 89 df                      movq    %rbx, %rdi
// 18a: 4c 89 fa                      movq    %r15, %rdx
// 18d: 48 83 c4 28                   addq    $0x28, %rsp
// 191: 5b                            popq    %rbx
// 192: 41 5c                         popq    %r12
// 194: 41 5d                         popq    %r13
// 196: 41 5e                         popq    %r14
// 198: 41 5f                         popq    %r15
// 19a: 5d                            popq    %rbp
// 19b: ff e0                         jmpq    *%rax
// 19d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a2: 49 29 c4                      subq    %rax, %r12
// 1a5: 49 83 c4 b8                   addq    $-0x48, %r12
// 1a9: 49 c1 ec 03                   shrq    $0x3, %r12
// 1ad: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1b1: 31 c0                         xorl    %eax, %eax
// 1b3: 48 83 c4 28                   addq    $0x28, %rsp
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: 5d                            popq    %rbp
// 1c1: c3                            retq
// 1c2: 
static const unsigned char _BUILD_STRINGplus_POP_FRAME_code_body[451] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x45, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xff, 0xd6, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x0b, 0x75, 0xc3, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc2, 0x48, 0x83, 0xc1, 0xf8, 0x4c, 0x8b, 0x74, 0xc2, 0xf8, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x29, 0xf1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x4e, 0x40, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x41, 0xff, 0x47, 0x24, 0x48, 0x8b, 0x5e, 0x08, 0x49, 0x89, 0x5f, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x63, 0x43, 0x40, 0x4c, 0x89, 0x74, 0xc3, 0x48, 0x48, 0x8d, 0x34, 0xc3, 0x48, 0x83, 0xc6, 0x50, 0xc7, 0x43, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_POP_FRAME_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_POP_FRAME_data_holes[1];

// _BUILD_STRINGplus_POP_TOP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_POP_TOP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 46                         je      0x13e <_JIT_ENTRY+0x13e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 114: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 63 d8                      movslq  %eax, %rbx
// 122: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 33                         jle     0x163 <_JIT_ENTRY+0x163>
// 130: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 134: 49 83 c6 f8                   addq    $-0x8, %r14
// 138: 85 c0                         testl   %eax, %eax
// 13a: 79 55                         jns     0x191 <_JIT_ENTRY+0x191>
// 13c: eb 74                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 13e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 143: 49 29 c4                      subq    %rax, %r12
// 146: 49 83 c4 b8                   addq    $-0x48, %r12
// 14a: 49 c1 ec 03                   shrq    $0x3, %r12
// 14e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 152: 31 c0                         xorl    %eax, %eax
// 154: 48 83 c4 28                   addq    $0x28, %rsp
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: 5d                            popq    %rbp
// 162: c3                            retq
// 163: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000165:  R_X86_64_64  .rodata.str1.1
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_NegativeRefcount
// 177: be 54 00 00 00                movl    $0x54, %esi
// 17c: 4c 89 e2                      movq    %r12, %rdx
// 17f: ff d0                         callq   *%rax
// 181: 49 8b 04 24                   movq    (%r12), %rax
// 185: 4d 8d 34 de                   leaq    (%r14,%rbx,8), %r14
// 189: 49 83 c6 f8                   addq    $-0x8, %r14
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 78 21                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19b: ff d0                         callq   *%rax
// 19d: 49 ff 0c 24                   decq    (%r12)
// 1a1: 75 0f                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_Dealloc
// 1ad: 4c 89 e7                      movq    %r12, %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_CONTINUE
// 1bc: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1c1: 4c 89 f6                      movq    %r14, %rsi
// 1c4: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1c9: 48 83 c4 28                   addq    $0x28, %rsp
// 1cd: 5b                            popq    %rbx
// 1ce: 41 5c                         popq    %r12
// 1d0: 41 5d                         popq    %r13
// 1d2: 41 5e                         popq    %r14
// 1d4: 41 5f                         popq    %r15
// 1d6: 5d                            popq    %rbp
// 1d7: ff e0                         jmpq    *%rax
// 1d9: 
static const unsigned char _BUILD_STRINGplus_POP_TOP_code_body[474] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x33, 0x4d, 0x8d, 0x34, 0xde, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x74, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x34, 0xde, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_POP_TOP_code_holes[15] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_POP_TOP_data_holes[1];

// _BUILD_STRINGplus_PUSH_EXC_INFO
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_PUSH_EXC_INFO.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 ad 00 00 00             je      0x1a9 <_JIT_ENTRY+0x1a9>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 118: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 11d: bb 01 00 00 00                movl    $0x1, %ebx
// 122: b8 01 00 00 00                movl    $0x1, %eax
// 127: 29 c8                         subl    %ecx, %eax
// 129: 48 98                         cltq
// 12b: 4c 8b 74 c5 f8                movq    -0x8(%rbp,%rax,8), %r14
// 130: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 135: 4d 8b 7d 70                   movq    0x70(%r13), %r15
// 139: 4d 8b 27                      movq    (%r15), %r12
// 13c: 41 8b 06                      movl    (%r14), %eax
// 13f: ff c0                         incl    %eax
// 141: 74 0f                         je      0x152 <_JIT_ENTRY+0x152>
// 143: 41 89 06                      movl    %eax, (%r14)
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 150: ff d0                         callq   *%rax
// 152: 4d 85 e4                      testq   %r12, %r12
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NoneStruct
// 15f: 49 0f 45 c4                   cmovneq %r12, %rax
// 163: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000165:  R_X86_64_64  _JIT_OPARG
// 16d: 0f b7 c9                      movzwl  %cx, %ecx
// 170: 29 cb                         subl    %ecx, %ebx
// 172: 48 63 cb                      movslq  %ebx, %rcx
// 175: 4d 89 37                      movq    %r14, (%r15)
// 178: 48 89 44 cd f8                movq    %rax, -0x8(%rbp,%rcx,8)
// 17d: 4c 89 74 cd 00                movq    %r14, (%rbp,%rcx,8)
// 182: 48 8d 74 cd 08                leaq    0x8(%rbp,%rcx,8), %rsi
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_CONTINUE
// 191: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 196: 4c 89 ea                      movq    %r13, %rdx
// 199: 48 83 c4 28                   addq    $0x28, %rsp
// 19d: 5b                            popq    %rbx
// 19e: 41 5c                         popq    %r12
// 1a0: 41 5d                         popq    %r13
// 1a2: 41 5e                         popq    %r14
// 1a4: 41 5f                         popq    %r15
// 1a6: 5d                            popq    %rbp
// 1a7: ff e0                         jmpq    *%rax
// 1a9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ae: 49 29 c4                      subq    %rax, %r12
// 1b1: 49 83 c4 b8                   addq    $-0x48, %r12
// 1b5: 49 c1 ec 03                   shrq    $0x3, %r12
// 1b9: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1bd: 31 c0                         xorl    %eax, %eax
// 1bf: 48 83 c4 28                   addq    $0x28, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: c3                            retq
// 1ce: 
static const unsigned char _BUILD_STRINGplus_PUSH_EXC_INFO_code_body[463] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x54, 0x05, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x74, 0xc5, 0xf8, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4d, 0x8b, 0x7d, 0x70, 0x4d, 0x8b, 0x27, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc4, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xcb, 0x48, 0x63, 0xcb, 0x4d, 0x89, 0x37, 0x48, 0x89, 0x44, 0xcd, 0xf8, 0x4c, 0x89, 0x74, 0xcd, 0x00, 0x48, 0x8d, 0x74, 0xcd, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_PUSH_EXC_INFO_code_holes[14] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_PUSH_EXC_INFO_data_holes[1];

// _BUILD_STRINGplus_PUSH_FRAME
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_PUSH_FRAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f0                   movzwl  %ax, %r14d
// 77: 49 ff c6                      incq    %r14
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff ce                      decq    %r14
// a3: 49 83 fe 01                   cmpq    $0x1, %r14
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// ad: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// b1: 48 8b 03                      movq    (%rbx), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 48 8b 03                      movq    (%rbx), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 48 ff 0b                      decq    (%rbx)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 48 89 df                      movq    %rbx, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 86 00 00 00             je      0x182 <_JIT_ENTRY+0x182>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 48 8d 0c c2                   leaq    (%rdx,%rax,8), %rcx
// 129: 48 83 c1 f8                   addq    $-0x8, %rcx
// 12d: 48 8b 7c c2 f8                movq    -0x8(%rdx,%rax,8), %rdi
// 132: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 137: 48 29 c1                      subq    %rax, %rcx
// 13a: 48 83 c1 b8                   addq    $-0x48, %rcx
// 13e: 48 c1 e9 03                   shrq    $0x3, %rcx
// 142: 89 48 40                      movl    %ecx, 0x40(%rax)
// 145: 48 89 47 08                   movq    %rax, 0x8(%rdi)
// 149: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 14e: 48 89 7a 40                   movq    %rdi, 0x40(%rdx)
// 152: ff 4a 24                      decl    0x24(%rdx)
// 155: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 159: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 15d: 48 83 c6 48                   addq    $0x48, %rsi
// 161: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _JIT_CONTINUE
// 172: 48 83 c4 28                   addq    $0x28, %rsp
// 176: 5b                            popq    %rbx
// 177: 41 5c                         popq    %r12
// 179: 41 5d                         popq    %r13
// 17b: 41 5e                         popq    %r14
// 17d: 41 5f                         popq    %r15
// 17f: 5d                            popq    %rbp
// 180: ff e0                         jmpq    *%rax
// 182: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 187: 49 29 c4                      subq    %rax, %r12
// 18a: 49 83 c4 b8                   addq    $-0x48, %r12
// 18e: 49 c1 ec 03                   shrq    $0x3, %r12
// 192: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 196: 31 c0                         xorl    %eax, %eax
// 198: 48 83 c4 28                   addq    $0x28, %rsp
// 19c: 5b                            popq    %rbx
// 19d: 41 5c                         popq    %r12
// 19f: 41 5d                         popq    %r13
// 1a1: 41 5e                         popq    %r14
// 1a3: 41 5f                         popq    %r15
// 1a5: 5d                            popq    %rbp
// 1a6: c3                            retq
// 1a7: 
static const unsigned char _BUILD_STRINGplus_PUSH_FRAME_code_body[424] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x45, 0x41, 0x8d, 0x46, 0xfe, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x0b, 0x75, 0xc3, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x0c, 0xc2, 0x48, 0x83, 0xc1, 0xf8, 0x48, 0x8b, 0x7c, 0xc2, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x89, 0x48, 0x40, 0x48, 0x89, 0x47, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7a, 0x40, 0xff, 0x4a, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_PUSH_FRAME_code_holes[11] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_PUSH_FRAME_data_holes[1];

// _BUILD_STRINGplus_PUSH_NULL
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_PUSH_NULL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 5d                         je      0x155 <_JIT_ENTRY+0x155>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 c7 04 c2 00 00 00 00       movq    $0x0, (%rdx,%rax,8)
// 129: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 12d: 48 83 c6 08                   addq    $0x8, %rsi
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _JIT_CONTINUE
// 13b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 140: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 145: 48 83 c4 28                   addq    $0x28, %rsp
// 149: 5b                            popq    %rbx
// 14a: 41 5c                         popq    %r12
// 14c: 41 5d                         popq    %r13
// 14e: 41 5e                         popq    %r14
// 150: 41 5f                         popq    %r15
// 152: 5d                            popq    %rbp
// 153: ff e0                         jmpq    *%rax
// 155: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 83 c4 b8                   addq    $-0x48, %r12
// 161: 49 c1 ec 03                   shrq    $0x3, %r12
// 165: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: 48 83 c4 28                   addq    $0x28, %rsp
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: 5d                            popq    %rbp
// 179: c3                            retq
// 17a: 
static const unsigned char _BUILD_STRINGplus_PUSH_NULL_code_body[379] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0xc7, 0x04, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_PUSH_NULL_code_holes[11] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_PUSH_NULL_data_holes[1];

// _BUILD_STRINGplus_RESUME_CHECK
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_RESUME_CHECK.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 64                         je      0x15c <_JIT_ENTRY+0x15c>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 12a: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 12e: 48 8b 08                      movq    (%rax), %rcx
// 131: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 136: 48 8b 07                      movq    (%rdi), %rax
// 139: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// 140: 75 32                         jne     0x174 <_JIT_ENTRY+0x174>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _JIT_CONTINUE
// 14c: 48 83 c4 28                   addq    $0x28, %rsp
// 150: 5b                            popq    %rbx
// 151: 41 5c                         popq    %r12
// 153: 41 5d                         popq    %r13
// 155: 41 5e                         popq    %r14
// 157: 41 5f                         popq    %r15
// 159: 5d                            popq    %rbp
// 15a: ff e0                         jmpq    *%rax
// 15c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 161: 49 29 c4                      subq    %rax, %r12
// 164: 49 83 c4 b8                   addq    $-0x48, %r12
// 168: 49 c1 ec 03                   shrq    $0x3, %r12
// 16c: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 170: 31 c0                         xorl    %eax, %eax
// 172: eb 24                         jmp     0x198 <_JIT_ENTRY+0x198>
// 174: 48 29 fe                      subq    %rdi, %rsi
// 177: 48 83 c6 b8                   addq    $-0x48, %rsi
// 17b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 17f: 89 77 40                      movl    %esi, 0x40(%rdi)
// 182: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000184:  R_X86_64_64  _JIT_TARGET
// 18c: 89 c9                         movl    %ecx, %ecx
// 18e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 192: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 198: 48 83 c4 28                   addq    $0x28, %rsp
// 19c: 5b                            popq    %rbx
// 19d: 41 5c                         popq    %r12
// 19f: 41 5d                         popq    %r13
// 1a1: 41 5e                         popq    %r14
// 1a3: 41 5f                         popq    %r15
// 1a5: 5d                            popq    %rbp
// 1a6: c3                            retq
// 1a7: 
static const unsigned char _BUILD_STRINGplus_RESUME_CHECK_code_body[424] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x64, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x07, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x24, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_RESUME_CHECK_code_holes[12] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_RESUME_CHECK_data_holes[1];

// _BUILD_STRINGplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_SAVE_RETURN_OFFSET.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 74 5a                         je      0x152 <_JIT_ENTRY+0x152>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 110: 48 f7 da                      negq    %rdx
// 113: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 118: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 11c: ba 01 00 00 00                movl    $0x1, %edx
// 121: 29 ca                         subl    %ecx, %edx
// 123: 48 63 ca                      movslq  %edx, %rcx
// 126: 48 8d 34 ce                   leaq    (%rsi,%rcx,8), %rsi
// 12a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12f: 66 89 47 44                   movw    %ax, 0x44(%rdi)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_CONTINUE
// 13d: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 142: 48 83 c4 28                   addq    $0x28, %rsp
// 146: 5b                            popq    %rbx
// 147: 41 5c                         popq    %r12
// 149: 41 5d                         popq    %r13
// 14b: 41 5e                         popq    %r14
// 14d: 41 5f                         popq    %r15
// 14f: 5d                            popq    %rbp
// 150: ff e0                         jmpq    *%rax
// 152: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 157: 49 29 c4                      subq    %rax, %r12
// 15a: 49 83 c4 b8                   addq    $-0x48, %r12
// 15e: 49 c1 ec 03                   shrq    $0x3, %r12
// 162: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 166: 31 c0                         xorl    %eax, %eax
// 168: 48 83 c4 28                   addq    $0x28, %rsp
// 16c: 5b                            popq    %rbx
// 16d: 41 5c                         popq    %r12
// 16f: 41 5d                         popq    %r13
// 171: 41 5e                         popq    %r14
// 173: 41 5f                         popq    %r15
// 175: 5d                            popq    %rbp
// 176: c3                            retq
// 177: 
static const unsigned char _BUILD_STRINGplus_SAVE_RETURN_OFFSET_code_body[376] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x74, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xce, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x66, 0x89, 0x47, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_SAVE_RETURN_OFFSET_code_holes[11] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_SAVE_RETURN_OFFSET_data_holes[1];

// _BUILD_STRINGplus_SETUP_ANNOTATIONS
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_SETUP_ANNOTATIONS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 8d b9 00 a1 00 00          leaq    0xa100(%rcx), %rdi
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 e0                   movzwl  %ax, %r12d
// 77: 49 ff c4                      incq    %r12
// 7a: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cc                      decq    %r12
// a3: 49 83 fc 01                   cmpq    $0x1, %r12
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 44 24 fe                leal    -0x2(%r12), %eax
// ae: 49 8b 1c c7                   movq    (%r15,%rax,8), %rbx
// b2: 48 8b 03                      movq    (%rbx), %rax
// b5: 48 85 c0                      testq   %rax, %rax
// b8: 7e 06                         jle     0xc0 <_JIT_ENTRY+0xc0>
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 e2                         js      0xa0 <_JIT_ENTRY+0xa0>
// be: eb 14                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// c0: 4c 89 f7                      movq    %r14, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: ff d5                         callq   *%rbp
// cd: 48 8b 03                      movq    (%rbx), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d5                      callq   *%r13
// d7: 48 ff 0b                      decq    (%rbx)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 48 89 df                      movq    %rbx, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f2: 48 85 f6                      testq   %rsi, %rsi
// f5: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fa: 0f 84 f6 00 00 00             je      0x1f6 <_JIT_ENTRY+0x1f6>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 0f b7 c8                      movzwl  %ax, %ecx
// 10d: 0f b7 c0                      movzwl  %ax, %eax
// 110: 48 c1 e0 03                   shlq    $0x3, %rax
// 114: 48 f7 d8                      negq    %rax
// 117: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 11c: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 120: b8 01 00 00 00                movl    $0x1, %eax
// 125: 29 c8                         subl    %ecx, %eax
// 127: 48 98                         cltq
// 129: 4c 8d 3c c2                   leaq    (%rdx,%rax,8), %r15
// 12d: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 131: 48 85 ff                      testq   %rdi, %rdi
// 134: 0f 84 92 00 00 00             je      0x1cc <_JIT_ENTRY+0x1cc>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  PyMapping_GetOptionalItem
// 144: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000146:  R_X86_64_64  _PyRuntime
// 14e: 49 81 c4 a8 a7 00 00          addq    $0xa7a8, %r12           # imm = 0xA7A8
// 155: 48 89 e2                      movq    %rsp, %rdx
// 158: 4c 89 e6                      movq    %r12, %rsi
// 15b: ff d0                         callq   *%rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 0f 88 91 00 00 00             js      0x1f6 <_JIT_ENTRY+0x1f6>
// 165: 4c 8b 34 24                   movq    (%rsp), %r14
// 169: 4d 85 f6                      testq   %r14, %r14
// 16c: 0f 84 a4 00 00 00             je      0x216 <_JIT_ENTRY+0x216>
// 172: 49 8b 06                      movq    (%r14), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 7f 21                         jg      0x19b <_JIT_ENTRY+0x19b>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 193: 4c 89 f2                      movq    %r14, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 06                      movq    (%r14), %rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 0f 88 f9 00 00 00             js      0x29c <_JIT_ENTRY+0x29c>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ad: ff d0                         callq   *%rax
// 1af: 49 ff 0e                      decq    (%r14)
// 1b2: 0f 85 e4 00 00 00             jne     0x29c <_JIT_ENTRY+0x29c>
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_Dealloc
// 1c2: 4c 89 f7                      movq    %r14, %rdi
// 1c5: ff d0                         callq   *%rax
// 1c7: e9 d0 00 00 00                jmp     0x29c <_JIT_ENTRY+0x29c>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  PyExc_SystemError
// 1d6: 48 8b 30                      movq    (%rax), %rsi
// 1d9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001db:  R_X86_64_64  .rodata.str1.1+0x39
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _PyErr_Format
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 31 c0                         xorl    %eax, %eax
// 1f4: ff d1                         callq   *%rcx
// 1f6: 49 29 df                      subq    %rbx, %r15
// 1f9: 49 83 c7 b8                   addq    $-0x48, %r15
// 1fd: 49 c1 ef 03                   shrq    $0x3, %r15
// 201: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 205: 31 c0                         xorl    %eax, %eax
// 207: 48 83 c4 28                   addq    $0x28, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyDict_New
// 220: ff d0                         callq   *%rax
// 222: 48 89 04 24                   movq    %rax, (%rsp)
// 226: 48 85 c0                      testq   %rax, %rax
// 229: 74 cb                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 22b: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 22f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000231:  R_X86_64_64  PyObject_SetItem
// 239: 4c 89 e6                      movq    %r12, %rsi
// 23c: 48 89 c2                      movq    %rax, %rdx
// 23f: ff d1                         callq   *%rcx
// 241: 89 c5                         movl    %eax, %ebp
// 243: 4c 8b 34 24                   movq    (%rsp), %r14
// 247: 49 8b 06                      movq    (%r14), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 7f 21                         jg      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  _Py_NegativeRefcount
// 263: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 268: 4c 89 f2                      movq    %r14, %rdx
// 26b: ff d0                         callq   *%rax
// 26d: 49 8b 06                      movq    (%r14), %rax
// 270: 85 c0                         testl   %eax, %eax
// 272: 78 20                         js      0x294 <_JIT_ENTRY+0x294>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27e: ff d0                         callq   *%rax
// 280: 49 ff 0e                      decq    (%r14)
// 283: 75 0f                         jne     0x294 <_JIT_ENTRY+0x294>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 f7                      movq    %r14, %rdi
// 292: ff d0                         callq   *%rax
// 294: 85 ed                         testl   %ebp, %ebp
// 296: 0f 85 5a ff ff ff             jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_CONTINUE
// 2a6: 48 89 df                      movq    %rbx, %rdi
// 2a9: 4c 89 fe                      movq    %r15, %rsi
// 2ac: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2b1: 48 83 c4 28                   addq    $0x28, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: ff e0                         jmpq    *%rax
// 2c1: 
static const unsigned char _BUILD_STRINGplus_SETUP_ANNOTATIONS_code_body[706] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xb9, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe0, 0x49, 0xff, 0xc4, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcc, 0x49, 0x83, 0xfc, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x44, 0x24, 0xfe, 0x49, 0x8b, 0x1c, 0xc7, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x14, 0x4c, 0x89, 0xf7, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x3c, 0xc2, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc4, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x91, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x34, 0x24, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0xcb, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x5a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_SETUP_ANNOTATIONS_code_holes[26] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _BUILD_STRINGplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_SETUP_ANNOTATIONS_data_holes[1];

// _BUILD_STRINGplus_SET_ADD
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_SET_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 b7 00 00 00             je      0x1b3 <_JIT_ENTRY+0x1b3>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 12b: f7 d1                         notl    %ecx
// 12d: 48 63 c1                      movslq  %ecx, %rax
// 130: 48 01 d8                      addq    %rbx, %rax
// 133: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PySet_Add
// 141: 4c 89 ee                      movq    %r13, %rsi
// 144: ff d0                         callq   *%rax
// 146: 89 c5                         movl    %eax, %ebp
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7e 12                         jle     0x163 <_JIT_ENTRY+0x163>
// 151: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 155: 49 8d 1c de                   leaq    (%r14,%rbx,8), %rbx
// 159: 48 83 c3 f8                   addq    $-0x8, %rbx
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 79 34                         jns     0x195 <_JIT_ENTRY+0x195>
// 161: eb 44                         jmp     0x1a7 <_JIT_ENTRY+0x1a7>
// 163: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000165:  R_X86_64_64  .rodata.str1.1
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_NegativeRefcount
// 177: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 17c: 4c 89 ea                      movq    %r13, %rdx
// 17f: ff d0                         callq   *%rax
// 181: 49 8b 45 00                   movq    (%r13), %rax
// 185: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 189: 49 8d 1c de                   leaq    (%r14,%rbx,8), %rbx
// 18d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 191: 85 c0                         testl   %eax, %eax
// 193: 78 12                         js      0x1a7 <_JIT_ENTRY+0x1a7>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19f: ff d0                         callq   *%rax
// 1a1: 49 ff 4d 00                   decq    (%r13)
// 1a5: 74 31                         je      0x1d8 <_JIT_ENTRY+0x1d8>
// 1a7: 85 ed                         testl   %ebp, %ebp
// 1a9: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 1ad: 74 40                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 1af: 49 83 c4 f8                   addq    $-0x8, %r12
// 1b3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b8: 49 29 c4                      subq    %rax, %r12
// 1bb: 49 83 c4 b8                   addq    $-0x48, %r12
// 1bf: 49 c1 ec 03                   shrq    $0x3, %r12
// 1c3: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1c7: 31 c0                         xorl    %eax, %eax
// 1c9: 48 83 c4 28                   addq    $0x28, %rsp
// 1cd: 5b                            popq    %rbx
// 1ce: 41 5c                         popq    %r12
// 1d0: 41 5d                         popq    %r13
// 1d2: 41 5e                         popq    %r14
// 1d4: 41 5f                         popq    %r15
// 1d6: 5d                            popq    %rbp
// 1d7: c3                            retq
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_Dealloc
// 1e2: 4c 89 ef                      movq    %r13, %rdi
// 1e5: ff d0                         callq   *%rax
// 1e7: 85 ed                         testl   %ebp, %ebp
// 1e9: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 1ed: 75 c0                         jne     0x1af <_JIT_ENTRY+0x1af>
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _JIT_CONTINUE
// 1f9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1fe: 4c 89 e6                      movq    %r12, %rsi
// 201: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 206: 48 83 c4 28                   addq    $0x28, %rsp
// 20a: 5b                            popq    %rbx
// 20b: 41 5c                         popq    %r12
// 20d: 41 5d                         popq    %r13
// 20f: 41 5e                         popq    %r14
// 211: 41 5f                         popq    %r15
// 213: 5d                            popq    %rbp
// 214: ff e0                         jmpq    *%rax
// 216: 
static const unsigned char _BUILD_STRINGplus_SET_ADD_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd8, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x8d, 0x1c, 0xde, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x8d, 0x1c, 0xde, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x31, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x40, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x75, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_SET_ADD_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_SET_ADD_data_holes[1];

// _BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// f3: 48 85 c9                      testq   %rcx, %rcx
// f6: 74 4d                         je      0x145 <_JIT_ENTRY+0x145>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 f0                      movzwl  %ax, %esi
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 44 24 18                movq    0x18(%rsp), %r8
// 114: 49 89 0c 00                   movq    %rcx, (%r8,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 f0                         subl    %esi, %eax
// 11f: 48 63 d0                      movslq  %eax, %rdx
// 122: 49 8b 4c d0 f0                movq    -0x10(%r8,%rdx,8), %rcx
// 127: 49 8b 44 d0 f8                movq    -0x8(%r8,%rdx,8), %rax
// 12c: 83 fe 03                      cmpl    $0x3, %esi
// 12f: 7f 39                         jg      0x16a <_JIT_ENTRY+0x16a>
// 131: 83 fe 01                      cmpl    $0x1, %esi
// 134: 74 44                         je      0x17a <_JIT_ENTRY+0x17a>
// 136: 83 fe 02                      cmpl    $0x2, %esi
// 139: 0f 85 90 00 00 00             jne     0x1cf <_JIT_ENTRY+0x1cf>
// 13f: 48 8d 78 40                   leaq    0x40(%rax), %rdi
// 143: eb 3f                         jmp     0x184 <_JIT_ENTRY+0x184>
// 145: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 14a: 49 29 c4                      subq    %rax, %r12
// 14d: 49 83 c4 b8                   addq    $-0x48, %r12
// 151: 49 c1 ec 03                   shrq    $0x3, %r12
// 155: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 28                   addq    $0x28, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 83 fe 04                      cmpl    $0x4, %esi
// 16d: 74 11                         je      0x180 <_JIT_ENTRY+0x180>
// 16f: 83 fe 08                      cmpl    $0x8, %esi
// 172: 75 5b                         jne     0x1cf <_JIT_ENTRY+0x1cf>
// 174: 48 8d 78 48                   leaq    0x48(%rax), %rdi
// 178: eb 0a                         jmp     0x184 <_JIT_ENTRY+0x184>
// 17a: 48 8d 78 38                   leaq    0x38(%rax), %rdi
// 17e: eb 04                         jmp     0x184 <_JIT_ENTRY+0x184>
// 180: 48 8d 78 70                   leaq    0x70(%rax), %rdi
// 184: 49 8d 34 d0                   leaq    (%r8,%rdx,8), %rsi
// 188: 48 83 c6 f8                   addq    $-0x8, %rsi
// 18c: 48 89 0f                      movq    %rcx, (%rdi)
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _JIT_OPARG
// 199: 0f b7 c9                      movzwl  %cx, %ecx
// 19c: ba 01 00 00 00                movl    $0x1, %edx
// 1a1: 29 ca                         subl    %ecx, %edx
// 1a3: 48 63 ca                      movslq  %edx, %rcx
// 1a6: 49 89 44 c8 f0                movq    %rax, -0x10(%r8,%rcx,8)
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _JIT_CONTINUE
// 1b5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ba: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1bf: 48 83 c4 28                   addq    $0x28, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: ff e0                         jmpq    *%rax
// 1cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d1:  R_X86_64_64  .rodata.str1.1+0x39
// 1d9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001db:  R_X86_64_64  .rodata.str1.1+0x44
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_FatalErrorFunc
// 1ed: ff d0                         callq   *%rax
// 1ef: 
static const unsigned char _BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE_code_body[496] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x74, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x89, 0x0c, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xf0, 0x48, 0x63, 0xd0, 0x49, 0x8b, 0x4c, 0xd0, 0xf0, 0x49, 0x8b, 0x44, 0xd0, 0xf8, 0x83, 0xfe, 0x03, 0x7f, 0x39, 0x83, 0xfe, 0x01, 0x74, 0x44, 0x83, 0xfe, 0x02, 0x0f, 0x85, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x78, 0x40, 0xeb, 0x3f, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfe, 0x04, 0x74, 0x11, 0x83, 0xfe, 0x08, 0x75, 0x5b, 0x48, 0x8d, 0x78, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x78, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x78, 0x70, 0x49, 0x8d, 0x34, 0xd0, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x89, 0x0f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x44, 0xc8, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE_code_holes[15] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _BUILD_STRINGplus_SET_IP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_SET_IP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f8                   movzwl  %ax, %r15d
// 77: 49 ff c7                      incq    %r15
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f2: 48 85 ff                      testq   %rdi, %rdi
// f5: 74 65                         je      0x15c <_JIT_ENTRY+0x15c>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_OPARG
// 101: 0f b7 c8                      movzwl  %ax, %ecx
// 104: 0f b7 c0                      movzwl  %ax, %eax
// 107: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 10f: 48 f7 da                      negq    %rdx
// 112: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 117: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 11b: ba 01 00 00 00                movl    $0x1, %edx
// 120: 29 ca                         subl    %ecx, %edx
// 122: 48 63 ca                      movslq  %edx, %rcx
// 125: 48 8d 34 ce                   leaq    (%rsi,%rcx,8), %rsi
// 129: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 12e: 48 8b 0f                      movq    (%rdi), %rcx
// 131: 48 8d 84 41 c8 00 00 00       leaq    0xc8(%rcx,%rax,2), %rax
// 139: 48 89 47 38                   movq    %rax, 0x38(%rdi)
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _JIT_CONTINUE
// 147: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 14c: 48 83 c4 28                   addq    $0x28, %rsp
// 150: 5b                            popq    %rbx
// 151: 41 5c                         popq    %r12
// 153: 41 5d                         popq    %r13
// 155: 41 5e                         popq    %r14
// 157: 41 5f                         popq    %r15
// 159: 5d                            popq    %rbp
// 15a: ff e0                         jmpq    *%rax
// 15c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 161: 49 29 c4                      subq    %rax, %r12
// 164: 49 83 c4 b8                   addq    $-0x48, %r12
// 168: 49 c1 ec 03                   shrq    $0x3, %r12
// 16c: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 170: 31 c0                         xorl    %eax, %eax
// 172: 48 83 c4 28                   addq    $0x28, %rsp
// 176: 5b                            popq    %rbx
// 177: 41 5c                         popq    %r12
// 179: 41 5d                         popq    %r13
// 17b: 41 5e                         popq    %r14
// 17d: 41 5f                         popq    %r15
// 17f: 5d                            popq    %rbp
// 180: c3                            retq
// 181: 
static const unsigned char _BUILD_STRINGplus_SET_IP_code_body[386] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x74, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xce, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x0f, 0x48, 0x8d, 0x84, 0x41, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x47, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_SET_IP_code_holes[11] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_SET_IP_data_holes[1];

// _BUILD_STRINGplus_SET_UPDATE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_SET_UPDATE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 f5 00 00 00             je      0x1f1 <_JIT_ENTRY+0x1f1>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 12b: f7 d1                         notl    %ecx
// 12d: 48 63 c1                      movslq  %ecx, %rax
// 130: 48 01 d8                      addq    %rbx, %rax
// 133: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _PySet_Update
// 141: 4c 89 ee                      movq    %r13, %rsi
// 144: ff d0                         callq   *%rax
// 146: 89 c5                         movl    %eax, %ebp
// 148: 49 8b 45 00                   movq    (%r13), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7e 12                         jle     0x163 <_JIT_ENTRY+0x163>
// 151: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 155: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 159: 49 83 c4 f8                   addq    $-0x8, %r12
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 79 34                         jns     0x195 <_JIT_ENTRY+0x195>
// 161: eb 44                         jmp     0x1a7 <_JIT_ENTRY+0x1a7>
// 163: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000165:  R_X86_64_64  .rodata.str1.1
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_NegativeRefcount
// 177: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 17c: 4c 89 ea                      movq    %r13, %rdx
// 17f: ff d0                         callq   *%rax
// 181: 49 8b 45 00                   movq    (%r13), %rax
// 185: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 189: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 18d: 49 83 c4 f8                   addq    $-0x8, %r12
// 191: 85 c0                         testl   %eax, %eax
// 193: 78 12                         js      0x1a7 <_JIT_ENTRY+0x1a7>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19f: ff d0                         callq   *%rax
// 1a1: 49 ff 4d 00                   decq    (%r13)
// 1a5: 74 2f                         je      0x1d6 <_JIT_ENTRY+0x1d6>
// 1a7: 85 ed                         testl   %ebp, %ebp
// 1a9: 4d 0f 48 e6                   cmovsq  %r14, %r12
// 1ad: 78 3e                         js      0x1ed <_JIT_ENTRY+0x1ed>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1be: 4c 89 e6                      movq    %r12, %rsi
// 1c1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c6: 48 83 c4 28                   addq    $0x28, %rsp
// 1ca: 5b                            popq    %rbx
// 1cb: 41 5c                         popq    %r12
// 1cd: 41 5d                         popq    %r13
// 1cf: 41 5e                         popq    %r14
// 1d1: 41 5f                         popq    %r15
// 1d3: 5d                            popq    %rbp
// 1d4: ff e0                         jmpq    *%rax
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_Dealloc
// 1e0: 4c 89 ef                      movq    %r13, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 4d 0f 48 e6                   cmovsq  %r14, %r12
// 1eb: 79 c2                         jns     0x1af <_JIT_ENTRY+0x1af>
// 1ed: 49 83 c4 f8                   addq    $-0x8, %r12
// 1f1: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f6: 49 29 c4                      subq    %rax, %r12
// 1f9: 49 83 c4 b8                   addq    $-0x48, %r12
// 1fd: 49 c1 ec 03                   shrq    $0x3, %r12
// 201: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 205: 31 c0                         xorl    %eax, %eax
// 207: 48 83 c4 28                   addq    $0x28, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 
static const unsigned char _BUILD_STRINGplus_SET_UPDATE_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0xf7, 0xd1, 0x48, 0x63, 0xc1, 0x48, 0x01, 0xd8, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4d, 0x8d, 0x34, 0xdf, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x34, 0xdf, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x83, 0xc4, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xe6, 0x78, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xe6, 0x79, 0xc2, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_SET_UPDATE_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_SET_UPDATE_data_holes[1];

// _BUILD_STRINGplus_STORE_ATTR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 41 0f b7 d6                   movzwl  %r14w, %edx
// 29: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 31: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 36: 49 29 c4                      subq    %rax, %r12
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _PyUnicode_JoinArray
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  _PyRuntime
// 4d: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 54: 4c 89 e6                      movq    %r12, %rsi
// 57: ff d0                         callq   *%rax
// 59: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000060:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 68: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 6f: 7e 7c                         jle     0xed <_JIT_ENTRY+0xed>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 44 0f b7 e8                   movzwl  %ax, %r13d
// 7f: 49 ff c5                      incq    %r13
// 82: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 49 ff cd                      decq    %r13
// a3: 49 83 fd 01                   cmpq    $0x1, %r13
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// ad: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: ff d3                         callq   *%rbx
// d7: 49 ff 0e                      decq    (%r14)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// f2: 48 85 ff                      testq   %rdi, %rdi
// f5: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// fa: 0f 84 e9 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 0f b7 c8                      movzwl  %ax, %ecx
// 10d: 0f b7 c0                      movzwl  %ax, %eax
// 110: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 118: 48 f7 da                      negq    %rdx
// 11b: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 120: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 124: ba 01 00 00 00                movl    $0x1, %edx
// 129: 29 ca                         subl    %ecx, %edx
// 12b: 4c 63 f2                      movslq  %edx, %r14
// 12e: 4e 8b 64 f6 f0                movq    -0x10(%rsi,%r14,8), %r12
// 133: 4e 8b 6c f6 f8                movq    -0x8(%rsi,%r14,8), %r13
// 138: 49 8b 0f                      movq    (%r15), %rcx
// 13b: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13f: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyObject_SetAttr
// 14e: 4c 89 ef                      movq    %r13, %rdi
// 151: 4c 89 e2                      movq    %r12, %rdx
// 154: ff d0                         callq   *%rax
// 156: 89 c5                         movl    %eax, %ebp
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7e 06                         jle     0x167 <_JIT_ENTRY+0x167>
// 161: 85 c0                         testl   %eax, %eax
// 163: 79 28                         jns     0x18d <_JIT_ENTRY+0x18d>
// 165: eb 2e                         jmp     0x195 <_JIT_ENTRY+0x195>
// 167: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000169:  R_X86_64_64  .rodata.str1.1
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_NegativeRefcount
// 17b: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 180: 4c 89 e2                      movq    %r12, %rdx
// 183: ff d0                         callq   *%rax
// 185: 49 8b 04 24                   movq    (%r12), %rax
// 189: 85 c0                         testl   %eax, %eax
// 18b: 78 08                         js      0x195 <_JIT_ENTRY+0x195>
// 18d: ff d3                         callq   *%rbx
// 18f: 49 ff 0c 24                   decq    (%r12)
// 193: 74 74                         je      0x209 <_JIT_ENTRY+0x209>
// 195: 49 8b 45 00                   movq    (%r13), %rax
// 199: 48 85 c0                      testq   %rax, %rax
// 19c: 7f 22                         jg      0x1c0 <_JIT_ENTRY+0x1c0>
// 19e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a0:  R_X86_64_64  .rodata.str1.1
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_NegativeRefcount
// 1b2: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 1b7: 4c 89 ea                      movq    %r13, %rdx
// 1ba: ff d0                         callq   *%rax
// 1bc: 49 8b 45 00                   movq    (%r13), %rax
// 1c0: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c5: 4e 8d 24 f1                   leaq    (%rcx,%r14,8), %r12
// 1c9: 4e 8d 34 f1                   leaq    (%rcx,%r14,8), %r14
// 1cd: 49 83 c6 f0                   addq    $-0x10, %r14
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 08                         js      0x1dd <_JIT_ENTRY+0x1dd>
// 1d5: ff d3                         callq   *%rbx
// 1d7: 49 ff 4d 00                   decq    (%r13)
// 1db: 74 49                         je      0x226 <_JIT_ENTRY+0x226>
// 1dd: 85 ed                         testl   %ebp, %ebp
// 1df: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 1e3: 74 58                         je      0x23d <_JIT_ENTRY+0x23d>
// 1e5: 49 83 c4 f0                   addq    $-0x10, %r12
// 1e9: 4d 29 fc                      subq    %r15, %r12
// 1ec: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f0: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f4: 45 89 67 40                   movl    %r12d, 0x40(%r15)
// 1f8: 31 c0                         xorl    %eax, %eax
// 1fa: 48 83 c4 28                   addq    $0x28, %rsp
// 1fe: 5b                            popq    %rbx
// 1ff: 41 5c                         popq    %r12
// 201: 41 5d                         popq    %r13
// 203: 41 5e                         popq    %r14
// 205: 41 5f                         popq    %r15
// 207: 5d                            popq    %rbp
// 208: c3                            retq
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 e7                      movq    %r12, %rdi
// 216: ff d0                         callq   *%rax
// 218: 49 8b 45 00                   movq    (%r13), %rax
// 21c: 48 85 c0                      testq   %rax, %rax
// 21f: 7f 9f                         jg      0x1c0 <_JIT_ENTRY+0x1c0>
// 221: e9 78 ff ff ff                jmp     0x19e <_JIT_ENTRY+0x19e>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_Dealloc
// 230: 4c 89 ef                      movq    %r13, %rdi
// 233: ff d0                         callq   *%rax
// 235: 85 ed                         testl   %ebp, %ebp
// 237: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 23b: 75 a8                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_CONTINUE
// 247: 4c 89 ff                      movq    %r15, %rdi
// 24a: 4c 89 e6                      movq    %r12, %rsi
// 24d: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 252: 48 83 c4 28                   addq    $0x28, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: ff e0                         jmpq    *%rax
// 262: 
static const unsigned char _BUILD_STRINGplus_STORE_ATTR_code_body[611] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xd6, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0xff, 0xd3, 0x49, 0xff, 0x0e, 0x75, 0xc4, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xf2, 0x4e, 0x8b, 0x64, 0xf6, 0xf0, 0x4e, 0x8b, 0x6c, 0xf6, 0xf8, 0x49, 0x8b, 0x0f, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x74, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x4e, 0x8d, 0x24, 0xf1, 0x4e, 0x8d, 0x34, 0xf1, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x58, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x9f, 0xe9, 0x78, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x75, 0xa8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_ATTR_code_holes[18] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_ATTR_data_holes[1];

// _BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 76                         je      0x16e <_JIT_ENTRY+0x16e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 114: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 119: b8 01 00 00 00                movl    $0x1, %eax
// 11e: 29 c8                         subl    %ecx, %eax
// 120: 4c 63 f0                      movslq  %eax, %r14
// 123: 4a 8b 4c f5 f0                movq    -0x10(%rbp,%r14,8), %rcx
// 128: 4e 8b 64 f5 f8                movq    -0x8(%rbp,%r14,8), %r12
// 12d: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 132: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000134:  R_X86_64_64  _JIT_OPERAND
// 13c: 0f b7 d2                      movzwl  %dx, %edx
// 13f: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 144: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 149: 4d 85 ed                      testq   %r13, %r13
// 14c: 74 45                         je      0x193 <_JIT_ENTRY+0x193>
// 14e: 49 8b 45 00                   movq    (%r13), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7e 6d                         jle     0x1c4 <_JIT_ENTRY+0x1c4>
// 157: 85 c0                         testl   %eax, %eax
// 159: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 15e: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 163: 0f 89 8b 00 00 00             jns     0x1f4 <_JIT_ENTRY+0x1f4>
// 169: e9 98 00 00 00                jmp     0x206 <_JIT_ENTRY+0x206>
// 16e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 173: 49 29 c4                      subq    %rax, %r12
// 176: 49 83 c4 b8                   addq    $-0x48, %r12
// 17a: 49 c1 ec 03                   shrq    $0x3, %r12
// 17e: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 182: 31 c0                         xorl    %eax, %eax
// 184: 48 83 c4 28                   addq    $0x28, %rsp
// 188: 5b                            popq    %rbx
// 189: 41 5c                         popq    %r12
// 18b: 41 5d                         popq    %r13
// 18d: 41 5e                         popq    %r14
// 18f: 41 5f                         popq    %r15
// 191: 5d                            popq    %rbp
// 192: c3                            retq
// 193: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 197: 8d 51 01                      leal    0x1(%rcx), %edx
// 19a: 48 f7 d1                      notq    %rcx
// 19d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019f:  R_X86_64_64  _JIT_OPERAND
// 1a7: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 1ac: 88 50 ff                      movb    %dl, -0x1(%rax)
// 1af: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1b4: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 7f 4d                         jg      0x20f <_JIT_ENTRY+0x20f>
// 1c2: eb 74                         jmp     0x238 <_JIT_ENTRY+0x238>
// 1c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NegativeRefcount
// 1d8: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 1dd: 4c 89 ea                      movq    %r13, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 8b 45 00                   movq    (%r13), %rax
// 1e6: 85 c0                         testl   %eax, %eax
// 1e8: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 1ed: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1f2: 78 12                         js      0x206 <_JIT_ENTRY+0x206>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 4d 00                   decq    (%r13)
// 204: 74 1a                         je      0x220 <_JIT_ENTRY+0x220>
// 206: 49 8b 04 24                   movq    (%r12), %rax
// 20a: 48 85 c0                      testq   %rax, %rax
// 20d: 7e 29                         jle     0x238 <_JIT_ENTRY+0x238>
// 20f: 4e 8d 34 f5 f0 ff ff ff       leaq    -0x10(,%r14,8), %r14
// 217: 49 01 ee                      addq    %rbp, %r14
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 79 4b                         jns     0x269 <_JIT_ENTRY+0x269>
// 21e: eb 6a                         jmp     0x28a <_JIT_ENTRY+0x28a>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_Dealloc
// 22a: 4c 89 ef                      movq    %r13, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: 49 8b 04 24                   movq    (%r12), %rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 7f d7                         jg      0x20f <_JIT_ENTRY+0x20f>
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 251: 4c 89 e2                      movq    %r12, %rdx
// 254: ff d0                         callq   *%rax
// 256: 49 8b 04 24                   movq    (%r12), %rax
// 25a: 4e 8d 34 f5 f0 ff ff ff       leaq    -0x10(,%r14,8), %r14
// 262: 49 01 ee                      addq    %rbp, %r14
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 e7                      movq    %r12, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_CONTINUE
// 294: 48 89 df                      movq    %rbx, %rdi
// 297: 4c 89 f6                      movq    %r14, %rsi
// 29a: 4c 89 fa                      movq    %r15, %rdx
// 29d: 48 83 c4 28                   addq    $0x28, %rsp
// 2a1: 5b                            popq    %rbx
// 2a2: 41 5c                         popq    %r12
// 2a4: 41 5d                         popq    %r13
// 2a6: 41 5e                         popq    %r14
// 2a8: 41 5f                         popq    %r15
// 2aa: 5d                            popq    %rbp
// 2ab: ff e0                         jmpq    *%rax
// 2ad: 
static const unsigned char _BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x4c, 0xf5, 0xf0, 0x4e, 0x8b, 0x64, 0xf5, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x45, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x6d, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x0f, 0x89, 0x8b, 0x00, 0x00, 0x00, 0xe9, 0x98, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x4d, 0xeb, 0x74, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x1a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x29, 0x4e, 0x8d, 0x34, 0xf5, 0xf0, 0xff, 0xff, 0xff, 0x49, 0x01, 0xee, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd7, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xf5, 0xf0, 0xff, 0xff, 0xff, 0x49, 0x01, 0xee, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE_code_holes[21] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _BUILD_STRINGplus_STORE_ATTR_SLOT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_ATTR_SLOT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 5d                         je      0x155 <_JIT_ENTRY+0x155>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 114: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 4c 63 f0                      movslq  %eax, %r14
// 122: 4a 8b 44 f3 f0                movq    -0x10(%rbx,%r14,8), %rax
// 127: 4e 8b 64 f3 f8                movq    -0x8(%rbx,%r14,8), %r12
// 12c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012e:  R_X86_64_64  _JIT_OPERAND
// 136: 0f b7 c9                      movzwl  %cx, %ecx
// 139: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// 13d: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 141: 4d 85 ed                      testq   %r13, %r13
// 144: 74 6c                         je      0x1b2 <_JIT_ENTRY+0x1b2>
// 146: 49 8b 45 00                   movq    (%r13), %rax
// 14a: 48 85 c0                      testq   %rax, %rax
// 14d: 7e 2b                         jle     0x17a <_JIT_ENTRY+0x17a>
// 14f: 85 c0                         testl   %eax, %eax
// 151: 79 4d                         jns     0x1a0 <_JIT_ENTRY+0x1a0>
// 153: eb 5d                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 155: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 83 c4 b8                   addq    $-0x48, %r12
// 161: 49 c1 ec 03                   shrq    $0x3, %r12
// 165: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: 48 83 c4 28                   addq    $0x28, %rsp
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: 5d                            popq    %rbp
// 179: c3                            retq
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1+0x39
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 193: 4c 89 ea                      movq    %r13, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 45 00                   movq    (%r13), %rax
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 78 12                         js      0x1b2 <_JIT_ENTRY+0x1b2>
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1aa: ff d0                         callq   *%rax
// 1ac: 49 ff 4d 00                   decq    (%r13)
// 1b0: 74 17                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 1b2: 49 8b 04 24                   movq    (%r12), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7e 26                         jle     0x1e1 <_JIT_ENTRY+0x1e1>
// 1bb: 4e 8d 34 f3                   leaq    (%rbx,%r14,8), %r14
// 1bf: 49 83 c6 f0                   addq    $-0x10, %r14
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 79 48                         jns     0x20f <_JIT_ENTRY+0x20f>
// 1c7: eb 67                         jmp     0x230 <_JIT_ENTRY+0x230>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 ef                      movq    %r13, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8b 04 24                   movq    (%r12), %rax
// 1dc: 48 85 c0                      testq   %rax, %rax
// 1df: 7f da                         jg      0x1bb <_JIT_ENTRY+0x1bb>
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_NegativeRefcount
// 1f5: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 1fa: 4c 89 e2                      movq    %r12, %rdx
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 8b 04 24                   movq    (%r12), %rax
// 203: 4e 8d 34 f3                   leaq    (%rbx,%r14,8), %r14
// 207: 49 83 c6 f0                   addq    $-0x10, %r14
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 78 21                         js      0x230 <_JIT_ENTRY+0x230>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 219: ff d0                         callq   *%rax
// 21b: 49 ff 0c 24                   decq    (%r12)
// 21f: 75 0f                         jne     0x230 <_JIT_ENTRY+0x230>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_Dealloc
// 22b: 4c 89 e7                      movq    %r12, %rdi
// 22e: ff d0                         callq   *%rax
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _JIT_CONTINUE
// 23a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 23f: 4c 89 f6                      movq    %r14, %rsi
// 242: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 247: 48 83 c4 28                   addq    $0x28, %rsp
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: 5d                            popq    %rbp
// 255: ff e0                         jmpq    *%rax
// 257: 
static const unsigned char _BUILD_STRINGplus_STORE_ATTR_SLOT_code_body[600] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4a, 0x8b, 0x44, 0xf3, 0xf0, 0x4e, 0x8b, 0x64, 0xf3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x6c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4d, 0xeb, 0x5d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x17, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x26, 0x4e, 0x8d, 0x34, 0xf3, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xda, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xf3, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_ATTR_SLOT_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_ATTR_SLOT_data_holes[1];

// _BUILD_STRINGplus_STORE_DEREF
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 74 60                         je      0x158 <_JIT_ENTRY+0x158>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 110: 48 f7 da                      negq    %rdx
// 113: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 118: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 11c: ba 01 00 00 00                movl    $0x1, %edx
// 121: 29 ca                         subl    %ecx, %edx
// 123: 48 63 ca                      movslq  %edx, %rcx
// 126: 4c 8d 24 ce                   leaq    (%rsi,%rcx,8), %r12
// 12a: 49 83 c4 f8                   addq    $-0x8, %r12
// 12e: 48 8b 4c ce f8                movq    -0x8(%rsi,%rcx,8), %rcx
// 133: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 138: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 13d: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 141: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 145: 4d 85 ff                      testq   %r15, %r15
// 148: 74 78                         je      0x1c2 <_JIT_ENTRY+0x1c2>
// 14a: 49 8b 07                      movq    (%r15), %rax
// 14d: 48 85 c0                      testq   %rax, %rax
// 150: 7e 2b                         jle     0x17d <_JIT_ENTRY+0x17d>
// 152: 85 c0                         testl   %eax, %eax
// 154: 79 4c                         jns     0x1a2 <_JIT_ENTRY+0x1a2>
// 156: eb 6a                         jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 158: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15d: 49 29 c4                      subq    %rax, %r12
// 160: 49 83 c4 b8                   addq    $-0x48, %r12
// 164: 49 c1 ec 03                   shrq    $0x3, %r12
// 168: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 16c: 31 c0                         xorl    %eax, %eax
// 16e: 48 83 c4 28                   addq    $0x28, %rsp
// 172: 5b                            popq    %rbx
// 173: 41 5c                         popq    %r12
// 175: 41 5d                         popq    %r13
// 177: 41 5e                         popq    %r14
// 179: 41 5f                         popq    %r15
// 17b: 5d                            popq    %rbp
// 17c: c3                            retq
// 17d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017f:  R_X86_64_64  .rodata.str1.1+0x39
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_NegativeRefcount
// 191: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 196: 4c 89 fa                      movq    %r15, %rdx
// 199: ff d0                         callq   *%rax
// 19b: 49 8b 07                      movq    (%r15), %rax
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 78 20                         js      0x1c2 <_JIT_ENTRY+0x1c2>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 ff 0f                      decq    (%r15)
// 1b1: 75 0f                         jne     0x1c2 <_JIT_ENTRY+0x1c2>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_Dealloc
// 1bd: 4c 89 ff                      movq    %r15, %rdi
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_CONTINUE
// 1cc: 48 89 df                      movq    %rbx, %rdi
// 1cf: 4c 89 e6                      movq    %r12, %rsi
// 1d2: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1d7: 48 83 c4 28                   addq    $0x28, %rsp
// 1db: 5b                            popq    %rbx
// 1dc: 41 5c                         popq    %r12
// 1de: 41 5d                         popq    %r13
// 1e0: 41 5e                         popq    %r14
// 1e2: 41 5f                         popq    %r15
// 1e4: 5d                            popq    %rbp
// 1e5: ff e0                         jmpq    *%rax
// 1e7: 
static const unsigned char _BUILD_STRINGplus_STORE_DEREF_code_body[488] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x74, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x24, 0xce, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x48, 0x89, 0x48, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x78, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6a, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_DEREF_code_holes[15] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_DEREF_data_holes[1];

// _BUILD_STRINGplus_STORE_FAST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 7c 24 20                movq    0x20(%rsp), %rdi
// f3: 48 85 ff                      testq   %rdi, %rdi
// f6: 74 5d                         je      0x155 <_JIT_ENTRY+0x155>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 110: 48 f7 da                      negq    %rdx
// 113: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 118: 48 89 3c 16                   movq    %rdi, (%rsi,%rdx)
// 11c: ba 01 00 00 00                movl    $0x1, %edx
// 121: 29 ca                         subl    %ecx, %edx
// 123: 48 63 ca                      movslq  %edx, %rcx
// 126: 4c 8d 24 ce                   leaq    (%rsi,%rcx,8), %r12
// 12a: 49 83 c4 f8                   addq    $-0x8, %r12
// 12e: 48 8b 4c ce f8                movq    -0x8(%rsi,%rcx,8), %rcx
// 133: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 138: 4c 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %r15
// 13d: 48 89 4c c3 48                movq    %rcx, 0x48(%rbx,%rax,8)
// 142: 4d 85 ff                      testq   %r15, %r15
// 145: 74 78                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 147: 49 8b 07                      movq    (%r15), %rax
// 14a: 48 85 c0                      testq   %rax, %rax
// 14d: 7e 2b                         jle     0x17a <_JIT_ENTRY+0x17a>
// 14f: 85 c0                         testl   %eax, %eax
// 151: 79 4c                         jns     0x19f <_JIT_ENTRY+0x19f>
// 153: eb 6a                         jmp     0x1bf <_JIT_ENTRY+0x1bf>
// 155: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 83 c4 b8                   addq    $-0x48, %r12
// 161: 49 c1 ec 03                   shrq    $0x3, %r12
// 165: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: 48 83 c4 28                   addq    $0x28, %rsp
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: 5d                            popq    %rbp
// 179: c3                            retq
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1+0x39
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 193: 4c 89 fa                      movq    %r15, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 78 20                         js      0x1bf <_JIT_ENTRY+0x1bf>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 ff 0f                      decq    (%r15)
// 1ae: 75 0f                         jne     0x1bf <_JIT_ENTRY+0x1bf>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_Dealloc
// 1ba: 4c 89 ff                      movq    %r15, %rdi
// 1bd: ff d0                         callq   *%rax
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 48 89 df                      movq    %rbx, %rdi
// 1cc: 4c 89 e6                      movq    %r12, %rsi
// 1cf: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 1d4: 48 83 c4 28                   addq    $0x28, %rsp
// 1d8: 5b                            popq    %rbx
// 1d9: 41 5c                         popq    %r12
// 1db: 41 5d                         popq    %r13
// 1dd: 41 5e                         popq    %r14
// 1df: 41 5f                         popq    %r15
// 1e1: 5d                            popq    %rbp
// 1e2: ff e0                         jmpq    *%rax
// 1e4: 
static const unsigned char _BUILD_STRINGplus_STORE_FAST_code_body[485] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x85, 0xff, 0x74, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x3c, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x4c, 0x8d, 0x24, 0xce, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x4c, 0xce, 0xf8, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x4c, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0x89, 0x4c, 0xc3, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x78, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6a, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_FAST_code_holes[15] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_FAST_data_holes[1];

// _BUILD_STRINGplus_STORE_GLOBAL
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// fb: 0f 84 bf 00 00 00             je      0x1c0 <_JIT_ENTRY+0x1c0>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_OPARG
// 10b: 0f b7 c8                      movzwl  %ax, %ecx
// 10e: 0f b7 c0                      movzwl  %ax, %eax
// 111: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 119: 48 f7 da                      negq    %rdx
// 11c: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 121: 49 89 34 17                   movq    %rsi, (%r15,%rdx)
// 125: ba 01 00 00 00                movl    $0x1, %edx
// 12a: 29 ca                         subl    %ecx, %edx
// 12c: 48 63 da                      movslq  %edx, %rbx
// 12f: 4d 8b 6c df f8                movq    -0x8(%r15,%rbx,8), %r13
// 134: 49 8b 0e                      movq    (%r14), %rcx
// 137: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 13b: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13f: 48 8b 74 c1 18                movq    0x18(%rcx,%rax,8), %rsi
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyDict_SetItem
// 14e: 4c 89 ea                      movq    %r13, %rdx
// 151: ff d0                         callq   *%rax
// 153: 89 c5                         movl    %eax, %ebp
// 155: 49 8b 45 00                   movq    (%r13), %rax
// 159: 48 85 c0                      testq   %rax, %rax
// 15c: 7e 12                         jle     0x170 <_JIT_ENTRY+0x170>
// 15e: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 162: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 166: 48 83 c3 f8                   addq    $-0x8, %rbx
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 79 34                         jns     0x1a2 <_JIT_ENTRY+0x1a2>
// 16e: eb 44                         jmp     0x1b4 <_JIT_ENTRY+0x1b4>
// 170: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000172:  R_X86_64_64  .rodata.str1.1
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_NegativeRefcount
// 184: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 189: 4c 89 ea                      movq    %r13, %rdx
// 18c: ff d0                         callq   *%rax
// 18e: 49 8b 45 00                   movq    (%r13), %rax
// 192: 4d 8d 24 df                   leaq    (%r15,%rbx,8), %r12
// 196: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 19a: 48 83 c3 f8                   addq    $-0x8, %rbx
// 19e: 85 c0                         testl   %eax, %eax
// 1a0: 78 12                         js      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 ff 4d 00                   decq    (%r13)
// 1b2: 74 2c                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1b4: 85 ed                         testl   %ebp, %ebp
// 1b6: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 1ba: 74 3b                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 1bc: 49 83 c4 f8                   addq    $-0x8, %r12
// 1c0: 4d 29 f4                      subq    %r14, %r12
// 1c3: 49 83 c4 b8                   addq    $-0x48, %r12
// 1c7: 49 c1 ec 03                   shrq    $0x3, %r12
// 1cb: 45 89 66 40                   movl    %r12d, 0x40(%r14)
// 1cf: 31 c0                         xorl    %eax, %eax
// 1d1: 48 83 c4 28                   addq    $0x28, %rsp
// 1d5: 5b                            popq    %rbx
// 1d6: 41 5c                         popq    %r12
// 1d8: 41 5d                         popq    %r13
// 1da: 41 5e                         popq    %r14
// 1dc: 41 5f                         popq    %r15
// 1de: 5d                            popq    %rbp
// 1df: c3                            retq
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_Dealloc
// 1ea: 4c 89 ef                      movq    %r13, %rdi
// 1ed: ff d0                         callq   *%rax
// 1ef: 85 ed                         testl   %ebp, %ebp
// 1f1: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 1f5: 75 c5                         jne     0x1bc <_JIT_ENTRY+0x1bc>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_CONTINUE
// 201: 4c 89 f7                      movq    %r14, %rdi
// 204: 4c 89 e6                      movq    %r12, %rsi
// 207: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 20c: 48 83 c4 28                   addq    $0x28, %rsp
// 210: 5b                            popq    %rbx
// 211: 41 5c                         popq    %r12
// 213: 41 5d                         popq    %r13
// 215: 41 5e                         popq    %r14
// 217: 41 5f                         popq    %r15
// 219: 5d                            popq    %rbp
// 21a: ff e0                         jmpq    *%rax
// 21c: 
static const unsigned char _BUILD_STRINGplus_STORE_GLOBAL_code_body[541] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x34, 0x17, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x8b, 0x6c, 0xdf, 0xf8, 0x49, 0x8b, 0x0e, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x74, 0xc1, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x44, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x24, 0xdf, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2c, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x3b, 0x49, 0x83, 0xc4, 0xf8, 0x4d, 0x29, 0xf4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x89, 0x66, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe3, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_GLOBAL_code_holes[16] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_GLOBAL_data_holes[1];

// _BUILD_STRINGplus_STORE_NAME
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 84 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 44 0f b7 f0                   movzwl  %ax, %r14d
// 77: 49 ff c6                      incq    %r14
// 7a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007c:  R_X86_64_64  .rodata.str1.1
// 84: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000086:  R_X86_64_64  _Py_NegativeRefcount
// 8e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: eb 0f                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// a0: 49 ff ce                      decq    %r14
// a3: 49 83 fe 01                   cmpq    $0x1, %r14
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// ad: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// b1: 49 8b 07                      movq    (%r15), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 15                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 fa                      movq    %r15, %rdx
// cb: ff d3                         callq   *%rbx
// cd: 49 8b 07                      movq    (%r15), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d5                      callq   *%r13
// d7: 49 ff 0f                      decq    (%r15)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 4c 89 ff                      movq    %r15, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// f2: 48 85 f6                      testq   %rsi, %rsi
// f5: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// fa: 0f 84 9e 01 00 00             je      0x29e <_JIT_ENTRY+0x29e>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _JIT_OPARG
// 10a: 0f b7 c8                      movzwl  %ax, %ecx
// 10d: 0f b7 c0                      movzwl  %ax, %eax
// 110: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 118: 48 f7 da                      negq    %rdx
// 11b: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 120: 49 89 34 16                   movq    %rsi, (%r14,%rdx)
// 124: ba 01 00 00 00                movl    $0x1, %edx
// 129: 29 ca                         subl    %ecx, %edx
// 12b: 4c 63 fa                      movslq  %edx, %r15
// 12e: 4f 8b 64 fe f8                movq    -0x8(%r14,%r15,8), %r12
// 133: 48 8b 0b                      movq    (%rbx), %rcx
// 136: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 13a: 48 8b 49 20                   movq    0x20(%rcx), %rcx
// 13e: 48 8b 4c c1 18                movq    0x18(%rcx,%rax,8), %rcx
// 143: 48 85 ff                      testq   %rdi, %rdi
// 146: 74 1c                         je      0x164 <_JIT_ENTRY+0x164>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  PyDict_Type
// 152: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 156: 74 51                         je      0x1a9 <_JIT_ENTRY+0x1a9>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  PyObject_SetItem
// 162: eb 4f                         jmp     0x1b3 <_JIT_ENTRY+0x1b3>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  PyExc_SystemError
// 16e: 48 8b 30                      movq    (%rax), %rsi
// 171: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000173:  R_X86_64_64  .rodata.str1.1+0x39
// 17b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000017d:  R_X86_64_64  _PyErr_Format
// 185: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18a: 31 c0                         xorl    %eax, %eax
// 18c: 41 ff d0                      callq   *%r8
// 18f: 49 8b 04 24                   movq    (%r12), %rax
// 193: 48 85 c0                      testq   %rax, %rax
// 196: 0f 8e 9a 00 00 00             jle     0x236 <_JIT_ENTRY+0x236>
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 0f 89 b8 00 00 00             jns     0x25c <_JIT_ENTRY+0x25c>
// 1a4: e9 ed 00 00 00                jmp     0x296 <_JIT_ENTRY+0x296>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyDict_SetItem
// 1b3: 48 89 ce                      movq    %rcx, %rsi
// 1b6: 4c 89 e2                      movq    %r12, %rdx
// 1b9: ff d0                         callq   *%rax
// 1bb: 89 c5                         movl    %eax, %ebp
// 1bd: 49 8b 04 24                   movq    (%r12), %rax
// 1c1: 48 85 c0                      testq   %rax, %rax
// 1c4: 7e 06                         jle     0x1cc <_JIT_ENTRY+0x1cc>
// 1c6: 85 c0                         testl   %eax, %eax
// 1c8: 79 28                         jns     0x1f2 <_JIT_ENTRY+0x1f2>
// 1ca: eb 38                         jmp     0x204 <_JIT_ENTRY+0x204>
// 1cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_NegativeRefcount
// 1e0: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 1e5: 4c 89 e2                      movq    %r12, %rdx
// 1e8: ff d0                         callq   *%rax
// 1ea: 49 8b 04 24                   movq    (%r12), %rax
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 78 12                         js      0x204 <_JIT_ENTRY+0x204>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 ff 0c 24                   decq    (%r12)
// 202: 74 7b                         je      0x27f <_JIT_ENTRY+0x27f>
// 204: 85 ed                         testl   %ebp, %ebp
// 206: 0f 85 8a 00 00 00             jne     0x296 <_JIT_ENTRY+0x296>
// 20c: 4b 8d 34 fe                   leaq    (%r14,%r15,8), %rsi
// 210: 48 83 c6 f8                   addq    $-0x8, %rsi
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_CONTINUE
// 21e: 48 89 df                      movq    %rbx, %rdi
// 221: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 226: 48 83 c4 28                   addq    $0x28, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000238:  R_X86_64_64  .rodata.str1.1
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_NegativeRefcount
// 24a: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 24f: 4c 89 e2                      movq    %r12, %rdx
// 252: ff d0                         callq   *%rax
// 254: 49 8b 04 24                   movq    (%r12), %rax
// 258: 85 c0                         testl   %eax, %eax
// 25a: 78 3a                         js      0x296 <_JIT_ENTRY+0x296>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 266: ff d0                         callq   *%rax
// 268: 49 ff 0c 24                   decq    (%r12)
// 26c: 75 28                         jne     0x296 <_JIT_ENTRY+0x296>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_Dealloc
// 278: 4c 89 e7                      movq    %r12, %rdi
// 27b: ff d0                         callq   *%rax
// 27d: eb 17                         jmp     0x296 <_JIT_ENTRY+0x296>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 e7                      movq    %r12, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 85 ed                         testl   %ebp, %ebp
// 290: 0f 84 76 ff ff ff             je      0x20c <_JIT_ENTRY+0x20c>
// 296: 4f 8d 24 fe                   leaq    (%r14,%r15,8), %r12
// 29a: 49 83 c4 f8                   addq    $-0x8, %r12
// 29e: 49 29 dc                      subq    %rbx, %r12
// 2a1: 49 83 c4 b8                   addq    $-0x48, %r12
// 2a5: 49 c1 ec 03                   shrq    $0x3, %r12
// 2a9: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ad: 31 c0                         xorl    %eax, %eax
// 2af: 48 83 c4 28                   addq    $0x28, %rsp
// 2b3: 5b                            popq    %rbx
// 2b4: 41 5c                         popq    %r12
// 2b6: 41 5d                         popq    %r13
// 2b8: 41 5e                         popq    %r14
// 2ba: 41 5f                         popq    %r15
// 2bc: 5d                            popq    %rbp
// 2bd: c3                            retq
// 2be: 
static const unsigned char _BUILD_STRINGplus_STORE_NAME_code_body[703] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0f, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x46, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0x9e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x34, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x4c, 0x63, 0xfa, 0x4f, 0x8b, 0x64, 0xfe, 0xf8, 0x48, 0x8b, 0x0b, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x49, 0x20, 0x48, 0x8b, 0x4c, 0xc1, 0x18, 0x48, 0x85, 0xff, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x74, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9a, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb8, 0x00, 0x00, 0x00, 0xe9, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7b, 0x85, 0xed, 0x0f, 0x85, 0x8a, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x34, 0xfe, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x84, 0x76, 0xff, 0xff, 0xff, 0x4f, 0x8d, 0x24, 0xfe, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_STORE_NAME_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_NAME_data_holes[1];

// _BUILD_STRINGplus_STORE_SLICE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f5                      movq    %rsi, %r13
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c5                      subq    %rax, %r13
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 ee                      movq    %r13, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 74 c5 00                movq    (%r13,%rax,8), %r14
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 07                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b9: 85 c0                         testl   %eax, %eax
// bb: 78 e3                         js      0xa0 <_JIT_ENTRY+0xa0>
// bd: eb 16                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// bf: 90                            nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 d8 01 00 00             je      0x2d4 <_JIT_ENTRY+0x2d4>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 49 8b 74 df f8                movq    -0x8(%r15,%rbx,8), %rsi
// 12b: 49 8b 7c df f0                movq    -0x10(%r15,%rbx,8), %rdi
// 130: 4d 8b 6c df e0                movq    -0x20(%r15,%rbx,8), %r13
// 135: 4d 8b 64 df e8                movq    -0x18(%r15,%rbx,8), %r12
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 144: ff d0                         callq   *%rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 74 2a                         je      0x175 <_JIT_ENTRY+0x175>
// 14b: 48 89 c5                      movq    %rax, %rbp
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  PyObject_SetItem
// 158: 4c 89 e7                      movq    %r12, %rdi
// 15b: 48 89 ee                      movq    %rbp, %rsi
// 15e: 4c 89 ea                      movq    %r13, %rdx
// 161: ff d0                         callq   *%rax
// 163: 41 89 c6                      movl    %eax, %r14d
// 166: 48 8b 45 00                   movq    (%rbp), %rax
// 16a: 48 85 c0                      testq   %rax, %rax
// 16d: 7e 13                         jle     0x182 <_JIT_ENTRY+0x182>
// 16f: 85 c0                         testl   %eax, %eax
// 171: 79 35                         jns     0x1a8 <_JIT_ENTRY+0x1a8>
// 173: eb 54                         jmp     0x1c9 <_JIT_ENTRY+0x1c9>
// 175: 31 ed                         xorl    %ebp, %ebp
// 177: 49 8b 45 00                   movq    (%r13), %rax
// 17b: 48 85 c0                      testq   %rax, %rax
// 17e: 7f 7b                         jg      0x1fb <_JIT_ENTRY+0x1fb>
// 180: eb 57                         jmp     0x1d9 <_JIT_ENTRY+0x1d9>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 19b: 48 89 ea                      movq    %rbp, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 48 8b 45 00                   movq    (%rbp), %rax
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 21                         js      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 ff 4d 00                   decq    (%rbp)
// 1b8: 75 0f                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 48 89 ef                      movq    %rbp, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 45 85 f6                      testl   %r14d, %r14d
// 1cc: 40 0f 94 c5                   sete    %bpl
// 1d0: 49 8b 45 00                   movq    (%r13), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 7f 22                         jg      0x1fb <_JIT_ENTRY+0x1fb>
// 1d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001db:  R_X86_64_64  .rodata.str1.1
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_NegativeRefcount
// 1ed: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 1f2: 4c 89 ea                      movq    %r13, %rdx
// 1f5: ff d0                         callq   *%rax
// 1f7: 49 8b 45 00                   movq    (%r13), %rax
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 78 12                         js      0x211 <_JIT_ENTRY+0x211>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 49 ff 4d 00                   decq    (%r13)
// 20f: 74 1b                         je      0x22c <_JIT_ENTRY+0x22c>
// 211: 49 8b 04 24                   movq    (%r12), %rax
// 215: 48 85 c0                      testq   %rax, %rax
// 218: 7e 2a                         jle     0x244 <_JIT_ENTRY+0x244>
// 21a: 4d 8d 2c df                   leaq    (%r15,%rbx,8), %r13
// 21e: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 222: 48 83 c3 e0                   addq    $-0x20, %rbx
// 226: 85 c0                         testl   %eax, %eax
// 228: 79 4c                         jns     0x276 <_JIT_ENTRY+0x276>
// 22a: eb 5c                         jmp     0x288 <_JIT_ENTRY+0x288>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_Dealloc
// 236: 4c 89 ef                      movq    %r13, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 49 8b 04 24                   movq    (%r12), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7f d6                         jg      0x21a <_JIT_ENTRY+0x21a>
// 244: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_NegativeRefcount
// 258: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 25d: 4c 89 e2                      movq    %r12, %rdx
// 260: ff d0                         callq   *%rax
// 262: 49 8b 04 24                   movq    (%r12), %rax
// 266: 4d 8d 2c df                   leaq    (%r15,%rbx,8), %r13
// 26a: 49 8d 1c df                   leaq    (%r15,%rbx,8), %rbx
// 26e: 48 83 c3 e0                   addq    $-0x20, %rbx
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 12                         js      0x288 <_JIT_ENTRY+0x288>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 0c 24                   decq    (%r12)
// 286: 74 30                         je      0x2b8 <_JIT_ENTRY+0x2b8>
// 288: 40 84 ed                      testb   %bpl, %bpl
// 28b: 4c 0f 45 eb                   cmovneq %rbx, %r13
// 28f: 74 3f                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_CONTINUE
// 29b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2a0: 4c 89 ee                      movq    %r13, %rsi
// 2a3: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 40 84 ed                      testb   %bpl, %bpl
// 2ca: 4c 0f 45 eb                   cmovneq %rbx, %r13
// 2ce: 75 c1                         jne     0x291 <_JIT_ENTRY+0x291>
// 2d0: 49 83 c5 e0                   addq    $-0x20, %r13
// 2d4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2d9: 49 29 c5                      subq    %rax, %r13
// 2dc: 49 83 c5 b8                   addq    $-0x48, %r13
// 2e0: 49 c1 ed 03                   shrq    $0x3, %r13
// 2e4: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: 48 83 c4 28                   addq    $0x28, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: c3                            retq
// 2f9: 
static const unsigned char _BUILD_STRINGplus_STORE_SLICE_code_body[762] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf5, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x74, 0xc5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x16, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xd8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x49, 0x8b, 0x74, 0xdf, 0xf8, 0x49, 0x8b, 0x7c, 0xdf, 0xf0, 0x4d, 0x8b, 0x6c, 0xdf, 0xe0, 0x4d, 0x8b, 0x64, 0xdf, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x79, 0x35, 0xeb, 0x54, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x7b, 0xeb, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x1b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x4d, 0x8d, 0x2c, 0xdf, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xe0, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xd6, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xdf, 0x49, 0x8d, 0x1c, 0xdf, 0x48, 0x83, 0xc3, 0xe0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x30, 0x40, 0x84, 0xed, 0x4c, 0x0f, 0x45, 0xeb, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x4c, 0x0f, 0x45, 0xeb, 0x75, 0xc1, 0x49, 0x83, 0xc5, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_STORE_SLICE_code_holes[25] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_SLICE_data_holes[1];

// _BUILD_STRINGplus_STORE_SUBSCR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 49 89 c5                      movq    %rax, %r13
// 5a: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 60: 0f 8e 81 00 00 00             jle     0xe7 <_JIT_ENTRY+0xe7>
// 66: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 0f b7 d8                      movzwl  %ax, %ebx
// 73: 48 ff c3                      incq    %rbx
// 76: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000078:  R_X86_64_64  .rodata.str1.1
// 80: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000082:  R_X86_64_64  _Py_NegativeRefcount
// 8a: eb 0d                         jmp     0x99 <_JIT_ENTRY+0x99>
// 8c: 0f 1f 40 00                   nopl    (%rax)
// 90: 48 ff cb                      decq    %rbx
// 93: 48 83 fb 01                   cmpq    $0x1, %rbx
// 97: 7e 4e                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 99: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 9c: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// a0: 49 8b 06                      movq    (%r14), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7e 08                         jle     0xb0 <_JIT_ENTRY+0xb0>
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 e4                         js      0x90 <_JIT_ENTRY+0x90>
// ac: eb 17                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// ae: 66 90                         nop
// b0: 48 89 ef                      movq    %rbp, %rdi
// b3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// b8: 4c 89 f2                      movq    %r14, %rdx
// bb: 41 ff d7                      callq   *%r15
// be: 49 8b 06                      movq    (%r14), %rax
// c1: 85 c0                         testl   %eax, %eax
// c3: 78 cb                         js      0x90 <_JIT_ENTRY+0x90>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cf: ff d0                         callq   *%rax
// d1: 49 ff 0e                      decq    (%r14)
// d4: 75 ba                         jne     0x90 <_JIT_ENTRY+0x90>
// d6: 4c 89 f7                      movq    %r14, %rdi
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_Dealloc
// e3: ff d0                         callq   *%rax
// e5: eb a9                         jmp     0x90 <_JIT_ENTRY+0x90>
// e7: 4d 85 ed                      testq   %r13, %r13
// ea: 0f 84 78 01 00 00             je      0x268 <_JIT_ENTRY+0x268>
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _JIT_OPARG
// fa: 0f b7 c8                      movzwl  %ax, %ecx
// fd: 0f b7 c0                      movzwl  %ax, %eax
// 100: 48 c1 e0 03                   shlq    $0x3, %rax
// 104: 48 f7 d8                      negq    %rax
// 107: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 10c: 4c 89 2c 03                   movq    %r13, (%rbx,%rax)
// 110: b8 01 00 00 00                movl    $0x1, %eax
// 115: 29 c8                         subl    %ecx, %eax
// 117: 48 63 e8                      movslq  %eax, %rbp
// 11a: 4c 8b 6c eb f8                movq    -0x8(%rbx,%rbp,8), %r13
// 11f: 4c 8b 74 eb e8                movq    -0x18(%rbx,%rbp,8), %r14
// 124: 4c 8b 64 eb f0                movq    -0x10(%rbx,%rbp,8), %r12
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  PyObject_SetItem
// 133: 4c 89 e7                      movq    %r12, %rdi
// 136: 4c 89 ee                      movq    %r13, %rsi
// 139: 4c 89 f2                      movq    %r14, %rdx
// 13c: ff d0                         callq   *%rax
// 13e: 41 89 c7                      movl    %eax, %r15d
// 141: 49 8b 06                      movq    (%r14), %rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 7e 06                         jle     0x14f <_JIT_ENTRY+0x14f>
// 149: 85 c0                         testl   %eax, %eax
// 14b: 79 27                         jns     0x174 <_JIT_ENTRY+0x174>
// 14d: eb 36                         jmp     0x185 <_JIT_ENTRY+0x185>
// 14f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000151:  R_X86_64_64  .rodata.str1.1
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_NegativeRefcount
// 163: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 168: 4c 89 f2                      movq    %r14, %rdx
// 16b: ff d0                         callq   *%rax
// 16d: 49 8b 06                      movq    (%r14), %rax
// 170: 85 c0                         testl   %eax, %eax
// 172: 78 11                         js      0x185 <_JIT_ENTRY+0x185>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17e: ff d0                         callq   *%rax
// 180: 49 ff 0e                      decq    (%r14)
// 183: 74 0f                         je      0x194 <_JIT_ENTRY+0x194>
// 185: 49 8b 04 24                   movq    (%r12), %rax
// 189: 48 85 c0                      testq   %rax, %rax
// 18c: 7e 1e                         jle     0x1ac <_JIT_ENTRY+0x1ac>
// 18e: 85 c0                         testl   %eax, %eax
// 190: 79 40                         jns     0x1d2 <_JIT_ENTRY+0x1d2>
// 192: eb 50                         jmp     0x1e4 <_JIT_ENTRY+0x1e4>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 4c 89 f7                      movq    %r14, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7f e2                         jg      0x18e <_JIT_ENTRY+0x18e>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 04 24                   movq    (%r12), %rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 12                         js      0x1e4 <_JIT_ENTRY+0x1e4>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 74 1b                         je      0x1ff <_JIT_ENTRY+0x1ff>
// 1e4: 49 8b 45 00                   movq    (%r13), %rax
// 1e8: 48 85 c0                      testq   %rax, %rax
// 1eb: 7e 2a                         jle     0x217 <_JIT_ENTRY+0x217>
// 1ed: 4c 8d 24 eb                   leaq    (%rbx,%rbp,8), %r12
// 1f1: 48 8d 1c eb                   leaq    (%rbx,%rbp,8), %rbx
// 1f5: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 79 4c                         jns     0x249 <_JIT_ENTRY+0x249>
// 1fd: eb 5c                         jmp     0x25b <_JIT_ENTRY+0x25b>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 48 85 c0                      testq   %rax, %rax
// 215: 7f d6                         jg      0x1ed <_JIT_ENTRY+0x1ed>
// 217: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000219:  R_X86_64_64  .rodata.str1.1
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_NegativeRefcount
// 22b: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 230: 4c 89 ea                      movq    %r13, %rdx
// 233: ff d0                         callq   *%rax
// 235: 49 8b 45 00                   movq    (%r13), %rax
// 239: 4c 8d 24 eb                   leaq    (%rbx,%rbp,8), %r12
// 23d: 48 8d 1c eb                   leaq    (%rbx,%rbp,8), %rbx
// 241: 48 83 c3 e8                   addq    $-0x18, %rbx
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 12                         js      0x25b <_JIT_ENTRY+0x25b>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 4d 00                   decq    (%r13)
// 259: 74 31                         je      0x28c <_JIT_ENTRY+0x28c>
// 25b: 45 85 ff                      testl   %r15d, %r15d
// 25e: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 262: 74 40                         je      0x2a4 <_JIT_ENTRY+0x2a4>
// 264: 49 83 c4 e8                   addq    $-0x18, %r12
// 268: 48 8b 04 24                   movq    (%rsp), %rax
// 26c: 49 29 c4                      subq    %rax, %r12
// 26f: 49 83 c4 b8                   addq    $-0x48, %r12
// 273: 49 c1 ec 03                   shrq    $0x3, %r12
// 277: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 27b: 31 c0                         xorl    %eax, %eax
// 27d: 48 83 c4 18                   addq    $0x18, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: c3                            retq
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: 4c 89 ef                      movq    %r13, %rdi
// 299: ff d0                         callq   *%rax
// 29b: 45 85 ff                      testl   %r15d, %r15d
// 29e: 4c 0f 44 e3                   cmoveq  %rbx, %r12
// 2a2: 75 c0                         jne     0x264 <_JIT_ENTRY+0x264>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_CONTINUE
// 2ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2b2: 4c 89 e6                      movq    %r12, %rsi
// 2b5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ba: 48 83 c4 18                   addq    $0x18, %rsp
// 2be: 5b                            popq    %rbx
// 2bf: 41 5c                         popq    %r12
// 2c1: 41 5d                         popq    %r13
// 2c3: 41 5e                         popq    %r14
// 2c5: 41 5f                         popq    %r15
// 2c7: 5d                            popq    %rbp
// 2c8: ff e0                         jmpq    *%rax
// 2ca: 
static const unsigned char _BUILD_STRINGplus_STORE_SUBSCR_code_body[715] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0d, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x4e, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xba, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa9, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0x2c, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xe8, 0x4c, 0x8b, 0x6c, 0xeb, 0xf8, 0x4c, 0x8b, 0x74, 0xeb, 0xe8, 0x4c, 0x8b, 0x64, 0xeb, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x4c, 0x8d, 0x24, 0xeb, 0x48, 0x8d, 0x1c, 0xeb, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd6, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4c, 0x8d, 0x24, 0xeb, 0x48, 0x8d, 0x1c, 0xeb, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x31, 0x45, 0x85, 0xff, 0x4c, 0x0f, 0x44, 0xe3, 0x74, 0x40, 0x49, 0x83, 0xc4, 0xe8, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x4c, 0x0f, 0x44, 0xe3, 0x75, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_SUBSCR_code_holes[24] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_SUBSCR_data_holes[1];

// _BUILD_STRINGplus_STORE_SUBSCR_DICT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_SUBSCR_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c7                      subq    %rax, %r15
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 fe                      movq    %r15, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d4                      callq   *%r12
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 09 01 00 00             je      0x205 <_JIT_ENTRY+0x205>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: ba 01 00 00 00                movl    $0x1, %edx
// 126: 29 ca                         subl    %ecx, %edx
// 128: 48 63 da                      movslq  %edx, %rbx
// 12b: 4d 8d 3c de                   leaq    (%r14,%rbx,8), %r15
// 12f: 4d 8b 6c de f0                movq    -0x10(%r14,%rbx,8), %r13
// 134: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000136:  R_X86_64_64  PyDict_Type
// 13e: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 142: 74 32                         je      0x176 <_JIT_ENTRY+0x176>
// 144: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 149: 49 29 c7                      subq    %rax, %r15
// 14c: 49 83 c7 b8                   addq    $-0x48, %r15
// 150: 49 c1 ef 03                   shrq    $0x3, %r15
// 154: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 158: 48 8b 00                      movq    (%rax), %rax
// 15b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015d:  R_X86_64_64  _JIT_TARGET
// 165: 89 c9                         movl    %ecx, %ecx
// 167: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 16b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 171: e9 a5 00 00 00                jmp     0x21b <_JIT_ENTRY+0x21b>
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  _JIT_OPARG
// 180: 0f b7 c9                      movzwl  %cx, %ecx
// 183: 29 c8                         subl    %ecx, %eax
// 185: 48 98                         cltq
// 187: 49 8b 54 c6 e8                movq    -0x18(%r14,%rax,8), %rdx
// 18c: 49 8b 74 c6 f8                movq    -0x8(%r14,%rax,8), %rsi
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _PyDict_SetItem_Take2
// 19b: 4c 89 ef                      movq    %r13, %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 89 c5                         movl    %eax, %ebp
// 1a2: 49 8b 45 00                   movq    (%r13), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 7e 0e                         jle     0x1b9 <_JIT_ENTRY+0x1b9>
// 1ab: 49 8d 1c de                   leaq    (%r14,%rbx,8), %rbx
// 1af: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 79 30                         jns     0x1e7 <_JIT_ENTRY+0x1e7>
// 1b7: eb 40                         jmp     0x1f9 <_JIT_ENTRY+0x1f9>
// 1b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_NegativeRefcount
// 1cd: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 1d2: 4c 89 ea                      movq    %r13, %rdx
// 1d5: ff d0                         callq   *%rax
// 1d7: 49 8b 45 00                   movq    (%r13), %rax
// 1db: 49 8d 1c de                   leaq    (%r14,%rbx,8), %rbx
// 1df: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 12                         js      0x1f9 <_JIT_ENTRY+0x1f9>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f1: ff d0                         callq   *%rax
// 1f3: 49 ff 4d 00                   decq    (%r13)
// 1f7: 74 31                         je      0x22a <_JIT_ENTRY+0x22a>
// 1f9: 85 ed                         testl   %ebp, %ebp
// 1fb: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 1ff: 74 40                         je      0x241 <_JIT_ENTRY+0x241>
// 201: 49 83 c7 e8                   addq    $-0x18, %r15
// 205: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 20a: 49 29 c7                      subq    %rax, %r15
// 20d: 49 83 c7 b8                   addq    $-0x48, %r15
// 211: 49 c1 ef 03                   shrq    $0x3, %r15
// 215: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 219: 31 c0                         xorl    %eax, %eax
// 21b: 48 83 c4 28                   addq    $0x28, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: c3                            retq
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 ef                      movq    %r13, %rdi
// 237: ff d0                         callq   *%rax
// 239: 85 ed                         testl   %ebp, %ebp
// 23b: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 23f: 75 c0                         jne     0x201 <_JIT_ENTRY+0x201>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_CONTINUE
// 24b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 250: 4c 89 fe                      movq    %r15, %rsi
// 253: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 258: 48 83 c4 28                   addq    $0x28, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 
static const unsigned char _BUILD_STRINGplus_STORE_SUBSCR_DICT_code_body[617] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd4, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xda, 0x4d, 0x8d, 0x3c, 0xde, 0x4d, 0x8b, 0x6c, 0xde, 0xf0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x74, 0x32, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8b, 0x54, 0xc6, 0xe8, 0x49, 0x8b, 0x74, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0e, 0x49, 0x8d, 0x1c, 0xde, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x79, 0x30, 0xeb, 0x40, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x1c, 0xde, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x31, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x74, 0x40, 0x49, 0x83, 0xc7, 0xe8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x75, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_STORE_SUBSCR_DICT_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_SUBSCR_DICT_data_holes[1];

// _BUILD_STRINGplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_STORE_SUBSCR_LIST_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 b1 01 00 00             je      0x2ad <_JIT_ENTRY+0x2ad>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 118: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4e 8b 6c f3 f8                movq    -0x8(%rbx,%r14,8), %r13
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyLong_Type
// 135: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 139: 0f 85 3c 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 13f: 4e 8b 64 f3 f0                movq    -0x10(%rbx,%r14,8), %r12
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyList_Type
// 14e: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 153: 0f 85 22 01 00 00             jne     0x27b <_JIT_ENTRY+0x27b>
// 159: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 15e: 0f 87 17 01 00 00             ja      0x27b <_JIT_ENTRY+0x27b>
// 164: 41 8b 45 18                   movl    0x18(%r13), %eax
// 168: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 16d: 0f 8e 08 01 00 00             jle     0x27b <_JIT_ENTRY+0x27b>
// 173: 4a 8b 4c f3 e8                movq    -0x18(%rbx,%r14,8), %rcx
// 178: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 17d: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 181: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 185: 48 8b 45 00                   movq    (%rbp), %rax
// 189: 48 85 c0                      testq   %rax, %rax
// 18c: 7f 22                         jg      0x1b0 <_JIT_ENTRY+0x1b0>
// 18e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000190:  R_X86_64_64  .rodata.str1.1
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_NegativeRefcount
// 1a2: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 1a7: 48 89 ea                      movq    %rbp, %rdx
// 1aa: ff d0                         callq   *%rax
// 1ac: 48 8b 45 00                   movq    (%rbp), %rax
// 1b0: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 18                         js      0x1d6 <_JIT_ENTRY+0x1d6>
// 1be: 41 ff d7                      callq   *%r15
// 1c1: 48 ff 4d 00                   decq    (%rbp)
// 1c5: 75 0f                         jne     0x1d6 <_JIT_ENTRY+0x1d6>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_Dealloc
// 1d1: 48 89 ef                      movq    %rbp, %rdi
// 1d4: ff d0                         callq   *%rax
// 1d6: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1db: 75 28                         jne     0x205 <_JIT_ENTRY+0x205>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  PyInterpreterState_Get
// 1e7: ff d0                         callq   *%rax
// 1e9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f0: 49 ff 4d 00                   decq    (%r13)
// 1f4: 75 0f                         jne     0x205 <_JIT_ENTRY+0x205>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  PyObject_Free
// 200: 4c 89 ef                      movq    %r13, %rdi
// 203: ff d0                         callq   *%rax
// 205: 49 8b 04 24                   movq    (%r12), %rax
// 209: 48 85 c0                      testq   %rax, %rax
// 20c: 7f 22                         jg      0x230 <_JIT_ENTRY+0x230>
// 20e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000210:  R_X86_64_64  .rodata.str1.1
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_NegativeRefcount
// 222: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 227: 4c 89 e2                      movq    %r12, %rdx
// 22a: ff d0                         callq   *%rax
// 22c: 49 8b 04 24                   movq    (%r12), %rax
// 230: 4e 8d 34 f3                   leaq    (%rbx,%r14,8), %r14
// 234: 49 83 c6 e8                   addq    $-0x18, %r14
// 238: 85 c0                         testl   %eax, %eax
// 23a: 78 18                         js      0x254 <_JIT_ENTRY+0x254>
// 23c: 41 ff d7                      callq   *%r15
// 23f: 49 ff 0c 24                   decq    (%r12)
// 243: 75 0f                         jne     0x254 <_JIT_ENTRY+0x254>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_Dealloc
// 24f: 4c 89 e7                      movq    %r12, %rdi
// 252: ff d0                         callq   *%rax
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 263: 4c 89 f6                      movq    %r14, %rsi
// 266: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 26b: 48 83 c4 28                   addq    $0x28, %rsp
// 26f: 5b                            popq    %rbx
// 270: 41 5c                         popq    %r12
// 272: 41 5d                         popq    %r13
// 274: 41 5e                         popq    %r14
// 276: 41 5f                         popq    %r15
// 278: 5d                            popq    %rbp
// 279: ff e0                         jmpq    *%rax
// 27b: 4a 8d 04 f3                   leaq    (%rbx,%r14,8), %rax
// 27f: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 284: 48 29 c8                      subq    %rcx, %rax
// 287: 48 83 c0 b8                   addq    $-0x48, %rax
// 28b: 48 c1 e8 03                   shrq    $0x3, %rax
// 28f: 89 41 40                      movl    %eax, 0x40(%rcx)
// 292: 48 8b 01                      movq    (%rcx), %rax
// 295: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000297:  R_X86_64_64  _JIT_TARGET
// 29f: 89 c9                         movl    %ecx, %ecx
// 2a1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2a5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2ab: eb 16                         jmp     0x2c3 <_JIT_ENTRY+0x2c3>
// 2ad: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2b2: 49 29 c4                      subq    %rax, %r12
// 2b5: 49 83 c4 b8                   addq    $-0x48, %r12
// 2b9: 49 c1 ec 03                   shrq    $0x3, %r12
// 2bd: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 2c1: 31 c0                         xorl    %eax, %eax
// 2c3: 48 83 c4 28                   addq    $0x28, %rsp
// 2c7: 5b                            popq    %rbx
// 2c8: 41 5c                         popq    %r12
// 2ca: 41 5d                         popq    %r13
// 2cc: 41 5e                         popq    %r14
// 2ce: 41 5f                         popq    %r15
// 2d0: 5d                            popq    %rbp
// 2d1: c3                            retq
// 2d2: 
static const unsigned char _BUILD_STRINGplus_STORE_SUBSCR_LIST_INT_code_body[723] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xb1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4e, 0x8b, 0x6c, 0xf3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x3c, 0x01, 0x00, 0x00, 0x4e, 0x8b, 0x64, 0xf3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x22, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x17, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x08, 0x01, 0x00, 0x00, 0x4a, 0x8b, 0x4c, 0xf3, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4e, 0x8d, 0x34, 0xf3, 0x49, 0x83, 0xc6, 0xe8, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4a, 0x8d, 0x04, 0xf3, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_STORE_SUBSCR_LIST_INT_code_holes[23] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _BUILD_STRINGplus_SWAP
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_SWAP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 49 89 f4                      movq    %rsi, %r12
// 32: 49 29 c4                      subq    %rax, %r12
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _PyUnicode_JoinArray
// 3f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000041:  R_X86_64_64  _PyRuntime
// 49: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 50: 4c 89 e6                      movq    %r12, %rsi
// 53: ff d0                         callq   *%rax
// 55: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 5a: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 60: 0f 8e 7e 00 00 00             jle     0xe4 <_JIT_ENTRY+0xe4>
// 66: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000068:  R_X86_64_64  _JIT_OPARG
// 70: 0f b7 d8                      movzwl  %ax, %ebx
// 73: 48 ff c3                      incq    %rbx
// 76: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000078:  R_X86_64_64  _Py_NegativeRefcount
// 80: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000082:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 8a: eb 0d                         jmp     0x99 <_JIT_ENTRY+0x99>
// 8c: 0f 1f 40 00                   nopl    (%rax)
// 90: 48 ff cb                      decq    %rbx
// 93: 48 83 fb 01                   cmpq    $0x1, %rbx
// 97: 7e 4b                         jle     0xe4 <_JIT_ENTRY+0xe4>
// 99: 8d 43 fe                      leal    -0x2(%rbx), %eax
// 9c: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// a0: 49 8b 06                      movq    (%r14), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7e 08                         jle     0xb0 <_JIT_ENTRY+0xb0>
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 e4                         js      0x90 <_JIT_ENTRY+0x90>
// ac: eb 1e                         jmp     0xcc <_JIT_ENTRY+0xcc>
// ae: 66 90                         nop
// b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// bf: 4c 89 f2                      movq    %r14, %rdx
// c2: 41 ff d5                      callq   *%r13
// c5: 49 8b 06                      movq    (%r14), %rax
// c8: 85 c0                         testl   %eax, %eax
// ca: 78 c4                         js      0x90 <_JIT_ENTRY+0x90>
// cc: ff d5                         callq   *%rbp
// ce: 49 ff 0e                      decq    (%r14)
// d1: 75 bd                         jne     0x90 <_JIT_ENTRY+0x90>
// d3: 4c 89 f7                      movq    %r14, %rdi
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _Py_Dealloc
// e0: ff d0                         callq   *%rax
// e2: eb ac                         jmp     0x90 <_JIT_ENTRY+0x90>
// e4: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// e9: 48 85 f6                      testq   %rsi, %rsi
// ec: 74 68                         je      0x156 <_JIT_ENTRY+0x156>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 0f b7 c8                      movzwl  %ax, %ecx
// fb: 0f b7 c0                      movzwl  %ax, %eax
// fe: 48 8d 14 c5 00 00 00 00       leaq    (,%rax,8), %rdx
// 106: 48 f7 da                      negq    %rdx
// 109: 49 89 34 17                   movq    %rsi, (%r15,%rdx)
// 10d: ba 01 00 00 00                movl    $0x1, %edx
// 112: 29 ca                         subl    %ecx, %edx
// 114: 48 63 ca                      movslq  %edx, %rcx
// 117: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 11b: 49 8b 54 cf f8                movq    -0x8(%r15,%rcx,8), %rdx
// 120: 48 89 cf                      movq    %rcx, %rdi
// 123: 48 29 c7                      subq    %rax, %rdi
// 126: 49 8b 04 ff                   movq    (%r15,%rdi,8), %rax
// 12a: 49 89 14 ff                   movq    %rdx, (%r15,%rdi,8)
// 12e: 49 89 44 cf f8                movq    %rax, -0x8(%r15,%rcx,8)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _JIT_CONTINUE
// 13d: 48 8b 3c 24                   movq    (%rsp), %rdi
// 141: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 146: 48 83 c4 18                   addq    $0x18, %rsp
// 14a: 5b                            popq    %rbx
// 14b: 41 5c                         popq    %r12
// 14d: 41 5d                         popq    %r13
// 14f: 41 5e                         popq    %r14
// 151: 41 5f                         popq    %r15
// 153: 5d                            popq    %rbp
// 154: ff e0                         jmpq    *%rax
// 156: 48 8b 04 24                   movq    (%rsp), %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 83 c4 b8                   addq    $-0x48, %r12
// 161: 49 c1 ec 03                   shrq    $0x3, %r12
// 165: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: 48 83 c4 18                   addq    $0x18, %rsp
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: 5d                            popq    %rbp
// 179: c3                            retq
// 17a: 
static const unsigned char _BUILD_STRINGplus_SWAP_code_body[379] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x7e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0d, 0x0f, 0x1f, 0x40, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x4b, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x1e, 0x66, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xc4, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xbd, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xac, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x85, 0xf6, 0x74, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xda, 0x49, 0x89, 0x34, 0x17, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x8d, 0x34, 0xcf, 0x49, 0x8b, 0x54, 0xcf, 0xf8, 0x48, 0x89, 0xcf, 0x48, 0x29, 0xc7, 0x49, 0x8b, 0x04, 0xff, 0x49, 0x89, 0x14, 0xff, 0x49, 0x89, 0x44, 0xcf, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_SWAP_code_holes[11] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_SWAP_data_holes[1];

// _BUILD_STRINGplus_TO_BOOL
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_TO_BOOL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 04 01 00 00             je      0x200 <_JIT_ENTRY+0x200>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 4d 8b 64 de f8                movq    -0x8(%r14,%rbx,8), %r12
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyObject_IsTrue
// 135: 4c 89 e7                      movq    %r12, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 89 c5                         movl    %eax, %ebp
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7e 06                         jle     0x14b <_JIT_ENTRY+0x14b>
// 145: 85 c0                         testl   %eax, %eax
// 147: 79 28                         jns     0x171 <_JIT_ENTRY+0x171>
// 149: eb 38                         jmp     0x183 <_JIT_ENTRY+0x183>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NegativeRefcount
// 15f: be 86 00 00 00                movl    $0x86, %esi
// 164: 4c 89 e2                      movq    %r12, %rdx
// 167: ff d0                         callq   *%rax
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 12                         js      0x183 <_JIT_ENTRY+0x183>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 49 ff 0c 24                   decq    (%r12)
// 181: 74 62                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 183: 85 ed                         testl   %ebp, %ebp
// 185: 78 71                         js      0x1f8 <_JIT_ENTRY+0x1f8>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c0                      movzwl  %ax, %eax
// 194: b9 01 00 00 00                movl    $0x1, %ecx
// 199: 29 c1                         subl    %eax, %ecx
// 19b: 48 63 c1                      movslq  %ecx, %rax
// 19e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1a2: 85 ed                         testl   %ebp, %ebp
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _Py_FalseStruct
// 1ae: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001b0:  R_X86_64_64  _Py_TrueStruct
// 1b8: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 1bc: 49 89 54 c6 f8                movq    %rdx, -0x8(%r14,%rax,8)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_CONTINUE
// 1cb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1d0: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1d5: 48 83 c4 28                   addq    $0x28, %rsp
// 1d9: 5b                            popq    %rbx
// 1da: 41 5c                         popq    %r12
// 1dc: 41 5d                         popq    %r13
// 1de: 41 5e                         popq    %r14
// 1e0: 41 5f                         popq    %r15
// 1e2: 5d                            popq    %rbp
// 1e3: ff e0                         jmpq    *%rax
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_Dealloc
// 1ef: 4c 89 e7                      movq    %r12, %rdi
// 1f2: ff d0                         callq   *%rax
// 1f4: 85 ed                         testl   %ebp, %ebp
// 1f6: 79 8f                         jns     0x187 <_JIT_ENTRY+0x187>
// 1f8: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 1fc: 49 83 c4 f8                   addq    $-0x8, %r12
// 200: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 205: 49 29 c4                      subq    %rax, %r12
// 208: 49 83 c4 b8                   addq    $-0x48, %r12
// 20c: 49 c1 ec 03                   shrq    $0x3, %r12
// 210: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 214: 31 c0                         xorl    %eax, %eax
// 216: 48 83 c4 28                   addq    $0x28, %rsp
// 21a: 5b                            popq    %rbx
// 21b: 41 5c                         popq    %r12
// 21d: 41 5d                         popq    %r13
// 21f: 41 5e                         popq    %r14
// 221: 41 5f                         popq    %r15
// 223: 5d                            popq    %rbp
// 224: c3                            retq
// 225: 
static const unsigned char _BUILD_STRINGplus_TO_BOOL_code_body[550] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x64, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x62, 0x85, 0xed, 0x78, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x85, 0xed, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x49, 0x89, 0x54, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x8f, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_TO_BOOL_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_TO_BOOL_data_holes[1];

// _BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 5a                         je      0x152 <_JIT_ENTRY+0x152>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 114: 48 89 14 03                   movq    %rdx, (%rbx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4c 8d 24 c3                   leaq    (%rbx,%rax,8), %r12
// 125: 4c 8b 6c c3 f8                movq    -0x8(%rbx,%rax,8), %r13
// 12a: 49 8b 45 08                   movq    0x8(%r13), %rax
// 12e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000130:  R_X86_64_64  _JIT_OPERAND
// 138: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 13e: 75 2a                         jne     0x16a <_JIT_ENTRY+0x16a>
// 140: 49 8b 45 00                   movq    (%r13), %rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 7e 5d                         jle     0x1a6 <_JIT_ENTRY+0x1a6>
// 149: 85 c0                         testl   %eax, %eax
// 14b: 79 7f                         jns     0x1cc <_JIT_ENTRY+0x1cc>
// 14d: e9 9b 00 00 00                jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 152: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 157: 49 29 c4                      subq    %rax, %r12
// 15a: 49 83 c4 b8                   addq    $-0x48, %r12
// 15e: 49 c1 ec 03                   shrq    $0x3, %r12
// 162: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 166: 31 c0                         xorl    %eax, %eax
// 168: eb 2d                         jmp     0x197 <_JIT_ENTRY+0x197>
// 16a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16f: 49 29 c4                      subq    %rax, %r12
// 172: 49 83 c4 b8                   addq    $-0x48, %r12
// 176: 49 c1 ec 03                   shrq    $0x3, %r12
// 17a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17e: 48 8b 00                      movq    (%rax), %rax
// 181: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000183:  R_X86_64_64  _JIT_TARGET
// 18b: 89 c9                         movl    %ecx, %ecx
// 18d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 191: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 197: 48 83 c4 28                   addq    $0x28, %rsp
// 19b: 5b                            popq    %rbx
// 19c: 41 5c                         popq    %r12
// 19e: 41 5d                         popq    %r13
// 1a0: 41 5e                         popq    %r14
// 1a2: 41 5f                         popq    %r15
// 1a4: 5d                            popq    %rbp
// 1a5: c3                            retq
// 1a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NegativeRefcount
// 1ba: be db 00 00 00                movl    $0xdb, %esi
// 1bf: 4c 89 ea                      movq    %r13, %rdx
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 8b 45 00                   movq    (%r13), %rax
// 1c8: 85 c0                         testl   %eax, %eax
// 1ca: 78 21                         js      0x1ed <_JIT_ENTRY+0x1ed>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 ff 4d 00                   decq    (%r13)
// 1dc: 75 0f                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_Dealloc
// 1e8: 4c 89 ef                      movq    %r13, %rdi
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: 0f b7 c0                      movzwl  %ax, %eax
// 1fa: b9 01 00 00 00                movl    $0x1, %ecx
// 1ff: 29 c1                         subl    %eax, %ecx
// 201: 48 63 c1                      movslq  %ecx, %rax
// 204: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000206:  R_X86_64_64  _Py_TrueStruct
// 20e: 48 89 4c c3 f8                movq    %rcx, -0x8(%rbx,%rax,8)
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 222: 4c 89 e6                      movq    %r12, %rsi
// 225: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 22a: 48 83 c4 28                   addq    $0x28, %rsp
// 22e: 5b                            popq    %rbx
// 22f: 41 5c                         popq    %r12
// 231: 41 5d                         popq    %r13
// 233: 41 5e                         popq    %r14
// 235: 41 5f                         popq    %r15
// 237: 5d                            popq    %rbp
// 238: ff e0                         jmpq    *%rax
// 23a: 
static const unsigned char _BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE_code_body[571] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8d, 0x24, 0xc3, 0x4c, 0x8b, 0x6c, 0xc3, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x2a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x5d, 0x85, 0xc0, 0x79, 0x7f, 0xe9, 0x9b, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0xeb, 0x2d, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE_code_holes[19] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _BUILD_STRINGplus_TO_BOOL_BOOL
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_TO_BOOL_BOOL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 70                         je      0x168 <_JIT_ENTRY+0x168>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 8b 44 c2 f8                movq    -0x8(%rdx,%rax,8), %rax
// 12a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012c:  R_X86_64_64  PyBool_Type
// 134: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 138: 74 53                         je      0x18d <_JIT_ENTRY+0x18d>
// 13a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13f: 48 29 c6                      subq    %rax, %rsi
// 142: 48 83 c6 b8                   addq    $-0x48, %rsi
// 146: 48 c1 ee 03                   shrq    $0x3, %rsi
// 14a: 89 70 40                      movl    %esi, 0x40(%rax)
// 14d: 48 8b 00                      movq    (%rax), %rax
// 150: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000152:  R_X86_64_64  _JIT_TARGET
// 15a: 89 c9                         movl    %ecx, %ecx
// 15c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 160: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 166: eb 16                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 168: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16d: 49 29 c4                      subq    %rax, %r12
// 170: 49 83 c4 b8                   addq    $-0x48, %r12
// 174: 49 c1 ec 03                   shrq    $0x3, %r12
// 178: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17c: 31 c0                         xorl    %eax, %eax
// 17e: 48 83 c4 28                   addq    $0x28, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: c3                            retq
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_CONTINUE
// 197: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 19c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a1: 48 83 c4 28                   addq    $0x28, %rsp
// 1a5: 5b                            popq    %rbx
// 1a6: 41 5c                         popq    %r12
// 1a8: 41 5d                         popq    %r13
// 1aa: 41 5e                         popq    %r14
// 1ac: 41 5f                         popq    %r15
// 1ae: 5d                            popq    %rbp
// 1af: ff e0                         jmpq    *%rax
// 1b1: 
static const unsigned char _BUILD_STRINGplus_TO_BOOL_BOOL_code_body[434] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0x8b, 0x44, 0xc2, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_TO_BOOL_BOOL_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_TO_BOOL_BOOL_data_holes[1];

// _BUILD_STRINGplus_TO_BOOL_INT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_TO_BOOL_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 71                         je      0x169 <_JIT_ENTRY+0x169>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 114: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 125: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  PyLong_Type
// 134: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 138: 74 54                         je      0x18e <_JIT_ENTRY+0x18e>
// 13a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13f: 49 29 c4                      subq    %rax, %r12
// 142: 49 83 c4 b8                   addq    $-0x48, %r12
// 146: 49 c1 ec 03                   shrq    $0x3, %r12
// 14a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 14e: 48 8b 00                      movq    (%rax), %rax
// 151: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000153:  R_X86_64_64  _JIT_TARGET
// 15b: 89 c9                         movl    %ecx, %ecx
// 15d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 161: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 167: eb 16                         jmp     0x17f <_JIT_ENTRY+0x17f>
// 169: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16e: 49 29 c4                      subq    %rax, %r12
// 171: 49 83 c4 b8                   addq    $-0x48, %r12
// 175: 49 c1 ec 03                   shrq    $0x3, %r12
// 179: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17d: 31 c0                         xorl    %eax, %eax
// 17f: 48 83 c4 28                   addq    $0x28, %rsp
// 183: 5b                            popq    %rbx
// 184: 41 5c                         popq    %r12
// 186: 41 5d                         popq    %r13
// 188: 41 5e                         popq    %r14
// 18a: 41 5f                         popq    %r15
// 18c: 5d                            popq    %rbp
// 18d: c3                            retq
// 18e: 41 8b 45 10                   movl    0x10(%r13), %eax
// 192: 83 e0 03                      andl    $0x3, %eax
// 195: 83 f8 01                      cmpl    $0x1, %eax
// 198: 75 0c                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 19a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000019c:  R_X86_64_64  _Py_FalseStruct
// 1a4: eb 5a                         jmp     0x200 <_JIT_ENTRY+0x200>
// 1a6: 49 8b 45 00                   movq    (%r13), %rax
// 1aa: 48 85 c0                      testq   %rax, %rax
// 1ad: 7f 22                         jg      0x1d1 <_JIT_ENTRY+0x1d1>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be a0 00 00 00                movl    $0xa0, %esi
// 1c8: 4c 89 ea                      movq    %r13, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 45 00                   movq    (%r13), %rax
// 1d1: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001d3:  R_X86_64_64  _Py_TrueStruct
// 1db: 85 c0                         testl   %eax, %eax
// 1dd: 78 21                         js      0x200 <_JIT_ENTRY+0x200>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 ff 4d 00                   decq    (%r13)
// 1ef: 75 0f                         jne     0x200 <_JIT_ENTRY+0x200>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 ef                      movq    %r13, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 205: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_OPARG
// 214: 0f b7 c0                      movzwl  %ax, %eax
// 217: b9 01 00 00 00                movl    $0x1, %ecx
// 21c: 29 c1                         subl    %eax, %ecx
// 21e: 48 63 c1                      movslq  %ecx, %rax
// 221: 49 89 5c c6 f8                movq    %rbx, -0x8(%r14,%rax,8)
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _JIT_CONTINUE
// 230: 4c 89 e6                      movq    %r12, %rsi
// 233: 48 83 c4 28                   addq    $0x28, %rsp
// 237: 5b                            popq    %rbx
// 238: 41 5c                         popq    %r12
// 23a: 41 5d                         popq    %r13
// 23c: 41 5e                         popq    %r14
// 23e: 41 5f                         popq    %r15
// 240: 5d                            popq    %rbp
// 241: ff e0                         jmpq    *%rax
// 243: 
static const unsigned char _BUILD_STRINGplus_TO_BOOL_INT_code_body[580] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x54, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x45, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x5c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_TO_BOOL_INT_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_TO_BOOL_INT_data_holes[1];

// _BUILD_STRINGplus_TO_BOOL_LIST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_TO_BOOL_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 71                         je      0x169 <_JIT_ENTRY+0x169>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 114: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 125: 4d 8b 6c c6 f8                movq    -0x8(%r14,%rax,8), %r13
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  PyList_Type
// 134: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 138: 74 54                         je      0x18e <_JIT_ENTRY+0x18e>
// 13a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 13f: 49 29 c4                      subq    %rax, %r12
// 142: 49 83 c4 b8                   addq    $-0x48, %r12
// 146: 49 c1 ec 03                   shrq    $0x3, %r12
// 14a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 14e: 48 8b 00                      movq    (%rax), %rax
// 151: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000153:  R_X86_64_64  _JIT_TARGET
// 15b: 89 c9                         movl    %ecx, %ecx
// 15d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 161: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 167: eb 16                         jmp     0x17f <_JIT_ENTRY+0x17f>
// 169: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16e: 49 29 c4                      subq    %rax, %r12
// 171: 49 83 c4 b8                   addq    $-0x48, %r12
// 175: 49 c1 ec 03                   shrq    $0x3, %r12
// 179: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17d: 31 c0                         xorl    %eax, %eax
// 17f: 48 83 c4 28                   addq    $0x28, %rsp
// 183: 5b                            popq    %rbx
// 184: 41 5c                         popq    %r12
// 186: 41 5d                         popq    %r13
// 188: 41 5e                         popq    %r14
// 18a: 41 5f                         popq    %r15
// 18c: 5d                            popq    %rbp
// 18d: c3                            retq
// 18e: 49 8b 45 00                   movq    (%r13), %rax
// 192: 49 8b 5d 10                   movq    0x10(%r13), %rbx
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7e 06                         jle     0x1a1 <_JIT_ENTRY+0x1a1>
// 19b: 85 c0                         testl   %eax, %eax
// 19d: 79 28                         jns     0x1c7 <_JIT_ENTRY+0x1c7>
// 19f: eb 47                         jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// 1a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a3:  R_X86_64_64  .rodata.str1.1
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_NegativeRefcount
// 1b5: be ae 00 00 00                movl    $0xae, %esi
// 1ba: 4c 89 ea                      movq    %r13, %rdx
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 8b 45 00                   movq    (%r13), %rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 21                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d1: ff d0                         callq   *%rax
// 1d3: 49 ff 4d 00                   decq    (%r13)
// 1d7: 75 0f                         jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_Dealloc
// 1e3: 4c 89 ef                      movq    %r13, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 48 85 db                      testq   %rbx, %rbx
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_FalseStruct
// 1f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f7:  R_X86_64_64  _Py_TrueStruct
// 1ff: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _JIT_OPARG
// 20d: 0f b7 c0                      movzwl  %ax, %eax
// 210: ba 01 00 00 00                movl    $0x1, %edx
// 215: 29 c2                         subl    %eax, %edx
// 217: 48 63 c2                      movslq  %edx, %rax
// 21a: 49 89 4c c6 f8                movq    %rcx, -0x8(%r14,%rax,8)
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _JIT_CONTINUE
// 229: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 22e: 4c 89 e6                      movq    %r12, %rsi
// 231: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 236: 48 83 c4 28                   addq    $0x28, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: ff e0                         jmpq    *%rax
// 246: 
static const unsigned char _BUILD_STRINGplus_TO_BOOL_LIST_code_body[583] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc6, 0x4d, 0x8b, 0x6c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x54, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x5d, 0x10, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xdb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc2, 0x48, 0x63, 0xc2, 0x49, 0x89, 0x4c, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_TO_BOOL_LIST_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_TO_BOOL_LIST_data_holes[1];

// _BUILD_STRINGplus_TO_BOOL_NONE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_TO_BOOL_NONE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 72                         je      0x16a <_JIT_ENTRY+0x16a>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 114: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: ba 01 00 00 00                movl    $0x1, %edx
// 122: 29 ca                         subl    %ecx, %edx
// 124: 48 63 ca                      movslq  %edx, %rcx
// 127: 48 8d 34 cf                   leaq    (%rdi,%rcx,8), %rsi
// 12b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012d:  R_X86_64_64  _Py_NoneStruct
// 135: 48 39 54 cf f8                cmpq    %rdx, -0x8(%rdi,%rcx,8)
// 13a: 74 53                         je      0x18f <_JIT_ENTRY+0x18f>
// 13c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 141: 48 29 c6                      subq    %rax, %rsi
// 144: 48 83 c6 b8                   addq    $-0x48, %rsi
// 148: 48 c1 ee 03                   shrq    $0x3, %rsi
// 14c: 89 70 40                      movl    %esi, 0x40(%rax)
// 14f: 48 8b 00                      movq    (%rax), %rax
// 152: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000154:  R_X86_64_64  _JIT_TARGET
// 15c: 89 c9                         movl    %ecx, %ecx
// 15e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 162: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 168: eb 16                         jmp     0x180 <_JIT_ENTRY+0x180>
// 16a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16f: 49 29 c4                      subq    %rax, %r12
// 172: 49 83 c4 b8                   addq    $-0x48, %r12
// 176: 49 c1 ec 03                   shrq    $0x3, %r12
// 17a: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17e: 31 c0                         xorl    %eax, %eax
// 180: 48 83 c4 28                   addq    $0x28, %rsp
// 184: 5b                            popq    %rbx
// 185: 41 5c                         popq    %r12
// 187: 41 5d                         popq    %r13
// 189: 41 5e                         popq    %r14
// 18b: 41 5f                         popq    %r15
// 18d: 5d                            popq    %rbp
// 18e: c3                            retq
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _JIT_OPARG
// 199: 0f b7 c9                      movzwl  %cx, %ecx
// 19c: 29 c8                         subl    %ecx, %eax
// 19e: 48 98                         cltq
// 1a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a2:  R_X86_64_64  _Py_FalseStruct
// 1aa: 48 89 4c c7 f8                movq    %rcx, -0x8(%rdi,%rax,8)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1be: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c3: 48 83 c4 28                   addq    $0x28, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: ff e0                         jmpq    *%rax
// 1d3: 
static const unsigned char _BUILD_STRINGplus_TO_BOOL_NONE_code_body[468] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8d, 0x34, 0xcf, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x54, 0xcf, 0xf8, 0x74, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x70, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x48, 0x98, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_TO_BOOL_NONE_code_holes[15] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_TO_BOOL_NONE_data_holes[1];

// _BUILD_STRINGplus_TO_BOOL_STR
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_TO_BOOL_STR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f5                      movq    %rsi, %r13
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 34: 49 29 c5                      subq    %rax, %r13
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 57: 4c 89 ee                      movq    %r13, %rsi
// 5a: ff d0                         callq   *%rax
// 5c: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 61: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 67: 0f 8e 80 00 00 00             jle     0xed <_JIT_ENTRY+0xed>
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _JIT_OPARG
// 77: 44 0f b7 f8                   movzwl  %ax, %r15d
// 7b: 49 ff c7                      incq    %r15
// 7e: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000094:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9c: eb 0b                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9e: 66 90                         nop
// a0: 49 ff cf                      decq    %r15
// a3: 49 83 ff 01                   cmpq    $0x1, %r15
// a7: 7e 44                         jle     0xed <_JIT_ENTRY+0xed>
// a9: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// ad: 49 8b 5c c5 00                movq    (%r13,%rax,8), %rbx
// b2: 48 8b 03                      movq    (%rbx), %rax
// b5: 48 85 c0                      testq   %rax, %rax
// b8: 7e 06                         jle     0xc0 <_JIT_ENTRY+0xc0>
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 e2                         js      0xa0 <_JIT_ENTRY+0xa0>
// be: eb 14                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// c0: 4c 89 f7                      movq    %r14, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 48 89 da                      movq    %rbx, %rdx
// cb: ff d5                         callq   *%rbp
// cd: 48 8b 03                      movq    (%rbx), %rax
// d0: 85 c0                         testl   %eax, %eax
// d2: 78 cc                         js      0xa0 <_JIT_ENTRY+0xa0>
// d4: 41 ff d4                      callq   *%r12
// d7: 48 ff 0b                      decq    (%rbx)
// da: 75 c4                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dc: 48 89 df                      movq    %rbx, %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: ff d0                         callq   *%rax
// eb: eb b3                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ed: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f2: 48 85 d2                      testq   %rdx, %rdx
// f5: 74 70                         je      0x167 <_JIT_ENTRY+0x167>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_OPARG
// 101: 0f b7 c8                      movzwl  %ax, %ecx
// 104: 0f b7 c0                      movzwl  %ax, %eax
// 107: 48 c1 e0 03                   shlq    $0x3, %rax
// 10b: 48 f7 d8                      negq    %rax
// 10e: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 113: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 117: b8 01 00 00 00                movl    $0x1, %eax
// 11c: 29 c8                         subl    %ecx, %eax
// 11e: 48 98                         cltq
// 120: 4d 8d 2c c7                   leaq    (%r15,%rax,8), %r13
// 124: 4d 8b 74 c7 f8                movq    -0x8(%r15,%rax,8), %r14
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  PyUnicode_Type
// 133: 49 39 46 08                   cmpq    %rax, 0x8(%r14)
// 137: 74 52                         je      0x18b <_JIT_ENTRY+0x18b>
// 139: 48 8b 04 24                   movq    (%rsp), %rax
// 13d: 49 29 c5                      subq    %rax, %r13
// 140: 49 83 c5 b8                   addq    $-0x48, %r13
// 144: 49 c1 ed 03                   shrq    $0x3, %r13
// 148: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 14c: 48 8b 00                      movq    (%rax), %rax
// 14f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000151:  R_X86_64_64  _JIT_TARGET
// 159: 89 c9                         movl    %ecx, %ecx
// 15b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 165: eb 15                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 167: 48 8b 04 24                   movq    (%rsp), %rax
// 16b: 49 29 c5                      subq    %rax, %r13
// 16e: 49 83 c5 b8                   addq    $-0x48, %r13
// 172: 49 c1 ed 03                   shrq    $0x3, %r13
// 176: 44 89 68 40                   movl    %r13d, 0x40(%rax)
// 17a: 31 c0                         xorl    %eax, %eax
// 17c: 48 83 c4 28                   addq    $0x28, %rsp
// 180: 5b                            popq    %rbx
// 181: 41 5c                         popq    %r12
// 183: 41 5d                         popq    %r13
// 185: 41 5e                         popq    %r14
// 187: 41 5f                         popq    %r15
// 189: 5d                            popq    %rbp
// 18a: c3                            retq
// 18b: 4c 3b 74 24 10                cmpq    0x10(%rsp), %r14
// 190: 74 59                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 192: 49 8b 06                      movq    (%r14), %rax
// 195: 48 85 c0                      testq   %rax, %rax
// 198: 7f 21                         jg      0x1bb <_JIT_ENTRY+0x1bb>
// 19a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019c:  R_X86_64_64  .rodata.str1.1
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_NegativeRefcount
// 1ae: be cb 00 00 00                movl    $0xcb, %esi
// 1b3: 4c 89 f2                      movq    %r14, %rdx
// 1b6: ff d0                         callq   *%rax
// 1b8: 49 8b 06                      movq    (%r14), %rax
// 1bb: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001bd:  R_X86_64_64  _Py_TrueStruct
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 2c                         js      0x1f5 <_JIT_ENTRY+0x1f5>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0e                      decq    (%r14)
// 1d8: 75 1b                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_Dealloc
// 1e4: 4c 89 f7                      movq    %r14, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: eb 0a                         jmp     0x1f5 <_JIT_ENTRY+0x1f5>
// 1eb: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001ed:  R_X86_64_64  _Py_FalseStruct
// 1f5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_OPARG
// 208: 0f b7 c0                      movzwl  %ax, %eax
// 20b: b9 01 00 00 00                movl    $0x1, %ecx
// 210: 29 c1                         subl    %eax, %ecx
// 212: 48 63 c1                      movslq  %ecx, %rax
// 215: 49 89 5c c7 f8                movq    %rbx, -0x8(%r15,%rax,8)
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_CONTINUE
// 224: 4c 89 ee                      movq    %r13, %rsi
// 227: 48 83 c4 28                   addq    $0x28, %rsp
// 22b: 5b                            popq    %rbx
// 22c: 41 5c                         popq    %r12
// 22e: 41 5d                         popq    %r13
// 230: 41 5e                         popq    %r14
// 232: 41 5f                         popq    %r15
// 234: 5d                            popq    %rbp
// 235: ff e0                         jmpq    *%rax
// 237: 
static const unsigned char _BUILD_STRINGplus_TO_BOOL_STR_code_body[568] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf5, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0b, 0x66, 0x90, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x5c, 0xc5, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x14, 0x4c, 0x89, 0xf7, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x0b, 0x75, 0xc4, 0x48, 0x89, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc7, 0x4d, 0x8b, 0x74, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0x08, 0x74, 0x52, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x15, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc5, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x68, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x3b, 0x74, 0x24, 0x10, 0x74, 0x59, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x0a, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x5c, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_TO_BOOL_STR_code_holes[20] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_TO_BOOL_STR_data_holes[1];

// _BUILD_STRINGplus_UNARY_INVERT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNARY_INVERT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 ed 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyNumber_Invert
// 135: 4c 89 ef                      movq    %r13, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 49 89 c4                      movq    %rax, %r12
// 13d: 49 8b 45 00                   movq    (%r13), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7e 06                         jle     0x14c <_JIT_ENTRY+0x14c>
// 146: 85 c0                         testl   %eax, %eax
// 148: 79 28                         jns     0x172 <_JIT_ENTRY+0x172>
// 14a: eb 38                         jmp     0x184 <_JIT_ENTRY+0x184>
// 14c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014e:  R_X86_64_64  .rodata.str1.1
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_NegativeRefcount
// 160: be e6 00 00 00                movl    $0xe6, %esi
// 165: 4c 89 ea                      movq    %r13, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 49 8b 45 00                   movq    (%r13), %rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 12                         js      0x184 <_JIT_ENTRY+0x184>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 4d 00                   decq    (%r13)
// 182: 74 49                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 184: 4d 85 e4                      testq   %r12, %r12
// 187: 74 58                         je      0x1e1 <_JIT_ENTRY+0x1e1>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 c0                      movzwl  %ax, %eax
// 196: b9 01 00 00 00                movl    $0x1, %ecx
// 19b: 29 c1                         subl    %eax, %ecx
// 19d: 48 63 c1                      movslq  %ecx, %rax
// 1a0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1a4: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_CONTINUE
// 1b3: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1bd: 48 83 c4 28                   addq    $0x28, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: ff e0                         jmpq    *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_Dealloc
// 1d7: 4c 89 ef                      movq    %r13, %rdi
// 1da: ff d0                         callq   *%rax
// 1dc: 4d 85 e4                      testq   %r12, %r12
// 1df: 75 a8                         jne     0x189 <_JIT_ENTRY+0x189>
// 1e1: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 1e5: 49 83 c4 f8                   addq    $-0x8, %r12
// 1e9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ee: 49 29 c4                      subq    %rax, %r12
// 1f1: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f5: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f9: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1fd: 31 c0                         xorl    %eax, %eax
// 1ff: 48 83 c4 28                   addq    $0x28, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: c3                            retq
// 20e: 
static const unsigned char _BUILD_STRINGplus_UNARY_INVERT_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x4d, 0x85, 0xe4, 0x74, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa8, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_UNARY_INVERT_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNARY_INVERT_data_holes[1];

// _BUILD_STRINGplus_UNARY_NEGATIVE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNARY_NEGATIVE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 ed 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 118: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 63 d8                      movslq  %eax, %rbx
// 126: 4d 8b 6c de f8                movq    -0x8(%r14,%rbx,8), %r13
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  PyNumber_Negative
// 135: 4c 89 ef                      movq    %r13, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 49 89 c4                      movq    %rax, %r12
// 13d: 49 8b 45 00                   movq    (%r13), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7e 06                         jle     0x14c <_JIT_ENTRY+0x14c>
// 146: 85 c0                         testl   %eax, %eax
// 148: 79 28                         jns     0x172 <_JIT_ENTRY+0x172>
// 14a: eb 38                         jmp     0x184 <_JIT_ENTRY+0x184>
// 14c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014e:  R_X86_64_64  .rodata.str1.1
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_NegativeRefcount
// 160: be 71 00 00 00                movl    $0x71, %esi
// 165: 4c 89 ea                      movq    %r13, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 49 8b 45 00                   movq    (%r13), %rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 12                         js      0x184 <_JIT_ENTRY+0x184>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 4d 00                   decq    (%r13)
// 182: 74 49                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 184: 4d 85 e4                      testq   %r12, %r12
// 187: 74 58                         je      0x1e1 <_JIT_ENTRY+0x1e1>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 c0                      movzwl  %ax, %eax
// 196: b9 01 00 00 00                movl    $0x1, %ecx
// 19b: 29 c1                         subl    %eax, %ecx
// 19d: 48 63 c1                      movslq  %ecx, %rax
// 1a0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1a4: 4d 89 64 c6 f8                movq    %r12, -0x8(%r14,%rax,8)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_CONTINUE
// 1b3: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1bd: 48 83 c4 28                   addq    $0x28, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: ff e0                         jmpq    *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_Dealloc
// 1d7: 4c 89 ef                      movq    %r13, %rdi
// 1da: ff d0                         callq   *%rax
// 1dc: 4d 85 e4                      testq   %r12, %r12
// 1df: 75 a8                         jne     0x189 <_JIT_ENTRY+0x189>
// 1e1: 4d 8d 24 de                   leaq    (%r14,%rbx,8), %r12
// 1e5: 49 83 c4 f8                   addq    $-0x8, %r12
// 1e9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ee: 49 29 c4                      subq    %rax, %r12
// 1f1: 49 83 c4 b8                   addq    $-0x48, %r12
// 1f5: 49 c1 ec 03                   shrq    $0x3, %r12
// 1f9: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1fd: 31 c0                         xorl    %eax, %eax
// 1ff: 48 83 c4 28                   addq    $0x28, %rsp
// 203: 5b                            popq    %rbx
// 204: 41 5c                         popq    %r12
// 206: 41 5d                         popq    %r13
// 208: 41 5e                         popq    %r14
// 20a: 41 5f                         popq    %r15
// 20c: 5d                            popq    %rbp
// 20d: c3                            retq
// 20e: 
static const unsigned char _BUILD_STRINGplus_UNARY_NEGATIVE_code_body[527] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x6c, 0xde, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x49, 0x4d, 0x85, 0xe4, 0x74, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x4d, 0x89, 0x64, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xa8, 0x4d, 0x8d, 0x24, 0xde, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_UNARY_NEGATIVE_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNARY_NEGATIVE_data_holes[1];

// _BUILD_STRINGplus_UNARY_NOT
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNARY_NOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 74 73                         je      0x16b <_JIT_ENTRY+0x16b>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 114: 48 89 14 07                   movq    %rdx, (%rdi,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 125: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000127:  R_X86_64_64  _Py_FalseStruct
// 12f: 48 39 4c c7 f8                cmpq    %rcx, -0x8(%rdi,%rax,8)
// 134: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000136:  R_X86_64_64  _Py_TrueStruct
// 13e: 48 0f 45 d1                   cmovneq %rcx, %rdx
// 142: 48 89 54 c7 f8                movq    %rdx, -0x8(%rdi,%rax,8)
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _JIT_CONTINUE
// 151: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 156: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 15b: 48 83 c4 28                   addq    $0x28, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: ff e0                         jmpq    *%rax
// 16b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 170: 49 29 c4                      subq    %rax, %r12
// 173: 49 83 c4 b8                   addq    $-0x48, %r12
// 177: 49 c1 ec 03                   shrq    $0x3, %r12
// 17b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 17f: 31 c0                         xorl    %eax, %eax
// 181: 48 83 c4 28                   addq    $0x28, %rsp
// 185: 5b                            popq    %rbx
// 186: 41 5c                         popq    %r12
// 188: 41 5d                         popq    %r13
// 18a: 41 5e                         popq    %r14
// 18c: 41 5f                         popq    %r15
// 18e: 5d                            popq    %rbp
// 18f: c3                            retq
// 190: 
static const unsigned char _BUILD_STRINGplus_UNARY_NOT_code_body[401] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x74, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4c, 0xc7, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xd1, 0x48, 0x89, 0x54, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_UNARY_NOT_code_holes[13] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNARY_NOT_data_holes[1];

// _BUILD_STRINGplus_UNPACK_EX
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNPACK_EX.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 0b 01 00 00             je      0x207 <_JIT_ENTRY+0x207>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 d0                      movzwl  %ax, %edx
// 10c: 48 c1 e2 03                   shlq    $0x3, %rdx
// 110: 48 f7 da                      negq    %rdx
// 113: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 118: 49 89 34 16                   movq    %rsi, (%r14,%rdx)
// 11c: ba 01 00 00 00                movl    $0x1, %edx
// 121: 29 ca                         subl    %ecx, %edx
// 123: 48 63 f2                      movslq  %edx, %rsi
// 126: 4d 8b 64 f6 f8                movq    -0x8(%r14,%rsi,8), %r12
// 12b: 0f b6 d0                      movzbl  %al, %edx
// 12e: c1 e9 08                      shrl    $0x8, %ecx
// 131: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 134: ff c0                         incl    %eax
// 136: 48 01 f0                      addq    %rsi, %rax
// 139: 4d 8d 04 c6                   leaq    (%r14,%rax,8), %r8
// 13d: 49 83 c0 f8                   addq    $-0x8, %r8
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _PyEval_UnpackIterable
// 14b: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 150: 48 89 df                      movq    %rbx, %rdi
// 153: 4c 89 e6                      movq    %r12, %rsi
// 156: ff d0                         callq   *%rax
// 158: 89 c5                         movl    %eax, %ebp
// 15a: 49 8b 04 24                   movq    (%r12), %rax
// 15e: 48 85 c0                      testq   %rax, %rax
// 161: 7e 06                         jle     0x169 <_JIT_ENTRY+0x169>
// 163: 85 c0                         testl   %eax, %eax
// 165: 79 28                         jns     0x18f <_JIT_ENTRY+0x18f>
// 167: eb 47                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 78 21                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 199: ff d0                         callq   *%rax
// 19b: 49 ff 0c 24                   decq    (%r12)
// 19f: 75 0f                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 4c 89 e7                      movq    %r12, %rdi
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c8                      movzwl  %ax, %ecx
// 1bd: ba 01 00 00 00                movl    $0x1, %edx
// 1c2: 29 ca                         subl    %ecx, %edx
// 1c4: 48 63 d2                      movslq  %edx, %rdx
// 1c7: 0f b6 c0                      movzbl  %al, %eax
// 1ca: c1 e9 08                      shrl    $0x8, %ecx
// 1cd: 01 c1                         addl    %eax, %ecx
// 1cf: 48 01 d1                      addq    %rdx, %rcx
// 1d2: 85 ed                         testl   %ebp, %ebp
// 1d4: 48 0f 44 ca                   cmoveq  %rdx, %rcx
// 1d8: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1dc: 74 25                         je      0x203 <_JIT_ENTRY+0x203>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _JIT_CONTINUE
// 1e8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ed: 4c 89 e6                      movq    %r12, %rsi
// 1f0: 48 89 da                      movq    %rbx, %rdx
// 1f3: 48 83 c4 28                   addq    $0x28, %rsp
// 1f7: 5b                            popq    %rbx
// 1f8: 41 5c                         popq    %r12
// 1fa: 41 5d                         popq    %r13
// 1fc: 41 5e                         popq    %r14
// 1fe: 41 5f                         popq    %r15
// 200: 5d                            popq    %rbp
// 201: ff e0                         jmpq    *%rax
// 203: 49 83 c4 f8                   addq    $-0x8, %r12
// 207: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 20c: 49 29 c4                      subq    %rax, %r12
// 20f: 49 83 c4 b8                   addq    $-0x48, %r12
// 213: 49 c1 ec 03                   shrq    $0x3, %r12
// 217: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 21b: 31 c0                         xorl    %eax, %eax
// 21d: 48 83 c4 28                   addq    $0x28, %rsp
// 221: 5b                            popq    %rbx
// 222: 41 5c                         popq    %r12
// 224: 41 5d                         popq    %r13
// 226: 41 5e                         popq    %r14
// 228: 41 5f                         popq    %r15
// 22a: 5d                            popq    %rbp
// 22b: c3                            retq
// 22c: 
static const unsigned char _BUILD_STRINGplus_UNPACK_EX_code_body[557] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xd0, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0xf7, 0xda, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x34, 0x16, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xf2, 0x4d, 0x8b, 0x64, 0xf6, 0xf8, 0x0f, 0xb6, 0xd0, 0xc1, 0xe9, 0x08, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x48, 0x01, 0xf0, 0x4d, 0x8d, 0x04, 0xc6, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x0f, 0xb6, 0xc0, 0xc1, 0xe9, 0x08, 0x01, 0xc1, 0x48, 0x01, 0xd1, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xca, 0x4d, 0x8d, 0x24, 0xce, 0x74, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_UNPACK_EX_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNPACK_EX_data_holes[1];

// _BUILD_STRINGplus_UNPACK_SEQUENCE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNPACK_SEQUENCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 07 01 00 00             je      0x203 <_JIT_ENTRY+0x203>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 d0                      movzwl  %ax, %edx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 8d 0c c5 00 00 00 00       leaq    (,%rax,8), %rcx
// 114: 48 f7 d9                      negq    %rcx
// 117: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 11c: 49 89 34 0e                   movq    %rsi, (%r14,%rcx)
// 120: b9 01 00 00 00                movl    $0x1, %ecx
// 125: 29 d1                         subl    %edx, %ecx
// 127: 48 63 c9                      movslq  %ecx, %rcx
// 12a: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 12f: 48 01 c8                      addq    %rcx, %rax
// 132: 4d 8d 04 c6                   leaq    (%r14,%rax,8), %r8
// 136: 49 83 c0 f8                   addq    $-0x8, %r8
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _PyEval_UnpackIterable
// 144: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 149: 48 89 df                      movq    %rbx, %rdi
// 14c: 4c 89 e6                      movq    %r12, %rsi
// 14f: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 154: ff d0                         callq   *%rax
// 156: 89 c5                         movl    %eax, %ebp
// 158: 49 8b 04 24                   movq    (%r12), %rax
// 15c: 48 85 c0                      testq   %rax, %rax
// 15f: 7e 06                         jle     0x167 <_JIT_ENTRY+0x167>
// 161: 85 c0                         testl   %eax, %eax
// 163: 79 28                         jns     0x18d <_JIT_ENTRY+0x18d>
// 165: eb 47                         jmp     0x1ae <_JIT_ENTRY+0x1ae>
// 167: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000169:  R_X86_64_64  .rodata.str1.1
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_NegativeRefcount
// 17b: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 180: 4c 89 e2                      movq    %r12, %rdx
// 183: ff d0                         callq   *%rax
// 185: 49 8b 04 24                   movq    (%r12), %rax
// 189: 85 c0                         testl   %eax, %eax
// 18b: 78 21                         js      0x1ae <_JIT_ENTRY+0x1ae>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 197: ff d0                         callq   *%rax
// 199: 49 ff 0c 24                   decq    (%r12)
// 19d: 75 0f                         jne     0x1ae <_JIT_ENTRY+0x1ae>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_Dealloc
// 1a9: 4c 89 e7                      movq    %r12, %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _JIT_OPARG
// 1b8: 0f b7 c8                      movzwl  %ax, %ecx
// 1bb: ba 01 00 00 00                movl    $0x1, %edx
// 1c0: 29 ca                         subl    %ecx, %edx
// 1c2: 48 63 ca                      movslq  %edx, %rcx
// 1c5: 0f b7 c0                      movzwl  %ax, %eax
// 1c8: 48 01 c8                      addq    %rcx, %rax
// 1cb: 48 ff c8                      decq    %rax
// 1ce: 85 ed                         testl   %ebp, %ebp
// 1d0: 48 0f 44 c1                   cmoveq  %rcx, %rax
// 1d4: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// 1d8: 74 25                         je      0x1ff <_JIT_ENTRY+0x1ff>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_CONTINUE
// 1e4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1e9: 4c 89 e6                      movq    %r12, %rsi
// 1ec: 48 89 da                      movq    %rbx, %rdx
// 1ef: 48 83 c4 28                   addq    $0x28, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: ff e0                         jmpq    *%rax
// 1ff: 49 83 c4 f8                   addq    $-0x8, %r12
// 203: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 83 c4 b8                   addq    $-0x48, %r12
// 20f: 49 c1 ec 03                   shrq    $0x3, %r12
// 213: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 217: 31 c0                         xorl    %eax, %eax
// 219: 48 83 c4 28                   addq    $0x28, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: c3                            retq
// 228: 
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xd9, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x49, 0x89, 0x34, 0x0e, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0x48, 0x01, 0xc8, 0x4d, 0x8d, 0x04, 0xc6, 0x49, 0x83, 0xc0, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x48, 0xff, 0xc8, 0x85, 0xed, 0x48, 0x0f, 0x44, 0xc1, 0x4d, 0x8d, 0x24, 0xc6, 0x74, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_data_holes[1];

// _BUILD_STRINGplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNPACK_SEQUENCE_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 0f 84 fd 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 118: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 48 98                         cltq
// 125: 4c 8b 64 c2 f8                movq    -0x8(%rdx,%rax,8), %r12
// 12a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012c:  R_X86_64_64  PyList_Type
// 134: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 139: 0f 85 88 00 00 00             jne     0x1c7 <_JIT_ENTRY+0x1c7>
// 13f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000141:  R_X86_64_64  _JIT_OPARG
// 149: 0f b7 c9                      movzwl  %cx, %ecx
// 14c: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 151: 75 74                         jne     0x1c7 <_JIT_ENTRY+0x1c7>
// 153: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000155:  R_X86_64_64  _JIT_OPARG
// 15d: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 163: 0f 8e b5 00 00 00             jle     0x21e <_JIT_ENTRY+0x21e>
// 169: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16e: 48 8d 1c c1                   leaq    (%rcx,%rax,8), %rbx
// 172: 48 83 c3 f8                   addq    $-0x8, %rbx
// 176: 4d 8b 74 24 18                movq    0x18(%r12), %r14
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _JIT_OPARG
// 185: 44 0f b7 f8                   movzwl  %ax, %r15d
// 189: 49 ff c7                      incq    %r15
// 18c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000018e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 196: eb 18                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 198: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 1a0: 48 89 2b                      movq    %rbp, (%rbx)
// 1a3: 48 83 c3 08                   addq    $0x8, %rbx
// 1a7: 49 ff cf                      decq    %r15
// 1aa: 49 83 ff 01                   cmpq    $0x1, %r15
// 1ae: 7e 6e                         jle     0x21e <_JIT_ENTRY+0x21e>
// 1b0: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 1b4: 49 8b 2c c6                   movq    (%r14,%rax,8), %rbp
// 1b8: 8b 45 00                      movl    (%rbp), %eax
// 1bb: ff c0                         incl    %eax
// 1bd: 74 e1                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 1bf: 89 45 00                      movl    %eax, (%rbp)
// 1c2: 41 ff d5                      callq   *%r13
// 1c5: eb d9                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 1c7: 48 8d 04 c2                   leaq    (%rdx,%rax,8), %rax
// 1cb: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1d0: 48 29 c8                      subq    %rcx, %rax
// 1d3: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d7: 48 c1 e8 03                   shrq    $0x3, %rax
// 1db: 89 41 40                      movl    %eax, 0x40(%rcx)
// 1de: 48 8b 01                      movq    (%rcx), %rax
// 1e1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e3:  R_X86_64_64  _JIT_TARGET
// 1eb: 89 c9                         movl    %ecx, %ecx
// 1ed: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f7: eb 16                         jmp     0x20f <_JIT_ENTRY+0x20f>
// 1f9: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1fe: 49 29 c4                      subq    %rax, %r12
// 201: 49 83 c4 b8                   addq    $-0x48, %r12
// 205: 49 c1 ec 03                   shrq    $0x3, %r12
// 209: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 20d: 31 c0                         xorl    %eax, %eax
// 20f: 48 83 c4 28                   addq    $0x28, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: c3                            retq
// 21e: 49 8b 04 24                   movq    (%r12), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 7f 22                         jg      0x249 <_JIT_ENTRY+0x249>
// 227: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000229:  R_X86_64_64  .rodata.str1.1
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_NegativeRefcount
// 23b: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 240: 4c 89 e2                      movq    %r12, %rdx
// 243: ff d0                         callq   *%rax
// 245: 49 8b 04 24                   movq    (%r12), %rax
// 249: 85 c0                         testl   %eax, %eax
// 24b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 250: 78 21                         js      0x273 <_JIT_ENTRY+0x273>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0c 24                   decq    (%r12)
// 262: 75 0f                         jne     0x273 <_JIT_ENTRY+0x273>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 e7                      movq    %r12, %rdi
// 271: ff d0                         callq   *%rax
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_OPARG
// 27d: 0f b7 c8                      movzwl  %ax, %ecx
// 280: ba 01 00 00 00                movl    $0x1, %edx
// 285: 29 ca                         subl    %ecx, %edx
// 287: 48 63 ca                      movslq  %edx, %rcx
// 28a: 0f b7 c0                      movzwl  %ax, %eax
// 28d: 48 01 c8                      addq    %rcx, %rax
// 290: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 294: 48 83 c6 f8                   addq    $-0x8, %rsi
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _JIT_CONTINUE
// 2a2: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2a7: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 2ac: 48 83 c4 28                   addq    $0x28, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_LIST_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x64, 0xc2, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x75, 0x74, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8d, 0x1c, 0xc1, 0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x8b, 0x74, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x18, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x6e, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x2c, 0xc6, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe1, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0xeb, 0xd9, 0x48, 0x8d, 0x04, 0xc2, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x34, 0xc3, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_LIST_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 07 01 00 00             je      0x203 <_JIT_ENTRY+0x203>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 118: 48 89 54 05 00                movq    %rdx, (%rbp,%rax)
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 98                         cltq
// 126: 4c 8b 64 c5 f8                movq    -0x8(%rbp,%rax,8), %r12
// 12b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012d:  R_X86_64_64  PyTuple_Type
// 135: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 13a: 0f 85 8a 00 00 00             jne     0x1ca <_JIT_ENTRY+0x1ca>
// 140: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000142:  R_X86_64_64  _JIT_OPARG
// 14a: 0f b7 c9                      movzwl  %cx, %ecx
// 14d: 49 39 4c 24 10                cmpq    %rcx, 0x10(%r12)
// 152: 75 76                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 154: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000156:  R_X86_64_64  _JIT_OPARG
// 15e: f7 c1 ff ff 00 00             testl   $0xffff, %ecx           # imm = 0xFFFF
// 164: 0f 8e be 00 00 00             jle     0x228 <_JIT_ENTRY+0x228>
// 16a: 48 8d 1c c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %rbx
// 172: 48 01 eb                      addq    %rbp, %rbx
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_OPARG
// 17f: 44 0f b7 f0                   movzwl  %ax, %r14d
// 183: 49 ff c6                      incq    %r14
// 186: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000188:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 190: eb 1e                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 192: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 1a0: 4c 89 2b                      movq    %r13, (%rbx)
// 1a3: 48 83 c3 08                   addq    $0x8, %rbx
// 1a7: 49 ff ce                      decq    %r14
// 1aa: 49 83 fe 01                   cmpq    $0x1, %r14
// 1ae: 7e 78                         jle     0x228 <_JIT_ENTRY+0x228>
// 1b0: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 1b4: 4d 8b 6c c4 18                movq    0x18(%r12,%rax,8), %r13
// 1b9: 41 8b 45 00                   movl    (%r13), %eax
// 1bd: ff c0                         incl    %eax
// 1bf: 74 df                         je      0x1a0 <_JIT_ENTRY+0x1a0>
// 1c1: 41 89 45 00                   movl    %eax, (%r13)
// 1c5: 41 ff d7                      callq   *%r15
// 1c8: eb d6                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 1ca: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
// 1d2: 48 01 e8                      addq    %rbp, %rax
// 1d5: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1da: 48 29 c8                      subq    %rcx, %rax
// 1dd: 48 83 c0 b8                   addq    $-0x48, %rax
// 1e1: 48 c1 e8 03                   shrq    $0x3, %rax
// 1e5: 89 41 40                      movl    %eax, 0x40(%rcx)
// 1e8: 48 8b 01                      movq    (%rcx), %rax
// 1eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ed:  R_X86_64_64  _JIT_TARGET
// 1f5: 89 c9                         movl    %ecx, %ecx
// 1f7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1fb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 201: eb 16                         jmp     0x219 <_JIT_ENTRY+0x219>
// 203: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 208: 49 29 c4                      subq    %rax, %r12
// 20b: 49 83 c4 b8                   addq    $-0x48, %r12
// 20f: 49 c1 ec 03                   shrq    $0x3, %r12
// 213: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 217: 31 c0                         xorl    %eax, %eax
// 219: 48 83 c4 28                   addq    $0x28, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: c3                            retq
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 7f 22                         jg      0x253 <_JIT_ENTRY+0x253>
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_NegativeRefcount
// 245: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 24a: 4c 89 e2                      movq    %r12, %rdx
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 04 24                   movq    (%r12), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 21                         js      0x278 <_JIT_ENTRY+0x278>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0c 24                   decq    (%r12)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _JIT_OPARG
// 282: 0f b7 c8                      movzwl  %ax, %ecx
// 285: ba 01 00 00 00                movl    $0x1, %edx
// 28a: 29 ca                         subl    %ecx, %edx
// 28c: 48 63 ca                      movslq  %edx, %rcx
// 28f: 0f b7 c0                      movzwl  %ax, %eax
// 292: 48 01 c8                      addq    %rcx, %rax
// 295: 48 8d 34 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %rsi
// 29d: 48 01 ee                      addq    %rbp, %rsi
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  _JIT_CONTINUE
// 2aa: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2af: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2b4: 48 83 c4 28                   addq    $0x28, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE_code_body[709] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x4c, 0x8b, 0x64, 0xc5, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x39, 0x4c, 0x24, 0x10, 0x75, 0x76, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc1, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xbe, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x1c, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x48, 0x01, 0xeb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf0, 0x49, 0xff, 0xc6, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x1e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x78, 0x41, 0x8d, 0x46, 0xfe, 0x4d, 0x8b, 0x6c, 0xc4, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xdf, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0xeb, 0xd6, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x48, 0x8b, 0x01, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x34, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x48, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE_code_holes[22] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 de 00 00 00             je      0x1da <_JIT_ENTRY+0x1da>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 118: 49 89 54 05 00                movq    %rdx, (%r13,%rax)
// 11d: b8 01 00 00 00                movl    $0x1, %eax
// 122: 29 c8                         subl    %ecx, %eax
// 124: 48 98                         cltq
// 126: 48 8d 1c c5 00 00 00 00       leaq    (,%rax,8), %rbx
// 12e: 4c 01 eb                      addq    %r13, %rbx
// 131: 4d 8b 64 c5 f8                movq    -0x8(%r13,%rax,8), %r12
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyTuple_Type
// 140: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 145: 75 65                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 147: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 14d: 75 5d                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 14f: 4d 8b 7c 24 20                movq    0x20(%r12), %r15
// 154: 41 8b 07                      movl    (%r15), %eax
// 157: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000159:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 161: ff c0                         incl    %eax
// 163: 74 06                         je      0x16b <_JIT_ENTRY+0x16b>
// 165: 41 89 07                      movl    %eax, (%r15)
// 168: 41 ff d6                      callq   *%r14
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _JIT_OPARG
// 175: 0f b7 c0                      movzwl  %ax, %eax
// 178: b9 01 00 00 00                movl    $0x1, %ecx
// 17d: 29 c1                         subl    %eax, %ecx
// 17f: 48 63 c1                      movslq  %ecx, %rax
// 182: 4d 89 7c c5 f8                movq    %r15, -0x8(%r13,%rax,8)
// 187: 4d 8b 7c 24 18                movq    0x18(%r12), %r15
// 18c: 41 8b 07                      movl    (%r15), %eax
// 18f: ff c0                         incl    %eax
// 191: 75 6c                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 193: 4c 89 3b                      movq    %r15, (%rbx)
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 48 85 c0                      testq   %rax, %rax
// 19d: 7e 72                         jle     0x211 <_JIT_ENTRY+0x211>
// 19f: 85 c0                         testl   %eax, %eax
// 1a1: 0f 89 90 00 00 00             jns     0x237 <_JIT_ENTRY+0x237>
// 1a7: e9 ac 00 00 00                jmp     0x258 <_JIT_ENTRY+0x258>
// 1ac: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b1: 48 29 c3                      subq    %rax, %rbx
// 1b4: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b8: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1bc: 89 58 40                      movl    %ebx, 0x40(%rax)
// 1bf: 48 8b 00                      movq    (%rax), %rax
// 1c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c4:  R_X86_64_64  _JIT_TARGET
// 1cc: 89 c9                         movl    %ecx, %ecx
// 1ce: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d8: eb 16                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 1da: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1df: 49 29 c4                      subq    %rax, %r12
// 1e2: 49 83 c4 b8                   addq    $-0x48, %r12
// 1e6: 49 c1 ec 03                   shrq    $0x3, %r12
// 1ea: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 1ee: 31 c0                         xorl    %eax, %eax
// 1f0: 48 83 c4 28                   addq    $0x28, %rsp
// 1f4: 5b                            popq    %rbx
// 1f5: 41 5c                         popq    %r12
// 1f7: 41 5d                         popq    %r13
// 1f9: 41 5e                         popq    %r14
// 1fb: 41 5f                         popq    %r15
// 1fd: 5d                            popq    %rbp
// 1fe: c3                            retq
// 1ff: 41 89 07                      movl    %eax, (%r15)
// 202: 41 ff d6                      callq   *%r14
// 205: 4c 89 3b                      movq    %r15, (%rbx)
// 208: 49 8b 04 24                   movq    (%r12), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f 8e                         jg      0x19f <_JIT_ENTRY+0x19f>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 22a: 4c 89 e2                      movq    %r12, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 49 8b 04 24                   movq    (%r12), %rax
// 233: 85 c0                         testl   %eax, %eax
// 235: 78 21                         js      0x258 <_JIT_ENTRY+0x258>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 241: ff d0                         callq   *%rax
// 243: 49 ff 0c 24                   decq    (%r12)
// 247: 75 0f                         jne     0x258 <_JIT_ENTRY+0x258>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 4c 89 e7                      movq    %r12, %rdi
// 256: ff d0                         callq   *%rax
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_OPARG
// 262: 0f b7 c8                      movzwl  %ax, %ecx
// 265: ba 01 00 00 00                movl    $0x1, %edx
// 26a: 29 ca                         subl    %ecx, %edx
// 26c: 48 63 ca                      movslq  %edx, %rcx
// 26f: 0f b7 c0                      movzwl  %ax, %eax
// 272: 48 01 c8                      addq    %rcx, %rax
// 275: 48 8d 34 c5 f8 ff ff ff       leaq    -0x8(,%rax,8), %rsi
// 27d: 4c 01 ee                      addq    %r13, %rsi
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 28f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 294: 48 83 c4 28                   addq    $0x28, %rsp
// 298: 5b                            popq    %rbx
// 299: 41 5c                         popq    %r12
// 29b: 41 5d                         popq    %r13
// 29d: 41 5e                         popq    %r14
// 29f: 41 5f                         popq    %r15
// 2a1: 5d                            popq    %rbp
// 2a2: ff e0                         jmpq    *%rax
// 2a4: 
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[677] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x18, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x89, 0x54, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x1c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xeb, 0x4d, 0x8b, 0x64, 0xc5, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x65, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x5d, 0x4d, 0x8b, 0x7c, 0x24, 0x20, 0x41, 0x8b, 0x07, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x07, 0x41, 0xff, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x7c, 0xc5, 0xf8, 0x4d, 0x8b, 0x7c, 0x24, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x6c, 0x4c, 0x89, 0x3b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x72, 0x85, 0xc0, 0x0f, 0x89, 0x90, 0x00, 0x00, 0x00, 0xe9, 0xac, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x07, 0x41, 0xff, 0xd6, 0x4c, 0x89, 0x3b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x8e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x0f, 0xb7, 0xc0, 0x48, 0x01, 0xc8, 0x48, 0x8d, 0x34, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[20] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _BUILD_STRINGplus_WITH_EXCEPT_START
// 
// /tmp/tmp_nf25p_p/_BUILD_STRINGplus_WITH_EXCEPT_START.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 48                   subq    $0x48, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 0f b7 d3                      movzwl  %bx, %edx
// 27: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 2f: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 34: 49 29 c4                      subq    %rax, %r12
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  _PyUnicode_JoinArray
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  _PyRuntime
// 4b: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 52: 4c 89 e6                      movq    %r12, %rsi
// 55: ff d0                         callq   *%rax
// 57: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 5c: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 62: 0f 8e 86 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: 0f b7 d8                      movzwl  %ax, %ebx
// 75: 48 ff c3                      incq    %rbx
// 78: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: eb 11                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d7                      callq   *%r15
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d5                      callq   *%r13
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// f3: 48 85 d2                      testq   %rdx, %rdx
// f6: 0f 84 37 01 00 00             je      0x233 <_JIT_ENTRY+0x233>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _JIT_OPARG
// 106: 0f b7 c8                      movzwl  %ax, %ecx
// 109: 0f b7 c0                      movzwl  %ax, %eax
// 10c: 48 c1 e0 03                   shlq    $0x3, %rax
// 110: 48 f7 d8                      negq    %rax
// 113: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 118: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 11c: b8 01 00 00 00                movl    $0x1, %eax
// 121: 29 c8                         subl    %ecx, %eax
// 123: 4c 63 f0                      movslq  %eax, %r14
// 126: 4f 8b 64 f7 e0                movq    -0x20(%r15,%r14,8), %r12
// 12b: 4f 8b 6c f7 f8                movq    -0x8(%r15,%r14,8), %r13
// 130: 49 8b 5d 08                   movq    0x8(%r13), %rbx
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  PyException_GetTraceback
// 13e: 4c 89 ef                      movq    %r13, %rdi
// 141: ff d0                         callq   *%rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 74 11                         je      0x159 <_JIT_ENTRY+0x159>
// 148: 48 89 c5                      movq    %rax, %rbp
// 14b: 48 8b 00                      movq    (%rax), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7e 12                         jle     0x165 <_JIT_ENTRY+0x165>
// 153: 85 c0                         testl   %eax, %eax
// 155: 79 34                         jns     0x18b <_JIT_ENTRY+0x18b>
// 157: eb 53                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 159: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000015b:  R_X86_64_64  _Py_NoneStruct
// 163: eb 47                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 165: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000167:  R_X86_64_64  .rodata.str1.1
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  _Py_NegativeRefcount
// 179: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 17e: 48 89 ea                      movq    %rbp, %rdx
// 181: ff d0                         callq   *%rax
// 183: 48 8b 45 00                   movq    (%rbp), %rax
// 187: 85 c0                         testl   %eax, %eax
// 189: 78 21                         js      0x1ac <_JIT_ENTRY+0x1ac>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 195: ff d0                         callq   *%rax
// 197: 48 ff 4d 00                   decq    (%rbp)
// 19b: 75 0f                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_Dealloc
// 1a7: 48 89 ef                      movq    %rbp, %rdi
// 1aa: ff d0                         callq   *%rax
// 1ac: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 1b5: 48 8d 74 24 28                leaq    0x28(%rsp), %rsi
// 1ba: 48 89 5c 24 28                movq    %rbx, 0x28(%rsp)
// 1bf: 4c 89 6c 24 30                movq    %r13, 0x30(%rsp)
// 1c4: 48 89 6c 24 38                movq    %rbp, 0x38(%rsp)
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  PyObject_Vectorcall
// 1d3: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 1dd: 4c 89 e7                      movq    %r12, %rdi
// 1e0: 31 c9                         xorl    %ecx, %ecx
// 1e2: ff d0                         callq   *%rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 74 46                         je      0x22f <_JIT_ENTRY+0x22f>
// 1e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 c9                      movzwl  %cx, %ecx
// 1f6: ba 01 00 00 00                movl    $0x1, %edx
// 1fb: 29 ca                         subl    %ecx, %edx
// 1fd: 48 63 ca                      movslq  %edx, %rcx
// 200: 49 89 04 cf                   movq    %rax, (%r15,%rcx,8)
// 204: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 208: 48 83 c6 08                   addq    $0x8, %rsi
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _JIT_CONTINUE
// 216: 48 8b 3c 24                   movq    (%rsp), %rdi
// 21a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 21f: 48 83 c4 48                   addq    $0x48, %rsp
// 223: 5b                            popq    %rbx
// 224: 41 5c                         popq    %r12
// 226: 41 5d                         popq    %r13
// 228: 41 5e                         popq    %r14
// 22a: 41 5f                         popq    %r15
// 22c: 5d                            popq    %rbp
// 22d: ff e0                         jmpq    *%rax
// 22f: 4f 8d 24 f7                   leaq    (%r15,%r14,8), %r12
// 233: 48 8b 04 24                   movq    (%rsp), %rax
// 237: 49 29 c4                      subq    %rax, %r12
// 23a: 49 83 c4 b8                   addq    $-0x48, %r12
// 23e: 49 c1 ec 03                   shrq    $0x3, %r12
// 242: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 246: 31 c0                         xorl    %eax, %eax
// 248: 48 83 c4 48                   addq    $0x48, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: c3                            retq
// 257: 
static const unsigned char _BUILD_STRINGplus_WITH_EXCEPT_START_code_body[600] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x48, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x37, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x4c, 0x63, 0xf0, 0x4f, 0x8b, 0x64, 0xf7, 0xe0, 0x4f, 0x8b, 0x6c, 0xf7, 0xf8, 0x49, 0x8b, 0x5d, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x53, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x28, 0x48, 0x89, 0x5c, 0x24, 0x28, 0x4c, 0x89, 0x6c, 0x24, 0x30, 0x48, 0x89, 0x6c, 0x24, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x89, 0xe7, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0x01, 0x00, 0x00, 0x00, 0x29, 0xca, 0x48, 0x63, 0xca, 0x49, 0x89, 0x04, 0xcf, 0x49, 0x8d, 0x34, 0xcf, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4f, 0x8d, 0x24, 0xf7, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRINGplus_WITH_EXCEPT_START_code_holes[19] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRINGplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRINGplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_BUILD_STRINGplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BEFORE_ASYNC_WITH),
    [_BUILD_STRINGplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BEFORE_WITH),
    [_BUILD_STRINGplus_BINARY_OP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP),
    [_BUILD_STRINGplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP_ADD_FLOAT),
    [_BUILD_STRINGplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP_ADD_INT),
    [_BUILD_STRINGplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP_ADD_UNICODE),
    [_BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP_MULTIPLY_FLOAT),
    [_BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP_MULTIPLY_INT),
    [_BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP_SUBTRACT_FLOAT),
    [_BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_OP_SUBTRACT_INT),
    [_BUILD_STRINGplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_SLICE),
    [_BUILD_STRINGplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_SUBSCR),
    [_BUILD_STRINGplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_SUBSCR_DICT),
    [_BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_SUBSCR_LIST_INT),
    [_BUILD_STRINGplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_SUBSCR_STR_INT),
    [_BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BINARY_SUBSCR_TUPLE_INT),
    [_BUILD_STRINGplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BUILD_CONST_KEY_MAP),
    [_BUILD_STRINGplus_BUILD_LIST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BUILD_LIST),
    [_BUILD_STRINGplus_BUILD_MAP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BUILD_MAP),
    [_BUILD_STRINGplus_BUILD_SET] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BUILD_SET),
    [_BUILD_STRINGplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BUILD_SLICE),
    [_BUILD_STRINGplus_BUILD_STRING] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BUILD_STRING),
    [_BUILD_STRINGplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_BUILD_TUPLE),
    [_BUILD_STRINGplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_BUILTIN_CLASS),
    [_BUILD_STRINGplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_BUILTIN_FAST),
    [_BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_BUILD_STRINGplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_BUILTIN_O),
    [_BUILD_STRINGplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_INTRINSIC_1),
    [_BUILD_STRINGplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_INTRINSIC_2),
    [_BUILD_STRINGplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_ISINSTANCE),
    [_BUILD_STRINGplus_CALL_LEN] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_LEN),
    [_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_METHOD_DESCRIPTOR_O),
    [_BUILD_STRINGplus_CALL_STR_1] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_STR_1),
    [_BUILD_STRINGplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_TUPLE_1),
    [_BUILD_STRINGplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CALL_TYPE_1),
    [_BUILD_STRINGplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_ATTR_CLASS),
    [_BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_BUILD_STRINGplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_ATTR_MODULE),
    [_BUILD_STRINGplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_ATTR_WITH_HINT),
    [_BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BUILD_STRINGplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_EG_MATCH),
    [_BUILD_STRINGplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_EXC_MATCH),
    [_BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_FUNCTION_EXACT_ARGS),
    [_BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_BUILD_STRINGplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_PEP_523),
    [_BUILD_STRINGplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_STACK_SPACE),
    [_BUILD_STRINGplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CHECK_VALIDITY),
    [_BUILD_STRINGplus_COMPARE_OP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_COMPARE_OP),
    [_BUILD_STRINGplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_COMPARE_OP_FLOAT),
    [_BUILD_STRINGplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_COMPARE_OP_INT),
    [_BUILD_STRINGplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_COMPARE_OP_STR),
    [_BUILD_STRINGplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CONTAINS_OP),
    [_BUILD_STRINGplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_CONVERT_VALUE),
    [_BUILD_STRINGplus_COPY] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_COPY),
    [_BUILD_STRINGplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_COPY_FREE_VARS),
    [_BUILD_STRINGplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DELETE_ATTR),
    [_BUILD_STRINGplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DELETE_DEREF),
    [_BUILD_STRINGplus_DELETE_FAST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DELETE_FAST),
    [_BUILD_STRINGplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DELETE_GLOBAL),
    [_BUILD_STRINGplus_DELETE_NAME] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DELETE_NAME),
    [_BUILD_STRINGplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DELETE_SUBSCR),
    [_BUILD_STRINGplus_DICT_MERGE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DICT_MERGE),
    [_BUILD_STRINGplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_DICT_UPDATE),
    [_BUILD_STRINGplus_END_SEND] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_END_SEND),
    [_BUILD_STRINGplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_EXIT_INIT_CHECK),
    [_BUILD_STRINGplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_EXIT_TRACE),
    [_BUILD_STRINGplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_FORMAT_SIMPLE),
    [_BUILD_STRINGplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_FORMAT_WITH_SPEC),
    [_BUILD_STRINGplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_FOR_ITER_TIER_TWO),
    [_BUILD_STRINGplus_GET_AITER] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GET_AITER),
    [_BUILD_STRINGplus_GET_ANEXT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GET_ANEXT),
    [_BUILD_STRINGplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GET_AWAITABLE),
    [_BUILD_STRINGplus_GET_ITER] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GET_ITER),
    [_BUILD_STRINGplus_GET_LEN] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GET_LEN),
    [_BUILD_STRINGplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GET_YIELD_FROM_ITER),
    [_BUILD_STRINGplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_BOTH_FLOAT),
    [_BUILD_STRINGplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_BOTH_INT),
    [_BUILD_STRINGplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_BOTH_UNICODE),
    [_BUILD_STRINGplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_BUILTINS_VERSION),
    [_BUILD_STRINGplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_DORV_VALUES),
    [_BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_BUILD_STRINGplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_GLOBALS_VERSION),
    [_BUILD_STRINGplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_IS_FALSE_POP),
    [_BUILD_STRINGplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_IS_NONE_POP),
    [_BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_IS_NOT_NONE_POP),
    [_BUILD_STRINGplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_IS_TRUE_POP),
    [_BUILD_STRINGplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_KEYS_VERSION),
    [_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_LIST),
    [_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_BUILD_STRINGplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_GUARD_TYPE_VERSION),
    [_BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_INIT_CALL_PY_EXACT_ARGS),
    [_BUILD_STRINGplus_INSERT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_INSERT),
    [_BUILD_STRINGplus_IS_NONE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_IS_NONE),
    [_BUILD_STRINGplus_IS_OP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_IS_OP),
    [_BUILD_STRINGplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_ITER_CHECK_LIST),
    [_BUILD_STRINGplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_ITER_CHECK_RANGE),
    [_BUILD_STRINGplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_ITER_CHECK_TUPLE),
    [_BUILD_STRINGplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_ITER_NEXT_LIST),
    [_BUILD_STRINGplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_ITER_NEXT_RANGE),
    [_BUILD_STRINGplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_ITER_NEXT_TUPLE),
    [_BUILD_STRINGplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_JUMP_TO_TOP),
    [_BUILD_STRINGplus_LIST_APPEND] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LIST_APPEND),
    [_BUILD_STRINGplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LIST_EXTEND),
    [_BUILD_STRINGplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ASSERTION_ERROR),
    [_BUILD_STRINGplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR),
    [_BUILD_STRINGplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_CLASS),
    [_BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_INSTANCE_VALUE),
    [_BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_METHOD_NO_DICT),
    [_BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_BUILD_STRINGplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_MODULE),
    [_BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_BUILD_STRINGplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_SLOT),
    [_BUILD_STRINGplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_ATTR_WITH_HINT),
    [_BUILD_STRINGplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_BUILD_CLASS),
    [_BUILD_STRINGplus_LOAD_CONST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_CONST),
    [_BUILD_STRINGplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_DEREF),
    [_BUILD_STRINGplus_LOAD_FAST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_FAST),
    [_BUILD_STRINGplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_FAST_AND_CLEAR),
    [_BUILD_STRINGplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_FAST_CHECK),
    [_BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_FROM_DICT_OR_DEREF),
    [_BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_BUILD_STRINGplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_GLOBAL),
    [_BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_GLOBAL_BUILTINS),
    [_BUILD_STRINGplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_GLOBAL_MODULE),
    [_BUILD_STRINGplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_LOCALS),
    [_BUILD_STRINGplus_LOAD_NAME] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_NAME),
    [_BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_SUPER_ATTR_ATTR),
    [_BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_LOAD_SUPER_ATTR_METHOD),
    [_BUILD_STRINGplus_MAKE_CELL] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_MAKE_CELL),
    [_BUILD_STRINGplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_MAKE_FUNCTION),
    [_BUILD_STRINGplus_MAP_ADD] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_MAP_ADD),
    [_BUILD_STRINGplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_MATCH_CLASS),
    [_BUILD_STRINGplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_MATCH_KEYS),
    [_BUILD_STRINGplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_MATCH_MAPPING),
    [_BUILD_STRINGplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_MATCH_SEQUENCE),
    [_BUILD_STRINGplus_NOP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_NOP),
    [_BUILD_STRINGplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_POP_EXCEPT),
    [_BUILD_STRINGplus_POP_FRAME] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_POP_FRAME),
    [_BUILD_STRINGplus_POP_TOP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_POP_TOP),
    [_BUILD_STRINGplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_PUSH_EXC_INFO),
    [_BUILD_STRINGplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_PUSH_FRAME),
    [_BUILD_STRINGplus_PUSH_NULL] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_PUSH_NULL),
    [_BUILD_STRINGplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_RESUME_CHECK),
    [_BUILD_STRINGplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_SAVE_RETURN_OFFSET),
    [_BUILD_STRINGplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_SETUP_ANNOTATIONS),
    [_BUILD_STRINGplus_SET_ADD] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_SET_ADD),
    [_BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_SET_FUNCTION_ATTRIBUTE),
    [_BUILD_STRINGplus_SET_IP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_SET_IP),
    [_BUILD_STRINGplus_SET_UPDATE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_SET_UPDATE),
    [_BUILD_STRINGplus_STORE_ATTR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_ATTR),
    [_BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_ATTR_INSTANCE_VALUE),
    [_BUILD_STRINGplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_ATTR_SLOT),
    [_BUILD_STRINGplus_STORE_DEREF] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_DEREF),
    [_BUILD_STRINGplus_STORE_FAST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_FAST),
    [_BUILD_STRINGplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_GLOBAL),
    [_BUILD_STRINGplus_STORE_NAME] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_NAME),
    [_BUILD_STRINGplus_STORE_SLICE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_SLICE),
    [_BUILD_STRINGplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_SUBSCR),
    [_BUILD_STRINGplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_SUBSCR_DICT),
    [_BUILD_STRINGplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_STORE_SUBSCR_LIST_INT),
    [_BUILD_STRINGplus_SWAP] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_SWAP),
    [_BUILD_STRINGplus_TO_BOOL] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_TO_BOOL),
    [_BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_TO_BOOL_ALWAYS_TRUE),
    [_BUILD_STRINGplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_TO_BOOL_BOOL),
    [_BUILD_STRINGplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_TO_BOOL_INT),
    [_BUILD_STRINGplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_TO_BOOL_LIST),
    [_BUILD_STRINGplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_TO_BOOL_NONE),
    [_BUILD_STRINGplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_TO_BOOL_STR),
    [_BUILD_STRINGplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNARY_INVERT),
    [_BUILD_STRINGplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNARY_NEGATIVE),
    [_BUILD_STRINGplus_UNARY_NOT] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNARY_NOT),
    [_BUILD_STRINGplus_UNPACK_EX] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNPACK_EX),
    [_BUILD_STRINGplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNPACK_SEQUENCE),
    [_BUILD_STRINGplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNPACK_SEQUENCE_LIST),
    [_BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNPACK_SEQUENCE_TUPLE),
    [_BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_BUILD_STRINGplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_BUILD_STRINGplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
