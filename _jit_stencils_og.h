// 0070f8e784f446dbc1312218fc132ce15998ac858c1a5cfca421b6ab887ef9e7
// $ /home/jglass/.pyenv/versions/3.12.1/bin/python3.12 ./Tools/jit/build.py x86_64-pc-linux-gnu --debug

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _BEFORE_ASYNC_WITH
// 
// /tmp/tmp3v1aptj0/_BEFORE_ASYNC_WITH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 48 89 3c 24                   movq    %rdi, (%rsp)
// 15: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 19: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001b:  R_X86_64_64  _PyObject_LookupSpecial
// 23: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000025:  R_X86_64_64  _PyRuntime
// 2d: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 34: 48 89 ef                      movq    %rbp, %rdi
// 37: 41 ff d6                      callq   *%r14
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 74 35                         je      0x74 <_JIT_ENTRY+0x74>
// 3f: 49 89 c4                      movq    %rax, %r12
// 42: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 49: 48 89 ef                      movq    %rbp, %rdi
// 4c: 4c 89 ee                      movq    %r13, %rsi
// 4f: 41 ff d6                      callq   *%r14
// 52: 48 85 c0                      testq   %rax, %rax
// 55: 74 74                         je      0xcb <_JIT_ENTRY+0xcb>
// 57: 49 89 c5                      movq    %rax, %r13
// 5a: 48 8b 45 00                   movq    (%rbp), %rax
// 5e: 48 85 c0                      testq   %rax, %rax
// 61: 0f 8e 9f 00 00 00             jle     0x106 <_JIT_ENTRY+0x106>
// 67: 85 c0                         testl   %eax, %eax
// 69: 0f 89 bd 00 00 00             jns     0x12c <_JIT_ENTRY+0x12c>
// 6f: e9 ce 00 00 00                jmp     0x142 <_JIT_ENTRY+0x142>
// 74: 4d 85 ff                      testq   %r15, %r15
// 77: 0f 84 42 03 00 00             je      0x3bf <_JIT_ENTRY+0x3bf>
// 7d: 49 8b 47 68                   movq    0x68(%r15), %rax
// 81: 48 85 c0                      testq   %rax, %rax
// 84: 4c 8b 34 24                   movq    (%rsp), %r14
// 88: 74 0b                         je      0x95 <_JIT_ENTRY+0x95>
// 8a: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 8f: 0f 85 0a 03 00 00             jne     0x39f <_JIT_ENTRY+0x39f>
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  PyExc_TypeError
// 9f: 48 8b 30                      movq    (%rax), %rsi
// a2: 48 8b 45 08                   movq    0x8(%rbp), %rax
// a6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// aa: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1+0x9a
// b4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000b6:  R_X86_64_64  _PyErr_Format
// be: 4c 89 ff                      movq    %r15, %rdi
// c1: 31 c0                         xorl    %eax, %eax
// c3: 41 ff d0                      callq   *%r8
// c6: e9 d4 02 00 00                jmp     0x39f <_JIT_ENTRY+0x39f>
// cb: 4d 85 ff                      testq   %r15, %r15
// ce: 0f 84 eb 02 00 00             je      0x3bf <_JIT_ENTRY+0x3bf>
// d4: 49 8b 47 68                   movq    0x68(%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 0f 84 dd 00 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// e1: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// e6: 0f 84 d2 00 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// ec: 49 8b 04 24                   movq    (%r12), %rax
// f0: 48 85 c0                      testq   %rax, %rax
// f3: 0f 8e 03 01 00 00             jle     0x1fc <_JIT_ENTRY+0x1fc>
// f9: 85 c0                         testl   %eax, %eax
// fb: 0f 89 21 01 00 00             jns     0x222 <_JIT_ENTRY+0x222>
// 101: e9 3d 01 00 00                jmp     0x243 <_JIT_ENTRY+0x243>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 11f: 48 89 ea                      movq    %rbp, %rdx
// 122: ff d0                         callq   *%rax
// 124: 48 8b 45 00                   movq    (%rbp), %rax
// 128: 85 c0                         testl   %eax, %eax
// 12a: 78 16                         js      0x142 <_JIT_ENTRY+0x142>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 136: ff d0                         callq   *%rax
// 138: 48 ff 4d 00                   decq    (%rbp)
// 13c: 0f 84 0a 01 00 00             je      0x24c <_JIT_ENTRY+0x24c>
// 142: 4d 8b 74 24 08                movq    0x8(%r12), %r14
// 147: 41 f6 86 a9 00 00 00 08       testb   $0x8, 0xa9(%r14)
// 14f: 0f 84 19 01 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  PyCallable_Check
// 15f: 4c 89 e7                      movq    %r12, %rdi
// 162: ff d0                         callq   *%rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 0f 84 82 02 00 00             je      0x3ee <_JIT_ENTRY+0x3ee>
// 16c: 49 8b 46 38                   movq    0x38(%r14), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 0f 8e a4 02 00 00             jle     0x41d <_JIT_ENTRY+0x41d>
// 179: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 0f 84 e8 00 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: 31 f6                         xorl    %esi, %esi
// 18b: 31 d2                         xorl    %edx, %edx
// 18d: 31 c9                         xorl    %ecx, %ecx
// 18f: ff d0                         callq   *%rax
// 191: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000193:  R_X86_64_64  _Py_CheckFunctionResult
// 19b: 4c 89 ff                      movq    %r15, %rdi
// 19e: 4c 89 e6                      movq    %r12, %rsi
// 1a1: 48 89 c2                      movq    %rax, %rdx
// 1a4: 31 c9                         xorl    %ecx, %ecx
// 1a6: 41 ff d0                      callq   *%r8
// 1a9: 48 89 c5                      movq    %rax, %rbp
// 1ac: 49 8b 04 24                   movq    (%r12), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 0f 8f fc 00 00 00             jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 1b9: e9 d5 00 00 00                jmp     0x293 <_JIT_ENTRY+0x293>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyExc_TypeError
// 1c8: 48 8b 30                      movq    (%rax), %rsi
// 1cb: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1cf: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1+0xe5
// 1dd: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001df:  R_X86_64_64  _PyErr_Format
// 1e7: 4c 89 ff                      movq    %r15, %rdi
// 1ea: 31 c0                         xorl    %eax, %eax
// 1ec: 41 ff d0                      callq   *%r8
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 48 85 c0                      testq   %rax, %rax
// 1f6: 0f 8f fd fe ff ff             jg      0xf9 <_JIT_ENTRY+0xf9>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 215: 4c 89 e2                      movq    %r12, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 04 24                   movq    (%r12), %rax
// 21e: 85 c0                         testl   %eax, %eax
// 220: 78 21                         js      0x243 <_JIT_ENTRY+0x243>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22c: ff d0                         callq   *%rax
// 22e: 49 ff 0c 24                   decq    (%r12)
// 232: 75 0f                         jne     0x243 <_JIT_ENTRY+0x243>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 4c 89 e7                      movq    %r12, %rdi
// 241: ff d0                         callq   *%rax
// 243: 4c 8b 34 24                   movq    (%rsp), %r14
// 247: e9 53 01 00 00                jmp     0x39f <_JIT_ENTRY+0x39f>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 48 89 ef                      movq    %rbp, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 4d 8b 74 24 08                movq    0x8(%r12), %r14
// 260: 41 f6 86 a9 00 00 00 08       testb   $0x8, 0xa9(%r14)
// 268: 0f 85 e7 fe ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _PyObject_MakeTpCall
// 278: 4c 89 ff                      movq    %r15, %rdi
// 27b: 4c 89 e6                      movq    %r12, %rsi
// 27e: 31 d2                         xorl    %edx, %edx
// 280: 31 c9                         xorl    %ecx, %ecx
// 282: 45 31 c0                      xorl    %r8d, %r8d
// 285: ff d0                         callq   *%rax
// 287: 48 89 c5                      movq    %rax, %rbp
// 28a: 49 8b 04 24                   movq    (%r12), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 7f 22                         jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 293: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000295:  R_X86_64_64  .rodata.str1.1
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_NegativeRefcount
// 2a7: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 2ac: 4c 89 e2                      movq    %r12, %rdx
// 2af: ff d0                         callq   *%rax
// 2b1: 49 8b 04 24                   movq    (%r12), %rax
// 2b5: 85 c0                         testl   %eax, %eax
// 2b7: 78 12                         js      0x2cb <_JIT_ENTRY+0x2cb>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 ff 0c 24                   decq    (%r12)
// 2c9: 74 34                         je      0x2ff <_JIT_ENTRY+0x2ff>
// 2cb: 48 85 ed                      testq   %rbp, %rbp
// 2ce: 74 43                         je      0x313 <_JIT_ENTRY+0x313>
// 2d0: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 2d4: 48 89 2b                      movq    %rbp, (%rbx)
// 2d7: 48 83 c3 08                   addq    $0x8, %rbx
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2e9: 48 89 de                      movq    %rbx, %rsi
// 2ec: 4c 89 fa                      movq    %r15, %rdx
// 2ef: 48 83 c4 08                   addq    $0x8, %rsp
// 2f3: 5b                            popq    %rbx
// 2f4: 41 5c                         popq    %r12
// 2f6: 41 5d                         popq    %r13
// 2f8: 41 5e                         popq    %r14
// 2fa: 41 5f                         popq    %r15
// 2fc: 5d                            popq    %rbp
// 2fd: ff e0                         jmpq    *%rax
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 4c 89 e7                      movq    %r12, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 48 85 ed                      testq   %rbp, %rbp
// 311: 75 bd                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 313: 49 8b 45 00                   movq    (%r13), %rax
// 317: 48 85 c0                      testq   %rax, %rax
// 31a: 4c 8b 34 24                   movq    (%rsp), %r14
// 31e: 7f 22                         jg      0x342 <_JIT_ENTRY+0x342>
// 320: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000322:  R_X86_64_64  .rodata.str1.1
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_NegativeRefcount
// 334: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 339: 4c 89 ea                      movq    %r13, %rdx
// 33c: ff d0                         callq   *%rax
// 33e: 49 8b 45 00                   movq    (%r13), %rax
// 342: 85 c0                         testl   %eax, %eax
// 344: 78 21                         js      0x367 <_JIT_ENTRY+0x367>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 350: ff d0                         callq   *%rax
// 352: 49 ff 4d 00                   decq    (%r13)
// 356: 75 0f                         jne     0x367 <_JIT_ENTRY+0x367>
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_Dealloc
// 362: 4c 89 ef                      movq    %r13, %rdi
// 365: ff d0                         callq   *%rax
// 367: 49 8b 06                      movq    (%r14), %rax
// 36a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000036c:  R_X86_64_64  PyCode_Type
// 374: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 378: 0f 85 ce 00 00 00             jne     0x44c <_JIT_ENTRY+0x44c>
// 37e: 8b 40 48                      movl    0x48(%rax), %eax
// 381: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 385: 48 89 d9                      movq    %rbx, %rcx
// 388: 48 29 c1                      subq    %rax, %rcx
// 38b: 48 83 c1 b8                   addq    $-0x48, %rcx
// 38f: 48 c1 e9 03                   shrq    $0x3, %rcx
// 393: 85 c9                         testl   %ecx, %ecx
// 395: 0f 8e e0 00 00 00             jle     0x47b <_JIT_ENTRY+0x47b>
// 39b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 39f: 4c 29 f3                      subq    %r14, %rbx
// 3a2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3a6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3aa: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 3ae: 31 c0                         xorl    %eax, %eax
// 3b0: 48 83 c4 08                   addq    $0x8, %rsp
// 3b4: 5b                            popq    %rbx
// 3b5: 41 5c                         popq    %r12
// 3b7: 41 5d                         popq    %r13
// 3b9: 41 5e                         popq    %r14
// 3bb: 41 5f                         popq    %r15
// 3bd: 5d                            popq    %rbp
// 3be: c3                            retq
// 3bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c1:  R_X86_64_64  .rodata.str1.1+0x211
// 3c9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003cb:  R_X86_64_64  .rodata.str1.1+0x220
// 3d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003d5:  R_X86_64_64  .rodata.str1.1+0x262
// 3dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003df:  R_X86_64_64  __assert_fail
// 3e7: ba 4b 00 00 00                movl    $0x4b, %edx
// 3ec: ff d0                         callq   *%rax
// 3ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f0:  R_X86_64_64  .rodata.str1.1+0x303
// 3f8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003fa:  R_X86_64_64  .rodata.str1.1+0x28d
// 402: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000404:  R_X86_64_64  .rodata.str1.1+0x2cb
// 40c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040e:  R_X86_64_64  __assert_fail
// 416: ba 7b 00 00 00                movl    $0x7b, %edx
// 41b: ff d0                         callq   *%rax
// 41d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000041f:  R_X86_64_64  .rodata.str1.1+0x31e
// 427: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000429:  R_X86_64_64  .rodata.str1.1+0x28d
// 431: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000433:  R_X86_64_64  .rodata.str1.1+0x2cb
// 43b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000043d:  R_X86_64_64  __assert_fail
// 445: ba 7e 00 00 00                movl    $0x7e, %edx
// 44a: ff d0                         callq   *%rax
// 44c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000044e:  R_X86_64_64  .rodata.str1.1+0x17e
// 456: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000458:  R_X86_64_64  .rodata.str1.1+0x19c
// 460: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000462:  R_X86_64_64  .rodata.str1.1+0x1db
// 46a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046c:  R_X86_64_64  __assert_fail
// 474: ba 4d 00 00 00                movl    $0x4d, %edx
// 479: ff d0                         callq   *%rax
// 47b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000047d:  R_X86_64_64  .rodata.str1.1+0x87
// 485: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000487:  R_X86_64_64  .rodata.str1.1+0x14a
// 48f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000491:  R_X86_64_64  .rodata.str1.1+0x39
// 499: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049b:  R_X86_64_64  __assert_fail
// 4a3: ba 5b 00 00 00                movl    $0x5b, %edx
// 4a8: ff d0                         callq   *%rax
// 4aa: 
static const unsigned char _BEFORE_ASYNC_WITH_code_body[1195] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x8b, 0x6e, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x74, 0x74, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9f, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xbd, 0x00, 0x00, 0x00, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x42, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x0a, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xd4, 0x02, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xeb, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x03, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x21, 0x01, 0x00, 0x00, 0xe9, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0a, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x74, 0x24, 0x08, 0x41, 0xf6, 0x86, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x19, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x38, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa4, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xfc, 0x00, 0x00, 0x00, 0xe9, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xfd, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0x53, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8b, 0x74, 0x24, 0x08, 0x41, 0xf6, 0x86, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x85, 0xe7, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x34, 0x48, 0x85, 0xed, 0x74, 0x43, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x75, 0xbd, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xce, 0x00, 0x00, 0x00, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7e, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BEFORE_ASYNC_WITH_code_holes[50] = {
    {0x1b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCallable_Check, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe5},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x3c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x211},
    {0x3cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x220},
    {0x3d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x262},
    {0x3df, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x303},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x28d},
    {0x404, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2cb},
    {0x40e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x31e},
    {0x429, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x28d},
    {0x433, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2cb},
    {0x43d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x44e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17e},
    {0x458, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19c},
    {0x462, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1db},
    {0x46c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x47d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x487, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14a},
    {0x491, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x49b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00/home/jglass/Documents/cpython/Include/internal/pycore_call.h\x00vectorcallfunc _PyVectorcall_FunctionInline(PyObject *)\x00PyCallable_Check(callable)\x00offset > 0\x00"
// 329: 00 00 00 00 00 00 00
static const unsigned char _BEFORE_ASYNC_WITH_data_body[817] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x68, 0x00, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x66, 0x75, 0x6e, 0x63, 0x20, 0x5f, 0x50, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BEFORE_ASYNC_WITH_data_holes[1];

// _BEFORE_WITH
// 
// /tmp/tmp3v1aptj0/_BEFORE_WITH.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 48 89 3c 24                   movq    %rdi, (%rsp)
// 15: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 19: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000001b:  R_X86_64_64  _PyObject_LookupSpecial
// 23: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000025:  R_X86_64_64  _PyRuntime
// 2d: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 34: 48 89 ef                      movq    %rbp, %rdi
// 37: 41 ff d6                      callq   *%r14
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 74 35                         je      0x74 <_JIT_ENTRY+0x74>
// 3f: 49 89 c4                      movq    %rax, %r12
// 42: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 49: 48 89 ef                      movq    %rbp, %rdi
// 4c: 4c 89 ee                      movq    %r13, %rsi
// 4f: 41 ff d6                      callq   *%r14
// 52: 48 85 c0                      testq   %rax, %rax
// 55: 74 74                         je      0xcb <_JIT_ENTRY+0xcb>
// 57: 49 89 c5                      movq    %rax, %r13
// 5a: 48 8b 45 00                   movq    (%rbp), %rax
// 5e: 48 85 c0                      testq   %rax, %rax
// 61: 0f 8e 9f 00 00 00             jle     0x106 <_JIT_ENTRY+0x106>
// 67: 85 c0                         testl   %eax, %eax
// 69: 0f 89 bd 00 00 00             jns     0x12c <_JIT_ENTRY+0x12c>
// 6f: e9 ce 00 00 00                jmp     0x142 <_JIT_ENTRY+0x142>
// 74: 4d 85 ff                      testq   %r15, %r15
// 77: 0f 84 42 03 00 00             je      0x3bf <_JIT_ENTRY+0x3bf>
// 7d: 49 8b 47 68                   movq    0x68(%r15), %rax
// 81: 48 85 c0                      testq   %rax, %rax
// 84: 4c 8b 34 24                   movq    (%rsp), %r14
// 88: 74 0b                         je      0x95 <_JIT_ENTRY+0x95>
// 8a: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 8f: 0f 85 0a 03 00 00             jne     0x39f <_JIT_ENTRY+0x39f>
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  PyExc_TypeError
// 9f: 48 8b 30                      movq    (%rax), %rsi
// a2: 48 8b 45 08                   movq    0x8(%rbp), %rax
// a6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// aa: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1+0x9a
// b4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000b6:  R_X86_64_64  _PyErr_Format
// be: 4c 89 ff                      movq    %r15, %rdi
// c1: 31 c0                         xorl    %eax, %eax
// c3: 41 ff d0                      callq   *%r8
// c6: e9 d4 02 00 00                jmp     0x39f <_JIT_ENTRY+0x39f>
// cb: 4d 85 ff                      testq   %r15, %r15
// ce: 0f 84 eb 02 00 00             je      0x3bf <_JIT_ENTRY+0x3bf>
// d4: 49 8b 47 68                   movq    0x68(%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 0f 84 dd 00 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// e1: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// e6: 0f 84 d2 00 00 00             je      0x1be <_JIT_ENTRY+0x1be>
// ec: 49 8b 04 24                   movq    (%r12), %rax
// f0: 48 85 c0                      testq   %rax, %rax
// f3: 0f 8e 03 01 00 00             jle     0x1fc <_JIT_ENTRY+0x1fc>
// f9: 85 c0                         testl   %eax, %eax
// fb: 0f 89 21 01 00 00             jns     0x222 <_JIT_ENTRY+0x222>
// 101: e9 3d 01 00 00                jmp     0x243 <_JIT_ENTRY+0x243>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 11f: 48 89 ea                      movq    %rbp, %rdx
// 122: ff d0                         callq   *%rax
// 124: 48 8b 45 00                   movq    (%rbp), %rax
// 128: 85 c0                         testl   %eax, %eax
// 12a: 78 16                         js      0x142 <_JIT_ENTRY+0x142>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 136: ff d0                         callq   *%rax
// 138: 48 ff 4d 00                   decq    (%rbp)
// 13c: 0f 84 0a 01 00 00             je      0x24c <_JIT_ENTRY+0x24c>
// 142: 4d 8b 74 24 08                movq    0x8(%r12), %r14
// 147: 41 f6 86 a9 00 00 00 08       testb   $0x8, 0xa9(%r14)
// 14f: 0f 84 19 01 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  PyCallable_Check
// 15f: 4c 89 e7                      movq    %r12, %rdi
// 162: ff d0                         callq   *%rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 0f 84 82 02 00 00             je      0x3ee <_JIT_ENTRY+0x3ee>
// 16c: 49 8b 46 38                   movq    0x38(%r14), %rax
// 170: 48 85 c0                      testq   %rax, %rax
// 173: 0f 8e a4 02 00 00             jle     0x41d <_JIT_ENTRY+0x41d>
// 179: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 0f 84 e8 00 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: 31 f6                         xorl    %esi, %esi
// 18b: 31 d2                         xorl    %edx, %edx
// 18d: 31 c9                         xorl    %ecx, %ecx
// 18f: ff d0                         callq   *%rax
// 191: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000193:  R_X86_64_64  _Py_CheckFunctionResult
// 19b: 4c 89 ff                      movq    %r15, %rdi
// 19e: 4c 89 e6                      movq    %r12, %rsi
// 1a1: 48 89 c2                      movq    %rax, %rdx
// 1a4: 31 c9                         xorl    %ecx, %ecx
// 1a6: 41 ff d0                      callq   *%r8
// 1a9: 48 89 c5                      movq    %rax, %rbp
// 1ac: 49 8b 04 24                   movq    (%r12), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 0f 8f fc 00 00 00             jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 1b9: e9 d5 00 00 00                jmp     0x293 <_JIT_ENTRY+0x293>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  PyExc_TypeError
// 1c8: 48 8b 30                      movq    (%rax), %rsi
// 1cb: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1cf: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1+0xd8
// 1dd: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001df:  R_X86_64_64  _PyErr_Format
// 1e7: 4c 89 ff                      movq    %r15, %rdi
// 1ea: 31 c0                         xorl    %eax, %eax
// 1ec: 41 ff d0                      callq   *%r8
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 48 85 c0                      testq   %rax, %rax
// 1f6: 0f 8f fd fe ff ff             jg      0xf9 <_JIT_ENTRY+0xf9>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 215: 4c 89 e2                      movq    %r12, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 04 24                   movq    (%r12), %rax
// 21e: 85 c0                         testl   %eax, %eax
// 220: 78 21                         js      0x243 <_JIT_ENTRY+0x243>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22c: ff d0                         callq   *%rax
// 22e: 49 ff 0c 24                   decq    (%r12)
// 232: 75 0f                         jne     0x243 <_JIT_ENTRY+0x243>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 4c 89 e7                      movq    %r12, %rdi
// 241: ff d0                         callq   *%rax
// 243: 4c 8b 34 24                   movq    (%rsp), %r14
// 247: e9 53 01 00 00                jmp     0x39f <_JIT_ENTRY+0x39f>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 48 89 ef                      movq    %rbp, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 4d 8b 74 24 08                movq    0x8(%r12), %r14
// 260: 41 f6 86 a9 00 00 00 08       testb   $0x8, 0xa9(%r14)
// 268: 0f 85 e7 fe ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _PyObject_MakeTpCall
// 278: 4c 89 ff                      movq    %r15, %rdi
// 27b: 4c 89 e6                      movq    %r12, %rsi
// 27e: 31 d2                         xorl    %edx, %edx
// 280: 31 c9                         xorl    %ecx, %ecx
// 282: 45 31 c0                      xorl    %r8d, %r8d
// 285: ff d0                         callq   *%rax
// 287: 48 89 c5                      movq    %rax, %rbp
// 28a: 49 8b 04 24                   movq    (%r12), %rax
// 28e: 48 85 c0                      testq   %rax, %rax
// 291: 7f 22                         jg      0x2b5 <_JIT_ENTRY+0x2b5>
// 293: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000295:  R_X86_64_64  .rodata.str1.1
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _Py_NegativeRefcount
// 2a7: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 2ac: 4c 89 e2                      movq    %r12, %rdx
// 2af: ff d0                         callq   *%rax
// 2b1: 49 8b 04 24                   movq    (%r12), %rax
// 2b5: 85 c0                         testl   %eax, %eax
// 2b7: 78 12                         js      0x2cb <_JIT_ENTRY+0x2cb>
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 ff 0c 24                   decq    (%r12)
// 2c9: 74 34                         je      0x2ff <_JIT_ENTRY+0x2ff>
// 2cb: 48 85 ed                      testq   %rbp, %rbp
// 2ce: 74 43                         je      0x313 <_JIT_ENTRY+0x313>
// 2d0: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 2d4: 48 89 2b                      movq    %rbp, (%rbx)
// 2d7: 48 83 c3 08                   addq    $0x8, %rbx
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2e9: 48 89 de                      movq    %rbx, %rsi
// 2ec: 4c 89 fa                      movq    %r15, %rdx
// 2ef: 48 83 c4 08                   addq    $0x8, %rsp
// 2f3: 5b                            popq    %rbx
// 2f4: 41 5c                         popq    %r12
// 2f6: 41 5d                         popq    %r13
// 2f8: 41 5e                         popq    %r14
// 2fa: 41 5f                         popq    %r15
// 2fc: 5d                            popq    %rbp
// 2fd: ff e0                         jmpq    *%rax
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 4c 89 e7                      movq    %r12, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 48 85 ed                      testq   %rbp, %rbp
// 311: 75 bd                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 313: 49 8b 45 00                   movq    (%r13), %rax
// 317: 48 85 c0                      testq   %rax, %rax
// 31a: 4c 8b 34 24                   movq    (%rsp), %r14
// 31e: 7f 22                         jg      0x342 <_JIT_ENTRY+0x342>
// 320: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000322:  R_X86_64_64  .rodata.str1.1
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_NegativeRefcount
// 334: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 339: 4c 89 ea                      movq    %r13, %rdx
// 33c: ff d0                         callq   *%rax
// 33e: 49 8b 45 00                   movq    (%r13), %rax
// 342: 85 c0                         testl   %eax, %eax
// 344: 78 21                         js      0x367 <_JIT_ENTRY+0x367>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 350: ff d0                         callq   *%rax
// 352: 49 ff 4d 00                   decq    (%r13)
// 356: 75 0f                         jne     0x367 <_JIT_ENTRY+0x367>
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_Dealloc
// 362: 4c 89 ef                      movq    %r13, %rdi
// 365: ff d0                         callq   *%rax
// 367: 49 8b 06                      movq    (%r14), %rax
// 36a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000036c:  R_X86_64_64  PyCode_Type
// 374: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 378: 0f 85 ce 00 00 00             jne     0x44c <_JIT_ENTRY+0x44c>
// 37e: 8b 40 48                      movl    0x48(%rax), %eax
// 381: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 385: 48 89 d9                      movq    %rbx, %rcx
// 388: 48 29 c1                      subq    %rax, %rcx
// 38b: 48 83 c1 b8                   addq    $-0x48, %rcx
// 38f: 48 c1 e9 03                   shrq    $0x3, %rcx
// 393: 85 c9                         testl   %ecx, %ecx
// 395: 0f 8e e0 00 00 00             jle     0x47b <_JIT_ENTRY+0x47b>
// 39b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 39f: 4c 29 f3                      subq    %r14, %rbx
// 3a2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3a6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3aa: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 3ae: 31 c0                         xorl    %eax, %eax
// 3b0: 48 83 c4 08                   addq    $0x8, %rsp
// 3b4: 5b                            popq    %rbx
// 3b5: 41 5c                         popq    %r12
// 3b7: 41 5d                         popq    %r13
// 3b9: 41 5e                         popq    %r14
// 3bb: 41 5f                         popq    %r15
// 3bd: 5d                            popq    %rbp
// 3be: c3                            retq
// 3bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003c1:  R_X86_64_64  .rodata.str1.1+0x1f6
// 3c9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003cb:  R_X86_64_64  .rodata.str1.1+0x205
// 3d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003d5:  R_X86_64_64  .rodata.str1.1+0x247
// 3dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003df:  R_X86_64_64  __assert_fail
// 3e7: ba 4b 00 00 00                movl    $0x4b, %edx
// 3ec: ff d0                         callq   *%rax
// 3ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003f0:  R_X86_64_64  .rodata.str1.1+0x2e8
// 3f8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003fa:  R_X86_64_64  .rodata.str1.1+0x272
// 402: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000404:  R_X86_64_64  .rodata.str1.1+0x2b0
// 40c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040e:  R_X86_64_64  __assert_fail
// 416: ba 7b 00 00 00                movl    $0x7b, %edx
// 41b: ff d0                         callq   *%rax
// 41d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000041f:  R_X86_64_64  .rodata.str1.1+0x303
// 427: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000429:  R_X86_64_64  .rodata.str1.1+0x272
// 431: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000433:  R_X86_64_64  .rodata.str1.1+0x2b0
// 43b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000043d:  R_X86_64_64  __assert_fail
// 445: ba 7e 00 00 00                movl    $0x7e, %edx
// 44a: ff d0                         callq   *%rax
// 44c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000044e:  R_X86_64_64  .rodata.str1.1+0x163
// 456: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000458:  R_X86_64_64  .rodata.str1.1+0x181
// 460: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000462:  R_X86_64_64  .rodata.str1.1+0x1c0
// 46a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046c:  R_X86_64_64  __assert_fail
// 474: ba 4d 00 00 00                movl    $0x4d, %edx
// 479: ff d0                         callq   *%rax
// 47b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000047d:  R_X86_64_64  .rodata.str1.1+0x87
// 485: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000487:  R_X86_64_64  .rodata.str1.1+0x12f
// 48f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000491:  R_X86_64_64  .rodata.str1.1+0x39
// 499: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049b:  R_X86_64_64  __assert_fail
// 4a3: ba 5b 00 00 00                movl    $0x5b, %edx
// 4a8: ff d0                         callq   *%rax
// 4aa: 
static const unsigned char _BEFORE_WITH_code_body[1195] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x8b, 0x6e, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd6, 0x48, 0x85, 0xc0, 0x74, 0x74, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9f, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xbd, 0x00, 0x00, 0x00, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x42, 0x03, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x0a, 0x03, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xd4, 0x02, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xeb, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x03, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x21, 0x01, 0x00, 0x00, 0xe9, 0x3d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0a, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x74, 0x24, 0x08, 0x41, 0xf6, 0x86, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x19, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x38, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa4, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xfc, 0x00, 0x00, 0x00, 0xe9, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xfd, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0x53, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8b, 0x74, 0x24, 0x08, 0x41, 0xf6, 0x86, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x85, 0xe7, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x34, 0x48, 0x85, 0xed, 0x74, 0x43, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x75, 0xbd, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xce, 0x00, 0x00, 0x00, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0x83, 0xc1, 0xb8, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7e, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BEFORE_WITH_code_holes[50] = {
    {0x1b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCallable_Check, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd8},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x3c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f6},
    {0x3cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x205},
    {0x3d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x247},
    {0x3df, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2e8},
    {0x3fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x272},
    {0x404, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2b0},
    {0x40e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x303},
    {0x429, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x272},
    {0x433, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2b0},
    {0x43d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x44e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x163},
    {0x458, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x181},
    {0x462, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c0},
    {0x46c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x47d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x487, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12f},
    {0x491, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x49b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00/home/jglass/Documents/cpython/Include/internal/pycore_call.h\x00vectorcallfunc _PyVectorcall_FunctionInline(PyObject *)\x00PyCallable_Check(callable)\x00offset > 0\x00"
// 30e: 00 00
static const unsigned char _BEFORE_WITH_data_body[785] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x68, 0x00, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x66, 0x75, 0x6e, 0x63, 0x20, 0x5f, 0x50, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x00, 0x00};
static const Hole _BEFORE_WITH_data_holes[1];

// _BINARY_OP
// 
// /tmp/tmp3v1aptj0/_BINARY_OP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPARG
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000027:  R_X86_64_64  _PyEval_BinaryOps
// 2f: 48 8b 04 c1                   movq    (%rcx,%rax,8), %rax
// 33: 48 85 c0                      testq   %rax, %rax
// 36: 0f 84 68 01 00 00             je      0x1a4 <_JIT_ENTRY+0x1a4>
// 3c: 49 89 f7                      movq    %rsi, %r15
// 3f: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 43: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 47: 4c 8b 23                      movq    (%rbx), %r12
// 4a: 49 8b 2e                      movq    (%r14), %rbp
// 4d: 4c 89 e7                      movq    %r12, %rdi
// 50: 48 89 ee                      movq    %rbp, %rsi
// 53: ff d0                         callq   *%rax
// 55: 49 89 c5                      movq    %rax, %r13
// 58: 49 8b 04 24                   movq    (%r12), %rax
// 5c: 48 85 c0                      testq   %rax, %rax
// 5f: 7e 06                         jle     0x67 <_JIT_ENTRY+0x67>
// 61: 85 c0                         testl   %eax, %eax
// 63: 79 28                         jns     0x8d <_JIT_ENTRY+0x8d>
// 65: eb 38                         jmp     0x9f <_JIT_ENTRY+0x9f>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 12                         js      0x9f <_JIT_ENTRY+0x9f>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 74 0f                         je      0xae <_JIT_ENTRY+0xae>
// 9f: 48 8b 45 00                   movq    (%rbp), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7e 1e                         jle     0xc6 <_JIT_ENTRY+0xc6>
// a8: 85 c0                         testl   %eax, %eax
// aa: 79 40                         jns     0xec <_JIT_ENTRY+0xec>
// ac: eb 50                         jmp     0xfe <_JIT_ENTRY+0xfe>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_Dealloc
// b8: 4c 89 e7                      movq    %r12, %rdi
// bb: ff d0                         callq   *%rax
// bd: 48 8b 45 00                   movq    (%rbp), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7f e2                         jg      0xa8 <_JIT_ENTRY+0xa8>
// c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c8:  R_X86_64_64  .rodata.str1.1
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_NegativeRefcount
// da: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// df: 48 89 ea                      movq    %rbp, %rdx
// e2: ff d0                         callq   *%rax
// e4: 48 8b 45 00                   movq    (%rbp), %rax
// e8: 85 c0                         testl   %eax, %eax
// ea: 78 12                         js      0xfe <_JIT_ENTRY+0xfe>
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f6: ff d0                         callq   *%rax
// f8: 48 ff 4d 00                   decq    (%rbp)
// fc: 74 2f                         je      0x12d <_JIT_ENTRY+0x12d>
// fe: 4d 85 ed                      testq   %r13, %r13
// 101: 74 3e                         je      0x141 <_JIT_ENTRY+0x141>
// 103: 4c 89 2b                      movq    %r13, (%rbx)
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _JIT_CONTINUE
// 110: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 115: 4c 89 f6                      movq    %r14, %rsi
// 118: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 11d: 48 83 c4 18                   addq    $0x18, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: ff e0                         jmpq    *%rax
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_Dealloc
// 137: 48 89 ef                      movq    %rbp, %rdi
// 13a: ff d0                         callq   *%rax
// 13c: 4d 85 ed                      testq   %r13, %r13
// 13f: 75 c2                         jne     0x103 <_JIT_ENTRY+0x103>
// 141: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 146: 48 8b 02                      movq    (%rdx), %rax
// 149: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014b:  R_X86_64_64  PyCode_Type
// 153: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 157: 75 7a                         jne     0x1d3 <_JIT_ENTRY+0x1d3>
// 159: 48 63 40 48                   movslq  0x48(%rax), %rax
// 15d: 48 8d 04 c2                   leaq    (%rdx,%rax,8), %rax
// 161: 48 83 c0 48                   addq    $0x48, %rax
// 165: 49 29 c7                      subq    %rax, %r15
// 168: 49 c1 ef 03                   shrq    $0x3, %r15
// 16c: 45 85 ff                      testl   %r15d, %r15d
// 16f: 0f 8e 8d 00 00 00             jle     0x202 <_JIT_ENTRY+0x202>
// 175: 49 29 c6                      subq    %rax, %r14
// 178: 49 c1 ee 03                   shrq    $0x3, %r14
// 17c: 45 85 f6                      testl   %r14d, %r14d
// 17f: 0f 8e ac 00 00 00             jle     0x231 <_JIT_ENTRY+0x231>
// 185: 48 8d 42 48                   leaq    0x48(%rdx), %rax
// 189: 48 29 c3                      subq    %rax, %rbx
// 18c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 190: 89 5a 40                      movl    %ebx, 0x40(%rdx)
// 193: 31 c0                         xorl    %eax, %eax
// 195: 48 83 c4 18                   addq    $0x18, %rsp
// 199: 5b                            popq    %rbx
// 19a: 41 5c                         popq    %r12
// 19c: 41 5d                         popq    %r13
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: 5d                            popq    %rbp
// 1a3: c3                            retq
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1+0x9a
// 1ae: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b0:  R_X86_64_64  .rodata.str1.1
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1+0x39
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  __assert_fail
// 1cc: ba d2 0c 00 00                movl    $0xcd2, %edx            # imm = 0xCD2
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1+0xe7
// 1dd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1+0x105
// 1e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x144
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  __assert_fail
// 1fb: ba 4d 00 00 00                movl    $0x4d, %edx
// 200: ff d0                         callq   *%rax
// 202: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000204:  R_X86_64_64  .rodata.str1.1+0x87
// 20c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000020e:  R_X86_64_64  .rodata.str1.1+0xb3
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  .rodata.str1.1+0x39
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  __assert_fail
// 22a: ba 59 00 00 00                movl    $0x59, %edx
// 22f: ff d0                         callq   *%rax
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1+0x87
// 23b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0xb3
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  .rodata.str1.1+0x39
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  __assert_fail
// 259: ba 5b 00 00 00                movl    $0x5b, %edx
// 25e: ff d0                         callq   *%rax
// 260: 
static const unsigned char _BINARY_OP_code_body[609] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0xc1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x68, 0x01, 0x00, 0x00, 0x49, 0x89, 0xf7, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x4c, 0x8b, 0x23, 0x49, 0x8b, 0x2e, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x2f, 0x4d, 0x85, 0xed, 0x74, 0x3e, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xc2, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x02, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x7a, 0x48, 0x63, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc2, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc7, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x85, 0xff, 0x0f, 0x8e, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x42, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5a, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xd2, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_OP_code_holes[29] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe7},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x105},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x144},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00_PyEval_BinaryOps[oparg]\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 17a: 00 00 00 00 00 00
static const unsigned char _BINARY_OP_data_body[385] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x5f, 0x50, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x5f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x73, 0x5b, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x5d, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_data_holes[1];

// _BINARY_OP_ADD_FLOAT
// 
// /tmp/tmp3v1aptj0/_BINARY_OP_ADD_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 18: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 21: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 28: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 2d: 75 71                         jne     0xa0 <_JIT_ENTRY+0xa0>
// 2f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 34: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 3a: 0f 85 72 01 00 00             jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 40: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000042:  R_X86_64_64  PyInterpreterState_Get
// 4a: ff d0                         callq   *%rax
// 4c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 53: 49 8b 04 24                   movq    (%r12), %rax
// 57: 48 89 c1                      movq    %rax, %rcx
// 5a: 48 ff c9                      decq    %rcx
// 5d: 49 89 0c 24                   movq    %rcx, (%r12)
// 61: 0f 84 17 01 00 00             je      0x17e <_JIT_ENTRY+0x17e>
// 67: 48 83 f8 01                   cmpq    $0x1, %rax
// 6b: 0f 8f 41 01 00 00             jg      0x1b2 <_JIT_ENTRY+0x1b2>
// 71: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1
// 7b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1+0x12
// 85: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000087:  R_X86_64_64  .rodata.str1.1+0x52
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  __assert_fail
// 99: ba b8 00 00 00                movl    $0xb8, %edx
// 9e: ff d0                         callq   *%rax
// a0: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// a5: 75 3f                         jne     0xe6 <_JIT_ENTRY+0xe6>
// a7: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// ae: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// b2: 0f 85 c1 00 00 00             jne     0x179 <_JIT_ENTRY+0x179>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyInterpreterState_Get
// c2: ff d0                         callq   *%rax
// c4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// cb: 48 8b 45 00                   movq    (%rbp), %rax
// cf: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// d3: 48 89 4d 00                   movq    %rcx, (%rbp)
// d7: 4c 89 e5                      movq    %r12, %rbp
// da: 48 83 f8 01                   cmpq    $0x1, %rax
// de: 0f 8f ce 00 00 00             jg      0x1b2 <_JIT_ENTRY+0x1b2>
// e4: eb 73                         jmp     0x159 <_JIT_ENTRY+0x159>
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  PyFloat_FromDouble
// f0: ff d0                         callq   *%rax
// f2: 48 85 c0                      testq   %rax, %rax
// f5: 0f 84 94 00 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// fb: 49 89 c5                      movq    %rax, %r13
// fe: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 102: 75 25                         jne     0x129 <_JIT_ENTRY+0x129>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  PyInterpreterState_Get
// 10e: ff d0                         callq   *%rax
// 110: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 117: 48 8b 45 00                   movq    (%rbp), %rax
// 11b: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 11f: 48 89 4d 00                   movq    %rcx, (%rbp)
// 123: 48 83 f8 01                   cmpq    $0x1, %rax
// 127: 7e 30                         jle     0x159 <_JIT_ENTRY+0x159>
// 129: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 12f: 75 7e                         jne     0x1af <_JIT_ENTRY+0x1af>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  PyInterpreterState_Get
// 13b: ff d0                         callq   *%rax
// 13d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 14c: 49 89 0c 24                   movq    %rcx, (%r12)
// 150: 4c 89 ed                      movq    %r13, %rbp
// 153: 48 83 f8 01                   cmpq    $0x1, %rax
// 157: 7f 59                         jg      0x1b2 <_JIT_ENTRY+0x1b2>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  .rodata.str1.1+0x8c
// 163: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000165:  R_X86_64_64  .rodata.str1.1+0xa2
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 177: ff d0                         callq   *%rax
// 179: 4c 89 e5                      movq    %r12, %rbp
// 17c: eb 34                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _PyFloat_ExactDealloc
// 188: 4c 89 e7                      movq    %r12, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: eb 23                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 18f: 4c 29 f3                      subq    %r14, %rbx
// 192: 48 83 c3 b8                   addq    $-0x48, %rbx
// 196: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 19e: 31 c0                         xorl    %eax, %eax
// 1a0: 48 83 c4 08                   addq    $0x8, %rsp
// 1a4: 5b                            popq    %rbx
// 1a5: 41 5c                         popq    %r12
// 1a7: 41 5d                         popq    %r13
// 1a9: 41 5e                         popq    %r14
// 1ab: 41 5f                         popq    %r15
// 1ad: 5d                            popq    %rbp
// 1ae: c3                            retq
// 1af: 4c 89 ed                      movq    %r13, %rbp
// 1b2: 48 89 6b f0                   movq    %rbp, -0x10(%rbx)
// 1b6: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 4c 89 f7                      movq    %r14, %rdi
// 1c7: 48 89 de                      movq    %rbx, %rsi
// 1ca: 4c 89 fa                      movq    %r15, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 
static const unsigned char _BINARY_OP_ADD_FLOAT_code_body[478] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x71, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0c, 0x24, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3f, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x4c, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xce, 0x00, 0x00, 0x00, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0xed, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x59, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xe5, 0xeb, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x23, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0xed, 0x48, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_OP_ADD_FLOAT_code_holes[15] = {
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12},
    {0x87, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x52},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x8c},
    {0x165, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa2},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 'op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// c9: 00 00 00 00 00 00 00
static const unsigned char _BINARY_OP_ADD_FLOAT_data_body[209] = {0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_ADD_FLOAT_data_holes[1];

// _BINARY_OP_ADD_INT
// 
// /tmp/tmp3v1aptj0/_BINARY_OP_ADD_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 18: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 1c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001e:  R_X86_64_64  _PyLong_Add
// 26: 4c 89 ef                      movq    %r13, %rdi
// 29: 48 89 ee                      movq    %rbp, %rsi
// 2c: ff d0                         callq   *%rax
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 35: 75 29                         jne     0x60 <_JIT_ENTRY+0x60>
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  PyInterpreterState_Get
// 41: ff d0                         callq   *%rax
// 43: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 4a: 48 8b 45 00                   movq    (%rbp), %rax
// 4e: 48 89 c1                      movq    %rax, %rcx
// 51: 48 ff c9                      decq    %rcx
// 54: 48 89 4d 00                   movq    %rcx, (%rbp)
// 58: 74 65                         je      0xbf <_JIT_ENTRY+0xbf>
// 5a: 48 83 f8 01                   cmpq    $0x1, %rax
// 5e: 7e 30                         jle     0x90 <_JIT_ENTRY+0x90>
// 60: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 65: 75 6e                         jne     0xd5 <_JIT_ENTRY+0xd5>
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyInterpreterState_Get
// 71: ff d0                         callq   *%rax
// 73: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 89 c1                      movq    %rax, %rcx
// 81: 48 ff c9                      decq    %rcx
// 84: 49 89 4d 00                   movq    %rcx, (%r13)
// 88: 74 7b                         je      0x105 <_JIT_ENTRY+0x105>
// 8a: 48 83 f8 01                   cmpq    $0x1, %rax
// 8e: 7f 45                         jg      0xd5 <_JIT_ENTRY+0xd5>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1+0x128
// 9a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009c:  R_X86_64_64  .rodata.str1.1+0x13a
// a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a6:  R_X86_64_64  .rodata.str1.1+0x17a
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  __assert_fail
// b8: ba b8 00 00 00                movl    $0xb8, %edx
// bd: ff d0                         callq   *%rax
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  PyObject_Free
// c9: 48 89 ef                      movq    %rbp, %rdi
// cc: ff d0                         callq   *%rax
// ce: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// d3: 74 92                         je      0x67 <_JIT_ENTRY+0x67>
// d5: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// d9: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// dd: 4d 85 e4                      testq   %r12, %r12
// e0: 74 3f                         je      0x121 <_JIT_ENTRY+0x121>
// e2: 4c 89 20                      movq    %r12, (%rax)
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _JIT_CONTINUE
// ef: 48 89 df                      movq    %rbx, %rdi
// f2: 4c 89 fa                      movq    %r15, %rdx
// f5: 48 83 c4 08                   addq    $0x8, %rsp
// f9: 5b                            popq    %rbx
// fa: 41 5c                         popq    %r12
// fc: 41 5d                         popq    %r13
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: 5d                            popq    %rbp
// 103: ff e0                         jmpq    *%rax
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  PyObject_Free
// 10f: 4c 89 ef                      movq    %r13, %rdi
// 112: ff d0                         callq   *%rax
// 114: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 118: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 11c: 4d 85 e4                      testq   %r12, %r12
// 11f: 75 c1                         jne     0xe2 <_JIT_ENTRY+0xe2>
// 121: 48 8b 0b                      movq    (%rbx), %rcx
// 124: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000126:  R_X86_64_64  PyCode_Type
// 12e: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 132: 75 42                         jne     0x176 <_JIT_ENTRY+0x176>
// 134: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 138: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 13c: 48 83 c1 48                   addq    $0x48, %rcx
// 140: 49 29 ce                      subq    %rcx, %r14
// 143: 49 c1 ee 03                   shrq    $0x3, %r14
// 147: 45 85 f6                      testl   %r14d, %r14d
// 14a: 7e 59                         jle     0x1a5 <_JIT_ENTRY+0x1a5>
// 14c: 48 29 ce                      subq    %rcx, %rsi
// 14f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 153: 85 f6                         testl   %esi, %esi
// 155: 7e 7d                         jle     0x1d4 <_JIT_ENTRY+0x1d4>
// 157: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 15b: 48 29 c8                      subq    %rcx, %rax
// 15e: 48 c1 e8 03                   shrq    $0x3, %rax
// 162: 89 43 40                      movl    %eax, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 08                   addq    $0x8, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000178:  R_X86_64_64  .rodata.str1.1+0x95
// 180: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000182:  R_X86_64_64  .rodata.str1.1+0xb3
// 18a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018c:  R_X86_64_64  .rodata.str1.1+0xf2
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  __assert_fail
// 19e: ba 4d 00 00 00                movl    $0x4d, %edx
// 1a3: ff d0                         callq   *%rax
// 1a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1+0x4e
// 1af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1+0x61
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  __assert_fail
// 1cd: ba 59 00 00 00                movl    $0x59, %edx
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x4e
// 1de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1+0x61
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  __assert_fail
// 1fc: ba 5b 00 00 00                movl    $0x5b, %edx
// 201: ff d0                         callq   *%rax
// 203: 
static const unsigned char _BINARY_OP_ADD_INT_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x4d, 0x00, 0x74, 0x65, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x7b, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x92, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xc1, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x42, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x59, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_OP_ADD_INT_code_holes[24] = {
    {0x1e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13a},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17a},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x95},
    {0x182, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf2},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00'
// 1b4: 00 00 00 00
static const unsigned char _BINARY_OP_ADD_INT_data_body[441] = {0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_ADD_INT_data_holes[1];

// _BINARY_OP_ADD_UNICODE
// 
// /tmp/tmp3v1aptj0/_BINARY_OP_ADD_UNICODE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 18: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001e:  R_X86_64_64  PyUnicode_Concat
// 26: 48 89 ef                      movq    %rbp, %rdi
// 29: 4c 89 ee                      movq    %r13, %rsi
// 2c: ff d0                         callq   *%rax
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 35: 75 29                         jne     0x60 <_JIT_ENTRY+0x60>
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  PyInterpreterState_Get
// 41: ff d0                         callq   *%rax
// 43: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 4a: 48 8b 45 00                   movq    (%rbp), %rax
// 4e: 48 89 c1                      movq    %rax, %rcx
// 51: 48 ff c9                      decq    %rcx
// 54: 48 89 4d 00                   movq    %rcx, (%rbp)
// 58: 74 65                         je      0xbf <_JIT_ENTRY+0xbf>
// 5a: 48 83 f8 01                   cmpq    $0x1, %rax
// 5e: 7e 30                         jle     0x90 <_JIT_ENTRY+0x90>
// 60: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 65: 75 6e                         jne     0xd5 <_JIT_ENTRY+0xd5>
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyInterpreterState_Get
// 71: ff d0                         callq   *%rax
// 73: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 89 c1                      movq    %rax, %rcx
// 81: 48 ff c9                      decq    %rcx
// 84: 49 89 4d 00                   movq    %rcx, (%r13)
// 88: 74 7b                         je      0x105 <_JIT_ENTRY+0x105>
// 8a: 48 83 f8 01                   cmpq    $0x1, %rax
// 8e: 7f 45                         jg      0xd5 <_JIT_ENTRY+0xd5>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1+0x128
// 9a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009c:  R_X86_64_64  .rodata.str1.1+0x13a
// a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a6:  R_X86_64_64  .rodata.str1.1+0x17a
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  __assert_fail
// b8: ba b8 00 00 00                movl    $0xb8, %edx
// bd: ff d0                         callq   *%rax
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _PyUnicode_ExactDealloc
// c9: 48 89 ef                      movq    %rbp, %rdi
// cc: ff d0                         callq   *%rax
// ce: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// d3: 74 92                         je      0x67 <_JIT_ENTRY+0x67>
// d5: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// d9: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// dd: 4d 85 e4                      testq   %r12, %r12
// e0: 74 3f                         je      0x121 <_JIT_ENTRY+0x121>
// e2: 4c 89 20                      movq    %r12, (%rax)
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _JIT_CONTINUE
// ef: 48 89 df                      movq    %rbx, %rdi
// f2: 4c 89 fa                      movq    %r15, %rdx
// f5: 48 83 c4 08                   addq    $0x8, %rsp
// f9: 5b                            popq    %rbx
// fa: 41 5c                         popq    %r12
// fc: 41 5d                         popq    %r13
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: 5d                            popq    %rbp
// 103: ff e0                         jmpq    *%rax
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _PyUnicode_ExactDealloc
// 10f: 4c 89 ef                      movq    %r13, %rdi
// 112: ff d0                         callq   *%rax
// 114: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 118: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 11c: 4d 85 e4                      testq   %r12, %r12
// 11f: 75 c1                         jne     0xe2 <_JIT_ENTRY+0xe2>
// 121: 48 8b 0b                      movq    (%rbx), %rcx
// 124: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000126:  R_X86_64_64  PyCode_Type
// 12e: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 132: 75 42                         jne     0x176 <_JIT_ENTRY+0x176>
// 134: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 138: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 13c: 48 83 c1 48                   addq    $0x48, %rcx
// 140: 49 29 ce                      subq    %rcx, %r14
// 143: 49 c1 ee 03                   shrq    $0x3, %r14
// 147: 45 85 f6                      testl   %r14d, %r14d
// 14a: 7e 59                         jle     0x1a5 <_JIT_ENTRY+0x1a5>
// 14c: 48 29 ce                      subq    %rcx, %rsi
// 14f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 153: 85 f6                         testl   %esi, %esi
// 155: 7e 7d                         jle     0x1d4 <_JIT_ENTRY+0x1d4>
// 157: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 15b: 48 29 c8                      subq    %rcx, %rax
// 15e: 48 c1 e8 03                   shrq    $0x3, %rax
// 162: 89 43 40                      movl    %eax, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 08                   addq    $0x8, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000178:  R_X86_64_64  .rodata.str1.1+0x95
// 180: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000182:  R_X86_64_64  .rodata.str1.1+0xb3
// 18a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018c:  R_X86_64_64  .rodata.str1.1+0xf2
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  __assert_fail
// 19e: ba 4d 00 00 00                movl    $0x4d, %edx
// 1a3: ff d0                         callq   *%rax
// 1a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1+0x4e
// 1af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1+0x61
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  __assert_fail
// 1cd: ba 59 00 00 00                movl    $0x59, %edx
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x4e
// 1de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1+0x61
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  __assert_fail
// 1fc: ba 5b 00 00 00                movl    $0x5b, %edx
// 201: ff d0                         callq   *%rax
// 203: 
static const unsigned char _BINARY_OP_ADD_UNICODE_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x4d, 0x00, 0x74, 0x65, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x7b, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x92, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xc1, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x42, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x59, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_OP_ADD_UNICODE_code_holes[24] = {
    {0x1e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13a},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17a},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x95},
    {0x182, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf2},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00'
// 1b4: 00 00 00 00
static const unsigned char _BINARY_OP_ADD_UNICODE_data_body[441] = {0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_ADD_UNICODE_data_holes[1];

// _BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmp3v1aptj0/_BINARY_OP_MULTIPLY_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 18: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 21: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 28: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 2d: 75 71                         jne     0xa0 <_JIT_ENTRY+0xa0>
// 2f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 34: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 3a: 0f 85 72 01 00 00             jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 40: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000042:  R_X86_64_64  PyInterpreterState_Get
// 4a: ff d0                         callq   *%rax
// 4c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 53: 49 8b 04 24                   movq    (%r12), %rax
// 57: 48 89 c1                      movq    %rax, %rcx
// 5a: 48 ff c9                      decq    %rcx
// 5d: 49 89 0c 24                   movq    %rcx, (%r12)
// 61: 0f 84 17 01 00 00             je      0x17e <_JIT_ENTRY+0x17e>
// 67: 48 83 f8 01                   cmpq    $0x1, %rax
// 6b: 0f 8f 41 01 00 00             jg      0x1b2 <_JIT_ENTRY+0x1b2>
// 71: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1
// 7b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1+0x12
// 85: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000087:  R_X86_64_64  .rodata.str1.1+0x52
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  __assert_fail
// 99: ba b8 00 00 00                movl    $0xb8, %edx
// 9e: ff d0                         callq   *%rax
// a0: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// a5: 75 3f                         jne     0xe6 <_JIT_ENTRY+0xe6>
// a7: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// ae: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// b2: 0f 85 c1 00 00 00             jne     0x179 <_JIT_ENTRY+0x179>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyInterpreterState_Get
// c2: ff d0                         callq   *%rax
// c4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// cb: 48 8b 45 00                   movq    (%rbp), %rax
// cf: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// d3: 48 89 4d 00                   movq    %rcx, (%rbp)
// d7: 4c 89 e5                      movq    %r12, %rbp
// da: 48 83 f8 01                   cmpq    $0x1, %rax
// de: 0f 8f ce 00 00 00             jg      0x1b2 <_JIT_ENTRY+0x1b2>
// e4: eb 73                         jmp     0x159 <_JIT_ENTRY+0x159>
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  PyFloat_FromDouble
// f0: ff d0                         callq   *%rax
// f2: 48 85 c0                      testq   %rax, %rax
// f5: 0f 84 94 00 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// fb: 49 89 c5                      movq    %rax, %r13
// fe: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 102: 75 25                         jne     0x129 <_JIT_ENTRY+0x129>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  PyInterpreterState_Get
// 10e: ff d0                         callq   *%rax
// 110: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 117: 48 8b 45 00                   movq    (%rbp), %rax
// 11b: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 11f: 48 89 4d 00                   movq    %rcx, (%rbp)
// 123: 48 83 f8 01                   cmpq    $0x1, %rax
// 127: 7e 30                         jle     0x159 <_JIT_ENTRY+0x159>
// 129: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 12f: 75 7e                         jne     0x1af <_JIT_ENTRY+0x1af>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  PyInterpreterState_Get
// 13b: ff d0                         callq   *%rax
// 13d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 14c: 49 89 0c 24                   movq    %rcx, (%r12)
// 150: 4c 89 ed                      movq    %r13, %rbp
// 153: 48 83 f8 01                   cmpq    $0x1, %rax
// 157: 7f 59                         jg      0x1b2 <_JIT_ENTRY+0x1b2>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  .rodata.str1.1+0x8c
// 163: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000165:  R_X86_64_64  .rodata.str1.1+0xa2
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 177: ff d0                         callq   *%rax
// 179: 4c 89 e5                      movq    %r12, %rbp
// 17c: eb 34                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _PyFloat_ExactDealloc
// 188: 4c 89 e7                      movq    %r12, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: eb 23                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 18f: 4c 29 f3                      subq    %r14, %rbx
// 192: 48 83 c3 b8                   addq    $-0x48, %rbx
// 196: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 19e: 31 c0                         xorl    %eax, %eax
// 1a0: 48 83 c4 08                   addq    $0x8, %rsp
// 1a4: 5b                            popq    %rbx
// 1a5: 41 5c                         popq    %r12
// 1a7: 41 5d                         popq    %r13
// 1a9: 41 5e                         popq    %r14
// 1ab: 41 5f                         popq    %r15
// 1ad: 5d                            popq    %rbp
// 1ae: c3                            retq
// 1af: 4c 89 ed                      movq    %r13, %rbp
// 1b2: 48 89 6b f0                   movq    %rbp, -0x10(%rbx)
// 1b6: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 4c 89 f7                      movq    %r14, %rdi
// 1c7: 48 89 de                      movq    %rbx, %rsi
// 1ca: 4c 89 fa                      movq    %r15, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 
static const unsigned char _BINARY_OP_MULTIPLY_FLOAT_code_body[478] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x71, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0c, 0x24, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3f, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x4c, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xce, 0x00, 0x00, 0x00, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0xed, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x59, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xe5, 0xeb, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x23, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0xed, 0x48, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_OP_MULTIPLY_FLOAT_code_holes[15] = {
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12},
    {0x87, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x52},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x8c},
    {0x165, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa2},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 'op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// c9: 00 00 00 00 00 00 00
static const unsigned char _BINARY_OP_MULTIPLY_FLOAT_data_body[209] = {0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmp3v1aptj0/_BINARY_OP_MULTIPLY_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 18: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 1c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001e:  R_X86_64_64  _PyLong_Multiply
// 26: 4c 89 ef                      movq    %r13, %rdi
// 29: 48 89 ee                      movq    %rbp, %rsi
// 2c: ff d0                         callq   *%rax
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 35: 75 29                         jne     0x60 <_JIT_ENTRY+0x60>
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  PyInterpreterState_Get
// 41: ff d0                         callq   *%rax
// 43: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 4a: 48 8b 45 00                   movq    (%rbp), %rax
// 4e: 48 89 c1                      movq    %rax, %rcx
// 51: 48 ff c9                      decq    %rcx
// 54: 48 89 4d 00                   movq    %rcx, (%rbp)
// 58: 74 65                         je      0xbf <_JIT_ENTRY+0xbf>
// 5a: 48 83 f8 01                   cmpq    $0x1, %rax
// 5e: 7e 30                         jle     0x90 <_JIT_ENTRY+0x90>
// 60: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 65: 75 6e                         jne     0xd5 <_JIT_ENTRY+0xd5>
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyInterpreterState_Get
// 71: ff d0                         callq   *%rax
// 73: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 89 c1                      movq    %rax, %rcx
// 81: 48 ff c9                      decq    %rcx
// 84: 49 89 4d 00                   movq    %rcx, (%r13)
// 88: 74 7b                         je      0x105 <_JIT_ENTRY+0x105>
// 8a: 48 83 f8 01                   cmpq    $0x1, %rax
// 8e: 7f 45                         jg      0xd5 <_JIT_ENTRY+0xd5>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1+0x128
// 9a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009c:  R_X86_64_64  .rodata.str1.1+0x13a
// a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a6:  R_X86_64_64  .rodata.str1.1+0x17a
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  __assert_fail
// b8: ba b8 00 00 00                movl    $0xb8, %edx
// bd: ff d0                         callq   *%rax
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  PyObject_Free
// c9: 48 89 ef                      movq    %rbp, %rdi
// cc: ff d0                         callq   *%rax
// ce: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// d3: 74 92                         je      0x67 <_JIT_ENTRY+0x67>
// d5: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// d9: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// dd: 4d 85 e4                      testq   %r12, %r12
// e0: 74 3f                         je      0x121 <_JIT_ENTRY+0x121>
// e2: 4c 89 20                      movq    %r12, (%rax)
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _JIT_CONTINUE
// ef: 48 89 df                      movq    %rbx, %rdi
// f2: 4c 89 fa                      movq    %r15, %rdx
// f5: 48 83 c4 08                   addq    $0x8, %rsp
// f9: 5b                            popq    %rbx
// fa: 41 5c                         popq    %r12
// fc: 41 5d                         popq    %r13
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: 5d                            popq    %rbp
// 103: ff e0                         jmpq    *%rax
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  PyObject_Free
// 10f: 4c 89 ef                      movq    %r13, %rdi
// 112: ff d0                         callq   *%rax
// 114: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 118: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 11c: 4d 85 e4                      testq   %r12, %r12
// 11f: 75 c1                         jne     0xe2 <_JIT_ENTRY+0xe2>
// 121: 48 8b 0b                      movq    (%rbx), %rcx
// 124: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000126:  R_X86_64_64  PyCode_Type
// 12e: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 132: 75 42                         jne     0x176 <_JIT_ENTRY+0x176>
// 134: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 138: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 13c: 48 83 c1 48                   addq    $0x48, %rcx
// 140: 49 29 ce                      subq    %rcx, %r14
// 143: 49 c1 ee 03                   shrq    $0x3, %r14
// 147: 45 85 f6                      testl   %r14d, %r14d
// 14a: 7e 59                         jle     0x1a5 <_JIT_ENTRY+0x1a5>
// 14c: 48 29 ce                      subq    %rcx, %rsi
// 14f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 153: 85 f6                         testl   %esi, %esi
// 155: 7e 7d                         jle     0x1d4 <_JIT_ENTRY+0x1d4>
// 157: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 15b: 48 29 c8                      subq    %rcx, %rax
// 15e: 48 c1 e8 03                   shrq    $0x3, %rax
// 162: 89 43 40                      movl    %eax, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 08                   addq    $0x8, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000178:  R_X86_64_64  .rodata.str1.1+0x95
// 180: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000182:  R_X86_64_64  .rodata.str1.1+0xb3
// 18a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018c:  R_X86_64_64  .rodata.str1.1+0xf2
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  __assert_fail
// 19e: ba 4d 00 00 00                movl    $0x4d, %edx
// 1a3: ff d0                         callq   *%rax
// 1a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1+0x4e
// 1af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1+0x61
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  __assert_fail
// 1cd: ba 59 00 00 00                movl    $0x59, %edx
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x4e
// 1de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1+0x61
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  __assert_fail
// 1fc: ba 5b 00 00 00                movl    $0x5b, %edx
// 201: ff d0                         callq   *%rax
// 203: 
static const unsigned char _BINARY_OP_MULTIPLY_INT_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x4d, 0x00, 0x74, 0x65, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x7b, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x92, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xc1, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x42, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x59, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_OP_MULTIPLY_INT_code_holes[24] = {
    {0x1e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13a},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17a},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x95},
    {0x182, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf2},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00'
// 1b4: 00 00 00 00
static const unsigned char _BINARY_OP_MULTIPLY_INT_data_body[441] = {0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_MULTIPLY_INT_data_holes[1];

// _BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmp3v1aptj0/_BINARY_OP_SUBTRACT_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 18: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1c: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 21: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 28: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 2d: 75 71                         jne     0xa0 <_JIT_ENTRY+0xa0>
// 2f: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 34: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 3a: 0f 85 72 01 00 00             jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 40: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000042:  R_X86_64_64  PyInterpreterState_Get
// 4a: ff d0                         callq   *%rax
// 4c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 53: 49 8b 04 24                   movq    (%r12), %rax
// 57: 48 89 c1                      movq    %rax, %rcx
// 5a: 48 ff c9                      decq    %rcx
// 5d: 49 89 0c 24                   movq    %rcx, (%r12)
// 61: 0f 84 17 01 00 00             je      0x17e <_JIT_ENTRY+0x17e>
// 67: 48 83 f8 01                   cmpq    $0x1, %rax
// 6b: 0f 8f 41 01 00 00             jg      0x1b2 <_JIT_ENTRY+0x1b2>
// 71: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1
// 7b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1+0x12
// 85: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000087:  R_X86_64_64  .rodata.str1.1+0x52
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  __assert_fail
// 99: ba b8 00 00 00                movl    $0xb8, %edx
// 9e: ff d0                         callq   *%rax
// a0: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// a5: 75 3f                         jne     0xe6 <_JIT_ENTRY+0xe6>
// a7: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// ae: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// b2: 0f 85 c1 00 00 00             jne     0x179 <_JIT_ENTRY+0x179>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  PyInterpreterState_Get
// c2: ff d0                         callq   *%rax
// c4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// cb: 48 8b 45 00                   movq    (%rbp), %rax
// cf: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// d3: 48 89 4d 00                   movq    %rcx, (%rbp)
// d7: 4c 89 e5                      movq    %r12, %rbp
// da: 48 83 f8 01                   cmpq    $0x1, %rax
// de: 0f 8f ce 00 00 00             jg      0x1b2 <_JIT_ENTRY+0x1b2>
// e4: eb 73                         jmp     0x159 <_JIT_ENTRY+0x159>
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  PyFloat_FromDouble
// f0: ff d0                         callq   *%rax
// f2: 48 85 c0                      testq   %rax, %rax
// f5: 0f 84 94 00 00 00             je      0x18f <_JIT_ENTRY+0x18f>
// fb: 49 89 c5                      movq    %rax, %r13
// fe: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 102: 75 25                         jne     0x129 <_JIT_ENTRY+0x129>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  PyInterpreterState_Get
// 10e: ff d0                         callq   *%rax
// 110: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 117: 48 8b 45 00                   movq    (%rbp), %rax
// 11b: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 11f: 48 89 4d 00                   movq    %rcx, (%rbp)
// 123: 48 83 f8 01                   cmpq    $0x1, %rax
// 127: 7e 30                         jle     0x159 <_JIT_ENTRY+0x159>
// 129: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 12f: 75 7e                         jne     0x1af <_JIT_ENTRY+0x1af>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  PyInterpreterState_Get
// 13b: ff d0                         callq   *%rax
// 13d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 144: 49 8b 04 24                   movq    (%r12), %rax
// 148: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 14c: 49 89 0c 24                   movq    %rcx, (%r12)
// 150: 4c 89 ed                      movq    %r13, %rbp
// 153: 48 83 f8 01                   cmpq    $0x1, %rax
// 157: 7f 59                         jg      0x1b2 <_JIT_ENTRY+0x1b2>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  .rodata.str1.1+0x8c
// 163: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000165:  R_X86_64_64  .rodata.str1.1+0xa2
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 177: ff d0                         callq   *%rax
// 179: 4c 89 e5                      movq    %r12, %rbp
// 17c: eb 34                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _PyFloat_ExactDealloc
// 188: 4c 89 e7                      movq    %r12, %rdi
// 18b: ff d0                         callq   *%rax
// 18d: eb 23                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 18f: 4c 29 f3                      subq    %r14, %rbx
// 192: 48 83 c3 b8                   addq    $-0x48, %rbx
// 196: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 19e: 31 c0                         xorl    %eax, %eax
// 1a0: 48 83 c4 08                   addq    $0x8, %rsp
// 1a4: 5b                            popq    %rbx
// 1a5: 41 5c                         popq    %r12
// 1a7: 41 5d                         popq    %r13
// 1a9: 41 5e                         popq    %r14
// 1ab: 41 5f                         popq    %r15
// 1ad: 5d                            popq    %rbp
// 1ae: c3                            retq
// 1af: 4c 89 ed                      movq    %r13, %rbp
// 1b2: 48 89 6b f0                   movq    %rbp, -0x10(%rbx)
// 1b6: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 4c 89 f7                      movq    %r14, %rdi
// 1c7: 48 89 de                      movq    %rbx, %rsi
// 1ca: 4c 89 fa                      movq    %r15, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 
static const unsigned char _BINARY_OP_SUBTRACT_FLOAT_code_body[478] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x71, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0c, 0x24, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3f, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x4c, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0xce, 0x00, 0x00, 0x00, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4c, 0x89, 0xed, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x59, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xe5, 0xeb, 0x34, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x23, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0xed, 0x48, 0x89, 0x6b, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BINARY_OP_SUBTRACT_FLOAT_code_holes[15] = {
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12},
    {0x87, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x52},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x8c},
    {0x165, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa2},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 'op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// c9: 00 00 00 00 00 00 00
static const unsigned char _BINARY_OP_SUBTRACT_FLOAT_data_body[209] = {0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmp3v1aptj0/_BINARY_OP_SUBTRACT_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 18: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 1c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001e:  R_X86_64_64  _PyLong_Subtract
// 26: 4c 89 ef                      movq    %r13, %rdi
// 29: 48 89 ee                      movq    %rbp, %rsi
// 2c: ff d0                         callq   *%rax
// 2e: 49 89 c4                      movq    %rax, %r12
// 31: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 35: 75 29                         jne     0x60 <_JIT_ENTRY+0x60>
// 37: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000039:  R_X86_64_64  PyInterpreterState_Get
// 41: ff d0                         callq   *%rax
// 43: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 4a: 48 8b 45 00                   movq    (%rbp), %rax
// 4e: 48 89 c1                      movq    %rax, %rcx
// 51: 48 ff c9                      decq    %rcx
// 54: 48 89 4d 00                   movq    %rcx, (%rbp)
// 58: 74 65                         je      0xbf <_JIT_ENTRY+0xbf>
// 5a: 48 83 f8 01                   cmpq    $0x1, %rax
// 5e: 7e 30                         jle     0x90 <_JIT_ENTRY+0x90>
// 60: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 65: 75 6e                         jne     0xd5 <_JIT_ENTRY+0xd5>
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  PyInterpreterState_Get
// 71: ff d0                         callq   *%rax
// 73: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 89 c1                      movq    %rax, %rcx
// 81: 48 ff c9                      decq    %rcx
// 84: 49 89 4d 00                   movq    %rcx, (%r13)
// 88: 74 7b                         je      0x105 <_JIT_ENTRY+0x105>
// 8a: 48 83 f8 01                   cmpq    $0x1, %rax
// 8e: 7f 45                         jg      0xd5 <_JIT_ENTRY+0xd5>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1+0x128
// 9a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009c:  R_X86_64_64  .rodata.str1.1+0x13a
// a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a6:  R_X86_64_64  .rodata.str1.1+0x17a
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  __assert_fail
// b8: ba b8 00 00 00                movl    $0xb8, %edx
// bd: ff d0                         callq   *%rax
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  PyObject_Free
// c9: 48 89 ef                      movq    %rbp, %rdi
// cc: ff d0                         callq   *%rax
// ce: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// d3: 74 92                         je      0x67 <_JIT_ENTRY+0x67>
// d5: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// d9: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// dd: 4d 85 e4                      testq   %r12, %r12
// e0: 74 3f                         je      0x121 <_JIT_ENTRY+0x121>
// e2: 4c 89 20                      movq    %r12, (%rax)
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  _JIT_CONTINUE
// ef: 48 89 df                      movq    %rbx, %rdi
// f2: 4c 89 fa                      movq    %r15, %rdx
// f5: 48 83 c4 08                   addq    $0x8, %rsp
// f9: 5b                            popq    %rbx
// fa: 41 5c                         popq    %r12
// fc: 41 5d                         popq    %r13
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: 5d                            popq    %rbp
// 103: ff e0                         jmpq    *%rax
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  PyObject_Free
// 10f: 4c 89 ef                      movq    %r13, %rdi
// 112: ff d0                         callq   *%rax
// 114: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 118: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 11c: 4d 85 e4                      testq   %r12, %r12
// 11f: 75 c1                         jne     0xe2 <_JIT_ENTRY+0xe2>
// 121: 48 8b 0b                      movq    (%rbx), %rcx
// 124: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000126:  R_X86_64_64  PyCode_Type
// 12e: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 132: 75 42                         jne     0x176 <_JIT_ENTRY+0x176>
// 134: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 138: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 13c: 48 83 c1 48                   addq    $0x48, %rcx
// 140: 49 29 ce                      subq    %rcx, %r14
// 143: 49 c1 ee 03                   shrq    $0x3, %r14
// 147: 45 85 f6                      testl   %r14d, %r14d
// 14a: 7e 59                         jle     0x1a5 <_JIT_ENTRY+0x1a5>
// 14c: 48 29 ce                      subq    %rcx, %rsi
// 14f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 153: 85 f6                         testl   %esi, %esi
// 155: 7e 7d                         jle     0x1d4 <_JIT_ENTRY+0x1d4>
// 157: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 15b: 48 29 c8                      subq    %rcx, %rax
// 15e: 48 c1 e8 03                   shrq    $0x3, %rax
// 162: 89 43 40                      movl    %eax, 0x40(%rbx)
// 165: 31 c0                         xorl    %eax, %eax
// 167: 48 83 c4 08                   addq    $0x8, %rsp
// 16b: 5b                            popq    %rbx
// 16c: 41 5c                         popq    %r12
// 16e: 41 5d                         popq    %r13
// 170: 41 5e                         popq    %r14
// 172: 41 5f                         popq    %r15
// 174: 5d                            popq    %rbp
// 175: c3                            retq
// 176: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000178:  R_X86_64_64  .rodata.str1.1+0x95
// 180: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000182:  R_X86_64_64  .rodata.str1.1+0xb3
// 18a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018c:  R_X86_64_64  .rodata.str1.1+0xf2
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  __assert_fail
// 19e: ba 4d 00 00 00                movl    $0x4d, %edx
// 1a3: ff d0                         callq   *%rax
// 1a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1+0x4e
// 1af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1+0x61
// 1b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  __assert_fail
// 1cd: ba 59 00 00 00                movl    $0x59, %edx
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x4e
// 1de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1+0x61
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  __assert_fail
// 1fc: ba 5b 00 00 00                movl    $0x5b, %edx
// 201: ff d0                         callq   *%rax
// 203: 
static const unsigned char _BINARY_OP_SUBTRACT_INT_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x4d, 0x00, 0x74, 0x65, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x7b, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0x92, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xc1, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x42, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x59, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_OP_SUBTRACT_INT_code_holes[24] = {
    {0x1e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13a},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17a},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x95},
    {0x182, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf2},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00'
// 1b4: 00 00 00 00
static const unsigned char _BINARY_OP_SUBTRACT_INT_data_body[441] = {0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_OP_SUBTRACT_INT_data_holes[1];

// _BINARY_SLICE
// 
// /tmp/tmp3v1aptj0/_BINARY_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 8b 76 f8                   movq    -0x8(%rsi), %rsi
// 18: 4d 8b 66 e8                   movq    -0x18(%r14), %r12
// 1c: 49 8b 7e f0                   movq    -0x10(%r14), %rdi
// 20: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000022:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 2a: ff d0                         callq   *%rax
// 2c: 48 85 c0                      testq   %rax, %rax
// 2f: 74 27                         je      0x58 <_JIT_ENTRY+0x58>
// 31: 48 89 c5                      movq    %rax, %rbp
// 34: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000036:  R_X86_64_64  PyObject_GetItem
// 3e: 4c 89 e7                      movq    %r12, %rdi
// 41: 48 89 ee                      movq    %rbp, %rsi
// 44: ff d0                         callq   *%rax
// 46: 49 89 c5                      movq    %rax, %r13
// 49: 48 8b 45 00                   movq    (%rbp), %rax
// 4d: 48 85 c0                      testq   %rax, %rax
// 50: 7e 14                         jle     0x66 <_JIT_ENTRY+0x66>
// 52: 85 c0                         testl   %eax, %eax
// 54: 79 36                         jns     0x8c <_JIT_ENTRY+0x8c>
// 56: eb 46                         jmp     0x9e <_JIT_ENTRY+0x9e>
// 58: 45 31 ed                      xorl    %r13d, %r13d
// 5b: 49 8b 04 24                   movq    (%r12), %rax
// 5f: 48 85 c0                      testq   %rax, %rax
// 62: 7f 43                         jg      0xa7 <_JIT_ENTRY+0xa7>
// 64: eb 5f                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 66: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_NegativeRefcount
// 7a: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 7f: 48 89 ea                      movq    %rbp, %rdx
// 82: ff d0                         callq   *%rax
// 84: 48 8b 45 00                   movq    (%rbp), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 12                         js      0x9e <_JIT_ENTRY+0x9e>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 48 ff 4d 00                   decq    (%rbp)
// 9c: 74 0f                         je      0xad <_JIT_ENTRY+0xad>
// 9e: 49 8b 04 24                   movq    (%r12), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7e 1e                         jle     0xc5 <_JIT_ENTRY+0xc5>
// a7: 85 c0                         testl   %eax, %eax
// a9: 79 40                         jns     0xeb <_JIT_ENTRY+0xeb>
// ab: eb 50                         jmp     0xfd <_JIT_ENTRY+0xfd>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_Dealloc
// b7: 48 89 ef                      movq    %rbp, %rdi
// ba: ff d0                         callq   *%rax
// bc: 49 8b 04 24                   movq    (%r12), %rax
// c0: 48 85 c0                      testq   %rax, %rax
// c3: 7f e2                         jg      0xa7 <_JIT_ENTRY+0xa7>
// c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c7:  R_X86_64_64  .rodata.str1.1
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_NegativeRefcount
// d9: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// de: 4c 89 e2                      movq    %r12, %rdx
// e1: ff d0                         callq   *%rax
// e3: 49 8b 04 24                   movq    (%r12), %rax
// e7: 85 c0                         testl   %eax, %eax
// e9: 78 12                         js      0xfd <_JIT_ENTRY+0xfd>
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f5: ff d0                         callq   *%rax
// f7: 49 ff 0c 24                   decq    (%r12)
// fb: 74 30                         je      0x12d <_JIT_ENTRY+0x12d>
// fd: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 101: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 105: 4d 85 ed                      testq   %r13, %r13
// 108: 74 3f                         je      0x149 <_JIT_ENTRY+0x149>
// 10a: 4c 89 28                      movq    %r13, (%rax)
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _JIT_CONTINUE
// 117: 48 89 df                      movq    %rbx, %rdi
// 11a: 4c 89 fa                      movq    %r15, %rdx
// 11d: 48 83 c4 08                   addq    $0x8, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: ff e0                         jmpq    *%rax
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_Dealloc
// 137: 4c 89 e7                      movq    %r12, %rdi
// 13a: ff d0                         callq   *%rax
// 13c: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 140: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 144: 4d 85 ed                      testq   %r13, %r13
// 147: 75 c1                         jne     0x10a <_JIT_ENTRY+0x10a>
// 149: 48 8b 0b                      movq    (%rbx), %rcx
// 14c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000014e:  R_X86_64_64  PyCode_Type
// 156: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 15a: 75 5c                         jne     0x1b8 <_JIT_ENTRY+0x1b8>
// 15c: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 160: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 164: 48 83 c1 48                   addq    $0x48, %rcx
// 168: 4c 89 f2                      movq    %r14, %rdx
// 16b: 48 29 ca                      subq    %rcx, %rdx
// 16e: 48 c1 ea 03                   shrq    $0x3, %rdx
// 172: 85 d2                         testl   %edx, %edx
// 174: 7e 71                         jle     0x1e7 <_JIT_ENTRY+0x1e7>
// 176: 49 83 c6 f8                   addq    $-0x8, %r14
// 17a: 49 29 ce                      subq    %rcx, %r14
// 17d: 49 c1 ee 03                   shrq    $0x3, %r14
// 181: 45 85 f6                      testl   %r14d, %r14d
// 184: 0f 8e 8c 00 00 00             jle     0x216 <_JIT_ENTRY+0x216>
// 18a: 48 29 ce                      subq    %rcx, %rsi
// 18d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 191: 85 f6                         testl   %esi, %esi
// 193: 0f 8e ac 00 00 00             jle     0x245 <_JIT_ENTRY+0x245>
// 199: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 19d: 48 29 c8                      subq    %rcx, %rax
// 1a0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a4: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1a7: 31 c0                         xorl    %eax, %eax
// 1a9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: 5d                            popq    %rbp
// 1b7: c3                            retq
// 1b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1+0xce
// 1c2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1+0xec
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1+0x12b
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  __assert_fail
// 1e0: ba 4d 00 00 00                movl    $0x4d, %edx
// 1e5: ff d0                         callq   *%rax
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x87
// 1f1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1+0x9a
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1+0x39
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  __assert_fail
// 20f: ba 57 00 00 00                movl    $0x57, %edx
// 214: ff d0                         callq   *%rax
// 216: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1+0x87
// 220: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1+0x9a
// 22a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022c:  R_X86_64_64  .rodata.str1.1+0x39
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  __assert_fail
// 23e: ba 59 00 00 00                movl    $0x59, %edx
// 243: ff d0                         callq   *%rax
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1+0x87
// 24f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1+0x9a
// 259: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025b:  R_X86_64_64  .rodata.str1.1+0x39
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  __assert_fail
// 26d: ba 5b 00 00 00                movl    $0x5b, %edx
// 272: ff d0                         callq   *%rax
// 274: 
static const unsigned char _BINARY_SLICE_code_body[629] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x76, 0xf8, 0x4d, 0x8b, 0x66, 0xe8, 0x49, 0x8b, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x79, 0x36, 0xeb, 0x46, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x43, 0xeb, 0x5f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x30, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x3f, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xed, 0x75, 0xc1, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x5c, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x48, 0xc1, 0xea, 0x03, 0x85, 0xd2, 0x7e, 0x71, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x57, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_SLICE_code_holes[29] = {
    {0x22, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SLICE_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SLICE_data_holes[1];

// _BINARY_SUBSCR
// 
// /tmp/tmp3v1aptj0/_BINARY_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 19: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001f:  R_X86_64_64  PyObject_GetItem
// 27: 48 89 ef                      movq    %rbp, %rdi
// 2a: 4c 89 ee                      movq    %r13, %rsi
// 2d: ff d0                         callq   *%rax
// 2f: 49 89 c4                      movq    %rax, %r12
// 32: 48 8b 45 00                   movq    (%rbp), %rax
// 36: 48 85 c0                      testq   %rax, %rax
// 39: 7e 10                         jle     0x4b <_JIT_ENTRY+0x4b>
// 3b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000003d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 32                         jns     0x7b <_JIT_ENTRY+0x7b>
// 49: eb 39                         jmp     0x84 <_JIT_ENTRY+0x84>
// 4b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004d:  R_X86_64_64  .rodata.str1.1
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _Py_NegativeRefcount
// 5f: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 64: 48 89 ea                      movq    %rbp, %rdx
// 67: ff d0                         callq   *%rax
// 69: 48 8b 45 00                   movq    (%rbp), %rax
// 6d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 77: 85 c0                         testl   %eax, %eax
// 79: 78 09                         js      0x84 <_JIT_ENTRY+0x84>
// 7b: 41 ff d7                      callq   *%r15
// 7e: 48 ff 4d 00                   decq    (%rbp)
// 82: 74 0f                         je      0x93 <_JIT_ENTRY+0x93>
// 84: 49 8b 45 00                   movq    (%r13), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7e 1e                         jle     0xab <_JIT_ENTRY+0xab>
// 8d: 85 c0                         testl   %eax, %eax
// 8f: 79 40                         jns     0xd1 <_JIT_ENTRY+0xd1>
// 91: eb 47                         jmp     0xda <_JIT_ENTRY+0xda>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_Dealloc
// 9d: 48 89 ef                      movq    %rbp, %rdi
// a0: ff d0                         callq   *%rax
// a2: 49 8b 45 00                   movq    (%r13), %rax
// a6: 48 85 c0                      testq   %rax, %rax
// a9: 7f e2                         jg      0x8d <_JIT_ENTRY+0x8d>
// ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ad:  R_X86_64_64  .rodata.str1.1
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_NegativeRefcount
// bf: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// c4: 4c 89 ea                      movq    %r13, %rdx
// c7: ff d0                         callq   *%rax
// c9: 49 8b 45 00                   movq    (%r13), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 09                         js      0xda <_JIT_ENTRY+0xda>
// d1: 41 ff d7                      callq   *%r15
// d4: 49 ff 4d 00                   decq    (%r13)
// d8: 74 31                         je      0x10b <_JIT_ENTRY+0x10b>
// da: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// de: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// e2: 4d 85 e4                      testq   %r12, %r12
// e5: 74 40                         je      0x127 <_JIT_ENTRY+0x127>
// e7: 4c 89 20                      movq    %r12, (%rax)
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _JIT_CONTINUE
// f4: 48 89 df                      movq    %rbx, %rdi
// f7: 48 8b 14 24                   movq    (%rsp), %rdx
// fb: 48 83 c4 08                   addq    $0x8, %rsp
// ff: 5b                            popq    %rbx
// 100: 41 5c                         popq    %r12
// 102: 41 5d                         popq    %r13
// 104: 41 5e                         popq    %r14
// 106: 41 5f                         popq    %r15
// 108: 5d                            popq    %rbp
// 109: ff e0                         jmpq    *%rax
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 ef                      movq    %r13, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 11e: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 122: 4d 85 e4                      testq   %r12, %r12
// 125: 75 c0                         jne     0xe7 <_JIT_ENTRY+0xe7>
// 127: 48 8b 0b                      movq    (%rbx), %rcx
// 12a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012c:  R_X86_64_64  PyCode_Type
// 134: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 138: 75 42                         jne     0x17c <_JIT_ENTRY+0x17c>
// 13a: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 13e: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 142: 48 83 c1 48                   addq    $0x48, %rcx
// 146: 49 29 ce                      subq    %rcx, %r14
// 149: 49 c1 ee 03                   shrq    $0x3, %r14
// 14d: 45 85 f6                      testl   %r14d, %r14d
// 150: 7e 59                         jle     0x1ab <_JIT_ENTRY+0x1ab>
// 152: 48 29 ce                      subq    %rcx, %rsi
// 155: 48 c1 ee 03                   shrq    $0x3, %rsi
// 159: 85 f6                         testl   %esi, %esi
// 15b: 7e 7d                         jle     0x1da <_JIT_ENTRY+0x1da>
// 15d: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 161: 48 29 c8                      subq    %rcx, %rax
// 164: 48 c1 e8 03                   shrq    $0x3, %rax
// 168: 89 43 40                      movl    %eax, 0x40(%rbx)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: 48 83 c4 08                   addq    $0x8, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: c3                            retq
// 17c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017e:  R_X86_64_64  .rodata.str1.1+0xce
// 186: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1+0xec
// 190: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000192:  R_X86_64_64  .rodata.str1.1+0x12b
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  __assert_fail
// 1a4: ba 4d 00 00 00                movl    $0x4d, %edx
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ad:  R_X86_64_64  .rodata.str1.1+0x87
// 1b5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1+0x9a
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1+0x39
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  __assert_fail
// 1d3: ba 59 00 00 00                movl    $0x59, %edx
// 1d8: ff d0                         callq   *%rax
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x87
// 1e4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e6:  R_X86_64_64  .rodata.str1.1+0x9a
// 1ee: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1+0x39
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  __assert_fail
// 202: ba 5b 00 00 00                movl    $0x5b, %edx
// 207: ff d0                         callq   *%rax
// 209: 
static const unsigned char _BINARY_SUBSCR_code_body[522] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x31, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x40, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xc0, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x42, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x59, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_SUBSCR_code_holes[24] = {
    {0x1f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_data_holes[1];

// _BINARY_SUBSCR_DICT
// 
// /tmp/tmp3v1aptj0/_BINARY_SUBSCR_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyDict_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 74 4b                         je      0x70 <_JIT_ENTRY+0x70>
// 25: 49 29 de                      subq    %rbx, %r14
// 28: 49 83 c6 b8                   addq    $-0x48, %r14
// 2c: 49 c1 ee 03                   shrq    $0x3, %r14
// 30: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 34: 48 8b 03                      movq    (%rbx), %rax
// 37: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000039:  R_X86_64_64  PyCode_Type
// 41: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 45: 0f 85 9e 01 00 00             jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 4b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004d:  R_X86_64_64  _JIT_TARGET
// 55: 89 c9                         movl    %ecx, %ecx
// 57: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 61: 48 83 c4 08                   addq    $0x8, %rsp
// 65: 5b                            popq    %rbx
// 66: 41 5c                         popq    %r12
// 68: 41 5d                         popq    %r13
// 6a: 41 5e                         popq    %r14
// 6c: 41 5f                         popq    %r15
// 6e: 5d                            popq    %rbp
// 6f: c3                            retq
// 70: 49 89 d7                      movq    %rdx, %r15
// 73: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  PyDict_GetItemRef
// 81: 48 89 e2                      movq    %rsp, %rdx
// 84: 4c 89 ef                      movq    %r13, %rdi
// 87: 4c 89 e6                      movq    %r12, %rsi
// 8a: ff d0                         callq   *%rax
// 8c: 89 c5                         movl    %eax, %ebp
// 8e: 85 c0                         testl   %eax, %eax
// 90: 74 0f                         je      0xa1 <_JIT_ENTRY+0xa1>
// 92: 49 8b 45 00                   movq    (%r13), %rax
// 96: 48 85 c0                      testq   %rax, %rax
// 99: 7e 1e                         jle     0xb9 <_JIT_ENTRY+0xb9>
// 9b: 85 c0                         testl   %eax, %eax
// 9d: 79 40                         jns     0xdf <_JIT_ENTRY+0xdf>
// 9f: eb 50                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _PyErr_SetKeyError
// ab: 4c 89 e7                      movq    %r12, %rdi
// ae: ff d0                         callq   *%rax
// b0: 49 8b 45 00                   movq    (%r13), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7f e2                         jg      0x9b <_JIT_ENTRY+0x9b>
// b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000bb:  R_X86_64_64  .rodata.str1.1
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _Py_NegativeRefcount
// cd: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// d2: 4c 89 ea                      movq    %r13, %rdx
// d5: ff d0                         callq   *%rax
// d7: 49 8b 45 00                   movq    (%r13), %rax
// db: 85 c0                         testl   %eax, %eax
// dd: 78 12                         js      0xf1 <_JIT_ENTRY+0xf1>
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e9: ff d0                         callq   *%rax
// eb: 49 ff 4d 00                   decq    (%r13)
// ef: 74 0f                         je      0x100 <_JIT_ENTRY+0x100>
// f1: 49 8b 04 24                   movq    (%r12), %rax
// f5: 48 85 c0                      testq   %rax, %rax
// f8: 7e 1e                         jle     0x118 <_JIT_ENTRY+0x118>
// fa: 85 c0                         testl   %eax, %eax
// fc: 79 40                         jns     0x13e <_JIT_ENTRY+0x13e>
// fe: eb 50                         jmp     0x150 <_JIT_ENTRY+0x150>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_Dealloc
// 10a: 4c 89 ef                      movq    %r13, %rdi
// 10d: ff d0                         callq   *%rax
// 10f: 49 8b 04 24                   movq    (%r12), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7f e2                         jg      0xfa <_JIT_ENTRY+0xfa>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_NegativeRefcount
// 12c: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 131: 4c 89 e2                      movq    %r12, %rdx
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 78 12                         js      0x150 <_JIT_ENTRY+0x150>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 74 33                         je      0x183 <_JIT_ENTRY+0x183>
// 150: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 154: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 158: 85 ed                         testl   %ebp, %ebp
// 15a: 7e 42                         jle     0x19e <_JIT_ENTRY+0x19e>
// 15c: 48 8b 0c 24                   movq    (%rsp), %rcx
// 160: 48 89 08                      movq    %rcx, (%rax)
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _JIT_CONTINUE
// 16d: 48 89 df                      movq    %rbx, %rdi
// 170: 4c 89 fa                      movq    %r15, %rdx
// 173: 48 83 c4 08                   addq    $0x8, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: 5d                            popq    %rbp
// 181: ff e0                         jmpq    *%rax
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_Dealloc
// 18d: 4c 89 e7                      movq    %r12, %rdi
// 190: ff d0                         callq   *%rax
// 192: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 196: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 19a: 85 ed                         testl   %ebp, %ebp
// 19c: 7f be                         jg      0x15c <_JIT_ENTRY+0x15c>
// 19e: 48 8b 0b                      movq    (%rbx), %rcx
// 1a1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a3:  R_X86_64_64  PyCode_Type
// 1ab: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 1af: 75 38                         jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 1b1: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 1b5: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 1b9: 48 83 c1 48                   addq    $0x48, %rcx
// 1bd: 49 29 ce                      subq    %rcx, %r14
// 1c0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c4: 45 85 f6                      testl   %r14d, %r14d
// 1c7: 7e 4f                         jle     0x218 <_JIT_ENTRY+0x218>
// 1c9: 48 29 ce                      subq    %rcx, %rsi
// 1cc: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1d0: 85 f6                         testl   %esi, %esi
// 1d2: 7e 73                         jle     0x247 <_JIT_ENTRY+0x247>
// 1d4: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 1d8: 48 29 c8                      subq    %rcx, %rax
// 1db: 48 c1 e8 03                   shrq    $0x3, %rax
// 1df: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1e2: 31 c0                         xorl    %eax, %eax
// 1e4: e9 78 fe ff ff                jmp     0x61 <_JIT_ENTRY+0x61>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1+0xce
// 1f3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1+0xec
// 1fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ff:  R_X86_64_64  .rodata.str1.1+0x12b
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  __assert_fail
// 211: ba 4d 00 00 00                movl    $0x4d, %edx
// 216: ff d0                         callq   *%rax
// 218: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1+0x87
// 222: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1+0x9a
// 22c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022e:  R_X86_64_64  .rodata.str1.1+0x39
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  __assert_fail
// 240: ba 59 00 00 00                movl    $0x59, %edx
// 245: ff d0                         callq   *%rax
// 247: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1+0x87
// 251: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1+0x9a
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  .rodata.str1.1+0x39
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  __assert_fail
// 26f: ba 5b 00 00 00                movl    $0x5b, %edx
// 274: ff d0                         callq   *%rax
// 276: 
static const unsigned char _BINARY_SUBSCR_DICT_code_body[631] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x4b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x9e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x7e, 0x42, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x7f, 0xbe, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x38, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x4f, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x73, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x78, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_SUBSCR_DICT_code_holes[28] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _BINARY_SUBSCR_DICT_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_DICT_data_holes[1];

// _BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmp3v1aptj0/_BINARY_SUBSCR_LIST_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 23: 0f 85 e3 00 00 00             jne     0x10c <_JIT_ENTRY+0x10c>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyList_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 ca 00 00 00             jne     0x10c <_JIT_ENTRY+0x10c>
// 42: f6 81 ab 00 00 00 01          testb   $0x1, 0xab(%rcx)
// 49: 0f 84 c1 01 00 00             je      0x210 <_JIT_ENTRY+0x210>
// 4f: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 54: 0f 87 b2 00 00 00             ja      0x10c <_JIT_ENTRY+0x10c>
// 5a: f6 80 ab 00 00 00 02          testb   $0x2, 0xab(%rax)
// 61: 0f 84 d8 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// 67: 41 8b 45 18                   movl    0x18(%r13), %eax
// 6b: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 70: 0f 8e 96 00 00 00             jle     0x10c <_JIT_ENTRY+0x10c>
// 76: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 7b: 48 8b 2c c1                   movq    (%rcx,%rax,8), %rbp
// 7f: 48 85 ed                      testq   %rbp, %rbp
// 82: 0f 84 e6 01 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 88: 49 89 d7                      movq    %rdx, %r15
// 8b: 8b 45 00                      movl    (%rbp), %eax
// 8e: ff c0                         incl    %eax
// 90: 74 0f                         je      0xa1 <_JIT_ENTRY+0xa1>
// 92: 89 45 00                      movl    %eax, (%rbp)
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9f: ff d0                         callq   *%rax
// a1: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// a6: 0f 85 ba 00 00 00             jne     0x166 <_JIT_ENTRY+0x166>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  PyInterpreterState_Get
// b6: ff d0                         callq   *%rax
// b8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// bf: 49 8b 45 00                   movq    (%r13), %rax
// c3: 48 89 c1                      movq    %rax, %rcx
// c6: 48 ff c9                      decq    %rcx
// c9: 49 89 4d 00                   movq    %rcx, (%r13)
// cd: 0f 84 84 00 00 00             je      0x157 <_JIT_ENTRY+0x157>
// d3: 48 83 f8 01                   cmpq    $0x1, %rax
// d7: 0f 8f 89 00 00 00             jg      0x166 <_JIT_ENTRY+0x166>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1+0x126
// e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1+0x138
// f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f3:  R_X86_64_64  .rodata.str1.1+0x178
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  __assert_fail
// 105: ba b8 00 00 00                movl    $0xb8, %edx
// 10a: ff d0                         callq   *%rax
// 10c: 49 29 de                      subq    %rbx, %r14
// 10f: 49 83 c6 b8                   addq    $-0x48, %r14
// 113: 49 c1 ee 03                   shrq    $0x3, %r14
// 117: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 11b: 48 8b 03                      movq    (%rbx), %rax
// 11e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000120:  R_X86_64_64  PyCode_Type
// 128: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 12c: 0f 85 af 00 00 00             jne     0x1e1 <_JIT_ENTRY+0x1e1>
// 132: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000134:  R_X86_64_64  _JIT_TARGET
// 13c: 89 c9                         movl    %ecx, %ecx
// 13e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 142: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 148: 48 83 c4 08                   addq    $0x8, %rsp
// 14c: 5b                            popq    %rbx
// 14d: 41 5c                         popq    %r12
// 14f: 41 5d                         popq    %r13
// 151: 41 5e                         popq    %r14
// 153: 41 5f                         popq    %r15
// 155: 5d                            popq    %rbp
// 156: c3                            retq
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  PyObject_Free
// 161: 4c 89 ef                      movq    %r13, %rdi
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 48 85 c0                      testq   %rax, %rax
// 16d: 7f 22                         jg      0x191 <_JIT_ENTRY+0x191>
// 16f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000171:  R_X86_64_64  .rodata.str1.1
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_NegativeRefcount
// 183: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 188: 4c 89 e2                      movq    %r12, %rdx
// 18b: ff d0                         callq   *%rax
// 18d: 49 8b 04 24                   movq    (%r12), %rax
// 191: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 195: 85 c0                         testl   %eax, %eax
// 197: 78 21                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 49 ff 0c 24                   decq    (%r12)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 4c 89 e7                      movq    %r12, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _JIT_CONTINUE
// 1c8: 48 89 df                      movq    %rbx, %rdi
// 1cb: 4c 89 ee                      movq    %r13, %rsi
// 1ce: 4c 89 fa                      movq    %r15, %rdx
// 1d1: 48 83 c4 08                   addq    $0x8, %rsp
// 1d5: 5b                            popq    %rbx
// 1d6: 41 5c                         popq    %r12
// 1d8: 41 5d                         popq    %r13
// 1da: 41 5e                         popq    %r14
// 1dc: 41 5f                         popq    %r15
// 1de: 5d                            popq    %rbp
// 1df: ff e0                         jmpq    *%rax
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1+0x93
// 1eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ed:  R_X86_64_64  .rodata.str1.1+0xb1
// 1f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0xf0
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  __assert_fail
// 209: ba 4d 00 00 00                movl    $0x4d, %edx
// 20e: ff d0                         callq   *%rax
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1+0x1b2
// 21a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000021c:  R_X86_64_64  .rodata.str1.1+0x1c3
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  .rodata.str1.1+0x201
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  __assert_fail
// 238: ba cc 00 00 00                movl    $0xcc, %edx
// 23d: ff d0                         callq   *%rax
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1+0x238
// 249: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1+0x249
// 253: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000255:  R_X86_64_64  .rodata.str1.1+0x285
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  __assert_fail
// 267: ba 1f 00 00 00                movl    $0x1f, %edx
// 26c: ff d0                         callq   *%rax
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  .rodata.str1.1+0x87
// 278: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1
// 282: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000284:  R_X86_64_64  .rodata.str1.1+0x39
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  __assert_fail
// 296: ba c9 01 00 00                movl    $0x1c9, %edx            # imm = 0x1C9
// 29b: ff d0                         callq   *%rax
// 29d: 
static const unsigned char _BINARY_SUBSCR_LIST_INT_code_body[670] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x84, 0xc1, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xb2, 0x00, 0x00, 0x00, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0xd8, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc1, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xe6, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcc, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xc9, 0x01, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_SUBSCR_LIST_INT_code_holes[33] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x126},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x138},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x178},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb1},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b2},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c3},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x201},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x238},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x285},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00res != NULL\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00PyLong_Check(op)\x00/home/jglass/Documents/cpython/Include/internal/pycore_long.h\x00int _PyLong_IsNonNegativeCompact(const PyLongObject *)\x00PyList_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/listobject.h\x00Py_ssize_t PyList_GET_SIZE(PyObject *)\x00'
// 2ac: 00 00 00 00
static const unsigned char _BINARY_SUBSCR_LIST_INT_data_body[689] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x68, 0x00, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x49, 0x73, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_LIST_INT_data_holes[1];

// _BINARY_SUBSCR_STR_INT
// 
// /tmp/tmp3v1aptj0/_BINARY_SUBSCR_STR_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 23: 0f 85 27 01 00 00             jne     0x150 <_JIT_ENTRY+0x150>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyUnicode_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 0e 01 00 00             jne     0x150 <_JIT_ENTRY+0x150>
// 42: f6 81 ab 00 00 00 01          testb   $0x1, 0xab(%rcx)
// 49: 0f 84 81 02 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 4f: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 54: 0f 87 f6 00 00 00             ja      0x150 <_JIT_ENTRY+0x150>
// 5a: f6 80 ab 00 00 00 10          testb   $0x10, 0xab(%rax)
// 61: 0f 84 98 02 00 00             je      0x2ff <_JIT_ENTRY+0x2ff>
// 67: 41 8b 45 18                   movl    0x18(%r13), %eax
// 6b: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 70: 0f 8e da 00 00 00             jle     0x150 <_JIT_ENTRY+0x150>
// 76: 49 89 d7                      movq    %rdx, %r15
// 79: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 7e: 89 ca                         movl    %ecx, %edx
// 80: c1 ea 02                      shrl    $0x2, %edx
// 83: 83 e2 07                      andl    $0x7, %edx
// 86: 83 fa 04                      cmpl    $0x4, %edx
// 89: 74 26                         je      0xb1 <_JIT_ENTRY+0xb1>
// 8b: 83 fa 02                      cmpl    $0x2, %edx
// 8e: 74 32                         je      0xc2 <_JIT_ENTRY+0xc2>
// 90: 83 fa 01                      cmpl    $0x1, %edx
// 93: 0f 85 95 02 00 00             jne     0x32e <_JIT_ENTRY+0x32e>
// 99: f6 c1 20                      testb   $0x20, %cl
// 9c: 75 62                         jne     0x100 <_JIT_ENTRY+0x100>
// 9e: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// a3: 48 85 c9                      testq   %rcx, %rcx
// a6: 74 29                         je      0xd1 <_JIT_ENTRY+0xd1>
// a8: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// ac: e9 9a 00 00 00                jmp     0x14b <_JIT_ENTRY+0x14b>
// b1: f6 c1 20                      testb   $0x20, %cl
// b4: 75 64                         jne     0x11a <_JIT_ENTRY+0x11a>
// b6: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// bb: 48 85 c9                      testq   %rcx, %rcx
// be: 75 6e                         jne     0x12e <_JIT_ENTRY+0x12e>
// c0: eb 0f                         jmp     0xd1 <_JIT_ENTRY+0xd1>
// c2: f6 c1 20                      testb   $0x20, %cl
// c5: 75 6c                         jne     0x133 <_JIT_ENTRY+0x133>
// c7: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// cc: 48 85 c9                      testq   %rcx, %rcx
// cf: 75 76                         jne     0x147 <_JIT_ENTRY+0x147>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1+0x2db
// db: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000dd:  R_X86_64_64  .rodata.str1.1+0x1f2
// e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1+0x2ae
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  __assert_fail
// f9: ba 01 01 00 00                movl    $0x101, %edx            # imm = 0x101
// fe: ff d0                         callq   *%rax
// 100: 31 d2                         xorl    %edx, %edx
// 102: f6 c1 40                      testb   $0x40, %cl
// 105: 0f 94 c2                      sete    %dl
// 108: 48 c1 e2 04                   shlq    $0x4, %rdx
// 10c: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 110: 48 83 c1 28                   addq    $0x28, %rcx
// 114: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 118: eb 31                         jmp     0x14b <_JIT_ENTRY+0x14b>
// 11a: 31 d2                         xorl    %edx, %edx
// 11c: f6 c1 40                      testb   $0x40, %cl
// 11f: 0f 94 c2                      sete    %dl
// 122: 48 c1 e2 04                   shlq    $0x4, %rdx
// 126: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 12a: 48 83 c1 28                   addq    $0x28, %rcx
// 12e: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// 131: eb 18                         jmp     0x14b <_JIT_ENTRY+0x14b>
// 133: 31 d2                         xorl    %edx, %edx
// 135: f6 c1 40                      testb   $0x40, %cl
// 138: 0f 94 c2                      sete    %dl
// 13b: 48 c1 e2 04                   shlq    $0x4, %rdx
// 13f: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 143: 48 83 c1 28                   addq    $0x28, %rcx
// 147: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 14b: 83 fd 7f                      cmpl    $0x7f, %ebp
// 14e: 76 4b                         jbe     0x19b <_JIT_ENTRY+0x19b>
// 150: 49 29 de                      subq    %rbx, %r14
// 153: 49 83 c6 b8                   addq    $-0x48, %r14
// 157: 49 c1 ee 03                   shrq    $0x3, %r14
// 15b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 15f: 48 8b 03                      movq    (%rbx), %rax
// 162: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000164:  R_X86_64_64  PyCode_Type
// 16c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 170: 0f 85 2b 01 00 00             jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  _JIT_TARGET
// 180: 89 c9                         movl    %ecx, %ecx
// 182: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 186: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 18c: 48 83 c4 08                   addq    $0x8, %rsp
// 190: 5b                            popq    %rbx
// 191: 41 5c                         popq    %r12
// 193: 41 5d                         popq    %r13
// 195: 41 5e                         popq    %r14
// 197: 41 5f                         popq    %r15
// 199: 5d                            popq    %rbp
// 19a: c3                            retq
// 19b: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1a0: 75 67                         jne     0x209 <_JIT_ENTRY+0x209>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  PyInterpreterState_Get
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1b5: 49 8b 45 00                   movq    (%r13), %rax
// 1b9: 48 89 c1                      movq    %rax, %rcx
// 1bc: 48 ff c9                      decq    %rcx
// 1bf: 49 89 4d 00                   movq    %rcx, (%r13)
// 1c3: 74 35                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 1c5: 48 83 f8 01                   cmpq    $0x1, %rax
// 1c9: 7f 3e                         jg      0x209 <_JIT_ENTRY+0x209>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1+0xcc
// 1d5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d7:  R_X86_64_64  .rodata.str1.1+0xde
// 1df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e1:  R_X86_64_64  .rodata.str1.1+0x11e
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  __assert_fail
// 1f3: ba b8 00 00 00                movl    $0xb8, %edx
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  PyObject_Free
// 204: 4c 89 ef                      movq    %r13, %rdi
// 207: ff d0                         callq   *%rax
// 209: 49 8b 04 24                   movq    (%r12), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 7f 22                         jg      0x234 <_JIT_ENTRY+0x234>
// 212: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000214:  R_X86_64_64  .rodata.str1.1
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_NegativeRefcount
// 226: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 22b: 4c 89 e2                      movq    %r12, %rdx
// 22e: ff d0                         callq   *%rax
// 230: 49 8b 04 24                   movq    (%r12), %rax
// 234: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 238: 85 c0                         testl   %eax, %eax
// 23a: 78 21                         js      0x25d <_JIT_ENTRY+0x25d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 49 ff 0c 24                   decq    (%r12)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 4c 89 e7                      movq    %r12, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 89 e8                         movl    %ebp, %eax
// 25f: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 263: 48 c1 e0 04                   shlq    $0x4, %rax
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  _PyRuntime
// 271: 48 01 c8                      addq    %rcx, %rax
// 274: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 27a: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _JIT_CONTINUE
// 288: 48 89 df                      movq    %rbx, %rdi
// 28b: 4c 89 ee                      movq    %r13, %rsi
// 28e: 4c 89 fa                      movq    %r15, %rdx
// 291: 48 83 c4 08                   addq    $0x8, %rsp
// 295: 5b                            popq    %rbx
// 296: 41 5c                         popq    %r12
// 298: 41 5d                         popq    %r13
// 29a: 41 5e                         popq    %r14
// 29c: 41 5f                         popq    %r15
// 29e: 5d                            popq    %rbp
// 29f: ff e0                         jmpq    *%rax
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1+0x39
// 2ab: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ad:  R_X86_64_64  .rodata.str1.1+0x57
// 2b5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1+0x96
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  __assert_fail
// 2c9: ba 4d 00 00 00                movl    $0x4d, %edx
// 2ce: ff d0                         callq   *%rax
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1+0x158
// 2da: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002dc:  R_X86_64_64  .rodata.str1.1+0x169
// 2e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e6:  R_X86_64_64  .rodata.str1.1+0x1a7
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  __assert_fail
// 2f8: ba cc 00 00 00                movl    $0xcc, %edx
// 2fd: ff d0                         callq   *%rax
// 2ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000301:  R_X86_64_64  .rodata.str1.1+0x1de
// 309: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000030b:  R_X86_64_64  .rodata.str1.1+0x1f2
// 313: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000315:  R_X86_64_64  .rodata.str1.1+0x231
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  __assert_fail
// 327: ba 18 01 00 00                movl    $0x118, %edx            # imm = 0x118
// 32c: ff d0                         callq   *%rax
// 32e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000330:  R_X86_64_64  .rodata.str1.1+0x291
// 338: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000033a:  R_X86_64_64  .rodata.str1.1+0x1f2
// 342: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000344:  R_X86_64_64  .rodata.str1.1+0x25d
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  __assert_fail
// 356: ba 5e 01 00 00                movl    $0x15e, %edx            # imm = 0x15E
// 35b: ff d0                         callq   *%rax
// 35d: 
static const unsigned char _BINARY_SUBSCR_STR_INT_code_body[862] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x27, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0e, 0x01, 0x00, 0x00, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x84, 0x81, 0x02, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xf6, 0x00, 0x00, 0x00, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x84, 0x98, 0x02, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xda, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x04, 0x74, 0x26, 0x83, 0xfa, 0x02, 0x74, 0x32, 0x83, 0xfa, 0x01, 0x0f, 0x85, 0x95, 0x02, 0x00, 0x00, 0xf6, 0xc1, 0x20, 0x75, 0x62, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x0f, 0xb6, 0x2c, 0x01, 0xe9, 0x9a, 0x00, 0x00, 0x00, 0xf6, 0xc1, 0x20, 0x75, 0x64, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x85, 0xc9, 0x75, 0x6e, 0xeb, 0x0f, 0xf6, 0xc1, 0x20, 0x75, 0x6c, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x85, 0xc9, 0x75, 0x76, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x01, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0xeb, 0x18, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0x83, 0xfd, 0x7f, 0x76, 0x4b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x2b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x35, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcc, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x18, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5e, 0x01, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_SUBSCR_STR_INT_code_holes[37] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2db},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f2},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2ae},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcc},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xde},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11e},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x158},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x169},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1de},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f2},
    {0x315, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x231},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x291},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f2},
    {0x344, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x25d},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00PyLong_Check(op)\x00/home/jglass/Documents/cpython/Include/internal/pycore_long.h\x00int _PyLong_IsNonNegativeCompact(const PyLongObject *)\x00PyUnicode_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/unicodeobject.h\x00Py_ssize_t PyUnicode_GET_LENGTH(PyObject *)\x00Py_UCS4 PyUnicode_READ_CHAR(PyObject *, Py_ssize_t)\x00kind == PyUnicode_4BYTE_KIND\x00void *_PyUnicode_NONCOMPACT_DATA(PyObject *)\x00data != NULL\x00'
// 2e8: 
static const unsigned char _BINARY_SUBSCR_STR_INT_data_body[745] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x68, 0x00, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x49, 0x73, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x55, 0x43, 0x53, 0x34, 0x20, 0x50, 0x79, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x50, 0x79, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x64, 0x61, 0x74, 0x61, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00};
static const Hole _BINARY_SUBSCR_STR_INT_data_holes[1];

// _BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmp3v1aptj0/_BINARY_SUBSCR_TUPLE_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 23: 0f 85 df 00 00 00             jne     0x108 <_JIT_ENTRY+0x108>
// 29: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyTuple_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 c6 00 00 00             jne     0x108 <_JIT_ENTRY+0x108>
// 42: f6 81 ab 00 00 00 01          testb   $0x1, 0xab(%rcx)
// 49: 0f 84 bd 01 00 00             je      0x20c <_JIT_ENTRY+0x20c>
// 4f: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 54: 0f 87 ae 00 00 00             ja      0x108 <_JIT_ENTRY+0x108>
// 5a: f6 80 ab 00 00 00 04          testb   $0x4, 0xab(%rax)
// 61: 0f 84 d4 01 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 67: 41 8b 45 18                   movl    0x18(%r13), %eax
// 6b: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 70: 0f 8e 92 00 00 00             jle     0x108 <_JIT_ENTRY+0x108>
// 76: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 7b: 48 85 ed                      testq   %rbp, %rbp
// 7e: 0f 84 e6 01 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// 84: 49 89 d7                      movq    %rdx, %r15
// 87: 8b 45 00                      movl    (%rbp), %eax
// 8a: ff c0                         incl    %eax
// 8c: 74 0f                         je      0x9d <_JIT_ENTRY+0x9d>
// 8e: 89 45 00                      movl    %eax, (%rbp)
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9b: ff d0                         callq   *%rax
// 9d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// a2: 0f 85 ba 00 00 00             jne     0x162 <_JIT_ENTRY+0x162>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  PyInterpreterState_Get
// b2: ff d0                         callq   *%rax
// b4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// bb: 49 8b 45 00                   movq    (%r13), %rax
// bf: 48 89 c1                      movq    %rax, %rcx
// c2: 48 ff c9                      decq    %rcx
// c5: 49 89 4d 00                   movq    %rcx, (%r13)
// c9: 0f 84 84 00 00 00             je      0x153 <_JIT_ENTRY+0x153>
// cf: 48 83 f8 01                   cmpq    $0x1, %rax
// d3: 0f 8f 89 00 00 00             jg      0x162 <_JIT_ENTRY+0x162>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1+0x126
// e3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1+0x138
// ed: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1+0x178
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  __assert_fail
// 101: ba b8 00 00 00                movl    $0xb8, %edx
// 106: ff d0                         callq   *%rax
// 108: 49 29 de                      subq    %rbx, %r14
// 10b: 49 83 c6 b8                   addq    $-0x48, %r14
// 10f: 49 c1 ee 03                   shrq    $0x3, %r14
// 113: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 117: 48 8b 03                      movq    (%rbx), %rax
// 11a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011c:  R_X86_64_64  PyCode_Type
// 124: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 128: 0f 85 af 00 00 00             jne     0x1dd <_JIT_ENTRY+0x1dd>
// 12e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000130:  R_X86_64_64  _JIT_TARGET
// 138: 89 c9                         movl    %ecx, %ecx
// 13a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 13e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 144: 48 83 c4 08                   addq    $0x8, %rsp
// 148: 5b                            popq    %rbx
// 149: 41 5c                         popq    %r12
// 14b: 41 5d                         popq    %r13
// 14d: 41 5e                         popq    %r14
// 14f: 41 5f                         popq    %r15
// 151: 5d                            popq    %rbp
// 152: c3                            retq
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  PyObject_Free
// 15d: 4c 89 ef                      movq    %r13, %rdi
// 160: ff d0                         callq   *%rax
// 162: 49 8b 04 24                   movq    (%r12), %rax
// 166: 48 85 c0                      testq   %rax, %rax
// 169: 7f 22                         jg      0x18d <_JIT_ENTRY+0x18d>
// 16b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016d:  R_X86_64_64  .rodata.str1.1
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_NegativeRefcount
// 17f: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 184: 4c 89 e2                      movq    %r12, %rdx
// 187: ff d0                         callq   *%rax
// 189: 49 8b 04 24                   movq    (%r12), %rax
// 18d: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 191: 85 c0                         testl   %eax, %eax
// 193: 78 21                         js      0x1b6 <_JIT_ENTRY+0x1b6>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19f: ff d0                         callq   *%rax
// 1a1: 49 ff 0c 24                   decq    (%r12)
// 1a5: 75 0f                         jne     0x1b6 <_JIT_ENTRY+0x1b6>
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_Dealloc
// 1b1: 4c 89 e7                      movq    %r12, %rdi
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 89 df                      movq    %rbx, %rdi
// 1c7: 4c 89 ee                      movq    %r13, %rsi
// 1ca: 4c 89 fa                      movq    %r15, %rdx
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1+0x93
// 1e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0xb1
// 1f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1+0xf0
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  __assert_fail
// 205: ba 4d 00 00 00                movl    $0x4d, %edx
// 20a: ff d0                         callq   *%rax
// 20c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020e:  R_X86_64_64  .rodata.str1.1+0x1b2
// 216: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1+0x1c3
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  .rodata.str1.1+0x201
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  __assert_fail
// 234: ba cc 00 00 00                movl    $0xcc, %edx
// 239: ff d0                         callq   *%rax
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0x238
// 245: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1+0x24a
// 24f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000251:  R_X86_64_64  .rodata.str1.1+0x287
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  __assert_fail
// 263: ba 16 00 00 00                movl    $0x16, %edx
// 268: ff d0                         callq   *%rax
// 26a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026c:  R_X86_64_64  .rodata.str1.1+0x87
// 274: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1
// 27e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000280:  R_X86_64_64  .rodata.str1.1+0x39
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  __assert_fail
// 292: ba f7 01 00 00                movl    $0x1f7, %edx            # imm = 0x1F7
// 297: ff d0                         callq   *%rax
// 299: 
static const unsigned char _BINARY_SUBSCR_TUPLE_INT_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0xdf, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xae, 0x00, 0x00, 0x00, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xd4, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x92, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xe6, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcc, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x16, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BINARY_SUBSCR_TUPLE_INT_code_holes[33] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x126},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x138},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x178},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb1},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b2},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c3},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x201},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x238},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x24a},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x287},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00res != NULL\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00PyLong_Check(op)\x00/home/jglass/Documents/cpython/Include/internal/pycore_long.h\x00int _PyLong_IsNonNegativeCompact(const PyLongObject *)\x00PyTuple_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/tupleobject.h\x00Py_ssize_t PyTuple_GET_SIZE(PyObject *)\x00'
// 2af: 00
static const unsigned char _BINARY_SUBSCR_TUPLE_INT_data_body[689] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x68, 0x00, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x49, 0x73, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _BUILD_CONST_KEY_MAP
// 
// /tmp/tmp3v1aptj0/_BUILD_CONST_KEY_MAP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  PyTuple_Type
// 25: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2a: 0f 85 19 01 00 00             jne     0x149 <_JIT_ENTRY+0x149>
// 30: f6 80 ab 00 00 00 04          testb   $0x4, 0xab(%rax)
// 37: 0f 84 f5 01 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 3d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003f:  R_X86_64_64  _JIT_OPARG
// 47: 0f b7 c0                      movzwl  %ax, %eax
// 4a: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 4f: 0f 85 f4 00 00 00             jne     0x149 <_JIT_ENTRY+0x149>
// 55: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _JIT_OPARG
// 64: f7 d0                         notl    %eax
// 66: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 6b: 48 98                         cltq
// 6d: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 71: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 76: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000078:  R_X86_64_64  _JIT_OPARG
// 80: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 84: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000086:  R_X86_64_64  _PyDict_FromItems
// 8e: be 01 00 00 00                movl    $0x1, %esi
// 93: b9 01 00 00 00                movl    $0x1, %ecx
// 98: 4c 89 ea                      movq    %r13, %rdx
// 9b: ff d0                         callq   *%rax
// 9d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a2: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// a9: 0f 8e e3 00 00 00             jle     0x192 <_JIT_ENTRY+0x192>
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _JIT_OPARG
// b9: 44 0f b7 f8                   movzwl  %ax, %r15d
// bd: 49 ff c7                      incq    %r15
// c0: eb 1b                         jmp     0xdd <_JIT_ENTRY+0xdd>
// c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// d0: 49 ff cf                      decq    %r15
// d3: 49 83 ff 01                   cmpq    $0x1, %r15
// d7: 0f 8e b5 00 00 00             jle     0x192 <_JIT_ENTRY+0x192>
// dd: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// e1: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// e6: 48 8b 45 00                   movq    (%rbp), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 11                         jle     0x100 <_JIT_ENTRY+0x100>
// ef: 85 c0                         testl   %eax, %eax
// f1: 78 dd                         js      0xd0 <_JIT_ENTRY+0xd0>
// f3: eb 31                         jmp     0x126 <_JIT_ENTRY+0x126>
// f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 10f: 48 89 ea                      movq    %rbp, %rdx
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: ff d0                         callq   *%rax
// 11e: 48 8b 45 00                   movq    (%rbp), %rax
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 aa                         js      0xd0 <_JIT_ENTRY+0xd0>
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 130: ff d0                         callq   *%rax
// 132: 48 ff 4d 00                   decq    (%rbp)
// 136: 75 98                         jne     0xd0 <_JIT_ENTRY+0xd0>
// 138: 48 89 ef                      movq    %rbp, %rdi
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: ff d0                         callq   *%rax
// 147: eb 87                         jmp     0xd0 <_JIT_ENTRY+0xd0>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  PyExc_SystemError
// 153: 48 8b 30                      movq    (%rax), %rsi
// 156: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000158:  R_X86_64_64  .rodata.str1.1+0x39
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _PyErr_SetString
// 16a: 48 89 cf                      movq    %rcx, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 4d 89 f5                      movq    %r14, %r13
// 172: 49 29 dd                      subq    %rbx, %r13
// 175: 49 83 c5 b8                   addq    $-0x48, %r13
// 179: 49 c1 ed 03                   shrq    $0x3, %r13
// 17d: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 181: 31 c0                         xorl    %eax, %eax
// 183: 48 83 c4 18                   addq    $0x18, %rsp
// 187: 5b                            popq    %rbx
// 188: 41 5c                         popq    %r12
// 18a: 41 5d                         popq    %r13
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: 5d                            popq    %rbp
// 191: c3                            retq
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 22                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1c4: 78 21                         js      0x1e7 <_JIT_ENTRY+0x1e7>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 ff 0c 24                   decq    (%r12)
// 1d6: 75 0f                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_Dealloc
// 1e2: 4c 89 e7                      movq    %r12, %rdi
// 1e5: ff d0                         callq   *%rax
// 1e7: 4d 85 ff                      testq   %r15, %r15
// 1ea: 74 86                         je      0x172 <_JIT_ENTRY+0x172>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_OPARG
// 1f6: 0f b7 c8                      movzwl  %ax, %ecx
// 1f9: f7 d0                         notl    %eax
// 1fb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 200: 48 98                         cltq
// 202: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 206: 48 c1 e1 03                   shlq    $0x3, %rcx
// 20a: 49 29 ce                      subq    %rcx, %r14
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _JIT_CONTINUE
// 217: 48 89 df                      movq    %rbx, %rdi
// 21a: 4c 89 f6                      movq    %r14, %rsi
// 21d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 222: 48 83 c4 18                   addq    $0x18, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: ff e0                         jmpq    *%rax
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1+0x5f
// 23c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1+0x71
// 246: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000248:  R_X86_64_64  .rodata.str1.1+0xae
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  __assert_fail
// 25a: ba 16 00 00 00                movl    $0x16, %edx
// 25f: ff d0                         callq   *%rax
// 261: 
static const unsigned char _BUILD_CONST_KEY_MAP_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xf5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xf4, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xb5, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x16, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _BUILD_CONST_KEY_MAP_code_holes[24] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x71},
    {0x248, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xae},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00PyTuple_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/tupleobject.h\x00Py_ssize_t PyTuple_GET_SIZE(PyObject *)\x00'
// d6: 00 00
static const unsigned char _BUILD_CONST_KEY_MAP_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00};
static const Hole _BUILD_CONST_KEY_MAP_data_holes[1];

// _BUILD_LIST
// 
// /tmp/tmp3v1aptj0/_BUILD_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d6                      movq    %rdx, %r14
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 f0                      movzwl  %ax, %esi
// 1e: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 26: 4d 89 fc                      movq    %r15, %r12
// 29: 49 29 c4                      subq    %rax, %r12
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyList_FromArraySteal
// 36: 4c 89 e7                      movq    %r12, %rdi
// 39: ff d0                         callq   *%rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 74 45                         je      0x85 <_JIT_ENTRY+0x85>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _JIT_OPARG
// 4a: 0f b7 d1                      movzwl  %cx, %edx
// 4d: 0f b7 c9                      movzwl  %cx, %ecx
// 50: 48 c1 e1 03                   shlq    $0x3, %rcx
// 54: 48 f7 d9                      negq    %rcx
// 57: 49 89 04 0f                   movq    %rax, (%r15,%rcx)
// 5b: b8 01 00 00 00                movl    $0x1, %eax
// 60: 29 d0                         subl    %edx, %eax
// 62: 48 98                         cltq
// 64: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_CONTINUE
// 72: 48 89 df                      movq    %rbx, %rdi
// 75: 4c 89 f2                      movq    %r14, %rdx
// 78: 48 83 c4 08                   addq    $0x8, %rsp
// 7c: 5b                            popq    %rbx
// 7d: 41 5c                         popq    %r12
// 7f: 41 5e                         popq    %r14
// 81: 41 5f                         popq    %r15
// 83: ff e0                         jmpq    *%rax
// 85: 49 29 dc                      subq    %rbx, %r12
// 88: 49 83 c4 b8                   addq    $-0x48, %r12
// 8c: 49 c1 ec 03                   shrq    $0x3, %r12
// 90: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 94: 31 c0                         xorl    %eax, %eax
// 96: 48 83 c4 08                   addq    $0x8, %rsp
// 9a: 5b                            popq    %rbx
// 9b: 41 5c                         popq    %r12
// 9d: 41 5e                         popq    %r14
// 9f: 41 5f                         popq    %r15
// a1: c3                            retq
// a2: 
static const unsigned char _BUILD_LIST_code_body[163] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0f, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _BUILD_LIST_code_holes[5] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _BUILD_LIST_data_body[1];
static const Hole _BUILD_LIST_data_holes[1];

// _BUILD_MAP
// 
// /tmp/tmp3v1aptj0/_BUILD_MAP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPARG
// 22: 0f b7 d8                      movzwl  %ax, %ebx
// 25: 89 d9                         movl    %ebx, %ecx
// 27: f7 d9                         negl    %ecx
// 29: 01 c9                         addl    %ecx, %ecx
// 2b: 48 63 c9                      movslq  %ecx, %rcx
// 2e: 4c 8d 24 ce                   leaq    (%rsi,%rcx,8), %r12
// 32: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 37: 48 8d 14 ce                   leaq    (%rsi,%rcx,8), %rdx
// 3b: 48 83 c2 08                   addq    $0x8, %rdx
// 3f: 44 0f b7 c0                   movzwl  %ax, %r8d
// 43: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000045:  R_X86_64_64  _PyDict_FromItems
// 4d: be 02 00 00 00                movl    $0x2, %esi
// 52: b9 02 00 00 00                movl    $0x2, %ecx
// 57: 4c 89 e7                      movq    %r12, %rdi
// 5a: ff d0                         callq   *%rax
// 5c: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 61: 01 db                         addl    %ebx, %ebx
// 63: 85 db                         testl   %ebx, %ebx
// 65: 0f 8e 83 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _JIT_OPARG
// 75: 0f b7 c0                      movzwl  %ax, %eax
// 78: 48 8d 1c 00                   leaq    (%rax,%rax), %rbx
// 7c: 48 ff c3                      incq    %rbx
// 7f: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000081:  R_X86_64_64  .rodata.str1.1
// 89: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000008b:  R_X86_64_64  _Py_NegativeRefcount
// 93: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000095:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9d: eb 0a                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 9f: 90                            nop
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 53                         je      0x14b <_JIT_ENTRY+0x14b>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c0                      movzwl  %ax, %eax
// 105: 89 c1                         movl    %eax, %ecx
// 107: f7 d9                         negl    %ecx
// 109: 01 c9                         addl    %ecx, %ecx
// 10b: 48 63 c9                      movslq  %ecx, %rcx
// 10e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 113: 48 89 34 ca                   movq    %rsi, (%rdx,%rcx,8)
// 117: 01 c0                         addl    %eax, %eax
// 119: b9 01 00 00 00                movl    $0x1, %ecx
// 11e: 29 c1                         subl    %eax, %ecx
// 120: 48 63 c1                      movslq  %ecx, %rax
// 123: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _JIT_CONTINUE
// 131: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 136: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 13b: 48 83 c4 28                   addq    $0x28, %rsp
// 13f: 5b                            popq    %rbx
// 140: 41 5c                         popq    %r12
// 142: 41 5d                         popq    %r13
// 144: 41 5e                         popq    %r14
// 146: 41 5f                         popq    %r15
// 148: 5d                            popq    %rbp
// 149: ff e0                         jmpq    *%rax
// 14b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 150: 49 29 c4                      subq    %rax, %r12
// 153: 49 83 c4 b8                   addq    $-0x48, %r12
// 157: 49 c1 ec 03                   shrq    $0x3, %r12
// 15b: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 15f: 31 c0                         xorl    %eax, %eax
// 161: 48 83 c4 28                   addq    $0x28, %rsp
// 165: 5b                            popq    %rbx
// 166: 41 5c                         popq    %r12
// 168: 41 5d                         popq    %r13
// 16a: 41 5e                         popq    %r14
// 16c: 41 5f                         popq    %r15
// 16e: 5d                            popq    %rbp
// 16f: c3                            retq
// 170: 
static const unsigned char _BUILD_MAP_code_body[369] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x24, 0xce, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x8d, 0x14, 0xce, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x1c, 0x00, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0a, 0x90, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0xca, 0x01, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_MAP_code_holes[10] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_MAP_data_holes[1];

// _BUILD_SET
// 
// /tmp/tmp3v1aptj0/_BUILD_SET.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PySet_New
// 21: 31 ff                         xorl    %edi, %edi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 0f 84 ec 00 00 00             je      0x11a <_JIT_ENTRY+0x11a>
// 2e: 49 89 c6                      movq    %rax, %r14
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_OPARG
// 3b: 66 85 c0                      testw   %ax, %ax
// 3e: 0f 84 5a 01 00 00             je      0x19e <_JIT_ENTRY+0x19e>
// 44: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 49: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 4e: 0f b7 c0                      movzwl  %ax, %eax
// 51: 48 c1 e0 03                   shlq    $0x3, %rax
// 55: 4c 89 2c 24                   movq    %r13, (%rsp)
// 59: 4d 89 ec                      movq    %r13, %r12
// 5c: 49 29 c4                      subq    %rax, %r12
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 83 f8 02                      cmpl    $0x2, %eax
// 6f: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 75: 44 0f 43 e8                   cmovael %eax, %r13d
// 79: 31 db                         xorl    %ebx, %ebx
// 7b: 31 ed                         xorl    %ebp, %ebp
// 7d: eb 0d                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 7f: 90                            nop
// 80: 48 ff c3                      incq    %rbx
// 83: 49 39 dd                      cmpq    %rbx, %r13
// 86: 0f 84 93 00 00 00             je      0x11f <_JIT_ENTRY+0x11f>
// 8c: 4d 8b 3c dc                   movq    (%r12,%rbx,8), %r15
// 90: 85 ed                         testl   %ebp, %ebp
// 92: 74 1c                         je      0xb0 <_JIT_ENTRY+0xb0>
// 94: 49 8b 07                      movq    (%r15), %rax
// 97: 48 85 c0                      testq   %rax, %rax
// 9a: 7e 30                         jle     0xcc <_JIT_ENTRY+0xcc>
// 9c: 85 c0                         testl   %eax, %eax
// 9e: 78 e0                         js      0x80 <_JIT_ENTRY+0x80>
// a0: eb 4f                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// a2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// b0: 4c 89 f7                      movq    %r14, %rdi
// b3: 4c 89 fe                      movq    %r15, %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PySet_Add
// c0: ff d0                         callq   *%rax
// c2: 89 c5                         movl    %eax, %ebp
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7f d0                         jg      0x9c <_JIT_ENTRY+0x9c>
// cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// db: 4c 89 fa                      movq    %r15, %rdx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: ff d0                         callq   *%rax
// ea: 49 8b 07                      movq    (%r15), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 8f                         js      0x80 <_JIT_ENTRY+0x80>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0f                      decq    (%r15)
// 100: 0f 85 7a ff ff ff             jne     0x80 <_JIT_ENTRY+0x80>
// 106: 4c 89 ff                      movq    %r15, %rdi
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_Dealloc
// 113: ff d0                         callq   *%rax
// 115: e9 66 ff ff ff                jmp     0x80 <_JIT_ENTRY+0x80>
// 11a: 4d 89 ec                      movq    %r13, %r12
// 11d: eb 5f                         jmp     0x17e <_JIT_ENTRY+0x17e>
// 11f: 85 ed                         testl   %ebp, %ebp
// 121: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 126: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 12b: 4c 8b 2c 24                   movq    (%rsp), %r13
// 12f: 74 6d                         je      0x19e <_JIT_ENTRY+0x19e>
// 131: 49 8b 06                      movq    (%r14), %rax
// 134: 48 85 c0                      testq   %rax, %rax
// 137: 7f 21                         jg      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 148: 4c 89 f2                      movq    %r14, %rdx
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_NegativeRefcount
// 155: ff d0                         callq   *%rax
// 157: 49 8b 06                      movq    (%r14), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 20                         js      0x17e <_JIT_ENTRY+0x17e>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0e                      decq    (%r14)
// 16d: 75 0f                         jne     0x17e <_JIT_ENTRY+0x17e>
// 16f: 4c 89 f7                      movq    %r14, %rdi
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: ff d0                         callq   *%rax
// 17e: 49 29 dc                      subq    %rbx, %r12
// 181: 49 83 c4 b8                   addq    $-0x48, %r12
// 185: 49 c1 ec 03                   shrq    $0x3, %r12
// 189: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 18d: 31 c0                         xorl    %eax, %eax
// 18f: 48 83 c4 18                   addq    $0x18, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 0f b7 c8                      movzwl  %ax, %ecx
// 1ab: 0f b7 c0                      movzwl  %ax, %eax
// 1ae: 48 c1 e0 03                   shlq    $0x3, %rax
// 1b2: 48 f7 d8                      negq    %rax
// 1b5: 4d 89 74 05 00                movq    %r14, (%r13,%rax)
// 1ba: b8 01 00 00 00                movl    $0x1, %eax
// 1bf: 29 c8                         subl    %ecx, %eax
// 1c1: 48 98                         cltq
// 1c3: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1cb: 4c 01 ee                      addq    %r13, %rsi
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_CONTINUE
// 1d8: 48 89 df                      movq    %rbx, %rdi
// 1db: 4c 89 fa                      movq    %r15, %rdx
// 1de: 48 83 c4 18                   addq    $0x18, %rsp
// 1e2: 5b                            popq    %rbx
// 1e3: 41 5c                         popq    %r12
// 1e5: 41 5d                         popq    %r13
// 1e7: 41 5e                         popq    %r14
// 1e9: 41 5f                         popq    %r15
// 1eb: 5d                            popq    %rbp
// 1ec: ff e0                         jmpq    *%rax
// 1ee: 
static const unsigned char _BUILD_SET_code_body[495] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0x2c, 0x24, 0x4d, 0x89, 0xec, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x31, 0xdb, 0x31, 0xed, 0xeb, 0x0d, 0x90, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x3c, 0xdc, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x4f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x8f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xec, 0xeb, 0x5f, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x2c, 0x24, 0x74, 0x6d, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x74, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _BUILD_SET_code_holes[15] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SET_data_holes[1];

// _BUILD_SLICE
// 
// /tmp/tmp3v1aptj0/_BUILD_SLICE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: 66 83 f8 03                   cmpw    $0x3, %ax
// 28: 75 10                         jne     0x3a <_JIT_ENTRY+0x3a>
// 2a: 31 c9                         xorl    %ecx, %ecx
// 2c: 66 83 f8 03                   cmpw    $0x3, %ax
// 30: 0f 95 c1                      setne   %cl
// 33: 4d 8b 64 cf f8                movq    -0x8(%r15,%rcx,8), %r12
// 38: eb 03                         jmp     0x3d <_JIT_ENTRY+0x3d>
// 3a: 45 31 e4                      xorl    %r12d, %r12d
// 3d: 31 c9                         xorl    %ecx, %ecx
// 3f: 66 83 f8 03                   cmpw    $0x3, %ax
// 43: 0f 94 c1                      sete    %cl
// 46: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 4b: 29 c8                         subl    %ecx, %eax
// 4d: f7 d1                         notl    %ecx
// 4f: 48 63 c9                      movslq  %ecx, %rcx
// 52: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 57: 49 8b 2c cf                   movq    (%r15,%rcx,8), %rbp
// 5b: 48 63 d8                      movslq  %eax, %rbx
// 5e: 4d 8b 34 df                   movq    (%r15,%rbx,8), %r14
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  PySlice_New
// 6c: 4c 89 f7                      movq    %r14, %rdi
// 6f: 48 89 ee                      movq    %rbp, %rsi
// 72: 4c 89 e2                      movq    %r12, %rdx
// 75: ff d0                         callq   *%rax
// 77: 49 89 c5                      movq    %rax, %r13
// 7a: 49 8b 06                      movq    (%r14), %rax
// 7d: 48 85 c0                      testq   %rax, %rax
// 80: 7e 06                         jle     0x88 <_JIT_ENTRY+0x88>
// 82: 85 c0                         testl   %eax, %eax
// 84: 79 27                         jns     0xad <_JIT_ENTRY+0xad>
// 86: eb 36                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// a1: 4c 89 f2                      movq    %r14, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 06                      movq    (%r14), %rax
// a9: 85 c0                         testl   %eax, %eax
// ab: 78 11                         js      0xbe <_JIT_ENTRY+0xbe>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b7: ff d0                         callq   *%rax
// b9: 49 ff 0e                      decq    (%r14)
// bc: 74 0f                         je      0xcd <_JIT_ENTRY+0xcd>
// be: 48 8b 45 00                   movq    (%rbp), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 1e                         jle     0xe5 <_JIT_ENTRY+0xe5>
// c7: 85 c0                         testl   %eax, %eax
// c9: 79 40                         jns     0x10b <_JIT_ENTRY+0x10b>
// cb: eb 5f                         jmp     0x12c <_JIT_ENTRY+0x12c>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_Dealloc
// d7: 4c 89 f7                      movq    %r14, %rdi
// da: ff d0                         callq   *%rax
// dc: 48 8b 45 00                   movq    (%rbp), %rax
// e0: 48 85 c0                      testq   %rax, %rax
// e3: 7f e2                         jg      0xc7 <_JIT_ENTRY+0xc7>
// e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e7:  R_X86_64_64  .rodata.str1.1
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_NegativeRefcount
// f9: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// fe: 48 89 ea                      movq    %rbp, %rdx
// 101: ff d0                         callq   *%rax
// 103: 48 8b 45 00                   movq    (%rbp), %rax
// 107: 85 c0                         testl   %eax, %eax
// 109: 78 21                         js      0x12c <_JIT_ENTRY+0x12c>
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 115: ff d0                         callq   *%rax
// 117: 48 ff 4d 00                   decq    (%rbp)
// 11b: 75 0f                         jne     0x12c <_JIT_ENTRY+0x12c>
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_Dealloc
// 127: 48 89 ef                      movq    %rbp, %rdi
// 12a: ff d0                         callq   *%rax
// 12c: 4d 85 e4                      testq   %r12, %r12
// 12f: 74 47                         je      0x178 <_JIT_ENTRY+0x178>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7e 06                         jle     0x140 <_JIT_ENTRY+0x140>
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 79 28                         jns     0x166 <_JIT_ENTRY+0x166>
// 13e: eb 38                         jmp     0x178 <_JIT_ENTRY+0x178>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1+0x39
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 159: 4c 89 e2                      movq    %r12, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 04 24                   movq    (%r12), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 12                         js      0x178 <_JIT_ENTRY+0x178>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 74 38                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 178: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 17c: 4d 85 ed                      testq   %r13, %r13
// 17f: 74 47                         je      0x1c8 <_JIT_ENTRY+0x1c8>
// 181: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 186: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 18a: 4c 89 28                      movq    %r13, (%rax)
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _JIT_CONTINUE
// 197: 48 8b 3c 24                   movq    (%rsp), %rdi
// 19b: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a0: 48 83 c4 18                   addq    $0x18, %rsp
// 1a4: 5b                            popq    %rbx
// 1a5: 41 5c                         popq    %r12
// 1a7: 41 5d                         popq    %r13
// 1a9: 41 5e                         popq    %r14
// 1ab: 41 5f                         popq    %r15
// 1ad: 5d                            popq    %rbp
// 1ae: ff e0                         jmpq    *%rax
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_Dealloc
// 1ba: 4c 89 e7                      movq    %r12, %rdi
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 1c3: 4d 85 ed                      testq   %r13, %r13
// 1c6: 75 b9                         jne     0x181 <_JIT_ENTRY+0x181>
// 1c8: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1cc: 48 29 c8                      subq    %rcx, %rax
// 1cf: 48 83 c0 b8                   addq    $-0x48, %rax
// 1d3: 48 c1 e8 03                   shrq    $0x3, %rax
// 1d7: 89 41 40                      movl    %eax, 0x40(%rcx)
// 1da: 31 c0                         xorl    %eax, %eax
// 1dc: 48 83 c4 18                   addq    $0x18, %rsp
// 1e0: 5b                            popq    %rbx
// 1e1: 41 5c                         popq    %r12
// 1e3: 41 5d                         popq    %r13
// 1e5: 41 5e                         popq    %r14
// 1e7: 41 5f                         popq    %r15
// 1e9: 5d                            popq    %rbp
// 1ea: c3                            retq
// 1eb: 
static const unsigned char _BUILD_SLICE_code_body[492] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x10, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x95, 0xc1, 0x4d, 0x8b, 0x64, 0xcf, 0xf8, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xcf, 0x48, 0x63, 0xd8, 0x4d, 0x8b, 0x34, 0xdf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x47, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x38, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xed, 0x74, 0x47, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x8d, 0x34, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x4d, 0x85, 0xed, 0x75, 0xb9, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_SLICE_code_holes[16] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_SLICE_data_holes[1];

// _BUILD_STRING
// 
// /tmp/tmp3v1aptj0/_BUILD_STRING.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 d3                      movzwl  %bx, %edx
// 28: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 30: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
// 35: 49 29 c4                      subq    %rax, %r12
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  _PyUnicode_JoinArray
// 42: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000044:  R_X86_64_64  _PyRuntime
// 4c: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 53: 4c 89 e6                      movq    %r12, %rsi
// 56: ff d0                         callq   *%rax
// 58: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 5d: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 63: 0f 8e 85 00 00 00             jle     0xee <_JIT_ENTRY+0xee>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _JIT_OPARG
// 73: 0f b7 d8                      movzwl  %ax, %ebx
// 76: 48 ff c3                      incq    %rbx
// 79: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: eb 10                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 99: 0f 1f 80 00 00 00 00          nopl    (%rax)
// a0: 48 ff cb                      decq    %rbx
// a3: 48 83 fb 01                   cmpq    $0x1, %rbx
// a7: 7e 45                         jle     0xee <_JIT_ENTRY+0xee>
// a9: 8d 43 fe                      leal    -0x2(%rbx), %eax
// ac: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// b0: 49 8b 06                      movq    (%r14), %rax
// b3: 48 85 c0                      testq   %rax, %rax
// b6: 7e 08                         jle     0xc0 <_JIT_ENTRY+0xc0>
// b8: 85 c0                         testl   %eax, %eax
// ba: 78 e4                         js      0xa0 <_JIT_ENTRY+0xa0>
// bc: eb 17                         jmp     0xd5 <_JIT_ENTRY+0xd5>
// be: 66 90                         nop
// c0: 48 89 ef                      movq    %rbp, %rdi
// c3: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// c8: 4c 89 f2                      movq    %r14, %rdx
// cb: 41 ff d5                      callq   *%r13
// ce: 49 8b 06                      movq    (%r14), %rax
// d1: 85 c0                         testl   %eax, %eax
// d3: 78 cb                         js      0xa0 <_JIT_ENTRY+0xa0>
// d5: 41 ff d7                      callq   *%r15
// d8: 49 ff 0e                      decq    (%r14)
// db: 75 c3                         jne     0xa0 <_JIT_ENTRY+0xa0>
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: ff d0                         callq   *%rax
// ec: eb b2                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// ee: 48 8b 74 24 20                movq    0x20(%rsp), %rsi
// f3: 48 85 f6                      testq   %rsi, %rsi
// f6: 74 51                         je      0x149 <_JIT_ENTRY+0x149>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: 0f b7 c8                      movzwl  %ax, %ecx
// 105: 0f b7 c0                      movzwl  %ax, %eax
// 108: 48 c1 e0 03                   shlq    $0x3, %rax
// 10c: 48 f7 d8                      negq    %rax
// 10f: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 114: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 118: b8 01 00 00 00                movl    $0x1, %eax
// 11d: 29 c8                         subl    %ecx, %eax
// 11f: 48 98                         cltq
// 121: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _JIT_CONTINUE
// 12f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 134: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 139: 48 83 c4 28                   addq    $0x28, %rsp
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5d                         popq    %r13
// 142: 41 5e                         popq    %r14
// 144: 41 5f                         popq    %r15
// 146: 5d                            popq    %rbp
// 147: ff e0                         jmpq    *%rax
// 149: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 14e: 49 29 c4                      subq    %rax, %r12
// 151: 49 83 c4 b8                   addq    $-0x48, %r12
// 155: 49 c1 ec 03                   shrq    $0x3, %r12
// 159: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 15d: 31 c0                         xorl    %eax, %eax
// 15f: 48 83 c4 28                   addq    $0x28, %rsp
// 163: 5b                            popq    %rbx
// 164: 41 5c                         popq    %r12
// 166: 41 5d                         popq    %r13
// 168: 41 5e                         popq    %r14
// 16a: 41 5f                         popq    %r15
// 16c: 5d                            popq    %rbp
// 16d: c3                            retq
// 16e: 
static const unsigned char _BUILD_STRING_code_body[367] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x18, 0x49, 0x89, 0xf4, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x74, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x85, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x48, 0xff, 0xc3, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x7e, 0x45, 0x8d, 0x43, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x08, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x17, 0x66, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x41, 0xff, 0xd5, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xcb, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0e, 0x75, 0xc3, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb2, 0x48, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x85, 0xf6, 0x74, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _BUILD_STRING_code_holes[11] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _BUILD_STRING_data_holes[1];

// _BUILD_TUPLE
// 
// /tmp/tmp3v1aptj0/_BUILD_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d6                      movq    %rdx, %r14
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 f0                      movzwl  %ax, %esi
// 1e: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 26: 4d 89 fc                      movq    %r15, %r12
// 29: 49 29 c4                      subq    %rax, %r12
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _PyTuple_FromArraySteal
// 36: 4c 89 e7                      movq    %r12, %rdi
// 39: ff d0                         callq   *%rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 74 45                         je      0x85 <_JIT_ENTRY+0x85>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _JIT_OPARG
// 4a: 0f b7 d1                      movzwl  %cx, %edx
// 4d: 0f b7 c9                      movzwl  %cx, %ecx
// 50: 48 c1 e1 03                   shlq    $0x3, %rcx
// 54: 48 f7 d9                      negq    %rcx
// 57: 49 89 04 0f                   movq    %rax, (%r15,%rcx)
// 5b: b8 01 00 00 00                movl    $0x1, %eax
// 60: 29 d0                         subl    %edx, %eax
// 62: 48 98                         cltq
// 64: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_CONTINUE
// 72: 48 89 df                      movq    %rbx, %rdi
// 75: 4c 89 f2                      movq    %r14, %rdx
// 78: 48 83 c4 08                   addq    $0x8, %rsp
// 7c: 5b                            popq    %rbx
// 7d: 41 5c                         popq    %r12
// 7f: 41 5e                         popq    %r14
// 81: 41 5f                         popq    %r15
// 83: ff e0                         jmpq    *%rax
// 85: 49 29 dc                      subq    %rbx, %r12
// 88: 49 83 c4 b8                   addq    $-0x48, %r12
// 8c: 49 c1 ec 03                   shrq    $0x3, %r12
// 90: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 94: 31 c0                         xorl    %eax, %eax
// 96: 48 83 c4 08                   addq    $0x8, %rsp
// 9a: 5b                            popq    %rbx
// 9b: 41 5c                         popq    %r12
// 9d: 41 5e                         popq    %r14
// 9f: 41 5f                         popq    %r15
// a1: c3                            retq
// a2: 
static const unsigned char _BUILD_TUPLE_code_body[163] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0f, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _BUILD_TUPLE_code_holes[5] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _BUILD_TUPLE_data_body[1];
static const Hole _BUILD_TUPLE_data_holes[1];

// _CALL_BUILTIN_CLASS
// 
// /tmp/tmp3v1aptj0/_CALL_BUILTIN_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 44 0f b7 c9                   movzwl  %cx, %r9d
// 1f: 44 89 c8                      movl    %r9d, %eax
// 22: f7 d0                         notl    %eax
// 24: 4c 63 d0                      movslq  %eax, %r10
// 27: 4a 8b 04 d6                   movq    (%rsi,%r10,8), %rax
// 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 30: 44 29 ce                      subl    %r9d, %esi
// 33: 41 8d 59 01                   leal    0x1(%r9), %ebx
// 37: 0f b7 c9                      movzwl  %cx, %ecx
// 3a: 49 89 c8                      movq    %rcx, %r8
// 3d: 49 f7 d8                      negq    %r8
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 41 0f 44 d9                   cmovel  %r9d, %ebx
// 47: 4c 63 ce                      movslq  %esi, %r9
// 4a: 48 f7 d1                      notq    %rcx
// 4d: 49 0f 44 c8                   cmoveq  %r8, %rcx
// 51: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 55: 49 8b 74 24 08                movq    0x8(%r12), %rsi
// 5a: f6 86 ab 00 00 00 80          testb   $-0x80, 0xab(%rsi)
// 61: 0f 84 0d 01 00 00             je      0x174 <_JIT_ENTRY+0x174>
// 67: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 6f: 4d 85 c0                      testq   %r8, %r8
// 72: 0f 84 fc 00 00 00             je      0x174 <_JIT_ENTRY+0x174>
// 78: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 7d: 4c 89 14 24                   movq    %r10, (%rsp)
// 81: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 86: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 8b: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 8f: 48 85 c0                      testq   %rax, %rax
// 92: 41 0f 94 c6                   sete    %r14b
// 96: 89 da                         movl    %ebx, %edx
// 98: 4c 89 e7                      movq    %r12, %rdi
// 9b: 48 89 ee                      movq    %rbp, %rsi
// 9e: 31 c9                         xorl    %ecx, %ecx
// a0: 41 ff d0                      callq   *%r8
// a3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_OPARG
// b2: 66 85 c0                      testw   %ax, %ax
// b5: 0f 94 c0                      sete    %al
// b8: 41 84 c6                      testb   %al, %r14b
// bb: 0f 84 fe 00 00 00             je      0x1bf <_JIT_ENTRY+0x1bf>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 7f 22                         jg      0xec <_JIT_ENTRY+0xec>
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_NegativeRefcount
// de: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// e3: 4c 89 e2                      movq    %r12, %rdx
// e6: ff d0                         callq   *%rax
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 85 c0                         testl   %eax, %eax
// ee: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// f3: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// f8: 78 21                         js      0x11b <_JIT_ENTRY+0x11b>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 0c 24                   decq    (%r12)
// 10a: 75 0f                         jne     0x11b <_JIT_ENTRY+0x11b>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_Dealloc
// 116: 4c 89 e7                      movq    %r12, %rdi
// 119: ff d0                         callq   *%rax
// 11b: 49 8d 04 df                   leaq    (%r15,%rbx,8), %rax
// 11f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 124: 48 85 d2                      testq   %rdx, %rdx
// 127: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 12c: 74 34                         je      0x162 <_JIT_ENTRY+0x162>
// 12e: 48 8b 0c 24                   movq    (%rsp), %rcx
// 132: 4d 8d 34 cf                   leaq    (%r15,%rcx,8), %r14
// 136: 48 89 10                      movq    %rdx, (%rax)
// 139: 49 8b 45 10                   movq    0x10(%r13), %rax
// 13d: 48 8b 00                      movq    (%rax), %rax
// 140: 84 c0                         testb   %al, %al
// 142: 0f 84 ef 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_HandlePending
// 152: 4c 89 ef                      movq    %r13, %rdi
// 155: ff d0                         callq   *%rax
// 157: 85 c0                         testl   %eax, %eax
// 159: 0f 84 d8 00 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 15f: 4c 89 f0                      movq    %r14, %rax
// 162: 48 29 d8                      subq    %rbx, %rax
// 165: 48 83 c0 b8                   addq    $-0x48, %rax
// 169: 48 c1 e8 03                   shrq    $0x3, %rax
// 16d: 89 43 40                      movl    %eax, 0x40(%rbx)
// 170: 31 c0                         xorl    %eax, %eax
// 172: eb 3c                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 174: 49 29 ff                      subq    %rdi, %r15
// 177: 49 83 c7 b8                   addq    $-0x48, %r15
// 17b: 49 c1 ef 03                   shrq    $0x3, %r15
// 17f: 44 89 7f 40                   movl    %r15d, 0x40(%rdi)
// 183: 48 8b 07                      movq    (%rdi), %rax
// 186: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000188:  R_X86_64_64  PyCode_Type
// 190: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 194: 0f 85 c0 00 00 00             jne     0x25a <_JIT_ENTRY+0x25a>
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 28                   addq    $0x28, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 83 fb 02                      cmpl    $0x2, %ebx
// 1c2: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 1c8: 44 0f 43 eb                   cmovael %ebx, %r13d
// 1cc: 31 db                         xorl    %ebx, %ebx
// 1ce: eb 0c                         jmp     0x1dc <_JIT_ENTRY+0x1dc>
// 1d0: 48 ff c3                      incq    %rbx
// 1d3: 49 39 dd                      cmpq    %rbx, %r13
// 1d6: 0f 84 e5 fe ff ff             je      0xc1 <_JIT_ENTRY+0xc1>
// 1dc: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7e 07                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e9: 85 c0                         testl   %eax, %eax
// 1eb: 78 e3                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ed: eb 26                         jmp     0x215 <_JIT_ENTRY+0x215>
// 1ef: 90                            nop
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 1ff: 4c 89 f2                      movq    %r14, %rdx
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 06                      movq    (%r14), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 bb                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0e                      decq    (%r14)
// 224: 75 aa                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 226: 4c 89 f7                      movq    %r14, %rdi
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: ff d0                         callq   *%rax
// 235: eb 99                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_CONTINUE
// 241: 48 89 df                      movq    %rbx, %rdi
// 244: 4c 89 f6                      movq    %r14, %rsi
// 247: 4c 89 ea                      movq    %r13, %rdx
// 24a: 48 83 c4 28                   addq    $0x28, %rsp
// 24e: 5b                            popq    %rbx
// 24f: 41 5c                         popq    %r12
// 251: 41 5d                         popq    %r13
// 253: 41 5e                         popq    %r14
// 255: 41 5f                         popq    %r15
// 257: 5d                            popq    %rbp
// 258: ff e0                         jmpq    *%rax
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1+0x39
// 264: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1+0x57
// 26e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000270:  R_X86_64_64  .rodata.str1.1+0x96
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  __assert_fail
// 282: ba 4d 00 00 00                movl    $0x4d, %edx
// 287: ff d0                         callq   *%rax
// 289: 
static const unsigned char _CALL_BUILTIN_CLASS_code_body[650] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc9, 0x44, 0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4a, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xce, 0x41, 0x8d, 0x59, 0x01, 0x0f, 0xb7, 0xc9, 0x49, 0x89, 0xc8, 0x49, 0xf7, 0xd8, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x44, 0xd9, 0x4c, 0x63, 0xce, 0x48, 0xf7, 0xd1, 0x49, 0x0f, 0x44, 0xc8, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x74, 0x24, 0x08, 0xf6, 0x86, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x74, 0x34, 0x48, 0x8b, 0x0c, 0x24, 0x4d, 0x8d, 0x34, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x3c, 0x49, 0x29, 0xff, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7f, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x0c, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0xe5, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_BUILTIN_CLASS_code_holes[19] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// cc: 00 00 00 00
static const unsigned char _CALL_BUILTIN_CLASS_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_BUILTIN_CLASS_data_holes[1];

// _CALL_BUILTIN_FAST
// 
// /tmp/tmp3v1aptj0/_CALL_BUILTIN_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c8                      movzwl  %ax, %ecx
// 21: 89 ce                         movl    %ecx, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 c6                      movslq  %esi, %r8
// 28: 4f 8b 2c c7                   movq    (%r15,%r8,8), %r13
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 cf                         subl    %ecx, %edi
// 33: 44 8d 71 01                   leal    0x1(%rcx), %r14d
// 37: 0f b7 c0                      movzwl  %ax, %eax
// 3a: 48 89 c6                      movq    %rax, %rsi
// 3d: 48 f7 de                      negq    %rsi
// 40: 4d 85 ed                      testq   %r13, %r13
// 43: 44 0f 44 f1                   cmovel  %ecx, %r14d
// 47: 48 63 ff                      movslq  %edi, %rdi
// 4a: 48 f7 d0                      notq    %rax
// 4d: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 51: 49 8b 34 ff                   movq    (%r15,%rdi,8), %rsi
// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000057:  R_X86_64_64  PyCFunction_Type
// 5f: 48 39 4e 08                   cmpq    %rcx, 0x8(%rsi)
// 63: 0f 85 4a 01 00 00             jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 69: 48 8b 4e 10                   movq    0x10(%rsi), %rcx
// 6d: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 74: 0f 85 39 01 00 00             jne     0x1b3 <_JIT_ENTRY+0x1b3>
// 7a: 48 89 7c 24 28                movq    %rdi, 0x28(%rsp)
// 7f: 4c 89 44 24 30                movq    %r8, 0x30(%rsp)
// 84: 49 89 d4                      movq    %rdx, %r12
// 87: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 8b: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 90: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 94: 44 89 f2                      movl    %r14d, %edx
// 97: 48 89 ee                      movq    %rbp, %rsi
// 9a: ff 51 08                      callq   *0x8(%rcx)
// 9d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// a2: 4d 85 e4                      testq   %r12, %r12
// a5: 0f 84 62 02 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// ab: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
// b0: 49 8b 44 24 68                movq    0x68(%r12), %rax
// b5: 48 85 c0                      testq   %rax, %rax
// b8: 48 89 5c 24 18                movq    %rbx, 0x18(%rsp)
// bd: 0f 84 e0 01 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// c3: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// c9: 0f 95 c1                      setne   %cl
// cc: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// d1: 0f 95 c0                      setne   %al
// d4: 30 c8                         xorb    %cl, %al
// d6: 0f 84 d3 01 00 00             je      0x2af <_JIT_ENTRY+0x2af>
// dc: 4d 85 ed                      testq   %r13, %r13
// df: 0f 94 c0                      sete    %al
// e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 66 85 c9                      testw   %cx, %cx
// ef: 0f 94 c1                      sete    %cl
// f2: 84 c8                         testb   %cl, %al
// f4: 0f 84 04 01 00 00             je      0x1fe <_JIT_ENTRY+0x1fe>
// fa: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// ff: 48 8b 45 00                   movq    (%rbp), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7f 22                         jg      0x12a <_JIT_ENTRY+0x12a>
// 108: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010a:  R_X86_64_64  .rodata.str1.1
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  _Py_NegativeRefcount
// 11c: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 121: 48 89 ea                      movq    %rbp, %rdx
// 124: ff d0                         callq   *%rax
// 126: 48 8b 45 00                   movq    (%rbp), %rax
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 131: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 136: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
// 13b: 4c 8b 64 24 28                movq    0x28(%rsp), %r12
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 48 ff 4d 00                   decq    (%rbp)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 48 89 ef                      movq    %rbp, %rdi
// 161: ff d0                         callq   *%rax
// 163: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// 167: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 16c: 48 85 c9                      testq   %rcx, %rcx
// 16f: 74 30                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 171: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 175: 48 89 08                      movq    %rcx, (%rax)
// 178: 49 8b 45 10                   movq    0x10(%r13), %rax
// 17c: 48 8b 00                      movq    (%rax), %rax
// 17f: 84 c0                         testb   %al, %al
// 181: 0f 84 f9 00 00 00             je      0x280 <_JIT_ENTRY+0x280>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_HandlePending
// 191: 4c 89 ef                      movq    %r13, %rdi
// 194: ff d0                         callq   *%rax
// 196: 85 c0                         testl   %eax, %eax
// 198: 0f 84 e2 00 00 00             je      0x280 <_JIT_ENTRY+0x280>
// 19e: 4c 89 f0                      movq    %r14, %rax
// 1a1: 48 29 d8                      subq    %rbx, %rax
// 1a4: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a8: 48 c1 e8 03                   shrq    $0x3, %rax
// 1ac: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: eb 3c                         jmp     0x1ef <_JIT_ENTRY+0x1ef>
// 1b3: 49 29 df                      subq    %rbx, %r15
// 1b6: 49 83 c7 b8                   addq    $-0x48, %r15
// 1ba: 49 c1 ef 03                   shrq    $0x3, %r15
// 1be: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1c2: 48 8b 03                      movq    (%rbx), %rax
// 1c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c7:  R_X86_64_64  PyCode_Type
// 1cf: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1d3: 0f 85 05 01 00 00             jne     0x2de <_JIT_ENTRY+0x2de>
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_TARGET
// 1e3: 89 c9                         movl    %ecx, %ecx
// 1e5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ef: 48 83 c4 38                   addq    $0x38, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: c3                            retq
// 1fe: 41 83 fe 02                   cmpl    $0x2, %r14d
// 202: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 208: 45 0f 43 ee                   cmovael %r14d, %r13d
// 20c: 31 db                         xorl    %ebx, %ebx
// 20e: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000210:  R_X86_64_64  .rodata.str1.1
// 218: eb 12                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 21a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 220: 48 ff c3                      incq    %rbx
// 223: 49 39 dd                      cmpq    %rbx, %r13
// 226: 0f 84 ce fe ff ff             je      0xfa <_JIT_ENTRY+0xfa>
// 22c: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 231: 49 8b 06                      movq    (%r14), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 7e 07                         jle     0x240 <_JIT_ENTRY+0x240>
// 239: 85 c0                         testl   %eax, %eax
// 23b: 78 e3                         js      0x220 <_JIT_ENTRY+0x220>
// 23d: eb 1f                         jmp     0x25e <_JIT_ENTRY+0x25e>
// 23f: 90                            nop
// 240: 4c 89 e7                      movq    %r12, %rdi
// 243: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 248: 4c 89 f2                      movq    %r14, %rdx
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_NegativeRefcount
// 255: ff d0                         callq   *%rax
// 257: 49 8b 06                      movq    (%r14), %rax
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 c2                         js      0x220 <_JIT_ENTRY+0x220>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 268: ff d0                         callq   *%rax
// 26a: 49 ff 0e                      decq    (%r14)
// 26d: 75 b1                         jne     0x220 <_JIT_ENTRY+0x220>
// 26f: 4c 89 f7                      movq    %r14, %rdi
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_Dealloc
// 27c: ff d0                         callq   *%rax
// 27e: eb a0                         jmp     0x220 <_JIT_ENTRY+0x220>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 df                      movq    %rbx, %rdi
// 28d: 4c 89 f6                      movq    %r14, %rsi
// 290: 4c 89 ea                      movq    %r13, %rdx
// 293: 48 83 c4 38                   addq    $0x38, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 2a9: 0f 85 2d fe ff ff             jne     0xdc <_JIT_ENTRY+0xdc>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1+0x87
// 2b9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1
// 2c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1+0x39
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  __assert_fail
// 2d7: ba 23 0b 00 00                movl    $0xb23, %edx            # imm = 0xB23
// 2dc: ff d0                         callq   *%rax
// 2de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e0:  R_X86_64_64  .rodata.str1.1+0xb9
// 2e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ea:  R_X86_64_64  .rodata.str1.1+0xd7
// 2f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f4:  R_X86_64_64  .rodata.str1.1+0x116
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  __assert_fail
// 306: ba 4d 00 00 00                movl    $0x4d, %edx
// 30b: ff d0                         callq   *%rax
// 30d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030f:  R_X86_64_64  .rodata.str1.1+0x14c
// 317: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000319:  R_X86_64_64  .rodata.str1.1+0x15b
// 321: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000323:  R_X86_64_64  .rodata.str1.1+0x19d
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  __assert_fail
// 335: ba 4b 00 00 00                movl    $0x4b, %edx
// 33a: ff d0                         callq   *%rax
// 33c: 
static const unsigned char _CALL_BUILTIN_FAST_code_body[829] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xce, 0xf7, 0xd6, 0x4c, 0x63, 0xc6, 0x4f, 0x8b, 0x2c, 0xc7, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xcf, 0x44, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x4d, 0x85, 0xed, 0x44, 0x0f, 0x44, 0xf1, 0x48, 0x63, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x49, 0x8b, 0x34, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4e, 0x08, 0x0f, 0x85, 0x4a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4e, 0x10, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x39, 0x01, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x49, 0x89, 0xd4, 0x49, 0x8d, 0x2c, 0xc7, 0x48, 0x89, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x62, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x64, 0x24, 0x10, 0x49, 0x8b, 0x44, 0x24, 0x68, 0x48, 0x85, 0xc0, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x0f, 0x84, 0xe0, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0x0f, 0x84, 0xd3, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc1, 0x84, 0xc8, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0x74, 0x24, 0x30, 0x4c, 0x8b, 0x64, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x3c, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x05, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0xce, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x1f, 0x90, 0x4c, 0x89, 0xe7, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xb1, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x2d, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x23, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_BUILTIN_FAST_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb9},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd7},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x116},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14c},
    {0x319, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15b},
    {0x323, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19d},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00'
// 1c8: 
static const unsigned char _CALL_BUILTIN_FAST_data_body[457] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00};
static const Hole _CALL_BUILTIN_FAST_data_holes[1];

// _CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmp3v1aptj0/_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c8                      movzwl  %ax, %ecx
// 21: 89 ce                         movl    %ecx, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ce                      movslq  %esi, %r9
// 28: 4f 8b 2c cf                   movq    (%r15,%r9,8), %r13
// 2c: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
// 31: 29 cf                         subl    %ecx, %edi
// 33: 44 8d 71 01                   leal    0x1(%rcx), %r14d
// 37: 0f b7 c0                      movzwl  %ax, %eax
// 3a: 48 89 c6                      movq    %rax, %rsi
// 3d: 48 f7 de                      negq    %rsi
// 40: 4d 85 ed                      testq   %r13, %r13
// 43: 44 0f 44 f1                   cmovel  %ecx, %r14d
// 47: 48 63 ff                      movslq  %edi, %rdi
// 4a: 48 f7 d0                      notq    %rax
// 4d: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 51: 4d 8b 24 ff                   movq    (%r15,%rdi,8), %r12
// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000057:  R_X86_64_64  PyCFunction_Type
// 5f: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 64: 0f 85 44 01 00 00             jne     0x1ae <_JIT_ENTRY+0x1ae>
// 6a: 4d 8b 44 24 10                movq    0x10(%r12), %r8
// 6f: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 77: 0f 85 31 01 00 00             jne     0x1ae <_JIT_ENTRY+0x1ae>
// 7d: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 82: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 87: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 8c: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 90: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// 95: 44 89 f2                      movl    %r14d, %edx
// 98: 48 89 ee                      movq    %rbp, %rsi
// 9b: 31 c9                         xorl    %ecx, %ecx
// 9d: 41 ff 50 08                   callq   *0x8(%r8)
// a1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// a6: 48 89 04 24                   movq    %rax, (%rsp)
// aa: 48 85 c9                      testq   %rcx, %rcx
// ad: 0f 84 50 02 00 00             je      0x303 <_JIT_ENTRY+0x303>
// b3: 48 8b 41 68                   movq    0x68(%rcx), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// bf: 0f 84 d5 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// c5: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// ca: 0f 95 c1                      setne   %cl
// cd: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// d2: 0f 95 c0                      setne   %al
// d5: 30 c8                         xorb    %cl, %al
// d7: 0f 84 c8 01 00 00             je      0x2a5 <_JIT_ENTRY+0x2a5>
// dd: 4d 85 ed                      testq   %r13, %r13
// e0: 0f 94 c0                      sete    %al
// e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e5:  R_X86_64_64  _JIT_OPARG
// ed: 66 85 c9                      testw   %cx, %cx
// f0: 0f 94 c1                      sete    %cl
// f3: 84 c8                         testb   %cl, %al
// f5: 0f 84 fe 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// fb: 49 8b 04 24                   movq    (%r12), %rax
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 7f 22                         jg      0x126 <_JIT_ENTRY+0x126>
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 11d: 4c 89 e2                      movq    %r12, %rdx
// 120: ff d0                         callq   *%rax
// 122: 49 8b 04 24                   movq    (%r12), %rax
// 126: 85 c0                         testl   %eax, %eax
// 128: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 12d: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 132: 4c 8b 74 24 20                movq    0x20(%rsp), %r14
// 137: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 13c: 78 21                         js      0x15f <_JIT_ENTRY+0x15f>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 148: ff d0                         callq   *%rax
// 14a: 49 ff 0c 24                   decq    (%r12)
// 14e: 75 0f                         jne     0x15f <_JIT_ENTRY+0x15f>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 4c 89 e7                      movq    %r12, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 49 8d 04 ef                   leaq    (%r15,%rbp,8), %rax
// 163: 48 8b 0c 24                   movq    (%rsp), %rcx
// 167: 48 85 c9                      testq   %rcx, %rcx
// 16a: 74 30                         je      0x19c <_JIT_ENTRY+0x19c>
// 16c: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 170: 48 89 08                      movq    %rcx, (%rax)
// 173: 49 8b 45 10                   movq    0x10(%r13), %rax
// 177: 48 8b 00                      movq    (%rax), %rax
// 17a: 84 c0                         testb   %al, %al
// 17c: 0f 84 f5 00 00 00             je      0x277 <_JIT_ENTRY+0x277>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_HandlePending
// 18c: 4c 89 ef                      movq    %r13, %rdi
// 18f: ff d0                         callq   *%rax
// 191: 85 c0                         testl   %eax, %eax
// 193: 0f 84 de 00 00 00             je      0x277 <_JIT_ENTRY+0x277>
// 199: 4c 89 f0                      movq    %r14, %rax
// 19c: 48 29 d8                      subq    %rbx, %rax
// 19f: 48 83 c0 b8                   addq    $-0x48, %rax
// 1a3: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1aa: 31 c0                         xorl    %eax, %eax
// 1ac: eb 3c                         jmp     0x1ea <_JIT_ENTRY+0x1ea>
// 1ae: 49 29 df                      subq    %rbx, %r15
// 1b1: 49 83 c7 b8                   addq    $-0x48, %r15
// 1b5: 49 c1 ef 03                   shrq    $0x3, %r15
// 1b9: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1bd: 48 8b 03                      movq    (%rbx), %rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  PyCode_Type
// 1ca: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ce: 0f 85 00 01 00 00             jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  _JIT_TARGET
// 1de: 89 c9                         movl    %ecx, %ecx
// 1e0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ea: 48 83 c4 28                   addq    $0x28, %rsp
// 1ee: 5b                            popq    %rbx
// 1ef: 41 5c                         popq    %r12
// 1f1: 41 5d                         popq    %r13
// 1f3: 41 5e                         popq    %r14
// 1f5: 41 5f                         popq    %r15
// 1f7: 5d                            popq    %rbp
// 1f8: c3                            retq
// 1f9: 41 83 fe 02                   cmpl    $0x2, %r14d
// 1fd: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 203: 45 0f 43 ee                   cmovael %r14d, %r13d
// 207: 31 db                         xorl    %ebx, %ebx
// 209: eb 11                         jmp     0x21c <_JIT_ENTRY+0x21c>
// 20b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 210: 48 ff c3                      incq    %rbx
// 213: 49 39 dd                      cmpq    %rbx, %r13
// 216: 0f 84 df fe ff ff             je      0xfb <_JIT_ENTRY+0xfb>
// 21c: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 221: 49 8b 06                      movq    (%r14), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7e 07                         jle     0x230 <_JIT_ENTRY+0x230>
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 e3                         js      0x210 <_JIT_ENTRY+0x210>
// 22d: eb 26                         jmp     0x255 <_JIT_ENTRY+0x255>
// 22f: 90                            nop
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 23f: 4c 89 f2                      movq    %r14, %rdx
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 06                      movq    (%r14), %rax
// 251: 85 c0                         testl   %eax, %eax
// 253: 78 bb                         js      0x210 <_JIT_ENTRY+0x210>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25f: ff d0                         callq   *%rax
// 261: 49 ff 0e                      decq    (%r14)
// 264: 75 aa                         jne     0x210 <_JIT_ENTRY+0x210>
// 266: 4c 89 f7                      movq    %r14, %rdi
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: ff d0                         callq   *%rax
// 275: eb 99                         jmp     0x210 <_JIT_ENTRY+0x210>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 f6                      movq    %r14, %rsi
// 287: 4c 89 ea                      movq    %r13, %rdx
// 28a: 48 83 c4 28                   addq    $0x28, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 29f: 0f 85 38 fe ff ff             jne     0xdd <_JIT_ENTRY+0xdd>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x87
// 2af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1+0x39
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  __assert_fail
// 2cd: ba 4c 0b 00 00                movl    $0xb4c, %edx            # imm = 0xB4C
// 2d2: ff d0                         callq   *%rax
// 2d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d6:  R_X86_64_64  .rodata.str1.1+0xb9
// 2de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002e0:  R_X86_64_64  .rodata.str1.1+0xd7
// 2e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ea:  R_X86_64_64  .rodata.str1.1+0x116
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  __assert_fail
// 2fc: ba 4d 00 00 00                movl    $0x4d, %edx
// 301: ff d0                         callq   *%rax
// 303: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000305:  R_X86_64_64  .rodata.str1.1+0x14c
// 30d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000030f:  R_X86_64_64  .rodata.str1.1+0x15b
// 317: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000319:  R_X86_64_64  .rodata.str1.1+0x19d
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  __assert_fail
// 32b: ba 4b 00 00 00                movl    $0x4b, %edx
// 330: ff d0                         callq   *%rax
// 332: 
static const unsigned char _CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[819] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xce, 0xf7, 0xd6, 0x4c, 0x63, 0xce, 0x4f, 0x8b, 0x2c, 0xcf, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xcf, 0x44, 0x8d, 0x71, 0x01, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x4d, 0x85, 0xed, 0x44, 0x0f, 0x44, 0xf1, 0x48, 0x63, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x4d, 0x8b, 0x24, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x44, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x44, 0x24, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x31, 0x01, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x8d, 0x2c, 0xc7, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x50, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x68, 0x48, 0x85, 0xc0, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0x84, 0xd5, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0x0f, 0x84, 0xc8, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc1, 0x84, 0xc8, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x74, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xeb, 0x3c, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x31, 0xdb, 0xeb, 0x11, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0xdf, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x0f, 0x85, 0x38, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4c, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb9},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd7},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x116},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14c},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15b},
    {0x319, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19d},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00'
// 1c8: 
static const unsigned char _CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[457] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00};
static const Hole _CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_BUILTIN_O
// 
// /tmp/tmp3v1aptj0/_CALL_BUILTIN_O.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c1                      movzwl  %cx, %eax
// 21: 89 c6                         movl    %eax, %esi
// 23: f7 d6                         notl    %esi
// 25: 4c 63 ee                      movslq  %esi, %r13
// 28: 31 ff                         xorl    %edi, %edi
// 2a: 66 85 c9                      testw   %cx, %cx
// 2d: 40 0f 94 c7                   sete    %dil
// 31: 31 f6                         xorl    %esi, %esi
// 33: 66 83 f9 01                   cmpw    $0x1, %cx
// 37: 40 0f 94 c6                   sete    %sil
// 3b: 0f b7 e9                      movzwl  %cx, %ebp
// 3e: 48 89 e9                      movq    %rbp, %rcx
// 41: 48 f7 d9                      negq    %rcx
// 44: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 49: 0f 44 fe                      cmovel  %esi, %edi
// 4c: 48 f7 d5                      notq    %rbp
// 4f: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 53: 40 80 ff 01                   cmpb    $0x1, %dil
// 57: 75 5e                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 59: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 5e: 29 c1                         subl    %eax, %ecx
// 60: 48 63 c9                      movslq  %ecx, %rcx
// 63: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 67: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000069:  R_X86_64_64  PyCFunction_Type
// 71: 4d 39 7c 24 08                cmpq    %r15, 0x8(%r12)
// 76: 75 3f                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 78: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 7d: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 81: 75 34                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 83: 48 89 0c 24                   movq    %rcx, (%rsp)
// 87: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 8b: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 8e: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 91: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 94: 85 c0                         testl   %eax, %eax
// 96: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 9b: 0f 8e 96 00 00 00             jle     0x137 <_JIT_ENTRY+0x137>
// a1: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// a5: 49 8b 44 24 10                movq    0x10(%r12), %rax
// aa: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// ae: 75 52                         jne     0x102 <_JIT_ENTRY+0x102>
// b0: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// b5: eb 4d                         jmp     0x104 <_JIT_ENTRY+0x104>
// b7: 49 29 de                      subq    %rbx, %r14
// ba: 49 83 c6 b8                   addq    $-0x48, %r14
// be: 49 c1 ee 03                   shrq    $0x3, %r14
// c2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c6: 48 8b 03                      movq    (%rbx), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  PyCode_Type
// d3: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// d7: 0f 85 3d 02 00 00             jne     0x31a <_JIT_ENTRY+0x31a>
// dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000df:  R_X86_64_64  _JIT_TARGET
// e7: 89 c9                         movl    %ecx, %ecx
// e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// f3: 48 83 c4 18                   addq    $0x18, %rsp
// f7: 5b                            popq    %rbx
// f8: 41 5c                         popq    %r12
// fa: 41 5d                         popq    %r13
// fc: 41 5e                         popq    %r14
// fe: 41 5f                         popq    %r15
// 100: 5d                            popq    %rbp
// 101: c3                            retq
// 102: 31 ff                         xorl    %edi, %edi
// 104: 48 89 ee                      movq    %rbp, %rsi
// 107: 41 ff d0                      callq   *%r8
// 10a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 10f: ff 42 2c                      incl    0x2c(%rdx)
// 112: 49 89 c7                      movq    %rax, %r15
// 115: 48 8b 42 68                   movq    0x68(%rdx), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 0f 84 9f 00 00 00             je      0x1c1 <_JIT_ENTRY+0x1c1>
// 122: 4d 85 ff                      testq   %r15, %r15
// 125: 0f 95 c1                      setne   %cl
// 128: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 12d: 0f 95 c0                      setne   %al
// 130: 30 c8                         xorb    %cl, %al
// 132: e9 8d 00 00 00                jmp     0x1c4 <_JIT_ENTRY+0x1c4>
// 137: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 13c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1+0x87
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_CheckRecursiveCall
// 150: 48 89 d7                      movq    %rdx, %rdi
// 153: ff d0                         callq   *%rax
// 155: 85 c0                         testl   %eax, %eax
// 157: 0f 85 9d 01 00 00             jne     0x2fa <_JIT_ENTRY+0x2fa>
// 15d: 49 8b 7c 24 08                movq    0x8(%r12), %rdi
// 162: 49 8b 2c ee                   movq    (%r14,%rbp,8), %rbp
// 166: 4c 39 ff                      cmpq    %r15, %rdi
// 169: 0f 84 a1 01 00 00             je      0x310 <_JIT_ENTRY+0x310>
// 16f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000171:  R_X86_64_64  PyCFunction_Type
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  PyType_IsSubtype
// 183: ff d0                         callq   *%rax
// 185: 85 c0                         testl   %eax, %eax
// 187: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 18c: 0f 85 13 ff ff ff             jne     0xa5 <_JIT_ENTRY+0xa5>
// 192: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000194:  R_X86_64_64  .rodata.str1.1+0x1a9
// 19c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1+0x16b
// 1a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1+0x1c5
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  __assert_fail
// 1ba: ba 2e 00 00 00                movl    $0x2e, %edx
// 1bf: ff d0                         callq   *%rax
// 1c1: 4d 85 ff                      testq   %r15, %r15
// 1c4: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1c8: 0f 84 7b 01 00 00             je      0x349 <_JIT_ENTRY+0x349>
// 1ce: 48 8b 45 00                   movq    (%rbp), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 7f 2b                         jg      0x202 <_JIT_ENTRY+0x202>
// 1d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d9:  R_X86_64_64  .rodata.str1.1
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_NegativeRefcount
// 1eb: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 1f0: 48 89 ea                      movq    %rbp, %rdx
// 1f3: ff d0                         callq   *%rax
// 1f5: 48 8b 0c 24                   movq    (%rsp), %rcx
// 1f9: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1fe: 48 8b 45 00                   movq    (%rbp), %rax
// 202: 85 c0                         testl   %eax, %eax
// 204: 78 33                         js      0x239 <_JIT_ENTRY+0x239>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 210: ff d0                         callq   *%rax
// 212: 48 8b 0c 24                   movq    (%rsp), %rcx
// 216: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 21b: 48 ff 4d 00                   decq    (%rbp)
// 21f: 75 18                         jne     0x239 <_JIT_ENTRY+0x239>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_Dealloc
// 22b: 48 89 ef                      movq    %rbp, %rdi
// 22e: ff d0                         callq   *%rax
// 230: 48 8b 0c 24                   movq    (%rsp), %rcx
// 234: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 239: 49 8b 04 24                   movq    (%r12), %rax
// 23d: 48 85 c0                      testq   %rax, %rax
// 240: 7f 2b                         jg      0x26d <_JIT_ENTRY+0x26d>
// 242: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000244:  R_X86_64_64  .rodata.str1.1
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_NegativeRefcount
// 256: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 25b: 4c 89 e2                      movq    %r12, %rdx
// 25e: ff d0                         callq   *%rax
// 260: 48 8b 0c 24                   movq    (%rsp), %rcx
// 264: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 269: 49 8b 04 24                   movq    (%r12), %rax
// 26d: 85 c0                         testl   %eax, %eax
// 26f: 78 33                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27b: ff d0                         callq   *%rax
// 27d: 48 8b 0c 24                   movq    (%rsp), %rcx
// 281: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 286: 49 ff 0c 24                   decq    (%r12)
// 28a: 75 18                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: 4c 89 e7                      movq    %r12, %rdi
// 299: ff d0                         callq   *%rax
// 29b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 29f: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2a4: 49 8d 04 ce                   leaq    (%r14,%rcx,8), %rax
// 2a8: 4d 85 ff                      testq   %r15, %r15
// 2ab: 74 4a                         je      0x2f7 <_JIT_ENTRY+0x2f7>
// 2ad: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2b1: 4c 89 38                      movq    %r15, (%rax)
// 2b4: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 2b8: 48 8b 00                      movq    (%rax), %rax
// 2bb: 84 c0                         testb   %al, %al
// 2bd: 74 18                         je      0x2d7 <_JIT_ENTRY+0x2d7>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_HandlePending
// 2c9: 48 89 d7                      movq    %rdx, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d3: 85 c0                         testl   %eax, %eax
// 2d5: 75 23                         jne     0x2fa <_JIT_ENTRY+0x2fa>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _JIT_CONTINUE
// 2e1: 48 89 df                      movq    %rbx, %rdi
// 2e4: 4c 89 f6                      movq    %r14, %rsi
// 2e7: 48 83 c4 18                   addq    $0x18, %rsp
// 2eb: 5b                            popq    %rbx
// 2ec: 41 5c                         popq    %r12
// 2ee: 41 5d                         popq    %r13
// 2f0: 41 5e                         popq    %r14
// 2f2: 41 5f                         popq    %r15
// 2f4: 5d                            popq    %rbp
// 2f5: ff e0                         jmpq    *%rax
// 2f7: 49 89 c6                      movq    %rax, %r14
// 2fa: 49 29 de                      subq    %rbx, %r14
// 2fd: 49 83 c6 b8                   addq    $-0x48, %r14
// 301: 49 c1 ee 03                   shrq    $0x3, %r14
// 305: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 309: 31 c0                         xorl    %eax, %eax
// 30b: e9 e3 fd ff ff                jmp     0xf3 <_JIT_ENTRY+0xf3>
// 310: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 315: e9 8b fd ff ff                jmp     0xa5 <_JIT_ENTRY+0xa5>
// 31a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031c:  R_X86_64_64  .rodata.str1.1+0xd8
// 324: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000326:  R_X86_64_64  .rodata.str1.1+0xf6
// 32e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000330:  R_X86_64_64  .rodata.str1.1+0x135
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  __assert_fail
// 342: ba 4d 00 00 00                movl    $0x4d, %edx
// 347: ff d0                         callq   *%rax
// 349: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034b:  R_X86_64_64  .rodata.str1.1+0xa6
// 353: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000355:  R_X86_64_64  .rodata.str1.1
// 35d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000035f:  R_X86_64_64  .rodata.str1.1+0x39
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  __assert_fail
// 371: ba 01 0b 00 00                movl    $0xb01, %edx            # imm = 0xB01
// 376: ff d0                         callq   *%rax
// 378: 
static const unsigned char _CALL_BUILTIN_O_code_body[889] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc6, 0xf7, 0xd6, 0x4c, 0x63, 0xee, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xfe, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x40, 0x80, 0xff, 0x01, 0x75, 0x5e, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x24, 0xce, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x7c, 0x24, 0x08, 0x75, 0x3f, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x34, 0x48, 0x89, 0x0c, 0x24, 0x4c, 0x8b, 0x40, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x54, 0x24, 0x08, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x2c, 0xee, 0x49, 0x8b, 0x44, 0x24, 0x10, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x52, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x4d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x3d, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x31, 0xff, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0x42, 0x2c, 0x49, 0x89, 0xc7, 0x48, 0x8b, 0x42, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x2c, 0xee, 0x4c, 0x39, 0xff, 0x0f, 0x84, 0xa1, 0x01, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0x13, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x2e, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x48, 0x8b, 0x0c, 0x24, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x2b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xce, 0x4d, 0x85, 0xff, 0x74, 0x4a, 0x4f, 0x8d, 0x34, 0xee, 0x4c, 0x89, 0x38, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe3, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0xe9, 0x8b, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x01, 0x0b, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_BUILTIN_O_code_holes[31] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_IsSubtype, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a9},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16b},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c5},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd8},
    {0x326, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x330, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x135},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa6},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x369, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00 while calling a Python object\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00/home/jglass/Documents/cpython/Include/cpython/methodobject.h\x00PyCFunction_Check(func_obj)\x00PyObject *PyCFunction_GET_SELF(PyObject *)\x00'
// 1f0: 
static const unsigned char _CALL_BUILTIN_O_data_body[497] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x29, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x50, 0x79, 0x43, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00};
static const Hole _CALL_BUILTIN_O_data_holes[1];

// _CALL_INTRINSIC_1
// 
// /tmp/tmp3v1aptj0/_CALL_INTRINSIC_1.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_OPARG
// 15: 0f b7 c0                      movzwl  %ax, %eax
// 18: 83 f8 0c                      cmpl    $0xc, %eax
// 1b: 0f 8d 08 01 00 00             jge     0x129 <_JIT_ENTRY+0x129>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 89 f6                      movq    %rsi, %r14
// 27: 48 89 fb                      movq    %rdi, %rbx
// 2a: 48 8d 6e f8                   leaq    -0x8(%rsi), %rbp
// 2e: 4c 8b 65 00                   movq    (%rbp), %r12
// 32: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000034:  R_X86_64_64  _JIT_OPARG
// 3c: 0f b7 c0                      movzwl  %ax, %eax
// 3f: 48 c1 e0 04                   shlq    $0x4, %rax
// 43: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000045:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 4d: 48 89 d7                      movq    %rdx, %rdi
// 50: 4c 89 e6                      movq    %r12, %rsi
// 53: ff 14 08                      callq   *(%rax,%rcx)
// 56: 49 89 c5                      movq    %rax, %r13
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7e 06                         jle     0x68 <_JIT_ENTRY+0x68>
// 62: 85 c0                         testl   %eax, %eax
// 64: 79 28                         jns     0x8e <_JIT_ENTRY+0x8e>
// 66: eb 38                         jmp     0xa0 <_JIT_ENTRY+0xa0>
// 68: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006a:  R_X86_64_64  .rodata.str1.1
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _Py_NegativeRefcount
// 7c: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 81: 4c 89 e2                      movq    %r12, %rdx
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 78 12                         js      0xa0 <_JIT_ENTRY+0xa0>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: ff d0                         callq   *%rax
// 9a: 49 ff 0c 24                   decq    (%r12)
// 9e: 74 2c                         je      0xcc <_JIT_ENTRY+0xcc>
// a0: 4d 85 ed                      testq   %r13, %r13
// a3: 74 3b                         je      0xe0 <_JIT_ENTRY+0xe0>
// a5: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _JIT_CONTINUE
// b3: 48 89 df                      movq    %rbx, %rdi
// b6: 4c 89 f6                      movq    %r14, %rsi
// b9: 4c 89 fa                      movq    %r15, %rdx
// bc: 48 83 c4 08                   addq    $0x8, %rsp
// c0: 5b                            popq    %rbx
// c1: 41 5c                         popq    %r12
// c3: 41 5d                         popq    %r13
// c5: 41 5e                         popq    %r14
// c7: 41 5f                         popq    %r15
// c9: 5d                            popq    %rbp
// ca: ff e0                         jmpq    *%rax
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _Py_Dealloc
// d6: 4c 89 e7                      movq    %r12, %rdi
// d9: ff d0                         callq   *%rax
// db: 4d 85 ed                      testq   %r13, %r13
// de: 75 c5                         jne     0xa5 <_JIT_ENTRY+0xa5>
// e0: 48 8b 03                      movq    (%rbx), %rax
// e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e5:  R_X86_64_64  PyCode_Type
// ed: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// f1: 75 65                         jne     0x158 <_JIT_ENTRY+0x158>
// f3: 8b 40 48                      movl    0x48(%rax), %eax
// f6: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// fa: 48 83 c0 48                   addq    $0x48, %rax
// fe: 49 29 c6                      subq    %rax, %r14
// 101: 49 c1 ee 03                   shrq    $0x3, %r14
// 105: 45 85 f6                      testl   %r14d, %r14d
// 108: 7e 7d                         jle     0x187 <_JIT_ENTRY+0x187>
// 10a: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 10e: 48 29 c5                      subq    %rax, %rbp
// 111: 48 c1 ed 03                   shrq    $0x3, %rbp
// 115: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 118: 31 c0                         xorl    %eax, %eax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5d                         popq    %r13
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: 5d                            popq    %rbp
// 128: c3                            retq
// 129: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012b:  R_X86_64_64  .rodata.str1.1+0x87
// 133: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013f:  R_X86_64_64  .rodata.str1.1+0x39
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  __assert_fail
// 151: ba 7c 02 00 00                movl    $0x27c, %edx            # imm = 0x27C
// 156: ff d0                         callq   *%rax
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1+0xe7
// 162: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000164:  R_X86_64_64  .rodata.str1.1+0x105
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  .rodata.str1.1+0x144
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  __assert_fail
// 180: ba 4d 00 00 00                movl    $0x4d, %edx
// 185: ff d0                         callq   *%rax
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1+0xa0
// 191: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000193:  R_X86_64_64  .rodata.str1.1+0xb3
// 19b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019d:  R_X86_64_64  .rodata.str1.1+0x39
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  __assert_fail
// 1af: ba 5b 00 00 00                movl    $0x5b, %edx
// 1b4: ff d0                         callq   *%rax
// 1b6: 
static const unsigned char _CALL_INTRINSIC_1_code_body[439] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x0c, 0x0f, 0x8d, 0x08, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8d, 0x6e, 0xf8, 0x4c, 0x8b, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0x08, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x4d, 0x85, 0xed, 0x74, 0x3b, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x65, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x43, 0x48, 0x48, 0x29, 0xc5, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7c, 0x02, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_INTRINSIC_1_code_holes[22] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe7},
    {0x164, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x105},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x144},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg <= MAX_INTRINSIC_1\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 17a: 00 00 00 00 00 00
static const unsigned char _CALL_INTRINSIC_1_data_body[385] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3c, 0x3d, 0x20, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x31, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_INTRINSIC_1_data_holes[1];

// _CALL_INTRINSIC_2
// 
// /tmp/tmp3v1aptj0/_CALL_INTRINSIC_2.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPARG
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 83 f8 05                      cmpl    $0x5, %eax
// 23: 0f 8d 8c 01 00 00             jge     0x1b5 <_JIT_ENTRY+0x1b5>
// 29: 49 89 f7                      movq    %rsi, %r15
// 2c: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 30: 4c 8d 66 f0                   leaq    -0x10(%rsi), %r12
// 34: 49 8b 1c 24                   movq    (%r12), %rbx
// 38: 4d 8b 2e                      movq    (%r14), %r13
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _JIT_OPARG
// 45: 0f b7 c0                      movzwl  %ax, %eax
// 48: 48 c1 e0 04                   shlq    $0x4, %rax
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 56: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 5b: 48 89 d7                      movq    %rdx, %rdi
// 5e: 48 89 de                      movq    %rbx, %rsi
// 61: 4c 89 ea                      movq    %r13, %rdx
// 64: ff 14 08                      callq   *(%rax,%rcx)
// 67: 48 89 c5                      movq    %rax, %rbp
// 6a: 48 8b 03                      movq    (%rbx), %rax
// 6d: 48 85 c0                      testq   %rax, %rax
// 70: 7e 06                         jle     0x78 <_JIT_ENTRY+0x78>
// 72: 85 c0                         testl   %eax, %eax
// 74: 79 27                         jns     0x9d <_JIT_ENTRY+0x9d>
// 76: eb 36                         jmp     0xae <_JIT_ENTRY+0xae>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 91: 48 89 da                      movq    %rbx, %rdx
// 94: ff d0                         callq   *%rax
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 85 c0                         testl   %eax, %eax
// 9b: 78 11                         js      0xae <_JIT_ENTRY+0xae>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a7: ff d0                         callq   *%rax
// a9: 48 ff 0b                      decq    (%rbx)
// ac: 74 0f                         je      0xbd <_JIT_ENTRY+0xbd>
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 48 85 c0                      testq   %rax, %rax
// b5: 7e 1e                         jle     0xd5 <_JIT_ENTRY+0xd5>
// b7: 85 c0                         testl   %eax, %eax
// b9: 79 40                         jns     0xfb <_JIT_ENTRY+0xfb>
// bb: eb 50                         jmp     0x10d <_JIT_ENTRY+0x10d>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_Dealloc
// c7: 48 89 df                      movq    %rbx, %rdi
// ca: ff d0                         callq   *%rax
// cc: 49 8b 45 00                   movq    (%r13), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f e2                         jg      0xb7 <_JIT_ENTRY+0xb7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// ee: 4c 89 ea                      movq    %r13, %rdx
// f1: ff d0                         callq   *%rax
// f3: 49 8b 45 00                   movq    (%r13), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 78 12                         js      0x10d <_JIT_ENTRY+0x10d>
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 105: ff d0                         callq   *%rax
// 107: 49 ff 4d 00                   decq    (%r13)
// 10b: 74 30                         je      0x13d <_JIT_ENTRY+0x13d>
// 10d: 48 85 ed                      testq   %rbp, %rbp
// 110: 74 3f                         je      0x151 <_JIT_ENTRY+0x151>
// 112: 49 89 2c 24                   movq    %rbp, (%r12)
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _JIT_CONTINUE
// 120: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 125: 4c 89 f6                      movq    %r14, %rsi
// 128: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 12d: 48 83 c4 18                   addq    $0x18, %rsp
// 131: 5b                            popq    %rbx
// 132: 41 5c                         popq    %r12
// 134: 41 5d                         popq    %r13
// 136: 41 5e                         popq    %r14
// 138: 41 5f                         popq    %r15
// 13a: 5d                            popq    %rbp
// 13b: ff e0                         jmpq    *%rax
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _Py_Dealloc
// 147: 4c 89 ef                      movq    %r13, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 48 85 ed                      testq   %rbp, %rbp
// 14f: 75 c1                         jne     0x112 <_JIT_ENTRY+0x112>
// 151: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 156: 48 8b 02                      movq    (%rdx), %rax
// 159: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015b:  R_X86_64_64  PyCode_Type
// 163: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 167: 75 7b                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 169: 48 63 40 48                   movslq  0x48(%rax), %rax
// 16d: 48 8d 04 c2                   leaq    (%rdx,%rax,8), %rax
// 171: 48 83 c0 48                   addq    $0x48, %rax
// 175: 49 29 c7                      subq    %rax, %r15
// 178: 49 c1 ef 03                   shrq    $0x3, %r15
// 17c: 45 85 ff                      testl   %r15d, %r15d
// 17f: 0f 8e 8e 00 00 00             jle     0x213 <_JIT_ENTRY+0x213>
// 185: 49 29 c6                      subq    %rax, %r14
// 188: 49 c1 ee 03                   shrq    $0x3, %r14
// 18c: 45 85 f6                      testl   %r14d, %r14d
// 18f: 0f 8e ad 00 00 00             jle     0x242 <_JIT_ENTRY+0x242>
// 195: 48 8d 42 48                   leaq    0x48(%rdx), %rax
// 199: 49 29 c4                      subq    %rax, %r12
// 19c: 49 c1 ec 03                   shrq    $0x3, %r12
// 1a0: 44 89 62 40                   movl    %r12d, 0x40(%rdx)
// 1a4: 31 c0                         xorl    %eax, %eax
// 1a6: 48 83 c4 18                   addq    $0x18, %rsp
// 1aa: 5b                            popq    %rbx
// 1ab: 41 5c                         popq    %r12
// 1ad: 41 5d                         popq    %r13
// 1af: 41 5e                         popq    %r14
// 1b1: 41 5f                         popq    %r15
// 1b3: 5d                            popq    %rbp
// 1b4: c3                            retq
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1+0x87
// 1bf: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  .rodata.str1.1+0x39
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  __assert_fail
// 1dd: ba 8b 02 00 00                movl    $0x28b, %edx            # imm = 0x28B
// 1e2: ff d0                         callq   *%rax
// 1e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e6:  R_X86_64_64  .rodata.str1.1+0xe7
// 1ee: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1+0x105
// 1f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fa:  R_X86_64_64  .rodata.str1.1+0x144
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  __assert_fail
// 20c: ba 4d 00 00 00                movl    $0x4d, %edx
// 211: ff d0                         callq   *%rax
// 213: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000215:  R_X86_64_64  .rodata.str1.1+0xa0
// 21d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000021f:  R_X86_64_64  .rodata.str1.1+0xb3
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  .rodata.str1.1+0x39
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  __assert_fail
// 23b: ba 59 00 00 00                movl    $0x59, %edx
// 240: ff d0                         callq   *%rax
// 242: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000244:  R_X86_64_64  .rodata.str1.1+0xa0
// 24c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024e:  R_X86_64_64  .rodata.str1.1+0xb3
// 256: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000258:  R_X86_64_64  .rodata.str1.1+0x39
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  __assert_fail
// 26a: ba 5b 00 00 00                movl    $0x5b, %edx
// 26f: ff d0                         callq   *%rax
// 271: 
static const unsigned char _CALL_INTRINSIC_2_code_body[626] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x05, 0x0f, 0x8d, 0x8c, 0x01, 0x00, 0x00, 0x49, 0x89, 0xf7, 0x4c, 0x8d, 0x76, 0xf8, 0x4c, 0x8d, 0x66, 0xf0, 0x49, 0x8b, 0x1c, 0x24, 0x4d, 0x8b, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0xd7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xea, 0xff, 0x14, 0x08, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x30, 0x48, 0x85, 0xed, 0x74, 0x3f, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x75, 0xc1, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x02, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x7b, 0x48, 0x63, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc2, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc7, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x85, 0xff, 0x0f, 0x8e, 0x8e, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0xad, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x42, 0x48, 0x49, 0x29, 0xc4, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x62, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x8b, 0x02, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_INTRINSIC_2_code_holes[30] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe7},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x105},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x144},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x229, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x258, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg <= MAX_INTRINSIC_2\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 17a: 00 00 00 00 00 00
static const unsigned char _CALL_INTRINSIC_2_data_body[385] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3c, 0x3d, 0x20, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x32, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_INTRINSIC_2_data_holes[1];

// _CALL_ISINSTANCE
// 
// /tmp/tmp3v1aptj0/_CALL_ISINSTANCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 48 63 ea                      movslq  %edx, %rbp
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 83 f9 01                   cmpw    $0x1, %cx
// 31: 0f 94 c2                      sete    %dl
// 34: 31 f6                         xorl    %esi, %esi
// 36: 66 83 f9 02                   cmpw    $0x2, %cx
// 3a: 40 0f 94 c6                   sete    %sil
// 3e: 0f b7 c9                      movzwl  %cx, %ecx
// 41: 48 89 cf                      movq    %rcx, %rdi
// 44: 48 f7 df                      negq    %rdi
// 47: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 4c: 0f 44 d6                      cmovel  %esi, %edx
// 4f: 48 f7 d1                      notq    %rcx
// 52: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 56: 80 fa 01                      cmpb    $0x1, %dl
// 59: 75 1b                         jne     0x76 <_JIT_ENTRY+0x76>
// 5b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 60: 29 c2                         subl    %eax, %edx
// 62: 48 63 d2                      movslq  %edx, %rdx
// 65: 4d 8b 24 d6                   movq    (%r14,%rdx,8), %r12
// 69: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6d: 4c 3b a0 b8 54 06 00          cmpq    0x654b8(%rax), %r12
// 74: 74 4b                         je      0xc1 <_JIT_ENTRY+0xc1>
// 76: 49 29 de                      subq    %rbx, %r14
// 79: 49 83 c6 b8                   addq    $-0x48, %r14
// 7d: 49 c1 ee 03                   shrq    $0x3, %r14
// 81: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 85: 48 8b 03                      movq    (%rbx), %rax
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  PyCode_Type
// 92: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 96: 0f 85 0a 02 00 00             jne     0x2a6 <_JIT_ENTRY+0x2a6>
// 9c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009e:  R_X86_64_64  _JIT_TARGET
// a6: 89 c9                         movl    %ecx, %ecx
// a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b2: 48 83 c4 18                   addq    $0x18, %rsp
// b6: 5b                            popq    %rbx
// b7: 41 5c                         popq    %r12
// b9: 41 5d                         popq    %r13
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: 5d                            popq    %rbp
// c0: c3                            retq
// c1: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// c6: 4d 8b 2c ce                   movq    (%r14,%rcx,8), %r13
// ca: 49 8b 74 ce 08                movq    0x8(%r14,%rcx,8), %rsi
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  PyObject_IsInstance
// d9: 4c 89 ef                      movq    %r13, %rdi
// dc: 48 89 34 24                   movq    %rsi, (%rsp)
// e0: ff d0                         callq   *%rax
// e2: 85 c0                         testl   %eax, %eax
// e4: 0f 88 a6 01 00 00             js      0x290 <_JIT_ENTRY+0x290>
// ea: 89 c7                         movl    %eax, %edi
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  PyBool_FromLong
// f6: ff d0                         callq   *%rax
// f8: 49 8b 57 68                   movq    0x68(%r15), %rdx
// fc: 48 85 d2                      testq   %rdx, %rdx
// ff: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 104: 0f 84 4b 01 00 00             je      0x255 <_JIT_ENTRY+0x255>
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 0f 95 c1                      setne   %cl
// 110: 48 83 7a 08 00                cmpq    $0x0, 0x8(%rdx)
// 115: 0f 95 c0                      setne   %al
// 118: 30 c8                         xorb    %cl, %al
// 11a: 0f 84 3e 01 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 120: 49 8b 45 00                   movq    (%r13), %rax
// 124: 48 85 c0                      testq   %rax, %rax
// 127: 7f 22                         jg      0x14b <_JIT_ENTRY+0x14b>
// 129: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012b:  R_X86_64_64  .rodata.str1.1
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_NegativeRefcount
// 13d: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 142: 4c 89 ea                      movq    %r13, %rdx
// 145: ff d0                         callq   *%rax
// 147: 49 8b 45 00                   movq    (%r13), %rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 78 21                         js      0x170 <_JIT_ENTRY+0x170>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 75 0f                         jne     0x170 <_JIT_ENTRY+0x170>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 ef                      movq    %r13, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 48 8b 04 24                   movq    (%rsp), %rax
// 174: 48 8b 00                      movq    (%rax), %rax
// 177: 48 85 c0                      testq   %rax, %rax
// 17a: 7f 26                         jg      0x1a2 <_JIT_ENTRY+0x1a2>
// 17c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017e:  R_X86_64_64  .rodata.str1.1
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_NegativeRefcount
// 190: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 195: 4c 8b 2c 24                   movq    (%rsp), %r13
// 199: 4c 89 ea                      movq    %r13, %rdx
// 19c: ff d0                         callq   *%rax
// 19e: 49 8b 45 00                   movq    (%r13), %rax
// 1a2: 85 c0                         testl   %eax, %eax
// 1a4: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1a9: 78 25                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 04 24                   movq    (%rsp), %rax
// 1bb: 48 ff 08                      decq    (%rax)
// 1be: 75 10                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 8b 04 24                   movq    (%r12), %rax
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 7f 22                         jg      0x1fb <_JIT_ENTRY+0x1fb>
// 1d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001db:  R_X86_64_64  .rodata.str1.1
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_NegativeRefcount
// 1ed: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 1f2: 4c 89 e2                      movq    %r12, %rdx
// 1f5: ff d0                         callq   *%rax
// 1f7: 49 8b 04 24                   movq    (%r12), %rax
// 1fb: 85 c0                         testl   %eax, %eax
// 1fd: 78 21                         js      0x220 <_JIT_ENTRY+0x220>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 49 ff 0c 24                   decq    (%r12)
// 20f: 75 0f                         jne     0x220 <_JIT_ENTRY+0x220>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: 4c 89 e7                      movq    %r12, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 224: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 229: 48 85 c9                      testq   %rcx, %rcx
// 22c: 74 5f                         je      0x28d <_JIT_ENTRY+0x28d>
// 22e: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 232: 48 89 08                      movq    %rcx, (%rax)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 fa                      movq    %r15, %rdx
// 245: 48 83 c4 18                   addq    $0x18, %rsp
// 249: 5b                            popq    %rbx
// 24a: 41 5c                         popq    %r12
// 24c: 41 5d                         popq    %r13
// 24e: 41 5e                         popq    %r14
// 250: 41 5f                         popq    %r15
// 252: 5d                            popq    %rbp
// 253: ff e0                         jmpq    *%rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 0f 85 c2 fe ff ff             jne     0x120 <_JIT_ENTRY+0x120>
// 25e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000260:  R_X86_64_64  .rodata.str1.1+0x87
// 268: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000026a:  R_X86_64_64  .rodata.str1.1
// 272: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000274:  R_X86_64_64  .rodata.str1.1+0x39
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  __assert_fail
// 286: ba 95 0b 00 00                movl    $0xb95, %edx            # imm = 0xB95
// 28b: ff d0                         callq   *%rax
// 28d: 49 89 c6                      movq    %rax, %r14
// 290: 49 29 de                      subq    %rbx, %r14
// 293: 49 83 c6 b8                   addq    $-0x48, %r14
// 297: 49 c1 ee 03                   shrq    $0x3, %r14
// 29b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 29f: 31 c0                         xorl    %eax, %eax
// 2a1: e9 0c fe ff ff                jmp     0xb2 <_JIT_ENTRY+0xb2>
// 2a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1+0xb9
// 2b0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1+0xd7
// 2ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bc:  R_X86_64_64  .rodata.str1.1+0x116
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  __assert_fail
// 2ce: ba 4d 00 00 00                movl    $0x4d, %edx
// 2d3: ff d0                         callq   *%rax
// 2d5: 
static const unsigned char _CALL_ISINSTANCE_code_body[726] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x83, 0xf9, 0x01, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x02, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xd2, 0x4d, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x47, 0x10, 0x4c, 0x3b, 0xa0, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x4b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x0a, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xce, 0x49, 0x8b, 0x74, 0xce, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x34, 0x24, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xa6, 0x01, 0x00, 0x00, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x57, 0x68, 0x48, 0x85, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x08, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x7a, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x5f, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0xc2, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x95, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x0c, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_ISINSTANCE_code_holes[27] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb9},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd7},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x116},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 14c: 00 00 00 00
static const unsigned char _CALL_ISINSTANCE_data_body[337] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_ISINSTANCE_data_holes[1];

// _CALL_LEN
// 
// /tmp/tmp3v1aptj0/_CALL_LEN.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c1                      movzwl  %cx, %eax
// 24: 89 c2                         movl    %eax, %edx
// 26: f7 d2                         notl    %edx
// 28: 4c 63 ea                      movslq  %edx, %r13
// 2b: 31 d2                         xorl    %edx, %edx
// 2d: 66 85 c9                      testw   %cx, %cx
// 30: 0f 94 c2                      sete    %dl
// 33: 31 f6                         xorl    %esi, %esi
// 35: 66 83 f9 01                   cmpw    $0x1, %cx
// 39: 40 0f 94 c6                   sete    %sil
// 3d: 0f b7 c9                      movzwl  %cx, %ecx
// 40: 48 89 cf                      movq    %rcx, %rdi
// 43: 48 f7 df                      negq    %rdi
// 46: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 4b: 0f 44 d6                      cmovel  %esi, %edx
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 cf                   cmoveq  %rdi, %rcx
// 55: 80 fa 01                      cmpb    $0x1, %dl
// 58: 75 1b                         jne     0x75 <_JIT_ENTRY+0x75>
// 5a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 5f: 29 c2                         subl    %eax, %edx
// 61: 4c 63 e2                      movslq  %edx, %r12
// 64: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 68: 49 8b 47 10                   movq    0x10(%r15), %rax
// 6c: 48 3b a8 c0 54 06 00          cmpq    0x654c0(%rax), %rbp
// 73: 74 4b                         je      0xc0 <_JIT_ENTRY+0xc0>
// 75: 49 29 de                      subq    %rbx, %r14
// 78: 49 83 c6 b8                   addq    $-0x48, %r14
// 7c: 49 c1 ee 03                   shrq    $0x3, %r14
// 80: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 84: 48 8b 03                      movq    (%rbx), %rax
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  PyCode_Type
// 91: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 95: 0f 85 a5 01 00 00             jne     0x240 <_JIT_ENTRY+0x240>
// 9b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009d:  R_X86_64_64  _JIT_TARGET
// a5: 89 c9                         movl    %ecx, %ecx
// a7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ab: 48 05 c8 00 00 00             addq    $0xc8, %rax
// b1: 48 83 c4 18                   addq    $0x18, %rsp
// b5: 5b                            popq    %rbx
// b6: 41 5c                         popq    %r12
// b8: 41 5d                         popq    %r13
// ba: 41 5e                         popq    %r14
// bc: 41 5f                         popq    %r15
// be: 5d                            popq    %rbp
// bf: c3                            retq
// c0: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  PyObject_Size
// ce: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// d3: ff d0                         callq   *%rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 0f 88 4c 01 00 00             js      0x22a <_JIT_ENTRY+0x22a>
// de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e0:  R_X86_64_64  PyLong_FromSsize_t
// e8: 48 89 c7                      movq    %rax, %rdi
// eb: ff d1                         callq   *%rcx
// ed: 49 8b 57 68                   movq    0x68(%r15), %rdx
// f1: 48 85 d2                      testq   %rdx, %rdx
// f4: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// f9: 0f 84 f0 00 00 00             je      0x1ef <_JIT_ENTRY+0x1ef>
// ff: 48 85 c0                      testq   %rax, %rax
// 102: 0f 95 c1                      setne   %cl
// 105: 48 83 7a 08 00                cmpq    $0x0, 0x8(%rdx)
// 10a: 0f 95 c0                      setne   %al
// 10d: 30 c8                         xorb    %cl, %al
// 10f: 0f 84 e3 00 00 00             je      0x1f8 <_JIT_ENTRY+0x1f8>
// 115: 48 8b 45 00                   movq    (%rbp), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7f 22                         jg      0x140 <_JIT_ENTRY+0x140>
// 11e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000120:  R_X86_64_64  .rodata.str1.1
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_NegativeRefcount
// 132: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 137: 48 89 ea                      movq    %rbp, %rdx
// 13a: ff d0                         callq   *%rax
// 13c: 48 8b 45 00                   movq    (%rbp), %rax
// 140: 85 c0                         testl   %eax, %eax
// 142: 78 21                         js      0x165 <_JIT_ENTRY+0x165>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14e: ff d0                         callq   *%rax
// 150: 48 ff 4d 00                   decq    (%rbp)
// 154: 75 0f                         jne     0x165 <_JIT_ENTRY+0x165>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 48 89 ef                      movq    %rbp, %rdi
// 163: ff d0                         callq   *%rax
// 165: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 16a: 48 8b 45 00                   movq    (%rbp), %rax
// 16e: 48 85 c0                      testq   %rax, %rax
// 171: 7f 22                         jg      0x195 <_JIT_ENTRY+0x195>
// 173: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000175:  R_X86_64_64  .rodata.str1.1
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_NegativeRefcount
// 187: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 18c: 48 89 ea                      movq    %rbp, %rdx
// 18f: ff d0                         callq   *%rax
// 191: 48 8b 45 00                   movq    (%rbp), %rax
// 195: 85 c0                         testl   %eax, %eax
// 197: 78 21                         js      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 48 ff 4d 00                   decq    (%rbp)
// 1a9: 75 0f                         jne     0x1ba <_JIT_ENTRY+0x1ba>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _Py_Dealloc
// 1b5: 48 89 ef                      movq    %rbp, %rdi
// 1b8: ff d0                         callq   *%rax
// 1ba: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 1be: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c3: 48 85 c9                      testq   %rcx, %rcx
// 1c6: 74 5f                         je      0x227 <_JIT_ENTRY+0x227>
// 1c8: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 1cc: 48 89 08                      movq    %rcx, (%rax)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_CONTINUE
// 1d9: 48 89 df                      movq    %rbx, %rdi
// 1dc: 4c 89 fa                      movq    %r15, %rdx
// 1df: 48 83 c4 18                   addq    $0x18, %rsp
// 1e3: 5b                            popq    %rbx
// 1e4: 41 5c                         popq    %r12
// 1e6: 41 5d                         popq    %r13
// 1e8: 41 5e                         popq    %r14
// 1ea: 41 5f                         popq    %r15
// 1ec: 5d                            popq    %rbp
// 1ed: ff e0                         jmpq    *%rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 0f 85 1d ff ff ff             jne     0x115 <_JIT_ENTRY+0x115>
// 1f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fa:  R_X86_64_64  .rodata.str1.1+0x87
// 202: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000204:  R_X86_64_64  .rodata.str1.1
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  .rodata.str1.1+0x39
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  __assert_fail
// 220: ba 72 0b 00 00                movl    $0xb72, %edx            # imm = 0xB72
// 225: ff d0                         callq   *%rax
// 227: 49 89 c6                      movq    %rax, %r14
// 22a: 49 29 de                      subq    %rbx, %r14
// 22d: 49 83 c6 b8                   addq    $-0x48, %r14
// 231: 49 c1 ee 03                   shrq    $0x3, %r14
// 235: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 239: 31 c0                         xorl    %eax, %eax
// 23b: e9 71 fe ff ff                jmp     0xb1 <_JIT_ENTRY+0xb1>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1+0xb9
// 24a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1+0xd7
// 254: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000256:  R_X86_64_64  .rodata.str1.1+0x116
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  __assert_fail
// 268: ba 4d 00 00 00                movl    $0x4d, %edx
// 26d: ff d0                         callq   *%rax
// 26f: 
static const unsigned char _CALL_LEN_code_body[624] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x31, 0xd2, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xf9, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xcf, 0x48, 0xf7, 0xdf, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x0f, 0x44, 0xd6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xcf, 0x80, 0xfa, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x3b, 0xa8, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x4b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xa5, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x49, 0x8b, 0x57, 0x68, 0x48, 0x85, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x08, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x7a, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x5f, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x1d, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x72, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x71, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_LEN_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x204, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb9},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd7},
    {0x256, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x116},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 14c: 00 00 00 00
static const unsigned char _CALL_LEN_data_body[337] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_LEN_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmp3v1aptj0/_CALL_METHOD_DESCRIPTOR_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c8                      movzwl  %ax, %ecx
// 24: 89 ca                         movl    %ecx, %edx
// 26: f7 d2                         notl    %edx
// 28: 48 63 d2                      movslq  %edx, %rdx
// 2b: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 30: 4c 8b 34 d6                   movq    (%rsi,%rdx,8), %r14
// 34: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 39: 29 ca                         subl    %ecx, %edx
// 3b: 48 63 f2                      movslq  %edx, %rsi
// 3e: 0f b7 c0                      movzwl  %ax, %eax
// 41: 48 89 c2                      movq    %rax, %rdx
// 44: 48 f7 da                      negq    %rdx
// 47: 44 8d 69 01                   leal    0x1(%rcx), %r13d
// 4b: 4d 85 f6                      testq   %r14, %r14
// 4e: 48 f7 d0                      notq    %rax
// 51: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 55: 44 0f 44 e9                   cmovel  %ecx, %r13d
// 59: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 5e: 4d 8b 24 f7                   movq    (%r15,%rsi,8), %r12
// 62: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000064:  R_X86_64_64  PyMethodDescr_Type
// 6c: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 71: 75 20                         jne     0x93 <_JIT_ENTRY+0x93>
// 73: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 78: 81 79 10 80 00 00 00          cmpl    $0x80, 0x10(%rcx)
// 7f: 75 12                         jne     0x93 <_JIT_ENTRY+0x93>
// 81: 49 8d 14 c7                   leaq    (%r15,%rax,8), %rdx
// 85: 48 8b 3a                      movq    (%rdx), %rdi
// 88: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 8c: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 91: 74 4b                         je      0xde <_JIT_ENTRY+0xde>
// 93: 49 29 df                      subq    %rbx, %r15
// 96: 49 83 c7 b8                   addq    $-0x48, %r15
// 9a: 49 c1 ef 03                   shrq    $0x3, %r15
// 9e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// a2: 48 8b 03                      movq    (%rbx), %rax
// a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a7:  R_X86_64_64  PyCode_Type
// af: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// b3: 0f 85 ff 01 00 00             jne     0x2b8 <_JIT_ENTRY+0x2b8>
// b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bb:  R_X86_64_64  _JIT_TARGET
// c3: 89 c9                         movl    %ecx, %ecx
// c5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// c9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// cf: 48 83 c4 28                   addq    $0x28, %rsp
// d3: 5b                            popq    %rbx
// d4: 41 5c                         popq    %r12
// d6: 41 5d                         popq    %r13
// d8: 41 5e                         popq    %r14
// da: 41 5f                         popq    %r15
// dc: 5d                            popq    %rbp
// dd: c3                            retq
// de: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// e2: 48 89 14 24                   movq    %rdx, (%rsp)
// e6: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// ea: 48 63 d0                      movslq  %eax, %rdx
// ed: ff 51 08                      callq   *0x8(%rcx)
// f0: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// f5: 48 85 ed                      testq   %rbp, %rbp
// f8: 0f 84 e9 01 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// fe: 48 8b 45 68                   movq    0x68(%rbp), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 10a: 74 15                         je      0x121 <_JIT_ENTRY+0x121>
// 10c: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 112: 0f 95 c1                      setne   %cl
// 115: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 11a: 0f 95 c0                      setne   %al
// 11d: 30 c8                         xorb    %cl, %al
// 11f: eb 06                         jmp     0x127 <_JIT_ENTRY+0x127>
// 121: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 127: 48 8b 14 24                   movq    (%rsp), %rdx
// 12b: 0f 84 e5 01 00 00             je      0x316 <_JIT_ENTRY+0x316>
// 131: 4d 85 f6                      testq   %r14, %r14
// 134: 0f 94 c0                      sete    %al
// 137: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000139:  R_X86_64_64  _JIT_OPARG
// 141: 66 85 c9                      testw   %cx, %cx
// 144: 0f 94 c1                      sete    %cl
// 147: 84 c8                         testb   %cl, %al
// 149: 0f 84 b2 00 00 00             je      0x201 <_JIT_ENTRY+0x201>
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f 22                         jg      0x17a <_JIT_ENTRY+0x17a>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 85 c0                         testl   %eax, %eax
// 17c: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 0c 24                   decq    (%r12)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 e7                      movq    %r12, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1a9: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1ad: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1b2: 48 85 d2                      testq   %rdx, %rdx
// 1b5: 74 35                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 1b7: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 1bc: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 1c0: 48 89 10                      movq    %rdx, (%rax)
// 1c3: 49 8b 46 10                   movq    0x10(%r14), %rax
// 1c7: 48 8b 00                      movq    (%rax), %rax
// 1ca: 84 c0                         testb   %al, %al
// 1cc: 0f 84 c3 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_HandlePending
// 1dc: 4c 89 f7                      movq    %r14, %rdi
// 1df: ff d0                         callq   *%rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 0f 84 ac 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 1e9: 4c 89 f8                      movq    %r15, %rax
// 1ec: 48 29 d8                      subq    %rbx, %rax
// 1ef: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f3: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f7: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fa: 31 c0                         xorl    %eax, %eax
// 1fc: e9 ce fe ff ff                jmp     0xcf <_JIT_ENTRY+0xcf>
// 201: 41 83 fd 02                   cmpl    $0x2, %r13d
// 205: 41 be 01 00 00 00             movl    $0x1, %r14d
// 20b: 45 0f 43 f5                   cmovael %r13d, %r14d
// 20f: 31 ed                         xorl    %ebp, %ebp
// 211: eb 19                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 213: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 220: 48 ff c5                      incq    %rbp
// 223: 49 39 ee                      cmpq    %rbp, %r14
// 226: 0f 84 23 ff ff ff             je      0x14f <_JIT_ENTRY+0x14f>
// 22c: 4c 8b 2c ea                   movq    (%rdx,%rbp,8), %r13
// 230: 49 8b 45 00                   movq    (%r13), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 7e 07                         jle     0x240 <_JIT_ENTRY+0x240>
// 239: 85 c0                         testl   %eax, %eax
// 23b: 78 e3                         js      0x220 <_JIT_ENTRY+0x220>
// 23d: eb 2b                         jmp     0x26a <_JIT_ENTRY+0x26a>
// 23f: 90                            nop
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 48 8b 14 24                   movq    (%rsp), %rdx
// 262: 49 8b 45 00                   movq    (%r13), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 b6                         js      0x220 <_JIT_ENTRY+0x220>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 48 8b 14 24                   movq    (%rsp), %rdx
// 27a: 49 ff 4d 00                   decq    (%r13)
// 27e: 75 a0                         jne     0x220 <_JIT_ENTRY+0x220>
// 280: 4c 89 ef                      movq    %r13, %rdi
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_Dealloc
// 28d: ff d0                         callq   *%rax
// 28f: 48 8b 14 24                   movq    (%rsp), %rdx
// 293: eb 8b                         jmp     0x220 <_JIT_ENTRY+0x220>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _JIT_CONTINUE
// 29f: 48 89 df                      movq    %rbx, %rdi
// 2a2: 4c 89 fe                      movq    %r15, %rsi
// 2a5: 4c 89 f2                      movq    %r14, %rdx
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1+0xb9
// 2c2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002c4:  R_X86_64_64  .rodata.str1.1+0xd7
// 2cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ce:  R_X86_64_64  .rodata.str1.1+0x116
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  __assert_fail
// 2e0: ba 4d 00 00 00                movl    $0x4d, %edx
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e9:  R_X86_64_64  .rodata.str1.1+0x14c
// 2f1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f3:  R_X86_64_64  .rodata.str1.1+0x15b
// 2fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fd:  R_X86_64_64  .rodata.str1.1+0x19d
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  __assert_fail
// 30f: ba 4b 00 00 00                movl    $0x4b, %edx
// 314: ff d0                         callq   *%rax
// 316: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000318:  R_X86_64_64  .rodata.str1.1+0x87
// 320: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000322:  R_X86_64_64  .rodata.str1.1
// 32a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032c:  R_X86_64_64  .rodata.str1.1+0x39
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  __assert_fail
// 33e: ba 33 0c 00 00                movl    $0xc33, %edx            # imm = 0xC33
// 343: ff d0                         callq   *%rax
// 345: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FAST_code_body[838] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x48, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0xd6, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xf2, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x44, 0x8d, 0x69, 0x01, 0x4d, 0x85, 0xf6, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x44, 0x0f, 0x44, 0xe9, 0x48, 0x89, 0x74, 0x24, 0x20, 0x4d, 0x8b, 0x24, 0xf7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x81, 0x79, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x14, 0xc7, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x74, 0x4b, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xff, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x14, 0x24, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0xff, 0x51, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xe9, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x68, 0x48, 0x85, 0xc0, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x74, 0x15, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0xeb, 0x06, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x0f, 0x84, 0xe5, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xf6, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc1, 0x84, 0xc8, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xac, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xce, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x23, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xea, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x2b, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xb6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa0, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0x8b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x33, 0x0c, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_METHOD_DESCRIPTOR_FAST_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb9},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd7},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x116},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14c},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15b},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19d},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00'
// 1c8: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FAST_data_body[457] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmp3v1aptj0/_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 d0                      movzwl  %ax, %edx
// 24: 89 d1                         movl    %edx, %ecx
// 26: f7 d1                         notl    %ecx
// 28: 48 63 c9                      movslq  %ecx, %rcx
// 2b: 48 89 4c 24 18                movq    %rcx, 0x18(%rsp)
// 30: 4c 8b 34 ce                   movq    (%rsi,%rcx,8), %r14
// 34: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 39: 29 d1                         subl    %edx, %ecx
// 3b: 48 63 f1                      movslq  %ecx, %rsi
// 3e: 0f b7 c8                      movzwl  %ax, %ecx
// 41: 48 89 c8                      movq    %rcx, %rax
// 44: 48 f7 d8                      negq    %rax
// 47: 44 8d 6a 01                   leal    0x1(%rdx), %r13d
// 4b: 4d 85 f6                      testq   %r14, %r14
// 4e: 48 f7 d1                      notq    %rcx
// 51: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 55: 44 0f 44 ea                   cmovel  %edx, %r13d
// 59: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 5e: 4d 8b 24 f7                   movq    (%r15,%rsi,8), %r12
// 62: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000064:  R_X86_64_64  PyMethodDescr_Type
// 6c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 71: 75 20                         jne     0x93 <_JIT_ENTRY+0x93>
// 73: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 78: 81 78 10 82 00 00 00          cmpl    $0x82, 0x10(%rax)
// 7f: 75 12                         jne     0x93 <_JIT_ENTRY+0x93>
// 81: 49 8d 14 cf                   leaq    (%r15,%rcx,8), %rdx
// 85: 48 8b 3a                      movq    (%rdx), %rdi
// 88: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 8c: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 91: 74 4b                         je      0xde <_JIT_ENTRY+0xde>
// 93: 49 29 df                      subq    %rbx, %r15
// 96: 49 83 c7 b8                   addq    $-0x48, %r15
// 9a: 49 c1 ef 03                   shrq    $0x3, %r15
// 9e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// a2: 48 8b 03                      movq    (%rbx), %rax
// a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a7:  R_X86_64_64  PyCode_Type
// af: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// b3: 0f 85 ff 01 00 00             jne     0x2b8 <_JIT_ENTRY+0x2b8>
// b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bb:  R_X86_64_64  _JIT_TARGET
// c3: 89 c9                         movl    %ecx, %ecx
// c5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// c9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// cf: 48 83 c4 28                   addq    $0x28, %rsp
// d3: 5b                            popq    %rbx
// d4: 41 5c                         popq    %r12
// d6: 41 5d                         popq    %r13
// d8: 41 5e                         popq    %r14
// da: 41 5f                         popq    %r15
// dc: 5d                            popq    %rbp
// dd: c3                            retq
// de: 41 8d 4d ff                   leal    -0x1(%r13), %ecx
// e2: 48 89 14 24                   movq    %rdx, (%rsp)
// e6: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// ea: 48 63 d1                      movslq  %ecx, %rdx
// ed: 31 c9                         xorl    %ecx, %ecx
// ef: ff 50 08                      callq   *0x8(%rax)
// f2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// f7: 48 85 ed                      testq   %rbp, %rbp
// fa: 0f 84 e7 01 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 100: 48 8b 45 68                   movq    0x68(%rbp), %rax
// 104: 48 85 c0                      testq   %rax, %rax
// 107: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 10c: 74 15                         je      0x123 <_JIT_ENTRY+0x123>
// 10e: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 114: 0f 95 c1                      setne   %cl
// 117: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 11c: 0f 95 c0                      setne   %al
// 11f: 30 c8                         xorb    %cl, %al
// 121: eb 06                         jmp     0x129 <_JIT_ENTRY+0x129>
// 123: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 129: 48 8b 14 24                   movq    (%rsp), %rdx
// 12d: 0f 84 e3 01 00 00             je      0x316 <_JIT_ENTRY+0x316>
// 133: 4d 85 f6                      testq   %r14, %r14
// 136: 0f 94 c0                      sete    %al
// 139: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013b:  R_X86_64_64  _JIT_OPARG
// 143: 66 85 c9                      testw   %cx, %cx
// 146: 0f 94 c1                      sete    %cl
// 149: 84 c8                         testb   %cl, %al
// 14b: 0f 84 b2 00 00 00             je      0x203 <_JIT_ENTRY+0x203>
// 151: 49 8b 04 24                   movq    (%r12), %rax
// 155: 48 85 c0                      testq   %rax, %rax
// 158: 7f 22                         jg      0x17c <_JIT_ENTRY+0x17c>
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 173: 4c 89 e2                      movq    %r12, %rdx
// 176: ff d0                         callq   *%rax
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 183: 78 21                         js      0x1a6 <_JIT_ENTRY+0x1a6>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18f: ff d0                         callq   *%rax
// 191: 49 ff 0c 24                   decq    (%r12)
// 195: 75 0f                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 e7                      movq    %r12, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 1ab: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1af: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1b4: 48 85 d2                      testq   %rdx, %rdx
// 1b7: 74 35                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 1b9: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 1be: 4d 8d 3c cf                   leaq    (%r15,%rcx,8), %r15
// 1c2: 48 89 10                      movq    %rdx, (%rax)
// 1c5: 49 8b 46 10                   movq    0x10(%r14), %rax
// 1c9: 48 8b 00                      movq    (%rax), %rax
// 1cc: 84 c0                         testb   %al, %al
// 1ce: 0f 84 c1 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_HandlePending
// 1de: 4c 89 f7                      movq    %r14, %rdi
// 1e1: ff d0                         callq   *%rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 0f 84 aa 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 1eb: 4c 89 f8                      movq    %r15, %rax
// 1ee: 48 29 d8                      subq    %rbx, %rax
// 1f1: 48 83 c0 b8                   addq    $-0x48, %rax
// 1f5: 48 c1 e8 03                   shrq    $0x3, %rax
// 1f9: 89 43 40                      movl    %eax, 0x40(%rbx)
// 1fc: 31 c0                         xorl    %eax, %eax
// 1fe: e9 cc fe ff ff                jmp     0xcf <_JIT_ENTRY+0xcf>
// 203: 41 83 fd 02                   cmpl    $0x2, %r13d
// 207: 41 be 01 00 00 00             movl    $0x1, %r14d
// 20d: 45 0f 43 f5                   cmovael %r13d, %r14d
// 211: 31 ed                         xorl    %ebp, %ebp
// 213: eb 17                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 215: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 220: 48 ff c5                      incq    %rbp
// 223: 49 39 ee                      cmpq    %rbp, %r14
// 226: 0f 84 25 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 22c: 4c 8b 2c ea                   movq    (%rdx,%rbp,8), %r13
// 230: 49 8b 45 00                   movq    (%r13), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 7e 07                         jle     0x240 <_JIT_ENTRY+0x240>
// 239: 85 c0                         testl   %eax, %eax
// 23b: 78 e3                         js      0x220 <_JIT_ENTRY+0x220>
// 23d: eb 2b                         jmp     0x26a <_JIT_ENTRY+0x26a>
// 23f: 90                            nop
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 24f: 4c 89 ea                      movq    %r13, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 48 8b 14 24                   movq    (%rsp), %rdx
// 262: 49 8b 45 00                   movq    (%r13), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 b6                         js      0x220 <_JIT_ENTRY+0x220>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 48 8b 14 24                   movq    (%rsp), %rdx
// 27a: 49 ff 4d 00                   decq    (%r13)
// 27e: 75 a0                         jne     0x220 <_JIT_ENTRY+0x220>
// 280: 4c 89 ef                      movq    %r13, %rdi
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_Dealloc
// 28d: ff d0                         callq   *%rax
// 28f: 48 8b 14 24                   movq    (%rsp), %rdx
// 293: eb 8b                         jmp     0x220 <_JIT_ENTRY+0x220>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _JIT_CONTINUE
// 29f: 48 89 df                      movq    %rbx, %rdi
// 2a2: 4c 89 fe                      movq    %r15, %rsi
// 2a5: 4c 89 f2                      movq    %r14, %rdx
// 2a8: 48 83 c4 28                   addq    $0x28, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: ff e0                         jmpq    *%rax
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1+0xb9
// 2c2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002c4:  R_X86_64_64  .rodata.str1.1+0xd7
// 2cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ce:  R_X86_64_64  .rodata.str1.1+0x116
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  __assert_fail
// 2e0: ba 4d 00 00 00                movl    $0x4d, %edx
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e9:  R_X86_64_64  .rodata.str1.1+0x14c
// 2f1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f3:  R_X86_64_64  .rodata.str1.1+0x15b
// 2fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fd:  R_X86_64_64  .rodata.str1.1+0x19d
// 305: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000307:  R_X86_64_64  __assert_fail
// 30f: ba 4b 00 00 00                movl    $0x4b, %edx
// 314: ff d0                         callq   *%rax
// 316: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000318:  R_X86_64_64  .rodata.str1.1+0x87
// 320: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000322:  R_X86_64_64  .rodata.str1.1
// 32a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032c:  R_X86_64_64  .rodata.str1.1+0x39
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  __assert_fail
// 33e: ba e3 0b 00 00                movl    $0xbe3, %edx            # imm = 0xBE3
// 343: ff d0                         callq   *%rax
// 345: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[838] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x89, 0xd1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x4c, 0x24, 0x18, 0x4c, 0x8b, 0x34, 0xce, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd1, 0x48, 0x63, 0xf1, 0x0f, 0xb7, 0xc8, 0x48, 0x89, 0xc8, 0x48, 0xf7, 0xd8, 0x44, 0x8d, 0x6a, 0x01, 0x4d, 0x85, 0xf6, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xc8, 0x44, 0x0f, 0x44, 0xea, 0x48, 0x89, 0x74, 0x24, 0x20, 0x4d, 0x8b, 0x24, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x20, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x14, 0xcf, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x4b, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xff, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8d, 0x4d, 0xff, 0x48, 0x89, 0x14, 0x24, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd1, 0x31, 0xc9, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xe7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x68, 0x48, 0x85, 0xc0, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x74, 0x15, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0xeb, 0x06, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x0f, 0x84, 0xe3, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xf6, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc9, 0x0f, 0x94, 0xc1, 0x84, 0xc8, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x74, 0x35, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x4d, 0x8d, 0x3c, 0xcf, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xcc, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xf5, 0x31, 0xed, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xee, 0x0f, 0x84, 0x25, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x2c, 0xea, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x2b, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xb6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa0, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0xeb, 0x8b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xe3, 0x0b, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb9},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd7},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x116},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14c},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15b},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19d},
    {0x307, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00'
// 1c8: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[457] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmp3v1aptj0/_CALL_METHOD_DESCRIPTOR_NOARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_OPARG
// 18: a9 fe ff 00 00                testl   $0xfffe, %eax           # imm = 0xFFFE
// 1d: 0f 85 c7 02 00 00             jne     0x2ea <_JIT_ENTRY+0x2ea>
// 23: 49 89 d7                      movq    %rdx, %r15
// 26: 49 89 f6                      movq    %rsi, %r14
// 29: 48 89 fb                      movq    %rdi, %rbx
// 2c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000002e:  R_X86_64_64  _JIT_OPARG
// 36: 0f b7 ca                      movzwl  %dx, %ecx
// 39: f7 d2                         notl    %edx
// 3b: 81 ca 00 00 ff ff             orl     $0xffff0000, %edx       # imm = 0xFFFF0000
// 41: 48 63 d2                      movslq  %edx, %rdx
// 44: 48 89 ce                      movq    %rcx, %rsi
// 47: 48 f7 de                      negq    %rsi
// 4a: 31 ff                         xorl    %edi, %edi
// 4c: 66 85 c9                      testw   %cx, %cx
// 4f: 40 0f 94 c7                   sete    %dil
// 53: 45 31 c0                      xorl    %r8d, %r8d
// 56: 66 83 f9 01                   cmpw    $0x1, %cx
// 5a: 41 0f 94 c0                   sete    %r8b
// 5e: 49 83 3c d6 00                cmpq    $0x0, (%r14,%rdx,8)
// 63: 48 f7 d1                      notq    %rcx
// 66: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 6a: 41 0f 44 f8                   cmovel  %r8d, %edi
// 6e: 40 80 ff 01                   cmpb    $0x1, %dil
// 72: 0f 85 a5 01 00 00             jne     0x21d <_JIT_ENTRY+0x21d>
// 78: 44 0f b7 e8                   movzwl  %ax, %r13d
// 7c: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 81: 44 29 e8                      subl    %r13d, %eax
// 84: 48 63 e8                      movslq  %eax, %rbp
// 87: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  PyMethodDescr_Type
// 95: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 9a: 0f 85 7d 01 00 00             jne     0x21d <_JIT_ENTRY+0x21d>
// a0: 49 8b 3c ce                   movq    (%r14,%rcx,8), %rdi
// a4: 48 8b 47 08                   movq    0x8(%rdi), %rax
// a8: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// ad: 0f 85 6a 01 00 00             jne     0x21d <_JIT_ENTRY+0x21d>
// b3: 49 8b 44 24 28                movq    0x28(%r12), %rax
// b8: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// bc: 0f 85 5b 01 00 00             jne     0x21d <_JIT_ENTRY+0x21d>
// c2: 48 8b 50 08                   movq    0x8(%rax), %rdx
// c6: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// ca: 8d 48 ff                      leal    -0x1(%rax), %ecx
// cd: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// d1: 85 c0                         testl   %eax, %eax
// d3: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// d8: 0f 8e 8a 01 00 00             jle     0x268 <_JIT_ENTRY+0x268>
// de: 31 f6                         xorl    %esi, %esi
// e0: ff d2                         callq   *%rdx
// e2: 41 ff 47 2c                   incl    0x2c(%r15)
// e6: 49 8b 57 68                   movq    0x68(%r15), %rdx
// ea: 48 85 d2                      testq   %rdx, %rdx
// ed: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// f2: 0f 84 a1 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// f8: 48 85 c0                      testq   %rax, %rax
// fb: 0f 95 c1                      setne   %cl
// fe: 48 83 7a 08 00                cmpq    $0x0, 0x8(%rdx)
// 103: 0f 95 c0                      setne   %al
// 106: 30 c8                         xorb    %cl, %al
// 108: 0f 84 94 01 00 00             je      0x2a2 <_JIT_ENTRY+0x2a2>
// 10e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 113: 48 8b 00                      movq    (%rax), %rax
// 116: 48 85 c0                      testq   %rax, %rax
// 119: 7f 28                         jg      0x143 <_JIT_ENTRY+0x143>
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_NegativeRefcount
// 12f: be 10 0c 00 00                movl    $0xc10, %esi            # imm = 0xC10
// 134: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 139: ff d0                         callq   *%rax
// 13b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 140: 48 8b 00                      movq    (%rax), %rax
// 143: 85 c0                         testl   %eax, %eax
// 145: 78 22                         js      0x169 <_JIT_ENTRY+0x169>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 151: ff d0                         callq   *%rax
// 153: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 158: 48 ff 0f                      decq    (%rdi)
// 15b: 75 0c                         jne     0x169 <_JIT_ENTRY+0x169>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: ff d0                         callq   *%rax
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 48 85 c0                      testq   %rax, %rax
// 170: 7f 22                         jg      0x194 <_JIT_ENTRY+0x194>
// 172: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000174:  R_X86_64_64  .rodata.str1.1
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_NegativeRefcount
// 186: be 11 0c 00 00                movl    $0xc11, %esi            # imm = 0xC11
// 18b: 4c 89 e2                      movq    %r12, %rdx
// 18e: ff d0                         callq   *%rax
// 190: 49 8b 04 24                   movq    (%r12), %rax
// 194: 85 c0                         testl   %eax, %eax
// 196: 78 21                         js      0x1b9 <_JIT_ENTRY+0x1b9>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 ff 0c 24                   decq    (%r12)
// 1a8: 75 0f                         jne     0x1b9 <_JIT_ENTRY+0x1b9>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_Dealloc
// 1b4: 4c 89 e7                      movq    %r12, %rdi
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1bd: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c2: 48 85 d2                      testq   %rdx, %rdx
// 1c5: 0f 84 06 01 00 00             je      0x2d1 <_JIT_ENTRY+0x2d1>
// 1cb: 41 f7 d5                      notl    %r13d
// 1ce: 49 63 cd                      movslq  %r13d, %rcx
// 1d1: 4d 8d 34 ce                   leaq    (%r14,%rcx,8), %r14
// 1d5: 48 89 10                      movq    %rdx, (%rax)
// 1d8: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1dc: 48 8b 00                      movq    (%rax), %rax
// 1df: 84 c0                         testb   %al, %al
// 1e1: 74 17                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_HandlePending
// 1ed: 4c 89 ff                      movq    %r15, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 0f 85 da 00 00 00             jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _JIT_CONTINUE
// 204: 48 89 df                      movq    %rbx, %rdi
// 207: 4c 89 f6                      movq    %r14, %rsi
// 20a: 4c 89 fa                      movq    %r15, %rdx
// 20d: 48 83 c4 18                   addq    $0x18, %rsp
// 211: 5b                            popq    %rbx
// 212: 41 5c                         popq    %r12
// 214: 41 5d                         popq    %r13
// 216: 41 5e                         popq    %r14
// 218: 41 5f                         popq    %r15
// 21a: 5d                            popq    %rbp
// 21b: ff e0                         jmpq    *%rax
// 21d: 49 29 de                      subq    %rbx, %r14
// 220: 49 83 c6 b8                   addq    $-0x48, %r14
// 224: 49 c1 ee 03                   shrq    $0x3, %r14
// 228: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 22c: 48 8b 03                      movq    (%rbx), %rax
// 22f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000231:  R_X86_64_64  PyCode_Type
// 239: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 23d: 0f 85 d6 00 00 00             jne     0x319 <_JIT_ENTRY+0x319>
// 243: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000245:  R_X86_64_64  _JIT_TARGET
// 24d: 89 c9                         movl    %ecx, %ecx
// 24f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 253: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 259: 48 83 c4 18                   addq    $0x18, %rsp
// 25d: 5b                            popq    %rbx
// 25e: 41 5c                         popq    %r12
// 260: 41 5d                         popq    %r13
// 262: 41 5e                         popq    %r14
// 264: 41 5f                         popq    %r15
// 266: 5d                            popq    %rbp
// 267: c3                            retq
// 268: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000026a:  R_X86_64_64  .rodata.str1.1+0x87
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_CheckRecursiveCall
// 27c: 4c 89 ff                      movq    %r15, %rdi
// 27f: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 284: ff d0                         callq   *%rax
// 286: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 28b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 290: 85 c0                         testl   %eax, %eax
// 292: 75 40                         jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 294: e9 45 fe ff ff                jmp     0xde <_JIT_ENTRY+0xde>
// 299: 48 85 c0                      testq   %rax, %rax
// 29c: 0f 85 6c fe ff ff             jne     0x10e <_JIT_ENTRY+0x10e>
// 2a2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a4:  R_X86_64_64  .rodata.str1.1+0xa6
// 2ac: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1
// 2b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1+0x39
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  __assert_fail
// 2ca: ba 0f 0c 00 00                movl    $0xc0f, %edx            # imm = 0xC0F
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 89 c6                      movq    %rax, %r14
// 2d4: 49 29 de                      subq    %rbx, %r14
// 2d7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2db: 49 c1 ee 03                   shrq    $0x3, %r14
// 2df: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e3: 31 c0                         xorl    %eax, %eax
// 2e5: e9 6f ff ff ff                jmp     0x259 <_JIT_ENTRY+0x259>
// 2ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ec:  R_X86_64_64  .rodata.str1.1+0xd8
// 2f4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f6:  R_X86_64_64  .rodata.str1.1
// 2fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000300:  R_X86_64_64  .rodata.str1.1+0x39
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  __assert_fail
// 312: ba f9 0b 00 00                movl    $0xbf9, %edx            # imm = 0xBF9
// 317: ff d0                         callq   *%rax
// 319: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031b:  R_X86_64_64  .rodata.str1.1+0xf1
// 323: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000325:  R_X86_64_64  .rodata.str1.1+0x10f
// 32d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000032f:  R_X86_64_64  .rodata.str1.1+0x14e
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  __assert_fail
// 341: ba 4d 00 00 00                movl    $0x4d, %edx
// 346: ff d0                         callq   *%rax
// 348: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_NOARGS_code_body[841] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0x85, 0xc7, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xca, 0xf7, 0xd2, 0x81, 0xca, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xd2, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x31, 0xff, 0x66, 0x85, 0xc9, 0x40, 0x0f, 0x94, 0xc7, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf9, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x49, 0x83, 0x3c, 0xd6, 0x00, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x41, 0x0f, 0x44, 0xf8, 0x40, 0x80, 0xff, 0x01, 0x0f, 0x85, 0xa5, 0x01, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x44, 0x29, 0xe8, 0x48, 0x63, 0xe8, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x7d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x3c, 0xce, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0x6a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x5b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x50, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0x8e, 0x8a, 0x01, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd2, 0x41, 0xff, 0x47, 0x2c, 0x49, 0x8b, 0x57, 0x68, 0x48, 0x85, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x10, 0x0f, 0x84, 0xa1, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x7a, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x28, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x0c, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x41, 0xf7, 0xd5, 0x49, 0x63, 0xcd, 0x4d, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x40, 0xe9, 0x45, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x6c, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x0f, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x6f, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xf9, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[30] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa6},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd8},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x300, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf1},
    {0x325, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10f},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14e},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00 while calling a Python object\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00oparg == 0 || oparg == 1\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 184: 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_NOARGS_data_body[393] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmp3v1aptj0/_CALL_METHOD_DESCRIPTOR_O.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c8                      movzwl  %ax, %ecx
// 1e: 89 ce                         movl    %ecx, %esi
// 20: f7 d6                         notl    %esi
// 22: 48 63 ee                      movslq  %esi, %rbp
// 25: 0f b7 c0                      movzwl  %ax, %eax
// 28: 48 89 c6                      movq    %rax, %rsi
// 2b: 48 f7 de                      negq    %rsi
// 2e: 45 31 c0                      xorl    %r8d, %r8d
// 31: 66 83 f8 01                   cmpw    $0x1, %ax
// 35: 41 0f 94 c0                   sete    %r8b
// 39: 45 31 c9                      xorl    %r9d, %r9d
// 3c: 66 83 f8 02                   cmpw    $0x2, %ax
// 40: 41 0f 94 c1                   sete    %r9b
// 44: 48 83 3c eb 00                cmpq    $0x0, (%rbx,%rbp,8)
// 49: 48 f7 d0                      notq    %rax
// 4c: 48 0f 44 c6                   cmoveq  %rsi, %rax
// 50: 49 89 fe                      movq    %rdi, %r14
// 53: 45 0f 44 c1                   cmovel  %r9d, %r8d
// 57: 41 80 f8 01                   cmpb    $0x1, %r8b
// 5b: 75 3c                         jne     0x99 <_JIT_ENTRY+0x99>
// 5d: 49 89 d7                      movq    %rdx, %r15
// 60: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 65: 29 ca                         subl    %ecx, %edx
// 67: 4c 63 ea                      movslq  %edx, %r13
// 6a: 4e 8b 24 eb                   movq    (%rbx,%r13,8), %r12
// 6e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000070:  R_X86_64_64  PyMethodDescr_Type
// 78: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 7d: 75 1a                         jne     0x99 <_JIT_ENTRY+0x99>
// 7f: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 84: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 88: 75 0f                         jne     0x99 <_JIT_ENTRY+0x99>
// 8a: 48 8b 3c c3                   movq    (%rbx,%rax,8), %rdi
// 8e: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 92: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 97: 74 4b                         je      0xe4 <_JIT_ENTRY+0xe4>
// 99: 4c 29 f3                      subq    %r14, %rbx
// 9c: 48 83 c3 b8                   addq    $-0x48, %rbx
// a0: 48 c1 eb 03                   shrq    $0x3, %rbx
// a4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// a8: 49 8b 06                      movq    (%r14), %rax
// ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ad:  R_X86_64_64  PyCode_Type
// b5: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// b9: 0f 85 65 02 00 00             jne     0x324 <_JIT_ENTRY+0x324>
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  _JIT_TARGET
// c9: 89 c9                         movl    %ecx, %ecx
// cb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// cf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// d5: 48 83 c4 18                   addq    $0x18, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5d                         popq    %r13
// de: 41 5e                         popq    %r14
// e0: 41 5f                         popq    %r15
// e2: 5d                            popq    %rbp
// e3: c3                            retq
// e4: 48 8b 74 c3 08                movq    0x8(%rbx,%rax,8), %rsi
// e9: 48 8b 51 08                   movq    0x8(%rcx), %rdx
// ed: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// f1: 8d 48 ff                      leal    -0x1(%rax), %ecx
// f4: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// f8: 85 c0                         testl   %eax, %eax
// fa: 48 89 34 24                   movq    %rsi, (%rsp)
// fe: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 103: 0f 8e 95 01 00 00             jle     0x29e <_JIT_ENTRY+0x29e>
// 109: ff d2                         callq   *%rdx
// 10b: 41 ff 47 2c                   incl    0x2c(%r15)
// 10f: 49 8b 57 68                   movq    0x68(%r15), %rdx
// 113: 48 85 d2                      testq   %rdx, %rdx
// 116: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 11b: 0f 84 b2 01 00 00             je      0x2d3 <_JIT_ENTRY+0x2d3>
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 0f 95 c1                      setne   %cl
// 127: 48 83 7a 08 00                cmpq    $0x0, 0x8(%rdx)
// 12c: 0f 95 c0                      setne   %al
// 12f: 30 c8                         xorb    %cl, %al
// 131: 0f 84 a5 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 137: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 13c: 48 8b 02                      movq    (%rdx), %rax
// 13f: 48 85 c0                      testq   %rax, %rax
// 142: 48 8b 0c 24                   movq    (%rsp), %rcx
// 146: 7f 27                         jg      0x16f <_JIT_ENTRY+0x16f>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be bf 0b 00 00                movl    $0xbbf, %esi            # imm = 0xBBF
// 161: ff d0                         callq   *%rax
// 163: 48 8b 0c 24                   movq    (%rsp), %rcx
// 167: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 16c: 48 8b 00                      movq    (%rax), %rax
// 16f: 85 c0                         testl   %eax, %eax
// 171: 78 2a                         js      0x19d <_JIT_ENTRY+0x19d>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17d: ff d0                         callq   *%rax
// 17f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 184: 48 8b 0c 24                   movq    (%rsp), %rcx
// 188: 48 ff 0f                      decq    (%rdi)
// 18b: 75 10                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: ff d0                         callq   *%rax
// 199: 48 8b 0c 24                   movq    (%rsp), %rcx
// 19d: 48 8b 01                      movq    (%rcx), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 7f 26                         jg      0x1cb <_JIT_ENTRY+0x1cb>
// 1a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_NegativeRefcount
// 1b9: be c0 0b 00 00                movl    $0xbc0, %esi            # imm = 0xBC0
// 1be: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c2: ff d0                         callq   *%rax
// 1c4: 48 8b 04 24                   movq    (%rsp), %rax
// 1c8: 48 8b 00                      movq    (%rax), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 21                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1df: 48 ff 0f                      decq    (%rdi)
// 1e2: 75 0c                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_Dealloc
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7f 22                         jg      0x21b <_JIT_ENTRY+0x21b>
// 1f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_NegativeRefcount
// 20d: be c1 0b 00 00                movl    $0xbc1, %esi            # imm = 0xBC1
// 212: 4c 89 e2                      movq    %r12, %rdx
// 215: ff d0                         callq   *%rax
// 217: 49 8b 04 24                   movq    (%r12), %rax
// 21b: 85 c0                         testl   %eax, %eax
// 21d: 78 21                         js      0x240 <_JIT_ENTRY+0x240>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 229: ff d0                         callq   *%rax
// 22b: 49 ff 0c 24                   decq    (%r12)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_Dealloc
// 23b: 4c 89 e7                      movq    %r12, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 4a 8d 04 eb                   leaq    (%rbx,%r13,8), %rax
// 244: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 249: 48 85 c9                      testq   %rcx, %rcx
// 24c: 0f 84 b9 00 00 00             je      0x30b <_JIT_ENTRY+0x30b>
// 252: 48 8d 1c eb                   leaq    (%rbx,%rbp,8), %rbx
// 256: 48 89 08                      movq    %rcx, (%rax)
// 259: 49 8b 47 10                   movq    0x10(%r15), %rax
// 25d: 48 8b 00                      movq    (%rax), %rax
// 260: 84 c0                         testb   %al, %al
// 262: 74 17                         je      0x27b <_JIT_ENTRY+0x27b>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_HandlePending
// 26e: 4c 89 ff                      movq    %r15, %rdi
// 271: ff d0                         callq   *%rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 0f 85 93 00 00 00             jne     0x30e <_JIT_ENTRY+0x30e>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _JIT_CONTINUE
// 285: 4c 89 f7                      movq    %r14, %rdi
// 288: 48 89 de                      movq    %rbx, %rsi
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: 48 83 c4 18                   addq    $0x18, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a0:  R_X86_64_64  .rodata.str1.1+0x87
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_CheckRecursiveCall
// 2b2: 4c 89 ff                      movq    %r15, %rdi
// 2b5: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 2ba: ff d0                         callq   *%rax
// 2bc: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2c1: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2c6: 48 8b 34 24                   movq    (%rsp), %rsi
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 75 40                         jne     0x30e <_JIT_ENTRY+0x30e>
// 2ce: e9 36 fe ff ff                jmp     0x109 <_JIT_ENTRY+0x109>
// 2d3: 48 85 c0                      testq   %rax, %rax
// 2d6: 0f 85 5b fe ff ff             jne     0x137 <_JIT_ENTRY+0x137>
// 2dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002de:  R_X86_64_64  .rodata.str1.1+0xa6
// 2e6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002e8:  R_X86_64_64  .rodata.str1.1
// 2f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1+0x39
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  __assert_fail
// 304: ba be 0b 00 00                movl    $0xbbe, %edx            # imm = 0xBBE
// 309: ff d0                         callq   *%rax
// 30b: 48 89 c3                      movq    %rax, %rbx
// 30e: 4c 29 f3                      subq    %r14, %rbx
// 311: 48 83 c3 b8                   addq    $-0x48, %rbx
// 315: 48 c1 eb 03                   shrq    $0x3, %rbx
// 319: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 31d: 31 c0                         xorl    %eax, %eax
// 31f: e9 b1 fd ff ff                jmp     0xd5 <_JIT_ENTRY+0xd5>
// 324: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000326:  R_X86_64_64  .rodata.str1.1+0xd8
// 32e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000330:  R_X86_64_64  .rodata.str1.1+0xf6
// 338: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033a:  R_X86_64_64  .rodata.str1.1+0x135
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  __assert_fail
// 34c: ba 4d 00 00 00                movl    $0x4d, %edx
// 351: ff d0                         callq   *%rax
// 353: 
static const unsigned char _CALL_METHOD_DESCRIPTOR_O_code_body[852] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xf3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xce, 0xf7, 0xd6, 0x48, 0x63, 0xee, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc6, 0x48, 0xf7, 0xde, 0x45, 0x31, 0xc0, 0x66, 0x83, 0xf8, 0x01, 0x41, 0x0f, 0x94, 0xc0, 0x45, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x02, 0x41, 0x0f, 0x94, 0xc1, 0x48, 0x83, 0x3c, 0xeb, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc6, 0x49, 0x89, 0xfe, 0x45, 0x0f, 0x44, 0xc1, 0x41, 0x80, 0xf8, 0x01, 0x75, 0x3c, 0x49, 0x89, 0xd7, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4e, 0x8b, 0x24, 0xeb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1a, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0f, 0x48, 0x8b, 0x3c, 0xc3, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x4b, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x65, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x74, 0xc3, 0x08, 0x48, 0x8b, 0x51, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x34, 0x24, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x0f, 0x8e, 0x95, 0x01, 0x00, 0x00, 0xff, 0xd2, 0x41, 0xff, 0x47, 0x2c, 0x49, 0x8b, 0x57, 0x68, 0x48, 0x85, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x10, 0x0f, 0x84, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x95, 0xc1, 0x48, 0x83, 0x7a, 0x08, 0x00, 0x0f, 0x95, 0xc0, 0x30, 0xc8, 0x0f, 0x84, 0xa5, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x0c, 0x24, 0x7f, 0x27, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xbf, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x2a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x01, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4a, 0x8d, 0x04, 0xeb, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x1c, 0xeb, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x34, 0x24, 0x85, 0xc0, 0x75, 0x40, 0xe9, 0x36, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x5b, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xbe, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_METHOD_DESCRIPTOR_O_code_holes[29] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa6},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd8},
    {0x330, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x135},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00 while calling a Python object\x00(res != NULL) ^ (_PyErr_Occurred(tstate) != NULL)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 16b: 00 00 00 00 00
static const unsigned char _CALL_METHOD_DESCRIPTOR_O_data_body[369] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x28, 0x72, 0x65, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x5e, 0x20, 0x28, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _CALL_STR_1
// 
// /tmp/tmp3v1aptj0/_CALL_STR_1.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_OPARG
// 15: 66 83 f8 01                   cmpw    $0x1, %ax
// 19: 0f 85 d4 01 00 00             jne     0x1f3 <_JIT_ENTRY+0x1f3>
// 1f: 48 89 fb                      movq    %rdi, %rbx
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 89 c1                         movl    %eax, %ecx
// 27: f7 d1                         notl    %ecx
// 29: 48 63 c9                      movslq  %ecx, %rcx
// 2c: 4c 8d 34 ce                   leaq    (%rsi,%rcx,8), %r14
// 30: 49 83 3e 00                   cmpq    $0x0, (%r14)
// 34: 75 59                         jne     0x8f <_JIT_ENTRY+0x8f>
// 36: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3b: 29 c1                         subl    %eax, %ecx
// 3d: 48 63 c1                      movslq  %ecx, %rax
// 40: 4c 8d 3c c6                   leaq    (%rsi,%rax,8), %r15
// 44: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000046:  R_X86_64_64  PyUnicode_Type
// 4e: 4d 39 27                      cmpq    %r12, (%r15)
// 51: 75 3c                         jne     0x8f <_JIT_ENTRY+0x8f>
// 53: 48 89 14 24                   movq    %rdx, (%rsp)
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _JIT_OPARG
// 61: 0f b7 c0                      movzwl  %ax, %eax
// 64: 48 c1 e0 03                   shlq    $0x3, %rax
// 68: 48 29 c6                      subq    %rax, %rsi
// 6b: 48 8b 2e                      movq    (%rsi), %rbp
// 6e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000070:  R_X86_64_64  PyObject_Str
// 78: 48 89 ef                      movq    %rbp, %rdi
// 7b: ff d0                         callq   *%rax
// 7d: 49 89 c5                      movq    %rax, %r13
// 80: 48 8b 45 00                   movq    (%rbp), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 46                         jle     0xcf <_JIT_ENTRY+0xcf>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 68                         jns     0xf5 <_JIT_ENTRY+0xf5>
// 8d: eb 78                         jmp     0x107 <_JIT_ENTRY+0x107>
// 8f: 48 29 de                      subq    %rbx, %rsi
// 92: 48 83 c6 b8                   addq    $-0x48, %rsi
// 96: 48 c1 ee 03                   shrq    $0x3, %rsi
// 9a: 89 73 40                      movl    %esi, 0x40(%rbx)
// 9d: 48 8b 03                      movq    (%rbx), %rax
// a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a2:  R_X86_64_64  PyCode_Type
// aa: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// ae: 0f 85 6e 01 00 00             jne     0x222 <_JIT_ENTRY+0x222>
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  _JIT_TARGET
// be: 89 c9                         movl    %ecx, %ecx
// c0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// c4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ca: e9 15 01 00 00                jmp     0x1e4 <_JIT_ENTRY+0x1e4>
// cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d1:  R_X86_64_64  .rodata.str1.1
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_NegativeRefcount
// e3: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// e8: 48 89 ea                      movq    %rbp, %rdx
// eb: ff d0                         callq   *%rax
// ed: 48 8b 45 00                   movq    (%rbp), %rax
// f1: 85 c0                         testl   %eax, %eax
// f3: 78 12                         js      0x107 <_JIT_ENTRY+0x107>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ff: ff d0                         callq   *%rax
// 101: 48 ff 4d 00                   decq    (%rbp)
// 105: 74 0f                         je      0x116 <_JIT_ENTRY+0x116>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7e 1e                         jle     0x12e <_JIT_ENTRY+0x12e>
// 110: 85 c0                         testl   %eax, %eax
// 112: 79 40                         jns     0x154 <_JIT_ENTRY+0x154>
// 114: eb 50                         jmp     0x166 <_JIT_ENTRY+0x166>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_Dealloc
// 120: 48 89 ef                      movq    %rbp, %rdi
// 123: ff d0                         callq   *%rax
// 125: 49 8b 04 24                   movq    (%r12), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7f e2                         jg      0x110 <_JIT_ENTRY+0x110>
// 12e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000130:  R_X86_64_64  .rodata.str1.1
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_NegativeRefcount
// 142: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 04 24                   movq    (%r12), %rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 78 12                         js      0x166 <_JIT_ENTRY+0x166>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15e: ff d0                         callq   *%rax
// 160: 49 ff 0c 24                   decq    (%r12)
// 164: 74 52                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 74 68                         je      0x1d3 <_JIT_ENTRY+0x1d3>
// 16b: 4d 89 2f                      movq    %r13, (%r15)
// 16e: 4c 8b 3c 24                   movq    (%rsp), %r15
// 172: 49 8b 47 10                   movq    0x10(%r15), %rax
// 176: 48 8b 00                      movq    (%rax), %rax
// 179: 84 c0                         testb   %al, %al
// 17b: 74 18                         je      0x195 <_JIT_ENTRY+0x195>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_HandlePending
// 187: 4c 89 ff                      movq    %r15, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: 85 c0                         testl   %eax, %eax
// 18e: 74 05                         je      0x195 <_JIT_ENTRY+0x195>
// 190: 4d 89 f7                      movq    %r14, %r15
// 193: eb 3e                         jmp     0x1d3 <_JIT_ENTRY+0x1d3>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_CONTINUE
// 19f: 48 89 df                      movq    %rbx, %rdi
// 1a2: 4c 89 f6                      movq    %r14, %rsi
// 1a5: 4c 89 fa                      movq    %r15, %rdx
// 1a8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ac: 5b                            popq    %rbx
// 1ad: 41 5c                         popq    %r12
// 1af: 41 5d                         popq    %r13
// 1b1: 41 5e                         popq    %r14
// 1b3: 41 5f                         popq    %r15
// 1b5: 5d                            popq    %rbp
// 1b6: ff e0                         jmpq    *%rax
// 1b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ba:  R_X86_64_64  PyUnicode_Type
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_Dealloc
// 1cc: ff d0                         callq   *%rax
// 1ce: 4d 85 ed                      testq   %r13, %r13
// 1d1: 75 98                         jne     0x16b <_JIT_ENTRY+0x16b>
// 1d3: 49 29 df                      subq    %rbx, %r15
// 1d6: 49 83 c7 b8                   addq    $-0x48, %r15
// 1da: 49 c1 ef 03                   shrq    $0x3, %r15
// 1de: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1e2: 31 c0                         xorl    %eax, %eax
// 1e4: 48 83 c4 08                   addq    $0x8, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: c3                            retq
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1+0x87
// 1fd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ff:  R_X86_64_64  .rodata.str1.1
// 207: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000209:  R_X86_64_64  .rodata.str1.1+0x39
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  __assert_fail
// 21b: ba 8f 0a 00 00                movl    $0xa8f, %edx            # imm = 0xA8F
// 220: ff d0                         callq   *%rax
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1+0x92
// 22c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1+0xb0
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  .rodata.str1.1+0xef
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  __assert_fail
// 24a: ba 4d 00 00 00                movl    $0x4d, %edx
// 24f: ff d0                         callq   *%rax
// 251: 
static const unsigned char _CALL_STR_1_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x01, 0x0f, 0x85, 0xd4, 0x01, 0x00, 0x00, 0x48, 0x89, 0xfb, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x34, 0xce, 0x49, 0x83, 0x3e, 0x00, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x3c, 0xc6, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x27, 0x75, 0x3c, 0x48, 0x89, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x29, 0xc6, 0x48, 0x8b, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x46, 0x85, 0xc0, 0x79, 0x68, 0xeb, 0x78, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x6e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x15, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x52, 0x4d, 0x85, 0xed, 0x74, 0x68, 0x4d, 0x89, 0x2f, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xf7, 0xeb, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0x98, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x8f, 0x0a, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_STR_1_code_holes[26] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x92},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xef},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg == 1\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 125: 00 00 00
static const unsigned char _CALL_STR_1_data_body[297] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_STR_1_data_holes[1];

// _CALL_TUPLE_1
// 
// /tmp/tmp3v1aptj0/_CALL_TUPLE_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_OPARG
// 15: 66 83 f8 01                   cmpw    $0x1, %ax
// 19: 0f 85 d4 01 00 00             jne     0x1f3 <_JIT_ENTRY+0x1f3>
// 1f: 48 89 fb                      movq    %rdi, %rbx
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 89 c1                         movl    %eax, %ecx
// 27: f7 d1                         notl    %ecx
// 29: 48 63 c9                      movslq  %ecx, %rcx
// 2c: 4c 8d 34 ce                   leaq    (%rsi,%rcx,8), %r14
// 30: 49 83 3e 00                   cmpq    $0x0, (%r14)
// 34: 75 59                         jne     0x8f <_JIT_ENTRY+0x8f>
// 36: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3b: 29 c1                         subl    %eax, %ecx
// 3d: 48 63 c1                      movslq  %ecx, %rax
// 40: 4c 8d 3c c6                   leaq    (%rsi,%rax,8), %r15
// 44: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000046:  R_X86_64_64  PyTuple_Type
// 4e: 4d 39 27                      cmpq    %r12, (%r15)
// 51: 75 3c                         jne     0x8f <_JIT_ENTRY+0x8f>
// 53: 48 89 14 24                   movq    %rdx, (%rsp)
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _JIT_OPARG
// 61: 0f b7 c0                      movzwl  %ax, %eax
// 64: 48 c1 e0 03                   shlq    $0x3, %rax
// 68: 48 29 c6                      subq    %rax, %rsi
// 6b: 48 8b 2e                      movq    (%rsi), %rbp
// 6e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000070:  R_X86_64_64  PySequence_Tuple
// 78: 48 89 ef                      movq    %rbp, %rdi
// 7b: ff d0                         callq   *%rax
// 7d: 49 89 c5                      movq    %rax, %r13
// 80: 48 8b 45 00                   movq    (%rbp), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 46                         jle     0xcf <_JIT_ENTRY+0xcf>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 68                         jns     0xf5 <_JIT_ENTRY+0xf5>
// 8d: eb 78                         jmp     0x107 <_JIT_ENTRY+0x107>
// 8f: 48 29 de                      subq    %rbx, %rsi
// 92: 48 83 c6 b8                   addq    $-0x48, %rsi
// 96: 48 c1 ee 03                   shrq    $0x3, %rsi
// 9a: 89 73 40                      movl    %esi, 0x40(%rbx)
// 9d: 48 8b 03                      movq    (%rbx), %rax
// a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a2:  R_X86_64_64  PyCode_Type
// aa: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// ae: 0f 85 6e 01 00 00             jne     0x222 <_JIT_ENTRY+0x222>
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  _JIT_TARGET
// be: 89 c9                         movl    %ecx, %ecx
// c0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// c4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ca: e9 15 01 00 00                jmp     0x1e4 <_JIT_ENTRY+0x1e4>
// cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d1:  R_X86_64_64  .rodata.str1.1
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_NegativeRefcount
// e3: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// e8: 48 89 ea                      movq    %rbp, %rdx
// eb: ff d0                         callq   *%rax
// ed: 48 8b 45 00                   movq    (%rbp), %rax
// f1: 85 c0                         testl   %eax, %eax
// f3: 78 12                         js      0x107 <_JIT_ENTRY+0x107>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ff: ff d0                         callq   *%rax
// 101: 48 ff 4d 00                   decq    (%rbp)
// 105: 74 0f                         je      0x116 <_JIT_ENTRY+0x116>
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7e 1e                         jle     0x12e <_JIT_ENTRY+0x12e>
// 110: 85 c0                         testl   %eax, %eax
// 112: 79 40                         jns     0x154 <_JIT_ENTRY+0x154>
// 114: eb 50                         jmp     0x166 <_JIT_ENTRY+0x166>
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_Dealloc
// 120: 48 89 ef                      movq    %rbp, %rdi
// 123: ff d0                         callq   *%rax
// 125: 49 8b 04 24                   movq    (%r12), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7f e2                         jg      0x110 <_JIT_ENTRY+0x110>
// 12e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000130:  R_X86_64_64  .rodata.str1.1
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_NegativeRefcount
// 142: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 147: 4c 89 e2                      movq    %r12, %rdx
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 04 24                   movq    (%r12), %rax
// 150: 85 c0                         testl   %eax, %eax
// 152: 78 12                         js      0x166 <_JIT_ENTRY+0x166>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15e: ff d0                         callq   *%rax
// 160: 49 ff 0c 24                   decq    (%r12)
// 164: 74 52                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 166: 4d 85 ed                      testq   %r13, %r13
// 169: 74 68                         je      0x1d3 <_JIT_ENTRY+0x1d3>
// 16b: 4d 89 2f                      movq    %r13, (%r15)
// 16e: 4c 8b 3c 24                   movq    (%rsp), %r15
// 172: 49 8b 47 10                   movq    0x10(%r15), %rax
// 176: 48 8b 00                      movq    (%rax), %rax
// 179: 84 c0                         testb   %al, %al
// 17b: 74 18                         je      0x195 <_JIT_ENTRY+0x195>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_HandlePending
// 187: 4c 89 ff                      movq    %r15, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: 85 c0                         testl   %eax, %eax
// 18e: 74 05                         je      0x195 <_JIT_ENTRY+0x195>
// 190: 4d 89 f7                      movq    %r14, %r15
// 193: eb 3e                         jmp     0x1d3 <_JIT_ENTRY+0x1d3>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_CONTINUE
// 19f: 48 89 df                      movq    %rbx, %rdi
// 1a2: 4c 89 f6                      movq    %r14, %rsi
// 1a5: 4c 89 fa                      movq    %r15, %rdx
// 1a8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ac: 5b                            popq    %rbx
// 1ad: 41 5c                         popq    %r12
// 1af: 41 5d                         popq    %r13
// 1b1: 41 5e                         popq    %r14
// 1b3: 41 5f                         popq    %r15
// 1b5: 5d                            popq    %rbp
// 1b6: ff e0                         jmpq    *%rax
// 1b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ba:  R_X86_64_64  PyTuple_Type
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_Dealloc
// 1cc: ff d0                         callq   *%rax
// 1ce: 4d 85 ed                      testq   %r13, %r13
// 1d1: 75 98                         jne     0x16b <_JIT_ENTRY+0x16b>
// 1d3: 49 29 df                      subq    %rbx, %r15
// 1d6: 49 83 c7 b8                   addq    $-0x48, %r15
// 1da: 49 c1 ef 03                   shrq    $0x3, %r15
// 1de: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1e2: 31 c0                         xorl    %eax, %eax
// 1e4: 48 83 c4 08                   addq    $0x8, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: c3                            retq
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1+0x87
// 1fd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ff:  R_X86_64_64  .rodata.str1.1
// 207: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000209:  R_X86_64_64  .rodata.str1.1+0x39
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  __assert_fail
// 21b: ba a7 0a 00 00                movl    $0xaa7, %edx            # imm = 0xAA7
// 220: ff d0                         callq   *%rax
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1+0x92
// 22c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1+0xb0
// 236: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000238:  R_X86_64_64  .rodata.str1.1+0xef
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  __assert_fail
// 24a: ba 4d 00 00 00                movl    $0x4d, %edx
// 24f: ff d0                         callq   *%rax
// 251: 
static const unsigned char _CALL_TUPLE_1_code_body[594] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x01, 0x0f, 0x85, 0xd4, 0x01, 0x00, 0x00, 0x48, 0x89, 0xfb, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x34, 0xce, 0x49, 0x83, 0x3e, 0x00, 0x75, 0x59, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8d, 0x3c, 0xc6, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x27, 0x75, 0x3c, 0x48, 0x89, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x29, 0xc6, 0x48, 0x8b, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x46, 0x85, 0xc0, 0x79, 0x68, 0xeb, 0x78, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x6e, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x15, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x52, 0x4d, 0x85, 0xed, 0x74, 0x68, 0x4d, 0x89, 0x2f, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x05, 0x4d, 0x89, 0xf7, 0xeb, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0x98, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xa7, 0x0a, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_TUPLE_1_code_holes[26] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x92},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xef},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg == 1\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 125: 00 00 00
static const unsigned char _CALL_TUPLE_1_data_body[297] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_TUPLE_1_data_holes[1];

// _CALL_TYPE_1
// 
// /tmp/tmp3v1aptj0/_CALL_TYPE_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000000d:  R_X86_64_64  _JIT_OPARG
// 15: 66 41 83 ff 01                cmpw    $0x1, %r15w
// 1a: 0f 85 eb 01 00 00             jne     0x20b <_JIT_ENTRY+0x20b>
// 20: 49 89 f6                      movq    %rsi, %r14
// 23: 48 89 fb                      movq    %rdi, %rbx
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _JIT_OPARG
// 30: 0f b7 c0                      movzwl  %ax, %eax
// 33: 89 c1                         movl    %eax, %ecx
// 35: f7 d1                         notl    %ecx
// 37: 48 63 c9                      movslq  %ecx, %rcx
// 3a: 48 83 3c ce 00                cmpq    $0x0, (%rsi,%rcx,8)
// 3f: 75 63                         jne     0xa4 <_JIT_ENTRY+0xa4>
// 41: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 46: 29 c1                         subl    %eax, %ecx
// 48: 48 63 c1                      movslq  %ecx, %rax
// 4b: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000004d:  R_X86_64_64  PyType_Type
// 55: 4d 39 24 c6                   cmpq    %r12, (%r14,%rax,8)
// 59: 75 49                         jne     0xa4 <_JIT_ENTRY+0xa4>
// 5b: 48 89 14 24                   movq    %rdx, (%rsp)
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_OPARG
// 69: 0f b7 c0                      movzwl  %ax, %eax
// 6c: 48 c1 e0 03                   shlq    $0x3, %rax
// 70: 4c 89 f1                      movq    %r14, %rcx
// 73: 48 29 c1                      subq    %rax, %rcx
// 76: 4c 8b 29                      movq    (%rcx), %r13
// 79: 49 8b 6d 08                   movq    0x8(%r13), %rbp
// 7d: 8b 45 00                      movl    (%rbp), %eax
// 80: ff c0                         incl    %eax
// 82: 75 6b                         jne     0xef <_JIT_ENTRY+0xef>
// 84: 41 f7 d7                      notl    %r15d
// 87: 49 8b 45 00                   movq    (%r13), %rax
// 8b: 48 85 c0                      testq   %rax, %rax
// 8e: 7e 7a                         jle     0x10a <_JIT_ENTRY+0x10a>
// 90: 41 81 cf 00 00 ff ff          orl     $0xffff0000, %r15d      # imm = 0xFFFF0000
// 97: 85 c0                         testl   %eax, %eax
// 99: 0f 89 98 00 00 00             jns     0x137 <_JIT_ENTRY+0x137>
// 9f: e9 a5 00 00 00                jmp     0x149 <_JIT_ENTRY+0x149>
// a4: 49 29 de                      subq    %rbx, %r14
// a7: 49 83 c6 b8                   addq    $-0x48, %r14
// ab: 49 c1 ee 03                   shrq    $0x3, %r14
// af: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b3: 48 8b 03                      movq    (%rbx), %rax
// b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b8:  R_X86_64_64  PyCode_Type
// c0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c4: 0f 85 70 01 00 00             jne     0x23a <_JIT_ENTRY+0x23a>
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  _JIT_TARGET
// d4: 89 c9                         movl    %ecx, %ecx
// d6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// da: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e0: 48 83 c4 08                   addq    $0x8, %rsp
// e4: 5b                            popq    %rbx
// e5: 41 5c                         popq    %r12
// e7: 41 5d                         popq    %r13
// e9: 41 5e                         popq    %r14
// eb: 41 5f                         popq    %r15
// ed: 5d                            popq    %rbp
// ee: c3                            retq
// ef: 89 45 00                      movl    %eax, (%rbp)
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// fc: ff d0                         callq   *%rax
// fe: 41 f7 d7                      notl    %r15d
// 101: 49 8b 45 00                   movq    (%r13), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f 86                         jg      0x90 <_JIT_ENTRY+0x90>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 123: 4c 89 ea                      movq    %r13, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 45 00                   movq    (%r13), %rax
// 12c: 41 81 cf 00 00 ff ff          orl     $0xffff0000, %r15d      # imm = 0xFFFF0000
// 133: 85 c0                         testl   %eax, %eax
// 135: 78 12                         js      0x149 <_JIT_ENTRY+0x149>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 49 ff 4d 00                   decq    (%r13)
// 147: 74 16                         je      0x15f <_JIT_ENTRY+0x15f>
// 149: 4d 63 ff                      movslq  %r15d, %r15
// 14c: 49 8b 04 24                   movq    (%r12), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7e 25                         jle     0x17a <_JIT_ENTRY+0x17a>
// 155: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 159: 85 c0                         testl   %eax, %eax
// 15b: 79 47                         jns     0x1a4 <_JIT_ENTRY+0x1a4>
// 15d: eb 6d                         jmp     0x1cc <_JIT_ENTRY+0x1cc>
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_Dealloc
// 169: 4c 89 ef                      movq    %r13, %rdi
// 16c: ff d0                         callq   *%rax
// 16e: 4d 63 ff                      movslq  %r15d, %r15
// 171: 49 8b 04 24                   movq    (%r12), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 7f db                         jg      0x155 <_JIT_ENTRY+0x155>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 193: 4c 89 e2                      movq    %r12, %rdx
// 196: ff d0                         callq   *%rax
// 198: 49 8b 04 24                   movq    (%r12), %rax
// 19c: 4f 8d 2c fe                   leaq    (%r14,%r15,8), %r13
// 1a0: 85 c0                         testl   %eax, %eax
// 1a2: 78 28                         js      0x1cc <_JIT_ENTRY+0x1cc>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 49 ff 0c 24                   decq    (%r12)
// 1b4: 75 16                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 1b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b8:  R_X86_64_64  PyType_Type
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: ff d0                         callq   *%rax
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 0f b7 c0                      movzwl  %ax, %eax
// 1d9: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1de: 29 c1                         subl    %eax, %ecx
// 1e0: 48 63 c1                      movslq  %ecx, %rax
// 1e3: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _JIT_CONTINUE
// 1f1: 48 89 df                      movq    %rbx, %rdi
// 1f4: 4c 89 ee                      movq    %r13, %rsi
// 1f7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1fb: 48 83 c4 08                   addq    $0x8, %rsp
// 1ff: 5b                            popq    %rbx
// 200: 41 5c                         popq    %r12
// 202: 41 5d                         popq    %r13
// 204: 41 5e                         popq    %r14
// 206: 41 5f                         popq    %r15
// 208: 5d                            popq    %rbp
// 209: ff e0                         jmpq    *%rax
// 20b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020d:  R_X86_64_64  .rodata.str1.1+0x87
// 215: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000217:  R_X86_64_64  .rodata.str1.1
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  .rodata.str1.1+0x39
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  __assert_fail
// 233: ba 79 0a 00 00                movl    $0xa79, %edx            # imm = 0xA79
// 238: ff d0                         callq   *%rax
// 23a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023c:  R_X86_64_64  .rodata.str1.1+0x92
// 244: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000246:  R_X86_64_64  .rodata.str1.1+0xb0
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  .rodata.str1.1+0xef
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  __assert_fail
// 262: ba 4d 00 00 00                movl    $0x4d, %edx
// 267: ff d0                         callq   *%rax
// 269: 
static const unsigned char _CALL_TYPE_1_code_body[618] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x41, 0x83, 0xff, 0x01, 0x0f, 0x85, 0xeb, 0x01, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x83, 0x3c, 0xce, 0x00, 0x75, 0x63, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xc6, 0x75, 0x49, 0x48, 0x89, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x29, 0x49, 0x8b, 0x6d, 0x08, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x6b, 0x41, 0xf7, 0xd7, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x7a, 0x41, 0x81, 0xcf, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc0, 0x0f, 0x89, 0x98, 0x00, 0x00, 0x00, 0xe9, 0xa5, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf7, 0xd7, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x86, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x41, 0x81, 0xcf, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x16, 0x4d, 0x63, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x25, 0x4f, 0x8d, 0x2c, 0xfe, 0x85, 0xc0, 0x79, 0x47, 0xeb, 0x6d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x63, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xdb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x2c, 0xfe, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x79, 0x0a, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CALL_TYPE_1_code_holes[27] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x217, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x92},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xef},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg == 1\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 125: 00 00 00
static const unsigned char _CALL_TYPE_1_data_body[297] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _CALL_TYPE_1_data_holes[1];

// _CHECK_ATTR_CLASS
// 
// /tmp/tmp3v1aptj0/_CHECK_ATTR_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 9: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 10: 74 23                         je      0x35 <_JIT_ENTRY+0x35>
// 12: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000014:  R_X86_64_64  _JIT_OPERAND
// 1c: 85 c9                         testl   %ecx, %ecx
// 1e: 74 7d                         je      0x9d <_JIT_ENTRY+0x9d>
// 20: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 26: 75 0d                         jne     0x35 <_JIT_ENTRY+0x35>
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  _JIT_CONTINUE
// 32: 59                            popq    %rcx
// 33: ff e0                         jmpq    *%rax
// 35: 48 29 fe                      subq    %rdi, %rsi
// 38: 48 83 c6 b8                   addq    $-0x48, %rsi
// 3c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 40: 89 77 40                      movl    %esi, 0x40(%rdi)
// 43: 48 8b 07                      movq    (%rdi), %rax
// 46: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000048:  R_X86_64_64  PyCode_Type
// 50: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 54: 75 18                         jne     0x6e <_JIT_ENTRY+0x6e>
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  _JIT_TARGET
// 60: 89 c9                         movl    %ecx, %ecx
// 62: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 66: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6c: 59                            popq    %rcx
// 6d: c3                            retq
// 6e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000070:  R_X86_64_64  .rodata.str1.1+0x99
// 78: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1+0xb7
// 82: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000084:  R_X86_64_64  .rodata.str1.1+0xf6
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  __assert_fail
// 96: ba 4d 00 00 00                movl    $0x4d, %edx
// 9b: ff d0                         callq   *%rax
// 9d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009f:  R_X86_64_64  .rodata.str1.1+0x87
// a7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b3:  R_X86_64_64  .rodata.str1.1+0x39
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  __assert_fail
// c5: ba e3 06 00 00                movl    $0x6e3, %edx            # imm = 0x6E3
// ca: ff d0                         callq   *%rax
// cc: 
static const unsigned char _CHECK_ATTR_CLASS_code_body[205] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x23, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc9, 0x74, 0x7d, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xe3, 0x06, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_ATTR_CLASS_code_holes[13] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x99},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb7},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00type_version != 0\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 12c: 00 00 00 00
static const unsigned char _CHECK_ATTR_CLASS_data_body[305] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_ATTR_CLASS_data_holes[1];

// _CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp3v1aptj0/_CHECK_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 9: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 10: 48 85 c9                      testq   %rcx, %rcx
// 13: 7e 4d                         jle     0x62 <_JIT_ENTRY+0x62>
// 15: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 1a: 74 39                         je      0x55 <_JIT_ENTRY+0x55>
// 1c: 48 29 fe                      subq    %rdi, %rsi
// 1f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23: 48 c1 ee 03                   shrq    $0x3, %rsi
// 27: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2a: 48 8b 07                      movq    (%rdi), %rax
// 2d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002f:  R_X86_64_64  PyCode_Type
// 37: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 3b: 75 54                         jne     0x91 <_JIT_ENTRY+0x91>
// 3d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003f:  R_X86_64_64  _JIT_TARGET
// 47: 89 c9                         movl    %ecx, %ecx
// 49: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 53: 59                            popq    %rcx
// 54: c3                            retq
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _JIT_CONTINUE
// 5f: 59                            popq    %rcx
// 60: ff e0                         jmpq    *%rax
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1+0x87
// 6c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1
// 76: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000078:  R_X86_64_64  .rodata.str1.1+0x39
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  __assert_fail
// 8a: ba e4 09 00 00                movl    $0x9e4, %edx            # imm = 0x9E4
// 8f: ff d0                         callq   *%rax
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1+0x96
// 9b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009d:  R_X86_64_64  .rodata.str1.1+0xb4
// a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a7:  R_X86_64_64  .rodata.str1.1+0xf3
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  __assert_fail
// b9: ba 4d 00 00 00                movl    $0x4d, %edx
// be: ff d0                         callq   *%rax
// c0: 
static const unsigned char _CHECK_ATTR_METHOD_LAZY_DICT_code_body[193] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x7e, 0x4d, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x54, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xe4, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_ATTR_METHOD_LAZY_DICT_code_holes[12] = {
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb4},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf3},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00dictoffset > 0\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 129: 00 00 00 00 00 00 00
static const unsigned char _CHECK_ATTR_METHOD_LAZY_DICT_data_body[305] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CHECK_ATTR_MODULE
// 
// /tmp/tmp3v1aptj0/_CHECK_ATTR_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyModule_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 75 2d                         jne     0x42 <_JIT_ENTRY+0x42>
// 15: 48 8b 40 10                   movq    0x10(%rax), %rax
// 19: 48 85 c0                      testq   %rax, %rax
// 1c: 0f 84 88 00 00 00             je      0xaa <_JIT_ENTRY+0xaa>
// 22: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000028:  R_X86_64_64  _JIT_OPERAND
// 30: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 33: 75 0d                         jne     0x42 <_JIT_ENTRY+0x42>
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_CONTINUE
// 3f: 59                            popq    %rcx
// 40: ff e0                         jmpq    *%rax
// 42: 48 29 fe                      subq    %rdi, %rsi
// 45: 48 83 c6 b8                   addq    $-0x48, %rsi
// 49: 48 c1 ee 03                   shrq    $0x3, %rsi
// 4d: 89 77 40                      movl    %esi, 0x40(%rdi)
// 50: 48 8b 07                      movq    (%rdi), %rax
// 53: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000055:  R_X86_64_64  PyCode_Type
// 5d: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 61: 75 18                         jne     0x7b <_JIT_ENTRY+0x7b>
// 63: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000065:  R_X86_64_64  _JIT_TARGET
// 6d: 89 c9                         movl    %ecx, %ecx
// 6f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 73: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 79: 59                            popq    %rcx
// 7a: c3                            retq
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1+0x94
// 85: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000087:  R_X86_64_64  .rodata.str1.1+0xb2
// 8f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000091:  R_X86_64_64  .rodata.str1.1+0xf1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  __assert_fail
// a3: ba 4d 00 00 00                movl    $0x4d, %edx
// a8: ff d0                         callq   *%rax
// aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1+0x87
// b4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000b6:  R_X86_64_64  .rodata.str1.1
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  .rodata.str1.1+0x39
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  __assert_fail
// d2: ba 82 06 00 00                movl    $0x682, %edx            # imm = 0x682
// d7: ff d0                         callq   *%rax
// d9: 
static const unsigned char _CHECK_ATTR_MODULE_code_body[218] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x2d, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x82, 0x06, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_ATTR_MODULE_code_holes[14] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x94},
    {0x87, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb2},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf1},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00dict != NULL\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 127: 00
static const unsigned char _CHECK_ATTR_MODULE_data_body[297] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x64, 0x69, 0x63, 0x74, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _CHECK_ATTR_MODULE_data_holes[1];

// _CHECK_ATTR_WITH_HINT
// 
// /tmp/tmp3v1aptj0/_CHECK_ATTR_WITH_HINT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 9: f6 81 a8 00 00 00 10          testb   $0x10, 0xa8(%rcx)
// 10: 74 63                         je      0x75 <_JIT_ENTRY+0x75>
// 12: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 16: a8 01                         testb   $0x1, %al
// 18: 75 22                         jne     0x3c <_JIT_ENTRY+0x3c>
// 1a: 48 85 c0                      testq   %rax, %rax
// 1d: 74 1d                         je      0x3c <_JIT_ENTRY+0x3c>
// 1f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000021:  R_X86_64_64  PyDict_Type
// 29: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 2d: 75 75                         jne     0xa4 <_JIT_ENTRY+0xa4>
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_CONTINUE
// 39: 59                            popq    %rcx
// 3a: ff e0                         jmpq    *%rax
// 3c: 48 29 fe                      subq    %rdi, %rsi
// 3f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 43: 48 c1 ee 03                   shrq    $0x3, %rsi
// 47: 89 77 40                      movl    %esi, 0x40(%rdi)
// 4a: 48 8b 07                      movq    (%rdi), %rax
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  PyCode_Type
// 57: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 5b: 75 76                         jne     0xd3 <_JIT_ENTRY+0xd3>
// 5d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005f:  R_X86_64_64  _JIT_TARGET
// 67: 89 c9                         movl    %ecx, %ecx
// 69: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 73: 59                            popq    %rcx
// 74: c3                            retq
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1+0x87
// 7f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000081:  R_X86_64_64  .rodata.str1.1
// 89: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008b:  R_X86_64_64  .rodata.str1.1+0x39
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  __assert_fail
// 9d: ba a1 06 00 00                movl    $0x6a1, %edx            # imm = 0x6A1
// a2: ff d0                         callq   *%rax
// a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a6:  R_X86_64_64  .rodata.str1.1+0xba
// ae: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  .rodata.str1.1+0x39
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  __assert_fail
// cc: ba a6 06 00 00                movl    $0x6a6, %edx            # imm = 0x6A6
// d1: ff d0                         callq   *%rax
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1+0xde
// dd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1+0xfc
// e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1+0x13b
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  __assert_fail
// fb: ba 4d 00 00 00                movl    $0x4d, %edx
// 100: ff d0                         callq   *%rax
// 102: 
static const unsigned char _CHECK_ATTR_WITH_HINT_code_body[259] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x10, 0x74, 0x63, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x22, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x76, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xa1, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xa6, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_ATTR_WITH_HINT_code_holes[17] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x81, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xba},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xde},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xfc},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13b},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(owner)->tp_flags & Py_TPFLAGS_MANAGED_DICT\x00PyDict_CheckExact((PyObject *)dict)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 171: 00 00 00 00 00 00 00
static const unsigned char _CHECK_ATTR_WITH_HINT_data_body[377] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x26, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x28, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x64, 0x69, 0x63, 0x74, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_ATTR_WITH_HINT_data_holes[1];

// _CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp3v1aptj0/_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000003:  R_X86_64_64  _JIT_OPARG
// b: f7 d0                         notl    %eax
// d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 12: 48 98                         cltq
// 14: 48 83 3c c6 00                cmpq    $0x0, (%rsi,%rax,8)
// 19: 75 2b                         jne     0x46 <_JIT_ENTRY+0x46>
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: 0f b7 c0                      movzwl  %ax, %eax
// 28: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2d: 29 c1                         subl    %eax, %ecx
// 2f: 48 63 c1                      movslq  %ecx, %rax
// 32: 48 8b 04 c6                   movq    (%rsi,%rax,8), %rax
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  PyMethod_Type
// 40: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 44: 74 39                         je      0x7f <_JIT_ENTRY+0x7f>
// 46: 48 29 fe                      subq    %rdi, %rsi
// 49: 48 83 c6 b8                   addq    $-0x48, %rsi
// 4d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 51: 89 77 40                      movl    %esi, 0x40(%rdi)
// 54: 48 8b 07                      movq    (%rdi), %rax
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  PyCode_Type
// 61: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 65: 75 25                         jne     0x8c <_JIT_ENTRY+0x8c>
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_TARGET
// 71: 89 c9                         movl    %ecx, %ecx
// 73: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 77: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 7d: 59                            popq    %rcx
// 7e: c3                            retq
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _JIT_CONTINUE
// 89: 59                            popq    %rcx
// 8a: ff e0                         jmpq    *%rax
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1+0x1e
// a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a2:  R_X86_64_64  .rodata.str1.1+0x5d
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  __assert_fail
// b4: ba 4d 00 00 00                movl    $0x4d, %edx
// b9: ff d0                         callq   *%rax
// bb: 
static const unsigned char _CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[188] = {0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x83, 0x3c, 0xc6, 0x00, 0x75, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x04, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[11] = {
    {0x3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CHECK_EG_MATCH
// 
// /tmp/tmp3v1aptj0/_CHECK_EG_MATCH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 fe 00 00 00             je      0x20d <_JIT_ENTRY+0x20d>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 0d 01 00 00             jle     0x228 <_JIT_ENTRY+0x228>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 2a 01 00 00             jns     0x24d <_JIT_ENTRY+0x24d>
// 123: e9 45 01 00 00                jmp     0x26d <_JIT_ENTRY+0x26d>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 7f                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 f0 00 00 00             js      0x26d <_JIT_ENTRY+0x26d>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 94 c1                      sete    %cl
// 188: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 18d: 48 85 c0                      testq   %rax, %rax
// 190: 0f 95 c2                      setne   %dl
// 193: 30 ca                         xorb    %cl, %dl
// 195: 0f 84 c3 01 00 00             je      0x35e <_JIT_ENTRY+0x35e>
// 19b: 48 85 ff                      testq   %rdi, %rdi
// 19e: 0f 84 c9 00 00 00             je      0x26d <_JIT_ENTRY+0x26d>
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _Py_NoneStruct
// 1ae: 48 39 cf                      cmpq    %rcx, %rdi
// 1b1: 74 16                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  PyErr_SetHandledException
// 1bd: ff d0                         callq   *%rax
// 1bf: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1c4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1cd: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _JIT_CONTINUE
// 1db: 4c 89 f7                      movq    %r14, %rdi
// 1de: 48 89 de                      movq    %rbx, %rsi
// 1e1: 4c 89 e2                      movq    %r12, %rdx
// 1e4: 48 83 c4 18                   addq    $0x18, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_Dealloc
// 1fe: 4c 89 ff                      movq    %r15, %rdi
// 201: ff d0                         callq   *%rax
// 203: 85 ed                         testl   %ebp, %ebp
// 205: 0f 89 72 ff ff ff             jns     0x17d <_JIT_ENTRY+0x17d>
// 20b: eb 60                         jmp     0x26d <_JIT_ENTRY+0x26d>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_Dealloc
// 217: 4c 89 ef                      movq    %r13, %rdi
// 21a: ff d0                         callq   *%rax
// 21c: 49 8b 07                      movq    (%r15), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 0f 8f f3 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 228: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022a:  R_X86_64_64  .rodata.str1.1
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NegativeRefcount
// 23c: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 241: 4c 89 fa                      movq    %r15, %rdx
// 244: ff d0                         callq   *%rax
// 246: 49 8b 07                      movq    (%r15), %rax
// 249: 85 c0                         testl   %eax, %eax
// 24b: 78 20                         js      0x26d <_JIT_ENTRY+0x26d>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 257: ff d0                         callq   *%rax
// 259: 49 ff 0f                      decq    (%r15)
// 25c: 75 0f                         jne     0x26d <_JIT_ENTRY+0x26d>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_Dealloc
// 268: 4c 89 ff                      movq    %r15, %rdi
// 26b: ff d0                         callq   *%rax
// 26d: 49 8b 06                      movq    (%r14), %rax
// 270: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000272:  R_X86_64_64  PyCode_Type
// 27a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 27e: 75 51                         jne     0x2d1 <_JIT_ENTRY+0x2d1>
// 280: 48 63 40 48                   movslq  0x48(%rax), %rax
// 284: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 288: 48 83 c0 48                   addq    $0x48, %rax
// 28c: 48 89 d9                      movq    %rbx, %rcx
// 28f: 48 29 c1                      subq    %rax, %rcx
// 292: 48 c1 e9 03                   shrq    $0x3, %rcx
// 296: 85 c9                         testl   %ecx, %ecx
// 298: 7e 66                         jle     0x300 <_JIT_ENTRY+0x300>
// 29a: 48 8d 4b f8                   leaq    -0x8(%rbx), %rcx
// 29e: 48 29 c1                      subq    %rax, %rcx
// 2a1: 48 c1 e9 03                   shrq    $0x3, %rcx
// 2a5: 85 c9                         testl   %ecx, %ecx
// 2a7: 0f 8e 82 00 00 00             jle     0x32f <_JIT_ENTRY+0x32f>
// 2ad: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b1: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 2b5: 48 29 c3                      subq    %rax, %rbx
// 2b8: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2c0: 31 c0                         xorl    %eax, %eax
// 2c2: 48 83 c4 18                   addq    $0x18, %rsp
// 2c6: 5b                            popq    %rbx
// 2c7: 41 5c                         popq    %r12
// 2c9: 41 5d                         popq    %r13
// 2cb: 41 5e                         popq    %r14
// 2cd: 41 5f                         popq    %r15
// 2cf: 5d                            popq    %rbp
// 2d0: c3                            retq
// 2d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1+0xf0
// 2db: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x10e
// 2e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1+0x14d
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  __assert_fail
// 2f9: ba 4d 00 00 00                movl    $0x4d, %edx
// 2fe: ff d0                         callq   *%rax
// 300: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000302:  R_X86_64_64  .rodata.str1.1+0xa9
// 30a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000030c:  R_X86_64_64  .rodata.str1.1+0xbc
// 314: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000316:  R_X86_64_64  .rodata.str1.1+0x39
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  __assert_fail
// 328: ba 59 00 00 00                movl    $0x59, %edx
// 32d: ff d0                         callq   *%rax
// 32f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000331:  R_X86_64_64  .rodata.str1.1+0xa9
// 339: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000033b:  R_X86_64_64  .rodata.str1.1+0xbc
// 343: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000345:  R_X86_64_64  .rodata.str1.1+0x39
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  __assert_fail
// 357: ba 5b 00 00 00                movl    $0x5b, %edx
// 35c: ff d0                         callq   *%rax
// 35e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000360:  R_X86_64_64  .rodata.str1.1+0x87
// 368: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000036a:  R_X86_64_64  .rodata.str1.1
// 372: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000374:  R_X86_64_64  .rodata.str1.1+0x39
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  __assert_fail
// 386: ba c4 07 00 00                movl    $0x7c4, %edx            # imm = 0x7C4
// 38b: ff d0                         callq   *%rax
// 38d: 
static const unsigned char _CHECK_EG_MATCH_code_body[910] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x0d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x2a, 0x01, 0x00, 0x00, 0xe9, 0x45, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x7f, 0x85, 0xed, 0x0f, 0x88, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x94, 0xc1, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x95, 0xc2, 0x30, 0xca, 0x0f, 0x84, 0xc3, 0x01, 0x00, 0x00, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xcf, 0x74, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x72, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf3, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x51, 0x48, 0x63, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x66, 0x48, 0x8d, 0x4b, 0xf8, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x82, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf0, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xc4, 0x07, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_EG_MATCH_code_holes[39] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10e},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14d},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa9},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbc},
    {0x316, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa9},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbc},
    {0x345, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(match == NULL) == (rest == NULL)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 183: 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCH_data_body[393] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x28, 0x72, 0x65, 0x73, 0x74, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCH_data_holes[1];

// _CHECK_EXC_MATCH
// 
// /tmp/tmp3v1aptj0/_CHECK_EXC_MATCH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// f: 49 8b 45 08                   movq    0x8(%r13), %rax
// 13: f6 80 ab 00 00 00 40          testb   $0x40, 0xab(%rax)
// 1a: 0f 84 7d 01 00 00             je      0x19d <_JIT_ENTRY+0x19d>
// 20: 49 89 d4                      movq    %rdx, %r12
// 23: 48 89 f3                      movq    %rsi, %rbx
// 26: 49 89 fe                      movq    %rdi, %r14
// 29: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 37: 48 89 d7                      movq    %rdx, %rdi
// 3a: 4c 89 fe                      movq    %r15, %rsi
// 3d: ff d0                         callq   *%rax
// 3f: 85 c0                         testl   %eax, %eax
// 41: 78 22                         js      0x65 <_JIT_ENTRY+0x65>
// 43: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000045:  R_X86_64_64  PyErr_GivenExceptionMatches
// 4d: 4c 89 ef                      movq    %r13, %rdi
// 50: 4c 89 fe                      movq    %r15, %rsi
// 53: ff d0                         callq   *%rax
// 55: 89 c5                         movl    %eax, %ebp
// 57: 49 8b 07                      movq    (%r15), %rax
// 5a: 48 85 c0                      testq   %rax, %rax
// 5d: 7e 1f                         jle     0x7e <_JIT_ENTRY+0x7e>
// 5f: 85 c0                         testl   %eax, %eax
// 61: 79 40                         jns     0xa3 <_JIT_ENTRY+0xa3>
// 63: eb 5e                         jmp     0xc3 <_JIT_ENTRY+0xc3>
// 65: 49 8b 07                      movq    (%r15), %rax
// 68: 48 85 c0                      testq   %rax, %rax
// 6b: 0f 8e 93 00 00 00             jle     0x104 <_JIT_ENTRY+0x104>
// 71: 85 c0                         testl   %eax, %eax
// 73: 0f 89 b0 00 00 00             jns     0x129 <_JIT_ENTRY+0x129>
// 79: e9 cb 00 00 00                jmp     0x149 <_JIT_ENTRY+0x149>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 97: 4c 89 fa                      movq    %r15, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 07                      movq    (%r15), %rax
// 9f: 85 c0                         testl   %eax, %eax
// a1: 78 20                         js      0xc3 <_JIT_ENTRY+0xc3>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ad: ff d0                         callq   *%rax
// af: 49 ff 0f                      decq    (%r15)
// b2: 75 0f                         jne     0xc3 <_JIT_ENTRY+0xc3>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_Dealloc
// be: 4c 89 ff                      movq    %r15, %rdi
// c1: ff d0                         callq   *%rax
// c3: 85 ed                         testl   %ebp, %ebp
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_FalseStruct
// cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d1:  R_X86_64_64  _Py_TrueStruct
// d9: 48 0f 44 c8                   cmoveq  %rax, %rcx
// dd: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _JIT_CONTINUE
// eb: 4c 89 f7                      movq    %r14, %rdi
// ee: 48 89 de                      movq    %rbx, %rsi
// f1: 4c 89 e2                      movq    %r12, %rdx
// f4: 48 83 c4 08                   addq    $0x8, %rsp
// f8: 5b                            popq    %rbx
// f9: 41 5c                         popq    %r12
// fb: 41 5d                         popq    %r13
// fd: 41 5e                         popq    %r14
// ff: 41 5f                         popq    %r15
// 101: 5d                            popq    %rbp
// 102: ff e0                         jmpq    *%rax
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_NegativeRefcount
// 118: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 11d: 4c 89 fa                      movq    %r15, %rdx
// 120: ff d0                         callq   *%rax
// 122: 49 8b 07                      movq    (%r15), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 20                         js      0x149 <_JIT_ENTRY+0x149>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 49 ff 0f                      decq    (%r15)
// 138: 75 0f                         jne     0x149 <_JIT_ENTRY+0x149>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_Dealloc
// 144: 4c 89 ff                      movq    %r15, %rdi
// 147: ff d0                         callq   *%rax
// 149: 49 8b 06                      movq    (%r14), %rax
// 14c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014e:  R_X86_64_64  PyCode_Type
// 156: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 15a: 75 70                         jne     0x1cc <_JIT_ENTRY+0x1cc>
// 15c: 8b 40 48                      movl    0x48(%rax), %eax
// 15f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 163: 48 83 c0 48                   addq    $0x48, %rax
// 167: 48 89 d9                      movq    %rbx, %rcx
// 16a: 48 29 c1                      subq    %rax, %rcx
// 16d: 48 c1 e9 03                   shrq    $0x3, %rcx
// 171: 85 c9                         testl   %ecx, %ecx
// 173: 0f 8e 82 00 00 00             jle     0x1fb <_JIT_ENTRY+0x1fb>
// 179: 48 83 c3 f8                   addq    $-0x8, %rbx
// 17d: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 181: 48 29 c3                      subq    %rax, %rbx
// 184: 48 c1 eb 03                   shrq    $0x3, %rbx
// 188: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 18c: 31 c0                         xorl    %eax, %eax
// 18e: 48 83 c4 08                   addq    $0x8, %rsp
// 192: 5b                            popq    %rbx
// 193: 41 5c                         popq    %r12
// 195: 41 5d                         popq    %r13
// 197: 41 5e                         popq    %r14
// 199: 41 5f                         popq    %r15
// 19b: 5d                            popq    %rbp
// 19c: c3                            retq
// 19d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019f:  R_X86_64_64  .rodata.str1.1+0x87
// 1a7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1
// 1b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1+0x39
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  __assert_fail
// 1c5: ba d4 07 00 00                movl    $0x7d4, %edx            # imm = 0x7D4
// 1ca: ff d0                         callq   *%rax
// 1cc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1+0xee
// 1d6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1+0x10c
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1+0x14b
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  __assert_fail
// 1f4: ba 4d 00 00 00                movl    $0x4d, %edx
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1+0xa7
// 205: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1+0xba
// 20f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000211:  R_X86_64_64  .rodata.str1.1+0x39
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  __assert_fail
// 223: ba 5b 00 00 00                movl    $0x5b, %edx
// 228: ff d0                         callq   *%rax
// 22a: 
static const unsigned char _CHECK_EXC_MATCH_code_body[555] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x4c, 0x8b, 0x6e, 0xf0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x40, 0x0f, 0x84, 0x7d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5e, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x93, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb0, 0x00, 0x00, 0x00, 0xe9, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x70, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x82, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xd4, 0x07, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_EXC_MATCH_code_holes[27] = {
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xee},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10c},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14b},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xba},
    {0x211, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyExceptionInstance_Check(left)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 181: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EXC_MATCH_data_body[393] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EXC_MATCH_data_holes[1];

// _CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmp3v1aptj0/_CHECK_FUNCTION_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000003:  R_X86_64_64  _JIT_OPARG
// b: 0f b7 c0                      movzwl  %ax, %eax
// e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 13: 29 c1                         subl    %eax, %ecx
// 15: 48 63 c9                      movslq  %ecx, %rcx
// 18: 48 8b 0c ce                   movq    (%rsi,%rcx,8), %rcx
// 1c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000001e:  R_X86_64_64  PyFunction_Type
// 26: 4c 39 41 08                   cmpq    %r8, 0x8(%rcx)
// 2a: 75 45                         jne     0x71 <_JIT_ENTRY+0x71>
// 2c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000002e:  R_X86_64_64  _JIT_OPERAND
// 36: 44 39 81 88 00 00 00          cmpl    %r8d, 0x88(%rcx)
// 3d: 75 32                         jne     0x71 <_JIT_ENTRY+0x71>
// 3f: f7 d0                         notl    %eax
// 41: 48 98                         cltq
// 43: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 47: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 45 0f b7 c0                   movzwl  %r8w, %r8d
// 55: 48 83 3c c6 01                cmpq    $0x1, (%rsi,%rax,8)
// 5a: 41 83 d8 ff                   sbbl    $-0x1, %r8d
// 5e: 44 39 41 34                   cmpl    %r8d, 0x34(%rcx)
// 62: 75 0d                         jne     0x71 <_JIT_ENTRY+0x71>
// 64: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000066:  R_X86_64_64  _JIT_CONTINUE
// 6e: 59                            popq    %rcx
// 6f: ff e0                         jmpq    *%rax
// 71: 48 29 fe                      subq    %rdi, %rsi
// 74: 48 83 c6 b8                   addq    $-0x48, %rsi
// 78: 48 c1 ee 03                   shrq    $0x3, %rsi
// 7c: 89 77 40                      movl    %esi, 0x40(%rdi)
// 7f: 48 8b 07                      movq    (%rdi), %rax
// 82: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000084:  R_X86_64_64  PyCode_Type
// 8c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 90: 75 18                         jne     0xaa <_JIT_ENTRY+0xaa>
// 92: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000094:  R_X86_64_64  _JIT_TARGET
// 9c: 89 c9                         movl    %ecx, %ecx
// 9e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a8: 59                            popq    %rcx
// a9: c3                            retq
// aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1
// b4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000b6:  R_X86_64_64  .rodata.str1.1+0x1e
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  .rodata.str1.1+0x5d
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  __assert_fail
// d2: ba 4d 00 00 00                movl    $0x4d, %edx
// d7: ff d0                         callq   *%rax
// d9: 
static const unsigned char _CHECK_FUNCTION_EXACT_ARGS_code_body[218] = {0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x0c, 0xce, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x41, 0x08, 0x75, 0x45, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x39, 0x81, 0x88, 0x00, 0x00, 0x00, 0x75, 0x32, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x49, 0x30, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc0, 0x48, 0x83, 0x3c, 0xc6, 0x01, 0x41, 0x83, 0xd8, 0xff, 0x44, 0x39, 0x41, 0x34, 0x75, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_FUNCTION_EXACT_ARGS_code_holes[12] = {
    {0x3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _CHECK_FUNCTION_EXACT_ARGS_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmp3v1aptj0/_CHECK_MANAGED_OBJECT_HAS_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 49 89 fe                      movq    %rdi, %r14
// 8: 48 8b 7e f8                   movq    -0x8(%rsi), %rdi
// c: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 10: 48 83 b8 20 01 00 00 00       cmpq    $0x0, 0x120(%rax)
// 18: 0f 89 85 00 00 00             jns     0xa3 <_JIT_ENTRY+0xa3>
// 1e: f6 80 a8 00 00 00 10          testb   $0x10, 0xa8(%rax)
// 25: 0f 84 a7 00 00 00             je      0xd2 <_JIT_ENTRY+0xd2>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 48 89 f3                      movq    %rsi, %rbx
// 31: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 35: 75 14                         jne     0x4b <_JIT_ENTRY+0x4b>
// 37: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 45: ff d0                         callq   *%rax
// 47: 84 c0                         testb   %al, %al
// 49: 74 1a                         je      0x65 <_JIT_ENTRY+0x65>
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_CONTINUE
// 55: 4c 89 f7                      movq    %r14, %rdi
// 58: 48 89 de                      movq    %rbx, %rsi
// 5b: 4c 89 fa                      movq    %r15, %rdx
// 5e: 5b                            popq    %rbx
// 5f: 41 5e                         popq    %r14
// 61: 41 5f                         popq    %r15
// 63: ff e0                         jmpq    *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 49 8b 06                      movq    (%r14), %rax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  PyCode_Type
// 81: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 85: 75 7a                         jne     0x101 <_JIT_ENTRY+0x101>
// 87: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000089:  R_X86_64_64  _JIT_TARGET
// 91: 89 c9                         movl    %ecx, %ecx
// 93: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 97: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9d: 5b                            popq    %rbx
// 9e: 41 5e                         popq    %r14
// a0: 41 5f                         popq    %r15
// a2: c3                            retq
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1+0x87
// ad: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000af:  R_X86_64_64  .rodata.str1.1
// b7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b9:  R_X86_64_64  .rodata.str1.1+0x39
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  __assert_fail
// cb: ba 61 06 00 00                movl    $0x661, %edx            # imm = 0x661
// d0: ff d0                         callq   *%rax
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1+0xa9
// dc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000de:  R_X86_64_64  .rodata.str1.1
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1+0x39
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  __assert_fail
// fa: ba 62 06 00 00                movl    $0x662, %edx            # imm = 0x662
// ff: ff d0                         callq   *%rax
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1+0xdc
// 10b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000010d:  R_X86_64_64  .rodata.str1.1+0xfa
// 115: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000117:  R_X86_64_64  .rodata.str1.1+0x139
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  __assert_fail
// 129: ba 4d 00 00 00                movl    $0x4d, %edx
// 12e: ff d0                         callq   *%rax
// 130: 
static const unsigned char _CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[305] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x7e, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0x83, 0xb8, 0x20, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x89, 0x85, 0x00, 0x00, 0x00, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x7a, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x61, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x62, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[17] = {
    {0x3d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa9},
    {0xde, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdc},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xfa},
    {0x117, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x139},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(owner)->tp_dictoffset < 0\x00Py_TYPE(owner)->tp_flags & Py_TPFLAGS_MANAGED_DICT\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 16f: 00
static const unsigned char _CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[369] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3c, 0x20, 0x30, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x26, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _CHECK_PEP_523
// 
// /tmp/tmp3v1aptj0/_CHECK_PEP_523.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 5: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// d: 74 39                         je      0x48 <_JIT_ENTRY+0x48>
// f: 48 29 fe                      subq    %rdi, %rsi
// 12: 48 83 c6 b8                   addq    $-0x48, %rsi
// 16: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1a: 89 77 40                      movl    %esi, 0x40(%rdi)
// 1d: 48 8b 07                      movq    (%rdi), %rax
// 20: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000022:  R_X86_64_64  PyCode_Type
// 2a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 2e: 75 25                         jne     0x55 <_JIT_ENTRY+0x55>
// 30: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000032:  R_X86_64_64  _JIT_TARGET
// 3a: 89 c9                         movl    %ecx, %ecx
// 3c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 40: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 46: 59                            popq    %rcx
// 47: c3                            retq
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _JIT_CONTINUE
// 52: 59                            popq    %rcx
// 53: ff e0                         jmpq    *%rax
// 55: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000057:  R_X86_64_64  .rodata.str1.1
// 5f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000061:  R_X86_64_64  .rodata.str1.1+0x1e
// 69: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006b:  R_X86_64_64  .rodata.str1.1+0x5d
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  __assert_fail
// 7d: ba 4d 00 00 00                movl    $0x4d, %edx
// 82: ff d0                         callq   *%rax
// 84: 
static const unsigned char _CHECK_PEP_523_code_body[133] = {0x50, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_PEP_523_code_holes[8] = {
    {0x22, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _CHECK_PEP_523_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_PEP_523_data_holes[1];

// _CHECK_STACK_SPACE
// 
// /tmp/tmp3v1aptj0/_CHECK_STACK_SPACE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 8a 00 01 00 00          movq    0x100(%rdx), %rcx
// 8: 48 8b 82 08 01 00 00          movq    0x108(%rdx), %rax
// f: 48 85 c9                      testq   %rcx, %rcx
// 12: 74 4e                         je      0x62 <_JIT_ENTRY+0x62>
// 14: 48 85 c0                      testq   %rax, %rax
// 17: 0f 84 83 00 00 00             je      0xa0 <_JIT_ENTRY+0xa0>
// 1d: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000001f:  R_X86_64_64  _JIT_OPARG
// 27: 45 0f b7 c0                   movzwl  %r8w, %r8d
// 2b: 41 b9 fe ff ff ff             movl    $0xfffffffe, %r9d       # imm = 0xFFFFFFFE
// 31: 45 29 c1                      subl    %r8d, %r9d
// 34: 4d 63 c1                      movslq  %r9d, %r8
// 37: 4e 8b 04 c6                   movq    (%rsi,%r8,8), %r8
// 3b: 4d 8b 40 30                   movq    0x30(%r8), %r8
// 3f: 4d 63 40 4c                   movslq  0x4c(%r8), %r8
// 43: 48 29 c8                      subq    %rcx, %rax
// 46: 48 c1 f8 03                   sarq    $0x3, %rax
// 4a: 4c 39 c0                      cmpq    %r8, %rax
// 4d: 7e 18                         jle     0x67 <_JIT_ENTRY+0x67>
// 4f: 83 7a 24 02                   cmpl    $0x2, 0x24(%rdx)
// 53: 7c 12                         jl      0x67 <_JIT_ENTRY+0x67>
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _JIT_CONTINUE
// 5f: 59                            popq    %rcx
// 60: ff e0                         jmpq    *%rax
// 62: 48 85 c0                      testq   %rax, %rax
// 65: 75 39                         jne     0xa0 <_JIT_ENTRY+0xa0>
// 67: 48 29 fe                      subq    %rdi, %rsi
// 6a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 6e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 72: 89 77 40                      movl    %esi, 0x40(%rdi)
// 75: 48 8b 07                      movq    (%rdi), %rax
// 78: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007a:  R_X86_64_64  PyCode_Type
// 82: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 86: 75 47                         jne     0xcf <_JIT_ENTRY+0xcf>
// 88: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008a:  R_X86_64_64  _JIT_TARGET
// 92: 89 c9                         movl    %ecx, %ecx
// 94: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 98: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 9e: 59                            popq    %rcx
// 9f: c3                            retq
// a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a2:  R_X86_64_64  .rodata.str1.1+0x93
// aa: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1+0x1e
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  .rodata.str1.1+0x11c
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  __assert_fail
// c8: ba fb 00 00 00                movl    $0xfb, %edx
// cd: ff d0                         callq   *%rax
// cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d1:  R_X86_64_64  .rodata.str1.1
// d9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1+0x1e
// e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1+0x5d
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  __assert_fail
// f7: ba 4d 00 00 00                movl    $0x4d, %edx
// fc: ff d0                         callq   *%rax
// fe: 
static const unsigned char _CHECK_STACK_SPACE_code_body[255] = {0x50, 0x48, 0x8b, 0x8a, 0x00, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x82, 0x08, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0x4e, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc0, 0x41, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x45, 0x29, 0xc1, 0x4d, 0x63, 0xc1, 0x4e, 0x8b, 0x04, 0xc6, 0x4d, 0x8b, 0x40, 0x30, 0x4d, 0x63, 0x40, 0x4c, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xf8, 0x03, 0x4c, 0x39, 0xc0, 0x7e, 0x18, 0x83, 0x7a, 0x24, 0x02, 0x7c, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x85, 0xc0, 0x75, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_STACK_SPACE_code_holes[13] = {
    {0x1f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11c},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00(tstate->datastack_top == NULL && tstate->datastack_limit == NULL) || (tstate->datastack_top != NULL && tstate->datastack_limit != NULL)\x00_Bool _PyThreadState_HasStackSpace(PyThreadState *, int)\x00'
// 155: 00 00 00
static const unsigned char _CHECK_STACK_SPACE_data_body[345] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x20, 0x26, 0x26, 0x20, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x20, 0x26, 0x26, 0x20, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x29, 0x00, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x48, 0x61, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_STACK_SPACE_data_holes[1];

// _CHECK_VALIDITY
// 
// /tmp/tmp3v1aptj0/_CHECK_VALIDITY.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000003:  R_X86_64_64  _JIT_EXECUTOR
// b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// f: 74 0d                         je      0x1e <_JIT_ENTRY+0x1e>
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_CONTINUE
// 1b: 59                            popq    %rcx
// 1c: ff e0                         jmpq    *%rax
// 1e: 48 29 fe                      subq    %rdi, %rsi
// 21: 48 83 c6 b8                   addq    $-0x48, %rsi
// 25: 48 c1 ee 03                   shrq    $0x3, %rsi
// 29: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2c: 48 8b 07                      movq    (%rdi), %rax
// 2f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000031:  R_X86_64_64  PyCode_Type
// 39: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 3d: 75 18                         jne     0x57 <_JIT_ENTRY+0x57>
// 3f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000041:  R_X86_64_64  _JIT_TARGET
// 49: 89 c9                         movl    %ecx, %ecx
// 4b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 55: 59                            popq    %rcx
// 56: c3                            retq
// 57: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000059:  R_X86_64_64  .rodata.str1.1
// 61: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000063:  R_X86_64_64  .rodata.str1.1+0x1e
// 6b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006d:  R_X86_64_64  .rodata.str1.1+0x5d
// 75: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000077:  R_X86_64_64  __assert_fail
// 7f: ba 4d 00 00 00                movl    $0x4d, %edx
// 84: ff d0                         callq   *%rax
// 86: 
static const unsigned char _CHECK_VALIDITY_code_body[135] = {0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_VALIDITY_code_holes[9] = {
    {0x3, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x13, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x77, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _CHECK_VALIDITY_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_VALIDITY_data_holes[1];

// _COMPARE_OP
// 
// /tmp/tmp3v1aptj0/_COMPARE_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPARG
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: c1 e8 05                      shrl    $0x5, %eax
// 28: 83 f8 06                      cmpl    $0x6, %eax
// 2b: 0f 8d 20 02 00 00             jge     0x251 <_JIT_ENTRY+0x251>
// 31: 49 89 f7                      movq    %rsi, %r15
// 34: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 38: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 3c: 4c 8b 23                      movq    (%rbx), %r12
// 3f: 49 8b 2e                      movq    (%r14), %rbp
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  _JIT_OPARG
// 4c: 0f b7 d0                      movzwl  %ax, %edx
// 4f: c1 ea 05                      shrl    $0x5, %edx
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  PyObject_RichCompare
// 5c: 4c 89 e7                      movq    %r12, %rdi
// 5f: 48 89 ee                      movq    %rbp, %rsi
// 62: ff d0                         callq   *%rax
// 64: 49 89 c5                      movq    %rax, %r13
// 67: 49 8b 04 24                   movq    (%r12), %rax
// 6b: 48 85 c0                      testq   %rax, %rax
// 6e: 7e 06                         jle     0x76 <_JIT_ENTRY+0x76>
// 70: 85 c0                         testl   %eax, %eax
// 72: 79 28                         jns     0x9c <_JIT_ENTRY+0x9c>
// 74: eb 38                         jmp     0xae <_JIT_ENTRY+0xae>
// 76: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000078:  R_X86_64_64  .rodata.str1.1
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _Py_NegativeRefcount
// 8a: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 8f: 4c 89 e2                      movq    %r12, %rdx
// 92: ff d0                         callq   *%rax
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 12                         js      0xae <_JIT_ENTRY+0xae>
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a6: ff d0                         callq   *%rax
// a8: 49 ff 0c 24                   decq    (%r12)
// ac: 74 14                         je      0xc2 <_JIT_ENTRY+0xc2>
// ae: 48 8b 45 00                   movq    (%rbp), %rax
// b2: 48 85 c0                      testq   %rax, %rax
// b5: 7e 23                         jle     0xda <_JIT_ENTRY+0xda>
// b7: 85 c0                         testl   %eax, %eax
// b9: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// be: 79 45                         jns     0x105 <_JIT_ENTRY+0x105>
// c0: eb 59                         jmp     0x11b <_JIT_ENTRY+0x11b>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _Py_Dealloc
// cc: 4c 89 e7                      movq    %r12, %rdi
// cf: ff d0                         callq   *%rax
// d1: 48 8b 45 00                   movq    (%rbp), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7f dd                         jg      0xb7 <_JIT_ENTRY+0xb7>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// f3: 48 89 ea                      movq    %rbp, %rdx
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 103: 78 16                         js      0x11b <_JIT_ENTRY+0x11b>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 48 ff 4d 00                   decq    (%rbp)
// 115: 0f 84 bc 00 00 00             je      0x1d7 <_JIT_ENTRY+0x1d7>
// 11b: 4d 85 ed                      testq   %r13, %r13
// 11e: 0f 84 cb 00 00 00             je      0x1ef <_JIT_ENTRY+0x1ef>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _JIT_OPARG
// 12e: a8 10                         testb   $0x10, %al
// 130: 74 7d                         je      0x1af <_JIT_ENTRY+0x1af>
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  PyObject_IsTrue
// 13c: 4c 89 ef                      movq    %r13, %rdi
// 13f: ff d0                         callq   *%rax
// 141: 89 c5                         movl    %eax, %ebp
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 48 85 c0                      testq   %rax, %rax
// 14a: 7f 22                         jg      0x16e <_JIT_ENTRY+0x16e>
// 14c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014e:  R_X86_64_64  .rodata.str1.1
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_NegativeRefcount
// 160: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 165: 4c 89 ea                      movq    %r13, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 49 8b 45 00                   movq    (%r13), %rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 21                         js      0x193 <_JIT_ENTRY+0x193>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 4d 00                   decq    (%r13)
// 182: 75 0f                         jne     0x193 <_JIT_ENTRY+0x193>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 ef                      movq    %r13, %rdi
// 191: ff d0                         callq   *%rax
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_FalseStruct
// 19d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000019f:  R_X86_64_64  _Py_TrueStruct
// 1a7: 85 ed                         testl   %ebp, %ebp
// 1a9: 4c 0f 44 e8                   cmoveq  %rax, %r13
// 1ad: 78 40                         js      0x1ef <_JIT_ENTRY+0x1ef>
// 1af: 4c 89 2b                      movq    %r13, (%rbx)
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_CONTINUE
// 1bc: 4c 89 e7                      movq    %r12, %rdi
// 1bf: 4c 89 f6                      movq    %r14, %rsi
// 1c2: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1c7: 48 83 c4 18                   addq    $0x18, %rsp
// 1cb: 5b                            popq    %rbx
// 1cc: 41 5c                         popq    %r12
// 1ce: 41 5d                         popq    %r13
// 1d0: 41 5e                         popq    %r14
// 1d2: 41 5f                         popq    %r15
// 1d4: 5d                            popq    %rbp
// 1d5: ff e0                         jmpq    *%rax
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 48 89 ef                      movq    %rbp, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 4d 85 ed                      testq   %r13, %r13
// 1e9: 0f 85 35 ff ff ff             jne     0x124 <_JIT_ENTRY+0x124>
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f5:  R_X86_64_64  PyCode_Type
// 1fd: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 201: 75 7d                         jne     0x280 <_JIT_ENTRY+0x280>
// 203: 48 63 40 48                   movslq  0x48(%rax), %rax
// 207: 49 8d 04 c4                   leaq    (%r12,%rax,8), %rax
// 20b: 48 83 c0 48                   addq    $0x48, %rax
// 20f: 49 29 c7                      subq    %rax, %r15
// 212: 49 c1 ef 03                   shrq    $0x3, %r15
// 216: 45 85 ff                      testl   %r15d, %r15d
// 219: 0f 8e 90 00 00 00             jle     0x2af <_JIT_ENTRY+0x2af>
// 21f: 49 29 c6                      subq    %rax, %r14
// 222: 49 c1 ee 03                   shrq    $0x3, %r14
// 226: 45 85 f6                      testl   %r14d, %r14d
// 229: 0f 8e af 00 00 00             jle     0x2de <_JIT_ENTRY+0x2de>
// 22f: 49 8d 44 24 48                leaq    0x48(%r12), %rax
// 234: 48 29 c3                      subq    %rax, %rbx
// 237: 48 c1 eb 03                   shrq    $0x3, %rbx
// 23b: 41 89 5c 24 40                movl    %ebx, 0x40(%r12)
// 240: 31 c0                         xorl    %eax, %eax
// 242: 48 83 c4 18                   addq    $0x18, %rsp
// 246: 5b                            popq    %rbx
// 247: 41 5c                         popq    %r12
// 249: 41 5d                         popq    %r13
// 24b: 41 5e                         popq    %r14
// 24d: 41 5f                         popq    %r15
// 24f: 5d                            popq    %rbp
// 250: c3                            retq
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1+0x87
// 25b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025d:  R_X86_64_64  .rodata.str1.1
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  .rodata.str1.1+0x39
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  __assert_fail
// 279: ba 36 07 00 00                movl    $0x736, %edx            # imm = 0x736
// 27e: ff d0                         callq   *%rax
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1+0xe4
// 28a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x102
// 294: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000296:  R_X86_64_64  .rodata.str1.1+0x141
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  __assert_fail
// 2a8: ba 4d 00 00 00                movl    $0x4d, %edx
// 2ad: ff d0                         callq   *%rax
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1+0x9d
// 2b9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1+0xb0
// 2c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1+0x39
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  __assert_fail
// 2d7: ba 59 00 00 00                movl    $0x59, %edx
// 2dc: ff d0                         callq   *%rax
// 2de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e0:  R_X86_64_64  .rodata.str1.1+0x9d
// 2e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ea:  R_X86_64_64  .rodata.str1.1+0xb0
// 2f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f4:  R_X86_64_64  .rodata.str1.1+0x39
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  __assert_fail
// 306: ba 5b 00 00 00                movl    $0x5b, %edx
// 30b: ff d0                         callq   *%rax
// 30d: 
static const unsigned char _COMPARE_OP_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xc1, 0xe8, 0x05, 0x83, 0xf8, 0x06, 0x0f, 0x8d, 0x20, 0x02, 0x00, 0x00, 0x49, 0x89, 0xf7, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x4c, 0x8b, 0x23, 0x49, 0x8b, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x14, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x23, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x79, 0x45, 0xeb, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdd, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe8, 0x78, 0x40, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x35, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x7d, 0x48, 0x63, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc4, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc7, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x85, 0xff, 0x0f, 0x8e, 0x90, 0x00, 0x00, 0x00, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0xaf, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x44, 0x24, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5c, 0x24, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x36, 0x07, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _COMPARE_OP_code_holes[38] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe4},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x102},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x141},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9d},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9d},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(oparg >> 5) <= Py_GE\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 177: 00
static const unsigned char _COMPARE_OP_data_body[377] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3e, 0x3e, 0x20, 0x35, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x50, 0x79, 0x5f, 0x47, 0x45, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _COMPARE_OP_data_holes[1];

// _COMPARE_OP_FLOAT
// 
// /tmp/tmp3v1aptj0/_COMPARE_OP_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 f6                      movq    %rsi, %r14
// 10: 48 89 fb                      movq    %rdi, %rbx
// 13: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  PyFloat_Type
// 21: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 25: 75 0b                         jne     0x32 <_JIT_ENTRY+0x32>
// 27: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 2b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 30: 74 4a                         je      0x7c <_JIT_ENTRY+0x7c>
// 32: 49 29 de                      subq    %rbx, %r14
// 35: 49 83 c6 b8                   addq    $-0x48, %r14
// 39: 49 c1 ee 03                   shrq    $0x3, %r14
// 3d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 41: 48 8b 03                      movq    (%rbx), %rax
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  PyCode_Type
// 4e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 52: 0f 85 68 01 00 00             jne     0x1c0 <_JIT_ENTRY+0x1c0>
// 58: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005a:  R_X86_64_64  _JIT_TARGET
// 62: 89 c9                         movl    %ecx, %ecx
// 64: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 68: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6e: 48 83 c4 10                   addq    $0x10, %rsp
// 72: 5b                            popq    %rbx
// 73: 41 5c                         popq    %r12
// 75: 41 5d                         popq    %r13
// 77: 41 5e                         popq    %r14
// 79: 41 5f                         popq    %r15
// 7b: c3                            retq
// 7c: 49 89 d7                      movq    %rdx, %r15
// 7f: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 85: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 8b: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 92: f2 0f 11 04 24                movsd   %xmm0, (%rsp)
// 97: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 9c: 75 29                         jne     0xc7 <_JIT_ENTRY+0xc7>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  PyInterpreterState_Get
// a8: ff d0                         callq   *%rax
// aa: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// b1: 49 8b 45 00                   movq    (%r13), %rax
// b5: 48 89 c1                      movq    %rax, %rcx
// b8: 48 ff c9                      decq    %rcx
// bb: 49 89 4d 00                   movq    %rcx, (%r13)
// bf: 74 6a                         je      0x12b <_JIT_ENTRY+0x12b>
// c1: 48 83 f8 01                   cmpq    $0x1, %rax
// c5: 7e 35                         jle     0xfc <_JIT_ENTRY+0xfc>
// c7: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// cd: 0f 85 80 00 00 00             jne     0x153 <_JIT_ENTRY+0x153>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  PyInterpreterState_Get
// dd: ff d0                         callq   *%rax
// df: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// e6: 49 8b 04 24                   movq    (%r12), %rax
// ea: 48 89 c1                      movq    %rax, %rcx
// ed: 48 ff c9                      decq    %rcx
// f0: 49 89 0c 24                   movq    %rcx, (%r12)
// f4: 74 4e                         je      0x144 <_JIT_ENTRY+0x144>
// f6: 48 83 f8 01                   cmpq    $0x1, %rax
// fa: 7f 57                         jg      0x153 <_JIT_ENTRY+0x153>
// fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fe:  R_X86_64_64  .rodata.str1.1+0x93
// 106: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1+0xa5
// 110: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000112:  R_X86_64_64  .rodata.str1.1+0xe5
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  __assert_fail
// 124: ba b8 00 00 00                movl    $0xb8, %edx
// 129: ff d0                         callq   *%rax
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _PyFloat_ExactDealloc
// 135: 4c 89 ef                      movq    %r13, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 140: 74 91                         je      0xd3 <_JIT_ENTRY+0xd3>
// 142: eb 0f                         jmp     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyFloat_ExactDealloc
// 14e: 4c 89 e7                      movq    %r12, %rdi
// 151: ff d0                         callq   *%rax
// 153: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 157: 31 c0                         xorl    %eax, %eax
// 159: f2 0f 10 44 24 08             movsd   0x8(%rsp), %xmm0        # xmm0 = mem[0],zero
// 15f: f2 0f 10 0c 24                movsd   (%rsp), %xmm1           # xmm1 = mem[0],zero
// 164: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 168: 0f 93 c0                      setae   %al
// 16b: 01 c0                         addl    %eax, %eax
// 16d: 31 c9                         xorl    %ecx, %ecx
// 16f: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 173: 0f 93 c1                      setae   %cl
// 176: 09 c1                         orl     %eax, %ecx
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _JIT_OPARG
// 182: 0f a3 c8                      btl     %ecx, %eax
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_FalseStruct
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _Py_TrueStruct
// 199: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 19d: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_CONTINUE
// 1ab: 48 89 df                      movq    %rbx, %rdi
// 1ae: 4c 89 fa                      movq    %r15, %rdx
// 1b1: 48 83 c4 10                   addq    $0x10, %rsp
// 1b5: 5b                            popq    %rbx
// 1b6: 41 5c                         popq    %r12
// 1b8: 41 5d                         popq    %r13
// 1ba: 41 5e                         popq    %r14
// 1bc: 41 5f                         popq    %r15
// 1be: ff e0                         jmpq    *%rax
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001cc:  R_X86_64_64  .rodata.str1.1+0x1e
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x5d
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  __assert_fail
// 1e8: ba 4d 00 00 00                movl    $0x4d, %edx
// 1ed: ff d0                         callq   *%rax
// 1ef: 
static const unsigned char _COMPARE_OP_FLOAT_code_body[496] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x0b, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x4a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x68, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x89, 0xd7, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x04, 0x24, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x6a, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x35, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0c, 0x24, 0x74, 0x4e, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x74, 0x91, 0xeb, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x08, 0xf2, 0x0f, 0x10, 0x0c, 0x24, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _COMPARE_OP_FLOAT_code_holes[20] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa5},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe5},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00'
// 11f: 00
static const unsigned char _COMPARE_OP_FLOAT_data_body[289] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x00};
static const Hole _COMPARE_OP_FLOAT_data_holes[1];

// _COMPARE_OP_INT
// 
// /tmp/tmp3v1aptj0/_COMPARE_OP_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyLong_Type
// 22: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 26: 75 2d                         jne     0x55 <_JIT_ENTRY+0x55>
// 28: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 2c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 31: 75 22                         jne     0x55 <_JIT_ENTRY+0x55>
// 33: f6 80 ab 00 00 00 01          testb   $0x1, 0xab(%rax)
// 3a: 0f 84 de 01 00 00             je      0x21e <_JIT_ENTRY+0x21e>
// 40: 49 8b 6d 10                   movq    0x10(%r13), %rbp
// 44: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 48: 77 0b                         ja      0x55 <_JIT_ENTRY+0x55>
// 4a: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 4f: 48 83 f8 0f                   cmpq    $0xf, %rax
// 53: 76 4b                         jbe     0xa0 <_JIT_ENTRY+0xa0>
// 55: 49 29 de                      subq    %rbx, %r14
// 58: 49 83 c6 b8                   addq    $-0x48, %r14
// 5c: 49 c1 ee 03                   shrq    $0x3, %r14
// 60: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 64: 48 8b 03                      movq    (%rbx), %rax
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  PyCode_Type
// 71: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 75: 0f 85 74 01 00 00             jne     0x1ef <_JIT_ENTRY+0x1ef>
// 7b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007d:  R_X86_64_64  _JIT_TARGET
// 85: 89 c9                         movl    %ecx, %ecx
// 87: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 8b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 91: 48 83 c4 18                   addq    $0x18, %rsp
// 95: 5b                            popq    %rbx
// 96: 41 5c                         popq    %r12
// 98: 41 5d                         popq    %r13
// 9a: 41 5e                         popq    %r14
// 9c: 41 5f                         popq    %r15
// 9e: 5d                            popq    %rbp
// 9f: c3                            retq
// a0: 49 89 d7                      movq    %rdx, %r15
// a3: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// a8: 41 8b 45 18                   movl    0x18(%r13), %eax
// ac: 48 89 04 24                   movq    %rax, (%rsp)
// b0: 41 8b 44 24 18                movl    0x18(%r12), %eax
// b5: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// ba: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// bf: 75 3a                         jne     0xfb <_JIT_ENTRY+0xfb>
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  PyInterpreterState_Get
// cb: ff d0                         callq   *%rax
// cd: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// d4: 49 8b 45 00                   movq    (%r13), %rax
// d8: 48 89 c1                      movq    %rax, %rcx
// db: 48 ff c9                      decq    %rcx
// de: 49 89 4d 00                   movq    %rcx, (%r13)
// e2: 74 08                         je      0xec <_JIT_ENTRY+0xec>
// e4: 48 83 f8 01                   cmpq    $0x1, %rax
// e8: 7f 11                         jg      0xfb <_JIT_ENTRY+0xfb>
// ea: eb 40                         jmp     0x12c <_JIT_ENTRY+0x12c>
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  PyObject_Free
// f6: 4c 89 ef                      movq    %r13, %rdi
// f9: ff d0                         callq   *%rax
// fb: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 101: 75 67                         jne     0x16a <_JIT_ENTRY+0x16a>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 89 c1                      movq    %rax, %rcx
// 11d: 48 ff c9                      decq    %rcx
// 120: 49 89 0c 24                   movq    %rcx, (%r12)
// 124: 74 35                         je      0x15b <_JIT_ENTRY+0x15b>
// 126: 48 83 f8 01                   cmpq    $0x1, %rax
// 12a: 7f 3e                         jg      0x16a <_JIT_ENTRY+0x16a>
// 12c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012e:  R_X86_64_64  .rodata.str1.1+0x93
// 136: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1+0xa5
// 140: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000142:  R_X86_64_64  .rodata.str1.1+0xe5
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  __assert_fail
// 154: ba b8 00 00 00                movl    $0xb8, %edx
// 159: ff d0                         callq   *%rax
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  PyObject_Free
// 165: 4c 89 e7                      movq    %r12, %rdi
// 168: ff d0                         callq   *%rax
// 16a: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 16e: 83 e5 03                      andl    $0x3, %ebp
// 171: b8 01 00 00 00                movl    $0x1, %eax
// 176: b9 01 00 00 00                movl    $0x1, %ecx
// 17b: 48 29 e9                      subq    %rbp, %rcx
// 17e: 48 0f af 0c 24                imulq   (%rsp), %rcx
// 183: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 188: 83 e2 03                      andl    $0x3, %edx
// 18b: 48 29 d0                      subq    %rdx, %rax
// 18e: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 194: 31 d2                         xorl    %edx, %edx
// 196: 31 ff                         xorl    %edi, %edi
// 198: 48 39 c1                      cmpq    %rax, %rcx
// 19b: 0f 9d c2                      setge   %dl
// 19e: 40 0f 9e c7                   setle   %dil
// 1a2: 01 d2                         addl    %edx, %edx
// 1a4: 09 d7                         orl     %edx, %edi
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_OPARG
// 1b0: 0f a3 f8                      btl     %edi, %eax
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_FalseStruct
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  _Py_TrueStruct
// 1c7: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 1cb: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_CONTINUE
// 1d9: 48 89 df                      movq    %rbx, %rdi
// 1dc: 4c 89 fa                      movq    %r15, %rdx
// 1df: 48 83 c4 18                   addq    $0x18, %rsp
// 1e3: 5b                            popq    %rbx
// 1e4: 41 5c                         popq    %r12
// 1e6: 41 5d                         popq    %r13
// 1e8: 41 5e                         popq    %r14
// 1ea: 41 5f                         popq    %r15
// 1ec: 5d                            popq    %rbp
// 1ed: ff e0                         jmpq    *%rax
// 1ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f1:  R_X86_64_64  .rodata.str1.1
// 1f9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1+0x1e
// 203: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000205:  R_X86_64_64  .rodata.str1.1+0x5d
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  __assert_fail
// 217: ba 4d 00 00 00                movl    $0x4d, %edx
// 21c: ff d0                         callq   *%rax
// 21e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000220:  R_X86_64_64  .rodata.str1.1+0x11f
// 228: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022a:  R_X86_64_64  .rodata.str1.1+0x162
// 232: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000234:  R_X86_64_64  .rodata.str1.1+0x19f
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  __assert_fail
// 246: ba 70 00 00 00                movl    $0x70, %edx
// 24b: ff d0                         callq   *%rax
// 24d: 
static const unsigned char _COMPARE_OP_INT_code_body[590] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x2d, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x22, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x84, 0xde, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6d, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x77, 0x0b, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x83, 0xf8, 0x0f, 0x76, 0x4b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x74, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x04, 0x24, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x08, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x11, 0xeb, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0c, 0x24, 0x74, 0x35, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x3e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xff, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc7, 0x01, 0xd2, 0x09, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x70, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _COMPARE_OP_INT_code_holes[24] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa5},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe5},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x205, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11f},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x162},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19f},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00PyType_HasFeature((op)->ob_base.ob_type, Py_TPFLAGS_LONG_SUBCLASS)\x00/home/jglass/Documents/cpython/Include/cpython/longintrepr.h\x00int _PyLong_IsCompact(const PyLongObject *)\x00'
// 1cb: 00 00 00 00 00
static const unsigned char _COMPARE_OP_INT_data_body[465] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x50, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x61, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x28, 0x28, 0x6f, 0x70, 0x29, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x72, 0x2e, 0x68, 0x00, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _COMPARE_OP_INT_data_holes[1];

// _COMPARE_OP_STR
// 
// /tmp/tmp3v1aptj0/_COMPARE_OP_STR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyUnicode_Type
// 1f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 23: 75 0b                         jne     0x30 <_JIT_ENTRY+0x30>
// 25: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 29: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 2e: 74 4b                         je      0x7b <_JIT_ENTRY+0x7b>
// 30: 49 29 de                      subq    %rbx, %r14
// 33: 49 83 c6 b8                   addq    $-0x48, %r14
// 37: 49 c1 ee 03                   shrq    $0x3, %r14
// 3b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3f: 48 8b 03                      movq    (%rbx), %rax
// 42: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000044:  R_X86_64_64  PyCode_Type
// 4c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 50: 0f 85 8a 01 00 00             jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 56: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000058:  R_X86_64_64  _JIT_TARGET
// 60: 89 c9                         movl    %ecx, %ecx
// 62: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 66: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6c: 48 83 c4 08                   addq    $0x8, %rsp
// 70: 5b                            popq    %rbx
// 71: 41 5c                         popq    %r12
// 73: 41 5d                         popq    %r13
// 75: 41 5e                         popq    %r14
// 77: 41 5f                         popq    %r15
// 79: 5d                            popq    %rbp
// 7a: c3                            retq
// 7b: 49 89 d7                      movq    %rdx, %r15
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _PyUnicode_Equal
// 88: 4c 89 ef                      movq    %r13, %rdi
// 8b: 4c 89 e6                      movq    %r12, %rsi
// 8e: ff d0                         callq   *%rax
// 90: 89 c5                         movl    %eax, %ebp
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _JIT_OPARG
// 9c: 0f b7 c0                      movzwl  %ax, %eax
// 9f: c1 e8 05                      shrl    $0x5, %eax
// a2: 83 c0 fe                      addl    $-0x2, %eax
// a5: a9 fe ff ff ff                testl   $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// aa: 0f 85 5f 01 00 00             jne     0x20f <_JIT_ENTRY+0x20f>
// b0: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// b5: 75 29                         jne     0xe0 <_JIT_ENTRY+0xe0>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  PyInterpreterState_Get
// c1: ff d0                         callq   *%rax
// c3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ca: 49 8b 45 00                   movq    (%r13), %rax
// ce: 48 89 c1                      movq    %rax, %rcx
// d1: 48 ff c9                      decq    %rcx
// d4: 49 89 4d 00                   movq    %rcx, (%r13)
// d8: 74 6a                         je      0x144 <_JIT_ENTRY+0x144>
// da: 48 83 f8 01                   cmpq    $0x1, %rax
// de: 7e 35                         jle     0x115 <_JIT_ENTRY+0x115>
// e0: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// e6: 0f 85 80 00 00 00             jne     0x16c <_JIT_ENTRY+0x16c>
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  PyInterpreterState_Get
// f6: ff d0                         callq   *%rax
// f8: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ff: 49 8b 04 24                   movq    (%r12), %rax
// 103: 48 89 c1                      movq    %rax, %rcx
// 106: 48 ff c9                      decq    %rcx
// 109: 49 89 0c 24                   movq    %rcx, (%r12)
// 10d: 74 4e                         je      0x15d <_JIT_ENTRY+0x15d>
// 10f: 48 83 f8 01                   cmpq    $0x1, %rax
// 113: 7f 57                         jg      0x16c <_JIT_ENTRY+0x16c>
// 115: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000117:  R_X86_64_64  .rodata.str1.1+0x1a9
// 11f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000121:  R_X86_64_64  .rodata.str1.1+0x1bb
// 129: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012b:  R_X86_64_64  .rodata.str1.1+0x1fb
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  __assert_fail
// 13d: ba b8 00 00 00                movl    $0xb8, %edx
// 142: ff d0                         callq   *%rax
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyUnicode_ExactDealloc
// 14e: 4c 89 ef                      movq    %r13, %rdi
// 151: ff d0                         callq   *%rax
// 153: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 159: 74 91                         je      0xec <_JIT_ENTRY+0xec>
// 15b: eb 0f                         jmp     0x16c <_JIT_ENTRY+0x16c>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _PyUnicode_ExactDealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 83 fd 02                      cmpl    $0x2, %ebp
// 16f: 0f 83 c9 00 00 00             jae     0x23e <_JIT_ENTRY+0x23e>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_OPARG
// 17f: 83 e0 0f                      andl    $0xf, %eax
// 182: 83 c0 f9                      addl    $-0x7, %eax
// 185: a9 fe ff ff ff                testl   $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 18a: 0f 85 dd 00 00 00             jne     0x26d <_JIT_ENTRY+0x26d>
// 190: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 194: 83 c5 07                      addl    $0x7, %ebp
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 66 85 e8                      testw   %bp, %ax
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_FalseStruct
// 1ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b0:  R_X86_64_64  _Py_TrueStruct
// 1b8: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1bc: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _JIT_CONTINUE
// 1ca: 48 89 df                      movq    %rbx, %rdi
// 1cd: 4c 89 fa                      movq    %r15, %rdx
// 1d0: 48 83 c4 08                   addq    $0x8, %rsp
// 1d4: 5b                            popq    %rbx
// 1d5: 41 5c                         popq    %r12
// 1d7: 41 5d                         popq    %r13
// 1d9: 41 5e                         popq    %r14
// 1db: 41 5f                         popq    %r15
// 1dd: 5d                            popq    %rbp
// 1de: ff e0                         jmpq    *%rax
// 1e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e2:  R_X86_64_64  .rodata.str1.1+0x116
// 1ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ec:  R_X86_64_64  .rodata.str1.1+0x134
// 1f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f6:  R_X86_64_64  .rodata.str1.1+0x173
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  __assert_fail
// 208: ba 4d 00 00 00                movl    $0x4d, %edx
// 20d: ff d0                         callq   *%rax
// 20f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000211:  R_X86_64_64  .rodata.str1.1+0x87
// 219: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000225:  R_X86_64_64  .rodata.str1.1+0x39
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  __assert_fail
// 237: ba 83 07 00 00                movl    $0x783, %edx            # imm = 0x783
// 23c: ff d0                         callq   *%rax
// 23e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1+0xb6
// 248: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000254:  R_X86_64_64  .rodata.str1.1+0x39
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  __assert_fail
// 266: ba 86 07 00 00                movl    $0x786, %edx            # imm = 0x786
// 26b: ff d0                         callq   *%rax
// 26d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026f:  R_X86_64_64  .rodata.str1.1+0xc9
// 277: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000279:  R_X86_64_64  .rodata.str1.1
// 281: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000283:  R_X86_64_64  .rodata.str1.1+0x39
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  __assert_fail
// 295: ba 87 07 00 00                movl    $0x787, %edx            # imm = 0x787
// 29a: ff d0                         callq   *%rax
// 29c: 
static const unsigned char _COMPARE_OP_STR_code_body[669] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x0b, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x4b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xc1, 0xe8, 0x05, 0x83, 0xc0, 0xfe, 0xa9, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x85, 0x5f, 0x01, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x74, 0x6a, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x35, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x0f, 0x85, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0c, 0x24, 0x74, 0x4e, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x74, 0x91, 0xeb, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xfd, 0x02, 0x0f, 0x83, 0xc9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x0f, 0x83, 0xc0, 0xf9, 0xa9, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x76, 0xf8, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x83, 0x07, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x07, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x07, 0x00, 0x00, 0xff, 0xd0};
static const Hole _COMPARE_OP_STR_code_holes[35] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a9},
    {0x121, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1bb},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1fb},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x116},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x134},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x173},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb6},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc9},
    {0x279, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(oparg >> 5) == Py_EQ || (oparg >> 5) == Py_NE\x00eq == 0 || eq == 1\x00(oparg & 0xf) == COMPARISON_NOT_EQUALS || (oparg & 0xf) == COMPARISON_EQUALS\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00'
// 235: 00 00 00
static const unsigned char _COMPARE_OP_STR_data_body[569] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3e, 0x3e, 0x20, 0x35, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x50, 0x79, 0x5f, 0x45, 0x51, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3e, 0x3e, 0x20, 0x35, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x50, 0x79, 0x5f, 0x4e, 0x45, 0x00, 0x65, 0x71, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x65, 0x71, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x00, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _COMPARE_OP_STR_data_holes[1];

// _CONTAINS_OP
// 
// /tmp/tmp3v1aptj0/_CONTAINS_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001f:  R_X86_64_64  PySequence_Contains
// 27: 4c 89 e7                      movq    %r12, %rdi
// 2a: 4c 89 ee                      movq    %r13, %rsi
// 2d: ff d0                         callq   *%rax
// 2f: 89 c5                         movl    %eax, %ebp
// 31: 49 8b 45 00                   movq    (%r13), %rax
// 35: 48 85 c0                      testq   %rax, %rax
// 38: 7e 10                         jle     0x4a <_JIT_ENTRY+0x4a>
// 3a: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000003c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 32                         jns     0x7a <_JIT_ENTRY+0x7a>
// 48: eb 39                         jmp     0x83 <_JIT_ENTRY+0x83>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 63: 4c 89 ea                      movq    %r13, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 45 00                   movq    (%r13), %rax
// 6c: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000006e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 76: 85 c0                         testl   %eax, %eax
// 78: 78 09                         js      0x83 <_JIT_ENTRY+0x83>
// 7a: 41 ff d6                      callq   *%r14
// 7d: 49 ff 4d 00                   decq    (%r13)
// 81: 74 0f                         je      0x92 <_JIT_ENTRY+0x92>
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7e 1e                         jle     0xaa <_JIT_ENTRY+0xaa>
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 79 40                         jns     0xd0 <_JIT_ENTRY+0xd0>
// 90: eb 47                         jmp     0xd9 <_JIT_ENTRY+0xd9>
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_Dealloc
// 9c: 4c 89 ef                      movq    %r13, %rdi
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 04 24                   movq    (%r12), %rax
// a5: 48 85 c0                      testq   %rax, %rax
// a8: 7f e2                         jg      0x8c <_JIT_ENTRY+0x8c>
// aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_NegativeRefcount
// be: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// c3: 4c 89 e2                      movq    %r12, %rdx
// c6: ff d0                         callq   *%rax
// c8: 49 8b 04 24                   movq    (%r12), %rax
// cc: 85 c0                         testl   %eax, %eax
// ce: 78 09                         js      0xd9 <_JIT_ENTRY+0xd9>
// d0: 41 ff d6                      callq   *%r14
// d3: 49 ff 0c 24                   decq    (%r12)
// d7: 74 57                         je      0x130 <_JIT_ENTRY+0x130>
// d9: 49 8d 77 f8                   leaq    -0x8(%r15), %rsi
// dd: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// e1: 85 ed                         testl   %ebp, %ebp
// e3: 78 66                         js      0x14b <_JIT_ENTRY+0x14b>
// e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e7:  R_X86_64_64  _JIT_OPARG
// ef: 0f b7 c9                      movzwl  %cx, %ecx
// f2: 39 cd                         cmpl    %ecx, %ebp
// f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f6:  R_X86_64_64  _Py_FalseStruct
// fe: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000100:  R_X86_64_64  _Py_TrueStruct
// 108: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 10c: 48 89 10                      movq    %rdx, (%rax)
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _JIT_CONTINUE
// 119: 48 89 df                      movq    %rbx, %rdi
// 11c: 48 8b 14 24                   movq    (%rsp), %rdx
// 120: 48 83 c4 08                   addq    $0x8, %rsp
// 124: 5b                            popq    %rbx
// 125: 41 5c                         popq    %r12
// 127: 41 5d                         popq    %r13
// 129: 41 5e                         popq    %r14
// 12b: 41 5f                         popq    %r15
// 12d: 5d                            popq    %rbp
// 12e: ff e0                         jmpq    *%rax
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 4c 89 e7                      movq    %r12, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8d 77 f8                   leaq    -0x8(%r15), %rsi
// 143: 49 8d 47 f0                   leaq    -0x10(%r15), %rax
// 147: 85 ed                         testl   %ebp, %ebp
// 149: 79 9a                         jns     0xe5 <_JIT_ENTRY+0xe5>
// 14b: 48 8b 0b                      movq    (%rbx), %rcx
// 14e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000150:  R_X86_64_64  PyCode_Type
// 158: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 15c: 75 42                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 15e: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 162: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 166: 48 83 c1 48                   addq    $0x48, %rcx
// 16a: 49 29 cf                      subq    %rcx, %r15
// 16d: 49 c1 ef 03                   shrq    $0x3, %r15
// 171: 45 85 ff                      testl   %r15d, %r15d
// 174: 7e 59                         jle     0x1cf <_JIT_ENTRY+0x1cf>
// 176: 48 29 ce                      subq    %rcx, %rsi
// 179: 48 c1 ee 03                   shrq    $0x3, %rsi
// 17d: 85 f6                         testl   %esi, %esi
// 17f: 7e 7d                         jle     0x1fe <_JIT_ENTRY+0x1fe>
// 181: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 185: 48 29 c8                      subq    %rcx, %rax
// 188: 48 c1 e8 03                   shrq    $0x3, %rax
// 18c: 89 43 40                      movl    %eax, 0x40(%rbx)
// 18f: 31 c0                         xorl    %eax, %eax
// 191: 48 83 c4 08                   addq    $0x8, %rsp
// 195: 5b                            popq    %rbx
// 196: 41 5c                         popq    %r12
// 198: 41 5d                         popq    %r13
// 19a: 41 5e                         popq    %r14
// 19c: 41 5f                         popq    %r15
// 19e: 5d                            popq    %rbp
// 19f: c3                            retq
// 1a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a2:  R_X86_64_64  .rodata.str1.1+0xce
// 1aa: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ac:  R_X86_64_64  .rodata.str1.1+0xec
// 1b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1+0x12b
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  __assert_fail
// 1c8: ba 4d 00 00 00                movl    $0x4d, %edx
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d1:  R_X86_64_64  .rodata.str1.1+0x87
// 1d9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001db:  R_X86_64_64  .rodata.str1.1+0x9a
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  .rodata.str1.1+0x39
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  __assert_fail
// 1f7: ba 59 00 00 00                movl    $0x59, %edx
// 1fc: ff d0                         callq   *%rax
// 1fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1+0x87
// 208: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000020a:  R_X86_64_64  .rodata.str1.1+0x9a
// 212: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000214:  R_X86_64_64  .rodata.str1.1+0x39
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  __assert_fail
// 226: ba 5b 00 00 00                movl    $0x5b, %edx
// 22b: ff d0                         callq   *%rax
// 22d: 
static const unsigned char _CONTAINS_OP_code_body[558] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x57, 0x49, 0x8d, 0x77, 0xf8, 0x49, 0x8d, 0x47, 0xf0, 0x85, 0xed, 0x78, 0x66, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x77, 0xf8, 0x49, 0x8d, 0x47, 0xf0, 0x85, 0xed, 0x79, 0x9a, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x42, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xcf, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x85, 0xff, 0x7e, 0x59, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CONTAINS_OP_code_holes[27] = {
    {0x1f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x214, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _CONTAINS_OP_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CONTAINS_OP_data_holes[1];

// _CONVERT_VALUE
// 
// /tmp/tmp3v1aptj0/_CONVERT_VALUE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_OPARG
// 15: 0f b7 c0                      movzwl  %ax, %eax
// 18: 83 f8 04                      cmpl    $0x4, %eax
// 1b: 0f 9c c1                      setl    %cl
// 1e: 85 c0                         testl   %eax, %eax
// 20: 0f 9f c0                      setg    %al
// 23: 84 c8                         testb   %cl, %al
// 25: 0f 84 01 01 00 00             je      0x12c <_JIT_ENTRY+0x12c>
// 2b: 49 89 d7                      movq    %rdx, %r15
// 2e: 49 89 f6                      movq    %rsi, %r14
// 31: 48 89 fb                      movq    %rdi, %rbx
// 34: 48 8d 6e f8                   leaq    -0x8(%rsi), %rbp
// 38: 4c 8b 65 00                   movq    (%rbp), %r12
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _JIT_OPARG
// 46: 0f b7 c0                      movzwl  %ax, %eax
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  .rodata
// 53: 4c 89 e7                      movq    %r12, %rdi
// 56: ff 14 c1                      callq   *(%rcx,%rax,8)
// 59: 49 89 c5                      movq    %rax, %r13
// 5c: 49 8b 04 24                   movq    (%r12), %rax
// 60: 48 85 c0                      testq   %rax, %rax
// 63: 7e 06                         jle     0x6b <_JIT_ENTRY+0x6b>
// 65: 85 c0                         testl   %eax, %eax
// 67: 79 28                         jns     0x91 <_JIT_ENTRY+0x91>
// 69: eb 38                         jmp     0xa3 <_JIT_ENTRY+0xa3>
// 6b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006d:  R_X86_64_64  .rodata.str1.1
// 75: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000077:  R_X86_64_64  _Py_NegativeRefcount
// 7f: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 84: 4c 89 e2                      movq    %r12, %rdx
// 87: ff d0                         callq   *%rax
// 89: 49 8b 04 24                   movq    (%r12), %rax
// 8d: 85 c0                         testl   %eax, %eax
// 8f: 78 12                         js      0xa3 <_JIT_ENTRY+0xa3>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9b: ff d0                         callq   *%rax
// 9d: 49 ff 0c 24                   decq    (%r12)
// a1: 74 2c                         je      0xcf <_JIT_ENTRY+0xcf>
// a3: 4d 85 ed                      testq   %r13, %r13
// a6: 74 3b                         je      0xe3 <_JIT_ENTRY+0xe3>
// a8: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _JIT_CONTINUE
// b6: 48 89 df                      movq    %rbx, %rdi
// b9: 4c 89 f6                      movq    %r14, %rsi
// bc: 4c 89 fa                      movq    %r15, %rdx
// bf: 48 83 c4 08                   addq    $0x8, %rsp
// c3: 5b                            popq    %rbx
// c4: 41 5c                         popq    %r12
// c6: 41 5d                         popq    %r13
// c8: 41 5e                         popq    %r14
// ca: 41 5f                         popq    %r15
// cc: 5d                            popq    %rbp
// cd: ff e0                         jmpq    *%rax
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_Dealloc
// d9: 4c 89 e7                      movq    %r12, %rdi
// dc: ff d0                         callq   *%rax
// de: 4d 85 ed                      testq   %r13, %r13
// e1: 75 c5                         jne     0xa8 <_JIT_ENTRY+0xa8>
// e3: 48 8b 03                      movq    (%rbx), %rax
// e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e8:  R_X86_64_64  PyCode_Type
// f0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// f4: 75 65                         jne     0x15b <_JIT_ENTRY+0x15b>
// f6: 8b 40 48                      movl    0x48(%rax), %eax
// f9: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// fd: 48 83 c0 48                   addq    $0x48, %rax
// 101: 49 29 c6                      subq    %rax, %r14
// 104: 49 c1 ee 03                   shrq    $0x3, %r14
// 108: 45 85 f6                      testl   %r14d, %r14d
// 10b: 7e 7d                         jle     0x18a <_JIT_ENTRY+0x18a>
// 10d: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 111: 48 29 c5                      subq    %rax, %rbp
// 114: 48 c1 ed 03                   shrq    $0x3, %rbp
// 118: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 11b: 31 c0                         xorl    %eax, %eax
// 11d: 48 83 c4 08                   addq    $0x8, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: c3                            retq
// 12c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012e:  R_X86_64_64  .rodata.str1.1+0x9a
// 136: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000142:  R_X86_64_64  .rodata.str1.1+0x39
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  __assert_fail
// 154: ba 95 0c 00 00                movl    $0xc95, %edx            # imm = 0xC95
// 159: ff d0                         callq   *%rax
// 15b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015d:  R_X86_64_64  .rodata.str1.1+0xf5
// 165: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000167:  R_X86_64_64  .rodata.str1.1+0x113
// 16f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000171:  R_X86_64_64  .rodata.str1.1+0x152
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  __assert_fail
// 183: ba 4d 00 00 00                movl    $0x4d, %edx
// 188: ff d0                         callq   *%rax
// 18a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018c:  R_X86_64_64  .rodata.str1.1+0x87
// 194: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000196:  R_X86_64_64  .rodata.str1.1+0xc1
// 19e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a0:  R_X86_64_64  .rodata.str1.1+0x39
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  __assert_fail
// 1b2: ba 5b 00 00 00                movl    $0x5b, %edx
// 1b7: ff d0                         callq   *%rax
// 1b9: 
static const unsigned char _CONVERT_VALUE_code_body[442] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x04, 0x0f, 0x9c, 0xc1, 0x85, 0xc0, 0x0f, 0x9f, 0xc0, 0x84, 0xc8, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8d, 0x6e, 0xf8, 0x4c, 0x8b, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x4d, 0x85, 0xed, 0x74, 0x3b, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x65, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x43, 0x48, 0x48, 0x29, 0xc5, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x95, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CONVERT_VALUE_code_holes[22] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x188},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf5},
    {0x167, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x113},
    {0x171, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x152},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x196, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc1},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00oparg >= FVC_STR && oparg <= FVC_ASCII\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 1a8: 
static const unsigned char _CONVERT_VALUE_data_body[425] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3e, 0x3d, 0x20, 0x46, 0x56, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x20, 0x26, 0x26, 0x20, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3c, 0x3d, 0x20, 0x46, 0x56, 0x43, 0x5f, 0x41, 0x53, 0x43, 0x49, 0x49, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CONVERT_VALUE_data_holes[4] = {
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _COPY
// 
// /tmp/tmp3v1aptj0/_COPY.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPARG
// 12: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 17: 7e 58                         jle     0x71 <_JIT_ENTRY+0x71>
// 19: 48 89 d3                      movq    %rdx, %rbx
// 1c: 49 89 f6                      movq    %rsi, %r14
// 1f: 49 89 ff                      movq    %rdi, %r15
// 22: 0f b7 c0                      movzwl  %ax, %eax
// 25: 48 c1 e0 03                   shlq    $0x3, %rax
// 29: 48 89 f1                      movq    %rsi, %rcx
// 2c: 48 29 c1                      subq    %rax, %rcx
// 2f: 4c 8b 21                      movq    (%rcx), %r12
// 32: 41 8b 04 24                   movl    (%r12), %eax
// 36: ff c0                         incl    %eax
// 38: 74 10                         je      0x4a <_JIT_ENTRY+0x4a>
// 3a: 41 89 04 24                   movl    %eax, (%r12)
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 48: ff d0                         callq   *%rax
// 4a: 4d 89 26                      movq    %r12, (%r14)
// 4d: 49 83 c6 08                   addq    $0x8, %r14
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_CONTINUE
// 5b: 4c 89 ff                      movq    %r15, %rdi
// 5e: 4c 89 f6                      movq    %r14, %rsi
// 61: 48 89 da                      movq    %rbx, %rdx
// 64: 48 83 c4 08                   addq    $0x8, %rsp
// 68: 5b                            popq    %rbx
// 69: 41 5c                         popq    %r12
// 6b: 41 5e                         popq    %r14
// 6d: 41 5f                         popq    %r15
// 6f: ff e0                         jmpq    *%rax
// 71: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1+0x87
// 7b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000087:  R_X86_64_64  .rodata.str1.1+0x39
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  __assert_fail
// 99: ba c4 0c 00 00                movl    $0xcc4, %edx            # imm = 0xCC4
// 9e: ff d0                         callq   *%rax
// a0: 
static const unsigned char _COPY_code_body[161] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x58, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x21, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xc4, 0x0c, 0x00, 0x00, 0xff, 0xd0};
static const Hole _COPY_code_holes[8] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg > 0\x00'
// 91: 00 00 00 00 00 00 00
static const unsigned char _COPY_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _COPY_data_holes[1];

// _COPY_FREE_VARS
// 
// /tmp/tmp3v1aptj0/_COPY_FREE_VARS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 8b 07                      movq    (%rdi), %rax
// 11: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000013:  R_X86_64_64  PyCode_Type
// 1b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1f: 0f 85 11 01 00 00             jne     0x136 <_JIT_ENTRY+0x136>
// 25: 48 8b 4f 10                   movq    0x10(%rdi), %rcx
// 29: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000002b:  R_X86_64_64  PyFunction_Type
// 33: 4c 39 41 08                   cmpq    %r8, 0x8(%rcx)
// 37: 0f 85 28 01 00 00             jne     0x165 <_JIT_ENTRY+0x165>
// 3d: 48 89 3c 24                   movq    %rdi, (%rsp)
// 41: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 46: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 4b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: 0f b7 d2                      movzwl  %dx, %edx
// 58: 39 50 58                      cmpl    %edx, 0x58(%rax)
// 5b: 0f 85 33 01 00 00             jne     0x194 <_JIT_ENTRY+0x194>
// 61: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000063:  R_X86_64_64  _JIT_OPARG
// 6b: 66 85 d2                      testw   %dx, %dx
// 6e: 74 6f                         je      0xdf <_JIT_ENTRY+0xdf>
// 70: 4c 8b 61 48                   movq    0x48(%rcx), %r12
// 74: 8b 40 48                      movl    0x48(%rax), %eax
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 0f b7 c9                      movzwl  %cx, %ecx
// 84: 29 c8                         subl    %ecx, %eax
// 86: 83 f9 02                      cmpl    $0x2, %ecx
// 89: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 8f: 44 0f 43 e9                   cmovael %ecx, %r13d
// 93: 48 98                         cltq
// 95: 48 8b 0c 24                   movq    (%rsp), %rcx
// 99: 48 8d 2c c1                   leaq    (%rcx,%rax,8), %rbp
// 9d: 48 83 c5 48                   addq    $0x48, %rbp
// a1: 31 db                         xorl    %ebx, %ebx
// a3: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000a5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// ad: eb 0e                         jmp     0xbd <_JIT_ENTRY+0xbd>
// af: 90                            nop
// b0: 4c 89 7c dd 00                movq    %r15, (%rbp,%rbx,8)
// b5: 48 ff c3                      incq    %rbx
// b8: 49 39 dd                      cmpq    %rbx, %r13
// bb: 74 22                         je      0xdf <_JIT_ENTRY+0xdf>
// bd: 49 8b 44 24 08                movq    0x8(%r12), %rax
// c2: f6 80 ab 00 00 00 04          testb   $0x4, 0xab(%rax)
// c9: 74 3c                         je      0x107 <_JIT_ENTRY+0x107>
// cb: 4d 8b 7c dc 18                movq    0x18(%r12,%rbx,8), %r15
// d0: 41 8b 07                      movl    (%r15), %eax
// d3: ff c0                         incl    %eax
// d5: 74 d9                         je      0xb0 <_JIT_ENTRY+0xb0>
// d7: 41 89 07                      movl    %eax, (%r15)
// da: 41 ff d6                      callq   *%r14
// dd: eb d1                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _JIT_CONTINUE
// e9: 48 8b 3c 24                   movq    (%rsp), %rdi
// ed: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// f2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// f7: 48 83 c4 18                   addq    $0x18, %rsp
// fb: 5b                            popq    %rbx
// fc: 41 5c                         popq    %r12
// fe: 41 5d                         popq    %r13
// 100: 41 5e                         popq    %r14
// 102: 41 5f                         popq    %r15
// 104: 5d                            popq    %rbp
// 105: ff e0                         jmpq    *%rax
// 107: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000109:  R_X86_64_64  .rodata.str1.1+0xc4
// 111: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000113:  R_X86_64_64  .rodata.str1.1
// 11b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011d:  R_X86_64_64  .rodata.str1.1+0x39
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  __assert_fail
// 12f: ba 06 05 00 00                movl    $0x506, %edx            # imm = 0x506
// 134: ff d0                         callq   *%rax
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1+0xdb
// 140: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1+0xf9
// 14a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x138
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  __assert_fail
// 15e: ba 4d 00 00 00                movl    $0x4d, %edx
// 163: ff d0                         callq   *%rax
// 165: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000167:  R_X86_64_64  .rodata.str1.1+0x87
// 16f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000171:  R_X86_64_64  .rodata.str1.1
// 179: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017b:  R_X86_64_64  .rodata.str1.1+0x39
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  __assert_fail
// 18d: ba 01 05 00 00                movl    $0x501, %edx            # imm = 0x501
// 192: ff d0                         callq   *%rax
// 194: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000196:  R_X86_64_64  .rodata.str1.1+0xaa
// 19e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a0:  R_X86_64_64  .rodata.str1.1
// 1a8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001aa:  R_X86_64_64  .rodata.str1.1+0x39
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  __assert_fail
// 1bc: ba 03 05 00 00                movl    $0x503, %edx            # imm = 0x503
// 1c1: ff d0                         callq   *%rax
// 1c3: 
static const unsigned char _COPY_FREE_VARS_code_body[452] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x11, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4f, 0x10, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x41, 0x08, 0x0f, 0x85, 0x28, 0x01, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x39, 0x50, 0x58, 0x0f, 0x85, 0x33, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xd2, 0x74, 0x6f, 0x4c, 0x8b, 0x61, 0x48, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8d, 0x2c, 0xc1, 0x48, 0x83, 0xc5, 0x48, 0x31, 0xdb, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x90, 0x4c, 0x89, 0x7c, 0xdd, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x74, 0x22, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x04, 0x74, 0x3c, 0x4d, 0x8b, 0x7c, 0xdc, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xd9, 0x41, 0x89, 0x07, 0x41, 0xff, 0xd6, 0xeb, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x06, 0x05, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x01, 0x05, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x03, 0x05, 0x00, 0x00, 0xff, 0xd0};
static const Hole _COPY_FREE_VARS_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc4},
    {0x113, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdb},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf9},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x138},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x171, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xaa},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyFunction_Check(frame->f_funcobj)\x00oparg == co->co_nfreevars\x00PyTuple_Check(closure)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 16e: 00 00
static const unsigned char _COPY_FREE_VARS_data_body[369] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x3e, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x6f, 0x62, 0x6a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x63, 0x6f, 0x2d, 0x3e, 0x63, 0x6f, 0x5f, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x76, 0x61, 0x72, 0x73, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00};
static const Hole _COPY_FREE_VARS_data_holes[1];

// _DELETE_ATTR
// 
// /tmp/tmp3v1aptj0/_DELETE_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 8b 07                      movq    (%rdi), %rax
// e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000010:  R_X86_64_64  PyCode_Type
// 18: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1c: 0f 85 71 01 00 00             jne     0x193 <_JIT_ENTRY+0x193>
// 22: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 2a: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 31: 0f 84 8b 01 00 00             je      0x1c2 <_JIT_ENTRY+0x1c2>
// 37: 49 89 d7                      movq    %rdx, %r15
// 3a: b2 01                         movb    $0x1, %dl
// 3c: 84 d2                         testb   %dl, %dl
// 3e: 0f 84 ad 01 00 00             je      0x1f1 <_JIT_ENTRY+0x1f1>
// 44: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000046:  R_X86_64_64  PyLong_Type
// 4e: 48 39 d1                      cmpq    %rdx, %rcx
// 51: 0f 84 c9 01 00 00             je      0x220 <_JIT_ENTRY+0x220>
// 57: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000059:  R_X86_64_64  PyBool_Type
// 61: 48 39 d1                      cmpq    %rdx, %rcx
// 64: 0f 84 e5 01 00 00             je      0x24f <_JIT_ENTRY+0x24f>
// 6a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 0f b7 c9                      movzwl  %cx, %ecx
// 77: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 7b: 0f 8e fd 01 00 00             jle     0x27e <_JIT_ENTRY+0x27e>
// 81: 48 89 f3                      movq    %rsi, %rbx
// 84: 49 89 fe                      movq    %rdi, %r14
// 87: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  _JIT_OPARG
// 95: 0f b7 c9                      movzwl  %cx, %ecx
// 98: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  PyObject_DelAttr
// a7: 4c 89 e7                      movq    %r12, %rdi
// aa: ff d0                         callq   *%rax
// ac: 89 c5                         movl    %eax, %ebp
// ae: 49 8b 04 24                   movq    (%r12), %rax
// b2: 48 85 c0                      testq   %rax, %rax
// b5: 7e 0a                         jle     0xc1 <_JIT_ENTRY+0xc1>
// b7: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// bb: 85 c0                         testl   %eax, %eax
// bd: 79 2c                         jns     0xeb <_JIT_ENTRY+0xeb>
// bf: eb 3c                         jmp     0xfd <_JIT_ENTRY+0xfd>
// c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c3:  R_X86_64_64  .rodata.str1.1
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _Py_NegativeRefcount
// d5: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// da: 4c 89 e2                      movq    %r12, %rdx
// dd: ff d0                         callq   *%rax
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// e7: 85 c0                         testl   %eax, %eax
// e9: 78 12                         js      0xfd <_JIT_ENTRY+0xfd>
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f5: ff d0                         callq   *%rax
// f7: 49 ff 0c 24                   decq    (%r12)
// fb: 74 5c                         je      0x159 <_JIT_ENTRY+0x159>
// fd: 85 ed                         testl   %ebp, %ebp
// ff: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 103: 74 6b                         je      0x170 <_JIT_ENTRY+0x170>
// 105: 49 8b 06                      movq    (%r14), %rax
// 108: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010a:  R_X86_64_64  PyCode_Type
// 112: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 116: 75 7b                         jne     0x193 <_JIT_ENTRY+0x193>
// 118: 8b 40 48                      movl    0x48(%rax), %eax
// 11b: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 11f: 48 83 c0 48                   addq    $0x48, %rax
// 123: 48 89 d9                      movq    %rbx, %rcx
// 126: 48 29 c1                      subq    %rax, %rcx
// 129: 48 c1 e9 03                   shrq    $0x3, %rcx
// 12d: 85 c9                         testl   %ecx, %ecx
// 12f: 0f 8e 78 01 00 00             jle     0x2ad <_JIT_ENTRY+0x2ad>
// 135: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 139: 48 29 c3                      subq    %rax, %rbx
// 13c: 48 83 c3 f8                   addq    $-0x8, %rbx
// 140: 48 c1 eb 03                   shrq    $0x3, %rbx
// 144: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 148: 31 c0                         xorl    %eax, %eax
// 14a: 48 83 c4 08                   addq    $0x8, %rsp
// 14e: 5b                            popq    %rbx
// 14f: 41 5c                         popq    %r12
// 151: 41 5d                         popq    %r13
// 153: 41 5e                         popq    %r14
// 155: 41 5f                         popq    %r15
// 157: 5d                            popq    %rbp
// 158: c3                            retq
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_Dealloc
// 163: 4c 89 e7                      movq    %r12, %rdi
// 166: ff d0                         callq   *%rax
// 168: 85 ed                         testl   %ebp, %ebp
// 16a: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 16e: 75 95                         jne     0x105 <_JIT_ENTRY+0x105>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _JIT_CONTINUE
// 17a: 4c 89 f7                      movq    %r14, %rdi
// 17d: 48 89 de                      movq    %rbx, %rsi
// 180: 4c 89 fa                      movq    %r15, %rdx
// 183: 48 83 c4 08                   addq    $0x8, %rsp
// 187: 5b                            popq    %rbx
// 188: 41 5c                         popq    %r12
// 18a: 41 5d                         popq    %r13
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: 5d                            popq    %rbp
// 191: ff e0                         jmpq    *%rax
// 193: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000195:  R_X86_64_64  .rodata.str1.1+0xce
// 19d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019f:  R_X86_64_64  .rodata.str1.1+0xec
// 1a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1+0x12b
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  __assert_fail
// 1bb: ba 4d 00 00 00                movl    $0x4d, %edx
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1+0x161
// 1cc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1+0x172
// 1d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1+0x1a7
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  __assert_fail
// 1ea: ba 86 00 00 00                movl    $0x86, %edx
// 1ef: ff d0                         callq   *%rax
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1+0x1d1
// 1fb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1+0x172
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  .rodata.str1.1+0x1a7
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  __assert_fail
// 219: ba 87 00 00 00                movl    $0x87, %edx
// 21e: ff d0                         callq   *%rax
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1+0x220
// 22a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022c:  R_X86_64_64  .rodata.str1.1+0x1f0
// 234: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000236:  R_X86_64_64  .rodata.str1.1+0x23c
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  __assert_fail
// 248: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 24d: ff d0                         callq   *%rax
// 24f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1+0x25b
// 259: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025b:  R_X86_64_64  .rodata.str1.1+0x1f0
// 263: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000265:  R_X86_64_64  .rodata.str1.1+0x23c
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  __assert_fail
// 277: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 27c: ff d0                         callq   *%rax
// 27e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1+0x1d8
// 288: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000028a:  R_X86_64_64  .rodata.str1.1+0x172
// 292: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000294:  R_X86_64_64  .rodata.str1.1+0x1a7
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  __assert_fail
// 2a6: ba 88 00 00 00                movl    $0x88, %edx
// 2ab: ff d0                         callq   *%rax
// 2ad: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002af:  R_X86_64_64  .rodata.str1.1+0x87
// 2b7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b9:  R_X86_64_64  .rodata.str1.1+0x9a
// 2c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c3:  R_X86_64_64  .rodata.str1.1+0x39
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  __assert_fail
// 2d5: ba 5b 00 00 00                movl    $0x5b, %edx
// 2da: ff d0                         callq   *%rax
// 2dc: 
static const unsigned char _DELETE_ATTR_code_body[733] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x71, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x8b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0xad, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0xc9, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0xe5, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0xfd, 0x01, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x5c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x6b, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x7b, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x78, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0x95, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DELETE_ATTR_code_holes[41] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x161},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d1},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x220},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x23c},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x25b},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x23c},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d8},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 277: 00
static const unsigned char _DELETE_ATTR_data_body[633] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00};
static const Hole _DELETE_ATTR_data_holes[1];

// _DELETE_DEREF
// 
// /tmp/tmp3v1aptj0/_DELETE_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPARG
// 12: 0f b7 c0                      movzwl  %ax, %eax
// 15: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 1a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001c:  R_X86_64_64  PyCell_Type
// 24: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 28: 0f 85 e3 00 00 00             jne     0x111 <_JIT_ENTRY+0x111>
// 2e: 49 89 d7                      movq    %rdx, %r15
// 31: 48 89 f3                      movq    %rsi, %rbx
// 34: 49 89 fe                      movq    %rdi, %r14
// 37: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 3b: 4d 85 e4                      testq   %r12, %r12
// 3e: 74 1a                         je      0x5a <_JIT_ENTRY+0x5a>
// 40: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 48: 49 8b 04 24                   movq    (%r12), %rax
// 4c: 48 85 c0                      testq   %rax, %rax
// 4f: 7e 59                         jle     0xaa <_JIT_ENTRY+0xaa>
// 51: 85 c0                         testl   %eax, %eax
// 53: 79 7b                         jns     0xd0 <_JIT_ENTRY+0xd0>
// 55: e9 97 00 00 00                jmp     0xf1 <_JIT_ENTRY+0xf1>
// 5a: 49 8b 36                      movq    (%r14), %rsi
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  PyCode_Type
// 67: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 6b: 0f 85 cf 00 00 00             jne     0x140 <_JIT_ENTRY+0x140>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _JIT_OPARG
// 7b: 0f b7 d0                      movzwl  %ax, %edx
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _PyEval_FormatExcUnbound
// 88: 4c 89 ff                      movq    %r15, %rdi
// 8b: ff d0                         callq   *%rax
// 8d: 4c 29 f3                      subq    %r14, %rbx
// 90: 48 83 c3 b8                   addq    $-0x48, %rbx
// 94: 48 c1 eb 03                   shrq    $0x3, %rbx
// 98: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 9c: 31 c0                         xorl    %eax, %eax
// 9e: 48 83 c4 08                   addq    $0x8, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: c3                            retq
// aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_NegativeRefcount
// be: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// c3: 4c 89 e2                      movq    %r12, %rdx
// c6: ff d0                         callq   *%rax
// c8: 49 8b 04 24                   movq    (%r12), %rax
// cc: 85 c0                         testl   %eax, %eax
// ce: 78 21                         js      0xf1 <_JIT_ENTRY+0xf1>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// da: ff d0                         callq   *%rax
// dc: 49 ff 0c 24                   decq    (%r12)
// e0: 75 0f                         jne     0xf1 <_JIT_ENTRY+0xf1>
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_Dealloc
// ec: 4c 89 e7                      movq    %r12, %rdi
// ef: ff d0                         callq   *%rax
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _JIT_CONTINUE
// fb: 4c 89 f7                      movq    %r14, %rdi
// fe: 48 89 de                      movq    %rbx, %rsi
// 101: 4c 89 fa                      movq    %r15, %rdx
// 104: 48 83 c4 08                   addq    $0x8, %rsp
// 108: 5b                            popq    %rbx
// 109: 41 5c                         popq    %r12
// 10b: 41 5e                         popq    %r14
// 10d: 41 5f                         popq    %r15
// 10f: ff e0                         jmpq    *%rax
// 111: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000113:  R_X86_64_64  .rodata.str1.1+0xcc
// 11b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1+0xdd
// 125: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000127:  R_X86_64_64  .rodata.str1.1+0x119
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  __assert_fail
// 139: ba 1a 00 00 00                movl    $0x1a, %edx
// 13e: ff d0                         callq   *%rax
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1+0x39
// 14a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x57
// 154: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000156:  R_X86_64_64  .rodata.str1.1+0x96
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  __assert_fail
// 168: ba 4d 00 00 00                movl    $0x4d, %edx
// 16d: ff d0                         callq   *%rax
// 16f: 
static const unsigned char _DELETE_DEREF_code_body[368] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xe3, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x59, 0x85, 0xc0, 0x79, 0x7b, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x85, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1a, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DELETE_DEREF_code_holes[19] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_Type, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcc},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdd},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x119},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyCell_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/cellobject.h\x00PyObject *PyCell_GET(PyObject *)\x00'
// 13a: 00 00 00 00 00 00
static const unsigned char _DELETE_DEREF_data_body[321] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x47, 0x45, 0x54, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREF_data_holes[1];

// _DELETE_FAST
// 
// /tmp/tmp3v1aptj0/_DELETE_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 4c 8b 64 c7 48                movq    0x48(%rdi,%rax,8), %r12
// 23: 4d 85 e4                      testq   %r12, %r12
// 26: 74 30                         je      0x58 <_JIT_ENTRY+0x58>
// 28: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002a:  R_X86_64_64  _JIT_OPARG
// 32: 0f b7 c0                      movzwl  %ax, %eax
// 35: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// 3e: 49 8b 04 24                   movq    (%r12), %rax
// 42: 48 85 c0                      testq   %rax, %rax
// 45: 0f 8e 8b 00 00 00             jle     0xd6 <_JIT_ENTRY+0xd6>
// 4b: 85 c0                         testl   %eax, %eax
// 4d: 0f 89 a9 00 00 00             jns     0xfc <_JIT_ENTRY+0xfc>
// 53: e9 c5 00 00 00                jmp     0x11d <_JIT_ENTRY+0x11d>
// 58: 49 8b 06                      movq    (%r14), %rax
// 5b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005d:  R_X86_64_64  PyCode_Type
// 65: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 69: 0f 85 ce 00 00 00             jne     0x13d <_JIT_ENTRY+0x13d>
// 6f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000071:  R_X86_64_64  PyExc_UnboundLocalError
// 79: 4c 8b 21                      movq    (%rcx), %r12
// 7c: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _JIT_OPARG
// 8a: 0f b7 f0                      movzwl  %ax, %esi
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  PyTuple_GetItem
// 97: ff d0                         callq   *%rax
// 99: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000009b:  R_X86_64_64  .rodata.str1.1
// a3: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000a5:  R_X86_64_64  _PyEval_FormatExcCheckArg
// ad: 4c 89 ff                      movq    %r15, %rdi
// b0: 4c 89 e6                      movq    %r12, %rsi
// b3: 48 89 c1                      movq    %rax, %rcx
// b6: 41 ff d0                      callq   *%r8
// b9: 4c 29 f3                      subq    %r14, %rbx
// bc: 48 83 c3 b8                   addq    $-0x48, %rbx
// c0: 48 c1 eb 03                   shrq    $0x3, %rbx
// c4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// c8: 31 c0                         xorl    %eax, %eax
// ca: 48 83 c4 08                   addq    $0x8, %rsp
// ce: 5b                            popq    %rbx
// cf: 41 5c                         popq    %r12
// d1: 41 5e                         popq    %r14
// d3: 41 5f                         popq    %r15
// d5: c3                            retq
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1+0xdd
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// ef: 4c 89 e2                      movq    %r12, %rdx
// f2: ff d0                         callq   *%rax
// f4: 49 8b 04 24                   movq    (%r12), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 21                         js      0x11d <_JIT_ENTRY+0x11d>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 0c 24                   decq    (%r12)
// 10c: 75 0f                         jne     0x11d <_JIT_ENTRY+0x11d>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_Dealloc
// 118: 4c 89 e7                      movq    %r12, %rdi
// 11b: ff d0                         callq   *%rax
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _JIT_CONTINUE
// 127: 4c 89 f7                      movq    %r14, %rdi
// 12a: 48 89 de                      movq    %rbx, %rsi
// 12d: 4c 89 fa                      movq    %r15, %rdx
// 130: 48 83 c4 08                   addq    $0x8, %rsp
// 134: 5b                            popq    %rbx
// 135: 41 5c                         popq    %r12
// 137: 41 5e                         popq    %r14
// 139: 41 5f                         popq    %r15
// 13b: ff e0                         jmpq    *%rax
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1+0x4a
// 147: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1+0x68
// 151: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000153:  R_X86_64_64  .rodata.str1.1+0xa7
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  __assert_fail
// 165: ba 4d 00 00 00                movl    $0x4d, %edx
// 16a: ff d0                         callq   *%rax
// 16c: 
static const unsigned char _DELETE_FAST_code_body[365] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc7, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x8b, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa9, 0x00, 0x00, 0x00, 0xe9, 0xc5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xce, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x21, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DELETE_FAST_code_holes[18] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdd},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4a},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x68},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "cannot access local variable '%s' where it is not associated with a value\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// 10d: 00 00 00
static const unsigned char _DELETE_FAST_data_body[273] = {0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_FAST_data_holes[1];

// _DELETE_GLOBAL
// 
// /tmp/tmp3v1aptj0/_DELETE_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 8b 07                      movq    (%rdi), %rax
// b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000d:  R_X86_64_64  PyCode_Type
// 15: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 19: 0f 85 14 01 00 00             jne     0x133 <_JIT_ENTRY+0x133>
// 1f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 23: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 27: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 2e: 0f 84 2e 01 00 00             je      0x162 <_JIT_ENTRY+0x162>
// 34: 49 89 d7                      movq    %rdx, %r15
// 37: b2 01                         movb    $0x1, %dl
// 39: 84 d2                         testb   %dl, %dl
// 3b: 0f 84 50 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 41: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000043:  R_X86_64_64  PyLong_Type
// 4b: 48 39 d1                      cmpq    %rdx, %rcx
// 4e: 0f 84 6c 01 00 00             je      0x1c0 <_JIT_ENTRY+0x1c0>
// 54: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000056:  R_X86_64_64  PyBool_Type
// 5e: 48 39 d1                      cmpq    %rdx, %rcx
// 61: 0f 84 88 01 00 00             je      0x1ef <_JIT_ENTRY+0x1ef>
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_OPARG
// 71: 0f b7 c9                      movzwl  %cx, %ecx
// 74: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 78: 0f 8e a0 01 00 00             jle     0x21e <_JIT_ENTRY+0x21e>
// 7e: 48 89 f3                      movq    %rsi, %rbx
// 81: 49 89 fe                      movq    %rdi, %r14
// 84: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000086:  R_X86_64_64  _JIT_OPARG
// 8e: 0f b7 c9                      movzwl  %cx, %ecx
// 91: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 96: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  PyDict_DelItem
// a4: 4c 89 e6                      movq    %r12, %rsi
// a7: ff d0                         callq   *%rax
// a9: 85 c0                         testl   %eax, %eax
// ab: 74 66                         je      0x113 <_JIT_ENTRY+0x113>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  PyExc_KeyError
// b7: 48 8b 30                      movq    (%rax), %rsi
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _PyErr_ExceptionMatches
// c4: 4c 89 ff                      movq    %r15, %rdi
// c7: ff d0                         callq   *%rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 74 29                         je      0xf6 <_JIT_ENTRY+0xf6>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  PyExc_NameError
// d7: 48 8b 30                      movq    (%rax), %rsi
// da: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _PyEval_FormatExcCheckArg
// ee: 4c 89 ff                      movq    %r15, %rdi
// f1: 4c 89 e1                      movq    %r12, %rcx
// f4: ff d0                         callq   *%rax
// f6: 4c 29 f3                      subq    %r14, %rbx
// f9: 48 83 c3 b8                   addq    $-0x48, %rbx
// fd: 48 c1 eb 03                   shrq    $0x3, %rbx
// 101: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 105: 31 c0                         xorl    %eax, %eax
// 107: 48 83 c4 08                   addq    $0x8, %rsp
// 10b: 5b                            popq    %rbx
// 10c: 41 5c                         popq    %r12
// 10e: 41 5e                         popq    %r14
// 110: 41 5f                         popq    %r15
// 112: c3                            retq
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _JIT_CONTINUE
// 11d: 4c 89 f7                      movq    %r14, %rdi
// 120: 48 89 de                      movq    %rbx, %rsi
// 123: 4c 89 fa                      movq    %r15, %rdx
// 126: 48 83 c4 08                   addq    $0x8, %rsp
// 12a: 5b                            popq    %rbx
// 12b: 41 5c                         popq    %r12
// 12d: 41 5e                         popq    %r14
// 12f: 41 5f                         popq    %r15
// 131: ff e0                         jmpq    *%rax
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1+0x1d
// 13d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1+0x3b
// 147: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000149:  R_X86_64_64  .rodata.str1.1+0x7a
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  __assert_fail
// 15b: ba 4d 00 00 00                movl    $0x4d, %edx
// 160: ff d0                         callq   *%rax
// 162: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000164:  R_X86_64_64  .rodata.str1.1+0xb0
// 16c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000016e:  R_X86_64_64  .rodata.str1.1+0xc1
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  .rodata.str1.1+0xf6
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  __assert_fail
// 18a: ba 86 00 00 00                movl    $0x86, %edx
// 18f: ff d0                         callq   *%rax
// 191: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000193:  R_X86_64_64  .rodata.str1.1+0x120
// 19b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1+0xc1
// 1a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1+0xf6
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  __assert_fail
// 1b9: ba 87 00 00 00                movl    $0x87, %edx
// 1be: ff d0                         callq   *%rax
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1+0x16f
// 1ca: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001cc:  R_X86_64_64  .rodata.str1.1+0x13f
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0x18b
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  __assert_fail
// 1e8: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 1ed: ff d0                         callq   *%rax
// 1ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f1:  R_X86_64_64  .rodata.str1.1+0x1aa
// 1f9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1+0x13f
// 203: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000205:  R_X86_64_64  .rodata.str1.1+0x18b
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  __assert_fail
// 217: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 21c: ff d0                         callq   *%rax
// 21e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000220:  R_X86_64_64  .rodata.str1.1+0x127
// 228: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022a:  R_X86_64_64  .rodata.str1.1+0xc1
// 232: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000234:  R_X86_64_64  .rodata.str1.1+0xf6
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  __assert_fail
// 246: ba 88 00 00 00                movl    $0x88, %edx
// 24b: ff d0                         callq   *%rax
// 24d: 
static const unsigned char _DELETE_GLOBAL_code_body[590] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x14, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x2e, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0x50, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x88, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0xa0, 0x01, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x8b, 0x7f, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DELETE_GLOBAL_code_holes[37] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x3b},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc1},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x120},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc1},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16f},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13f},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x18b},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1aa},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13f},
    {0x205, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x18b},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x127},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc1},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "name '%.200s' is not defined\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00"
// 1c6: 00 00
static const unsigned char _DELETE_GLOBAL_data_body[457] = {0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00};
static const Hole _DELETE_GLOBAL_data_holes[1];

// _DELETE_NAME
// 
// /tmp/tmp3v1aptj0/_DELETE_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 8b 07                      movq    (%rdi), %rax
// b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000d:  R_X86_64_64  PyCode_Type
// 15: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 19: 0f 85 27 01 00 00             jne     0x146 <_JIT_ENTRY+0x146>
// 1f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 23: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 27: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 2e: 0f 84 41 01 00 00             je      0x175 <_JIT_ENTRY+0x175>
// 34: 49 89 d7                      movq    %rdx, %r15
// 37: b2 01                         movb    $0x1, %dl
// 39: 84 d2                         testb   %dl, %dl
// 3b: 0f 84 63 01 00 00             je      0x1a4 <_JIT_ENTRY+0x1a4>
// 41: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000043:  R_X86_64_64  PyLong_Type
// 4b: 48 39 d1                      cmpq    %rdx, %rcx
// 4e: 0f 84 7f 01 00 00             je      0x1d3 <_JIT_ENTRY+0x1d3>
// 54: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000056:  R_X86_64_64  PyBool_Type
// 5e: 48 39 d1                      cmpq    %rdx, %rcx
// 61: 0f 84 9b 01 00 00             je      0x202 <_JIT_ENTRY+0x202>
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_OPARG
// 71: 0f b7 c9                      movzwl  %cx, %ecx
// 74: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 78: 0f 8e b3 01 00 00             jle     0x231 <_JIT_ENTRY+0x231>
// 7e: 48 89 f3                      movq    %rsi, %rbx
// 81: 49 89 fe                      movq    %rdi, %r14
// 84: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000086:  R_X86_64_64  _JIT_OPARG
// 8e: 0f b7 c9                      movzwl  %cx, %ecx
// 91: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 96: 48 8b 7f 28                   movq    0x28(%rdi), %rdi
// 9a: 48 85 ff                      testq   %rdi, %rdi
// 9d: 74 3e                         je      0xdd <_JIT_ENTRY+0xdd>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  PyObject_DelItem
// a9: 4c 89 e6                      movq    %r12, %rsi
// ac: ff d0                         callq   *%rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 74 74                         je      0x126 <_JIT_ENTRY+0x126>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyExc_NameError
// bc: 48 8b 30                      movq    (%rax), %rsi
// bf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000c1:  R_X86_64_64  .rodata.str1.1+0x1b
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _PyEval_FormatExcCheckArg
// d3: 4c 89 ff                      movq    %r15, %rdi
// d6: 4c 89 e1                      movq    %r12, %rcx
// d9: ff d0                         callq   *%rax
// db: eb 2c                         jmp     0x109 <_JIT_ENTRY+0x109>
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  PyExc_SystemError
// e7: 48 8b 30                      movq    (%rax), %rsi
// ea: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1
// f4: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000f6:  R_X86_64_64  _PyErr_Format
// fe: 4c 89 ff                      movq    %r15, %rdi
// 101: 4c 89 e1                      movq    %r12, %rcx
// 104: 31 c0                         xorl    %eax, %eax
// 106: 41 ff d0                      callq   *%r8
// 109: 4c 29 f3                      subq    %r14, %rbx
// 10c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 110: 48 c1 eb 03                   shrq    $0x3, %rbx
// 114: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 118: 31 c0                         xorl    %eax, %eax
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5e                         popq    %r14
// 123: 41 5f                         popq    %r15
// 125: c3                            retq
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _JIT_CONTINUE
// 130: 4c 89 f7                      movq    %r14, %rdi
// 133: 48 89 de                      movq    %rbx, %rsi
// 136: 4c 89 fa                      movq    %r15, %rdx
// 139: 48 83 c4 08                   addq    $0x8, %rsp
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: ff e0                         jmpq    *%rax
// 146: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0x38
// 150: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000152:  R_X86_64_64  .rodata.str1.1+0x56
// 15a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015c:  R_X86_64_64  .rodata.str1.1+0x95
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  __assert_fail
// 16e: ba 4d 00 00 00                movl    $0x4d, %edx
// 173: ff d0                         callq   *%rax
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1+0xcb
// 17f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1+0xdc
// 189: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018b:  R_X86_64_64  .rodata.str1.1+0x111
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  __assert_fail
// 19d: ba 86 00 00 00                movl    $0x86, %edx
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1+0x13b
// 1ae: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b0:  R_X86_64_64  .rodata.str1.1+0xdc
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1+0x111
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  __assert_fail
// 1cc: ba 87 00 00 00                movl    $0x87, %edx
// 1d1: ff d0                         callq   *%rax
// 1d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1+0x18a
// 1dd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1+0x15a
// 1e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x1a6
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  __assert_fail
// 1fb: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 200: ff d0                         callq   *%rax
// 202: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000204:  R_X86_64_64  .rodata.str1.1+0x1c5
// 20c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000020e:  R_X86_64_64  .rodata.str1.1+0x15a
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  .rodata.str1.1+0x1a6
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  __assert_fail
// 22a: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 22f: ff d0                         callq   *%rax
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1+0x142
// 23b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0xdc
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  .rodata.str1.1+0x111
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  __assert_fail
// 259: ba 88 00 00 00                movl    $0x88, %edx
// 25e: ff d0                         callq   *%rax
// 260: 
static const unsigned char _DELETE_NAME_code_body[609] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x27, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x41, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0x63, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0xb3, 0x01, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x8b, 0x7f, 0x28, 0x48, 0x85, 0xff, 0x74, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DELETE_NAME_code_holes[38] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x38},
    {0x152, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x95},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcb},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdc},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x111},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13b},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdc},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x111},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x18a},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15a},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a6},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c5},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15a},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a6},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x142},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdc},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x111},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00"
// 1e1: 00 00 00 00 00 00 00
static const unsigned char _DELETE_NAME_data_body[489] = {0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_NAME_data_holes[1];

// _DELETE_SUBSCR
// 
// /tmp/tmp3v1aptj0/_DELETE_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001f:  R_X86_64_64  PyObject_DelItem
// 27: 4c 89 ef                      movq    %r13, %rdi
// 2a: 4c 89 e6                      movq    %r12, %rsi
// 2d: ff d0                         callq   *%rax
// 2f: 89 c5                         movl    %eax, %ebp
// 31: 49 8b 45 00                   movq    (%r13), %rax
// 35: 48 85 c0                      testq   %rax, %rax
// 38: 7e 10                         jle     0x4a <_JIT_ENTRY+0x4a>
// 3a: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000003c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 32                         jns     0x7a <_JIT_ENTRY+0x7a>
// 48: eb 39                         jmp     0x83 <_JIT_ENTRY+0x83>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 63: 4c 89 ea                      movq    %r13, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 45 00                   movq    (%r13), %rax
// 6c: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 76: 85 c0                         testl   %eax, %eax
// 78: 78 09                         js      0x83 <_JIT_ENTRY+0x83>
// 7a: 41 ff d7                      callq   *%r15
// 7d: 49 ff 4d 00                   decq    (%r13)
// 81: 74 13                         je      0x96 <_JIT_ENTRY+0x96>
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7e 22                         jle     0xae <_JIT_ENTRY+0xae>
// 8c: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 90: 85 c0                         testl   %eax, %eax
// 92: 79 44                         jns     0xd8 <_JIT_ENTRY+0xd8>
// 94: eb 4b                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_Dealloc
// a0: 4c 89 ef                      movq    %r13, %rdi
// a3: ff d0                         callq   *%rax
// a5: 49 8b 04 24                   movq    (%r12), %rax
// a9: 48 85 c0                      testq   %rax, %rax
// ac: 7f de                         jg      0x8c <_JIT_ENTRY+0x8c>
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NegativeRefcount
// c2: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// c7: 4c 89 e2                      movq    %r12, %rdx
// ca: ff d0                         callq   *%rax
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// d4: 85 c0                         testl   %eax, %eax
// d6: 78 09                         js      0xe1 <_JIT_ENTRY+0xe1>
// d8: 41 ff d7                      callq   *%r15
// db: 49 ff 0c 24                   decq    (%r12)
// df: 74 78                         je      0x159 <_JIT_ENTRY+0x159>
// e1: 85 ed                         testl   %ebp, %ebp
// e3: 49 0f 44 dd                   cmoveq  %r13, %rbx
// e7: 0f 84 87 00 00 00             je      0x174 <_JIT_ENTRY+0x174>
// ed: 49 8b 06                      movq    (%r14), %rax
// f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f2:  R_X86_64_64  PyCode_Type
// fa: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// fe: 0f 85 94 00 00 00             jne     0x198 <_JIT_ENTRY+0x198>
// 104: 48 63 40 48                   movslq  0x48(%rax), %rax
// 108: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 10c: 48 83 c1 48                   addq    $0x48, %rcx
// 110: 48 89 d8                      movq    %rbx, %rax
// 113: 48 29 c8                      subq    %rcx, %rax
// 116: 48 89 c1                      movq    %rax, %rcx
// 119: 48 c1 e9 03                   shrq    $0x3, %rcx
// 11d: 85 c9                         testl   %ecx, %ecx
// 11f: 0f 8e a2 00 00 00             jle     0x1c7 <_JIT_ENTRY+0x1c7>
// 125: 48 83 c0 f8                   addq    $-0x8, %rax
// 129: 48 c1 e8 03                   shrq    $0x3, %rax
// 12d: 85 c0                         testl   %eax, %eax
// 12f: 0f 8e c1 00 00 00             jle     0x1f6 <_JIT_ENTRY+0x1f6>
// 135: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 139: 48 29 c3                      subq    %rax, %rbx
// 13c: 48 83 c3 f0                   addq    $-0x10, %rbx
// 140: 48 c1 eb 03                   shrq    $0x3, %rbx
// 144: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 148: 31 c0                         xorl    %eax, %eax
// 14a: 48 83 c4 08                   addq    $0x8, %rsp
// 14e: 5b                            popq    %rbx
// 14f: 41 5c                         popq    %r12
// 151: 41 5d                         popq    %r13
// 153: 41 5e                         popq    %r14
// 155: 41 5f                         popq    %r15
// 157: 5d                            popq    %rbp
// 158: c3                            retq
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_Dealloc
// 163: 4c 89 e7                      movq    %r12, %rdi
// 166: ff d0                         callq   *%rax
// 168: 85 ed                         testl   %ebp, %ebp
// 16a: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 16e: 0f 85 79 ff ff ff             jne     0xed <_JIT_ENTRY+0xed>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_CONTINUE
// 17e: 4c 89 f7                      movq    %r14, %rdi
// 181: 48 89 de                      movq    %rbx, %rsi
// 184: 48 8b 14 24                   movq    (%rsp), %rdx
// 188: 48 83 c4 08                   addq    $0x8, %rsp
// 18c: 5b                            popq    %rbx
// 18d: 41 5c                         popq    %r12
// 18f: 41 5d                         popq    %r13
// 191: 41 5e                         popq    %r14
// 193: 41 5f                         popq    %r15
// 195: 5d                            popq    %rbp
// 196: ff e0                         jmpq    *%rax
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1+0xce
// 1a2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a4:  R_X86_64_64  .rodata.str1.1+0xec
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1+0x12b
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  __assert_fail
// 1c0: ba 4d 00 00 00                movl    $0x4d, %edx
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c9:  R_X86_64_64  .rodata.str1.1+0x87
// 1d1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d3:  R_X86_64_64  .rodata.str1.1+0x9a
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1+0x39
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  __assert_fail
// 1ef: ba 59 00 00 00                movl    $0x59, %edx
// 1f4: ff d0                         callq   *%rax
// 1f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f8:  R_X86_64_64  .rodata.str1.1+0x87
// 200: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1+0x9a
// 20a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020c:  R_X86_64_64  .rodata.str1.1+0x39
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  __assert_fail
// 21e: ba 5b 00 00 00                movl    $0x5b, %edx
// 223: ff d0                         callq   *%rax
// 225: 
static const unsigned char _DELETE_SUBSCR_code_body[550] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x78, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x94, 0x00, 0x00, 0x00, 0x48, 0x63, 0x40, 0x48, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0x48, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xc8, 0x48, 0x89, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0xc1, 0xe8, 0x03, 0x85, 0xc0, 0x0f, 0x8e, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DELETE_SUBSCR_code_holes[24] = {
    {0x1f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _DELETE_SUBSCR_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_SUBSCR_data_holes[1];

// _DICT_MERGE
// 
// /tmp/tmp3v1aptj0/_DICT_MERGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d5                      movq    %rdx, %r13
// e: 49 89 f4                      movq    %rsi, %r12
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 8d 5e f8                   leaq    -0x8(%rsi), %rbx
// 18: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001e:  R_X86_64_64  _JIT_OPARG
// 26: 0f b7 c0                      movzwl  %ax, %eax
// 29: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 2e: 29 c1                         subl    %eax, %ecx
// 30: f7 d0                         notl    %eax
// 32: 48 98                         cltq
// 34: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 38: 48 63 c1                      movslq  %ecx, %rax
// 3b: 48 8b 2c c6                   movq    (%rsi,%rax,8), %rbp
// 3f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000041:  R_X86_64_64  _PyDict_MergeEx
// 49: 4c 89 fe                      movq    %r15, %rsi
// 4c: ba 02 00 00 00                movl    $0x2, %edx
// 51: ff d0                         callq   *%rax
// 53: 85 c0                         testl   %eax, %eax
// 55: 78 0e                         js      0x65 <_JIT_ENTRY+0x65>
// 57: 49 8b 07                      movq    (%r15), %rax
// 5a: 48 85 c0                      testq   %rax, %rax
// 5d: 7e 30                         jle     0x8f <_JIT_ENTRY+0x8f>
// 5f: 85 c0                         testl   %eax, %eax
// 61: 79 51                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 63: eb 6f                         jmp     0xd4 <_JIT_ENTRY+0xd4>
// 65: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000067:  R_X86_64_64  _PyEval_FormatKwargsError
// 6f: 4c 89 ef                      movq    %r13, %rdi
// 72: 48 89 ee                      movq    %rbp, %rsi
// 75: 4c 89 fa                      movq    %r15, %rdx
// 78: ff d0                         callq   *%rax
// 7a: 49 8b 07                      movq    (%r15), %rax
// 7d: 48 85 c0                      testq   %rax, %rax
// 80: 7e 75                         jle     0xf7 <_JIT_ENTRY+0xf7>
// 82: 85 c0                         testl   %eax, %eax
// 84: 0f 89 92 00 00 00             jns     0x11c <_JIT_ENTRY+0x11c>
// 8a: e9 ad 00 00 00                jmp     0x13c <_JIT_ENTRY+0x13c>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// a8: 4c 89 fa                      movq    %r15, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 07                      movq    (%r15), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 20                         js      0xd4 <_JIT_ENTRY+0xd4>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0f                      decq    (%r15)
// c3: 75 0f                         jne     0xd4 <_JIT_ENTRY+0xd4>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_Dealloc
// cf: 4c 89 ff                      movq    %r15, %rdi
// d2: ff d0                         callq   *%rax
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _JIT_CONTINUE
// de: 4c 89 f7                      movq    %r14, %rdi
// e1: 48 89 de                      movq    %rbx, %rsi
// e4: 4c 89 ea                      movq    %r13, %rdx
// e7: 48 83 c4 08                   addq    $0x8, %rsp
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: 5d                            popq    %rbp
// f5: ff e0                         jmpq    *%rax
// f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f9:  R_X86_64_64  .rodata.str1.1
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_NegativeRefcount
// 10b: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 110: 4c 89 fa                      movq    %r15, %rdx
// 113: ff d0                         callq   *%rax
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 85 c0                         testl   %eax, %eax
// 11a: 78 20                         js      0x13c <_JIT_ENTRY+0x13c>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 126: ff d0                         callq   *%rax
// 128: 49 ff 0f                      decq    (%r15)
// 12b: 75 0f                         jne     0x13c <_JIT_ENTRY+0x13c>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_Dealloc
// 137: 4c 89 ff                      movq    %r15, %rdi
// 13a: ff d0                         callq   *%rax
// 13c: 49 8b 06                      movq    (%r14), %rax
// 13f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000141:  R_X86_64_64  PyCode_Type
// 149: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 14d: 75 37                         jne     0x186 <_JIT_ENTRY+0x186>
// 14f: 8b 40 48                      movl    0x48(%rax), %eax
// 152: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 156: 48 83 c0 48                   addq    $0x48, %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 c1 ec 03                   shrq    $0x3, %r12
// 161: 45 85 e4                      testl   %r12d, %r12d
// 164: 7e 4f                         jle     0x1b5 <_JIT_ENTRY+0x1b5>
// 166: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 16a: 48 29 c3                      subq    %rax, %rbx
// 16d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 171: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 08                   addq    $0x8, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1+0xce
// 190: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1+0xec
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  .rodata.str1.1+0x12b
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  __assert_fail
// 1ae: ba 4d 00 00 00                movl    $0x4d, %edx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1+0x87
// 1bf: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1+0x9a
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  .rodata.str1.1+0x39
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  __assert_fail
// 1dd: ba 5b 00 00 00                movl    $0x5b, %edx
// 1e2: ff d0                         callq   *%rax
// 1e4: 
static const unsigned char _DICT_MERGE_code_body[485] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x49, 0x89, 0xfe, 0x48, 0x8d, 0x5e, 0xf8, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x0e, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x79, 0x51, 0xeb, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x75, 0x85, 0xc0, 0x0f, 0x89, 0x92, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x37, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc4, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x85, 0xe4, 0x7e, 0x4f, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DICT_MERGE_code_holes[22] = {
    {0x1e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _DICT_MERGE_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DICT_MERGE_data_holes[1];

// _DICT_UPDATE
// 
// /tmp/tmp3v1aptj0/_DICT_UPDATE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d5                      movq    %rdx, %r13
// c: 49 89 f4                      movq    %rsi, %r12
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 8d 5e f8                   leaq    -0x8(%rsi), %rbx
// 16: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: f7 d0                         notl    %eax
// 26: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2b: 48 98                         cltq
// 2d: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  PyDict_Update
// 3b: 4c 89 fe                      movq    %r15, %rsi
// 3e: ff d0                         callq   *%rax
// 40: 85 c0                         testl   %eax, %eax
// 42: 78 15                         js      0x59 <_JIT_ENTRY+0x59>
// 44: 49 8b 07                      movq    (%r15), %rax
// 47: 48 85 c0                      testq   %rax, %rax
// 4a: 7e 73                         jle     0xbf <_JIT_ENTRY+0xbf>
// 4c: 85 c0                         testl   %eax, %eax
// 4e: 0f 89 90 00 00 00             jns     0xe4 <_JIT_ENTRY+0xe4>
// 54: e9 ab 00 00 00                jmp     0x104 <_JIT_ENTRY+0x104>
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  PyExc_AttributeError
// 63: 48 8b 30                      movq    (%rax), %rsi
// 66: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000068:  R_X86_64_64  _PyErr_ExceptionMatches
// 70: 4c 89 ef                      movq    %r13, %rdi
// 73: ff d0                         callq   *%rax
// 75: 85 c0                         testl   %eax, %eax
// 77: 74 31                         je      0xaa <_JIT_ENTRY+0xaa>
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  PyExc_TypeError
// 83: 48 8b 30                      movq    (%rax), %rsi
// 86: 49 8b 47 08                   movq    0x8(%r15), %rax
// 8a: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 8e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000090:  R_X86_64_64  .rodata.str1.1+0x87
// 98: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000009a:  R_X86_64_64  _PyErr_Format
// a2: 4c 89 ef                      movq    %r13, %rdi
// a5: 31 c0                         xorl    %eax, %eax
// a7: 41 ff d0                      callq   *%r8
// aa: 49 8b 07                      movq    (%r15), %rax
// ad: 48 85 c0                      testq   %rax, %rax
// b0: 7e 70                         jle     0x122 <_JIT_ENTRY+0x122>
// b2: 85 c0                         testl   %eax, %eax
// b4: 0f 89 8d 00 00 00             jns     0x147 <_JIT_ENTRY+0x147>
// ba: e9 a8 00 00 00                jmp     0x167 <_JIT_ENTRY+0x167>
// bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c1:  R_X86_64_64  .rodata.str1.1
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_NegativeRefcount
// d3: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// d8: 4c 89 fa                      movq    %r15, %rdx
// db: ff d0                         callq   *%rax
// dd: 49 8b 07                      movq    (%r15), %rax
// e0: 85 c0                         testl   %eax, %eax
// e2: 78 20                         js      0x104 <_JIT_ENTRY+0x104>
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ee: ff d0                         callq   *%rax
// f0: 49 ff 0f                      decq    (%r15)
// f3: 75 0f                         jne     0x104 <_JIT_ENTRY+0x104>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 ff                      movq    %r15, %rdi
// 102: ff d0                         callq   *%rax
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 4c 89 f7                      movq    %r14, %rdi
// 111: 48 89 de                      movq    %rbx, %rsi
// 114: 4c 89 ea                      movq    %r13, %rdx
// 117: 5b                            popq    %rbx
// 118: 41 5c                         popq    %r12
// 11a: 41 5d                         popq    %r13
// 11c: 41 5e                         popq    %r14
// 11e: 41 5f                         popq    %r15
// 120: ff e0                         jmpq    *%rax
// 122: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000124:  R_X86_64_64  .rodata.str1.1
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_NegativeRefcount
// 136: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 13b: 4c 89 fa                      movq    %r15, %rdx
// 13e: ff d0                         callq   *%rax
// 140: 49 8b 07                      movq    (%r15), %rax
// 143: 85 c0                         testl   %eax, %eax
// 145: 78 20                         js      0x167 <_JIT_ENTRY+0x167>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 151: ff d0                         callq   *%rax
// 153: 49 ff 0f                      decq    (%r15)
// 156: 75 0f                         jne     0x167 <_JIT_ENTRY+0x167>
// 158: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015a:  R_X86_64_64  _Py_Dealloc
// 162: 4c 89 ff                      movq    %r15, %rdi
// 165: ff d0                         callq   *%rax
// 167: 49 8b 06                      movq    (%r14), %rax
// 16a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016c:  R_X86_64_64  PyCode_Type
// 174: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 178: 75 32                         jne     0x1ac <_JIT_ENTRY+0x1ac>
// 17a: 8b 40 48                      movl    0x48(%rax), %eax
// 17d: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 181: 48 83 c0 48                   addq    $0x48, %rax
// 185: 49 29 c4                      subq    %rax, %r12
// 188: 49 c1 ec 03                   shrq    $0x3, %r12
// 18c: 45 85 e4                      testl   %r12d, %r12d
// 18f: 7e 4a                         jle     0x1db <_JIT_ENTRY+0x1db>
// 191: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 195: 48 29 c3                      subq    %rax, %rbx
// 198: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1a0: 31 c0                         xorl    %eax, %eax
// 1a2: 5b                            popq    %rbx
// 1a3: 41 5c                         popq    %r12
// 1a5: 41 5d                         popq    %r13
// 1a7: 41 5e                         popq    %r14
// 1a9: 41 5f                         popq    %r15
// 1ab: c3                            retq
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1+0xef
// 1b6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b8:  R_X86_64_64  .rodata.str1.1+0x10d
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1+0x14c
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  __assert_fail
// 1d4: ba 4d 00 00 00                movl    $0x4d, %edx
// 1d9: ff d0                         callq   *%rax
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1+0xa8
// 1e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e7:  R_X86_64_64  .rodata.str1.1+0xbb
// 1ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f1:  R_X86_64_64  .rodata.str1.1+0x39
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  __assert_fail
// 203: ba 5b 00 00 00                movl    $0x5b, %edx
// 208: ff d0                         callq   *%rax
// 20a: 
static const unsigned char _DICT_UPDATE_code_body[523] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x49, 0x89, 0xfe, 0x48, 0x8d, 0x5e, 0xf8, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x15, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x73, 0x85, 0xc0, 0x0f, 0x89, 0x90, 0x00, 0x00, 0x00, 0xe9, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x70, 0x85, 0xc0, 0x0f, 0x89, 0x8d, 0x00, 0x00, 0x00, 0xe9, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xea, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x32, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc4, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x85, 0xe4, 0x7e, 0x4a, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DICT_UPDATE_code_holes[26] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xef},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10d},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14c},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa8},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbb},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00'%.200s' object is not a mapping\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00"
// 182: 00 00 00 00 00 00
static const unsigned char _DICT_UPDATE_data_body[393] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DICT_UPDATE_data_holes[1];

// _END_SEND
// 
// /tmp/tmp3v1aptj0/_END_SEND.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d3                      movq    %rdx, %rbx
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 66 f0                   movq    -0x10(%rsi), %r12
// 18: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp
// 1c: 49 8b 04 24                   movq    (%r12), %rax
// 20: 48 85 c0                      testq   %rax, %rax
// 23: 7e 0a                         jle     0x2f <_JIT_ENTRY+0x2f>
// 25: 4d 8d 6f f8                   leaq    -0x8(%r15), %r13
// 29: 85 c0                         testl   %eax, %eax
// 2b: 79 2c                         jns     0x59 <_JIT_ENTRY+0x59>
// 2d: eb 4b                         jmp     0x7a <_JIT_ENTRY+0x7a>
// 2f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000031:  R_X86_64_64  .rodata.str1.1
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _Py_NegativeRefcount
// 43: be 66 00 00 00                movl    $0x66, %esi
// 48: 4c 89 e2                      movq    %r12, %rdx
// 4b: ff d0                         callq   *%rax
// 4d: 49 8b 04 24                   movq    (%r12), %rax
// 51: 4d 8d 6f f8                   leaq    -0x8(%r15), %r13
// 55: 85 c0                         testl   %eax, %eax
// 57: 78 21                         js      0x7a <_JIT_ENTRY+0x7a>
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 63: ff d0                         callq   *%rax
// 65: 49 ff 0c 24                   decq    (%r12)
// 69: 75 0f                         jne     0x7a <_JIT_ENTRY+0x7a>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_Dealloc
// 75: 4c 89 e7                      movq    %r12, %rdi
// 78: ff d0                         callq   *%rax
// 7a: 49 89 6f f0                   movq    %rbp, -0x10(%r15)
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _JIT_CONTINUE
// 88: 4c 89 f7                      movq    %r14, %rdi
// 8b: 4c 89 ee                      movq    %r13, %rsi
// 8e: 48 89 da                      movq    %rbx, %rdx
// 91: 48 83 c4 08                   addq    $0x8, %rsp
// 95: 5b                            popq    %rbx
// 96: 41 5c                         popq    %r12
// 98: 41 5d                         popq    %r13
// 9a: 41 5e                         popq    %r14
// 9c: 41 5f                         popq    %r15
// 9e: 5d                            popq    %rbp
// 9f: ff e0                         jmpq    *%rax
// a1: 
static const unsigned char _END_SEND_code_body[162] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf0, 0x48, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4d, 0x8d, 0x6f, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x4b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _END_SEND_code_holes[6] = {
    {0x31, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _END_SEND_data_holes[1];

// _EXIT_INIT_CHECK
// 
// /tmp/tmp3v1aptj0/_EXIT_INIT_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 8b 07                      movq    (%rdi), %rax
// 8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000a:  R_X86_64_64  PyCode_Type
// 12: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 16: 0f 85 a0 00 00 00             jne     0xbc <_JIT_ENTRY+0xbc>
// 1c: 48 89 f3                      movq    %rsi, %rbx
// 1f: 49 89 fe                      movq    %rdi, %r14
// 22: 8b 40 48                      movl    0x48(%rax), %eax
// 25: 48 8d 04 c7                   leaq    (%rdi,%rax,8), %rax
// 29: 48 83 c0 48                   addq    $0x48, %rax
// 2d: 48 89 f1                      movq    %rsi, %rcx
// 30: 48 29 c1                      subq    %rax, %rcx
// 33: 48 b8 f8 ff ff ff 07 00 00 00 movabsq $0x7fffffff8, %rax      # imm = 0x7FFFFFFF8
// 3d: 48 21 c8                      andq    %rcx, %rax
// 40: 48 83 f8 10                   cmpq    $0x10, %rax
// 44: 0f 85 a1 00 00 00             jne     0xeb <_JIT_ENTRY+0xeb>
// 4a: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 4e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000050:  R_X86_64_64  _Py_NoneStruct
// 58: 48 39 c8                      cmpq    %rcx, %rax
// 5b: 74 44                         je      0xa1 <_JIT_ENTRY+0xa1>
// 5d: 4d 8d 7e 48                   leaq    0x48(%r14), %r15
// 61: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000063:  R_X86_64_64  PyExc_TypeError
// 6b: 48 8b 39                      movq    (%rcx), %rdi
// 6e: 48 8b 40 08                   movq    0x8(%rax), %rax
// 72: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 76: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000078:  R_X86_64_64  .rodata.str1.1+0x9a
// 80: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000082:  R_X86_64_64  PyErr_Format
// 8a: 31 c0                         xorl    %eax, %eax
// 8c: ff d1                         callq   *%rcx
// 8e: 4c 29 fb                      subq    %r15, %rbx
// 91: 48 c1 eb 03                   shrq    $0x3, %rbx
// 95: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 99: 31 c0                         xorl    %eax, %eax
// 9b: 5b                            popq    %rbx
// 9c: 41 5e                         popq    %r14
// 9e: 41 5f                         popq    %r15
// a0: c3                            retq
// a1: 48 83 c3 f8                   addq    $-0x8, %rbx
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _JIT_CONTINUE
// af: 4c 89 f7                      movq    %r14, %rdi
// b2: 48 89 de                      movq    %rbx, %rsi
// b5: 5b                            popq    %rbx
// b6: 41 5e                         popq    %r14
// b8: 41 5f                         popq    %r15
// ba: ff e0                         jmpq    *%rax
// bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000be:  R_X86_64_64  .rodata.str1.1+0xc6
// c6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c8:  R_X86_64_64  .rodata.str1.1+0xe4
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  .rodata.str1.1+0x123
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  __assert_fail
// e4: ba 4d 00 00 00                movl    $0x4d, %edx
// e9: ff d0                         callq   *%rax
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x87
// f5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1
// ff: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000101:  R_X86_64_64  .rodata.str1.1+0x39
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  __assert_fail
// 113: ba bb 0a 00 00                movl    $0xabb, %edx            # imm = 0xABB
// 118: ff d0                         callq   *%rax
// 11a: 
static const unsigned char _EXIT_INIT_CHECK_code_body[283] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc7, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xb8, 0xf8, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x48, 0x21, 0xc8, 0x48, 0x83, 0xf8, 0x10, 0x0f, 0x85, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x44, 0x4d, 0x8d, 0x7e, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x29, 0xfb, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xbb, 0x0a, 0x00, 0x00, 0xff, 0xd0};
static const Hole _EXIT_INIT_CHECK_code_holes[15] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc6},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe4},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x123},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() == 2\x00__init__() should return None, not '%.200s'\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00"
// 159: 00 00 00 00 00 00 00
static const unsigned char _EXIT_INIT_CHECK_data_body[353] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _EXIT_INIT_CHECK_data_holes[1];

// _EXIT_TRACE
// 
// /tmp/tmp3v1aptj0/_EXIT_TRACE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 29 fe                      subq    %rdi, %rsi
// 4: 48 83 c6 b8                   addq    $-0x48, %rsi
// 8: 48 c1 ee 03                   shrq    $0x3, %rsi
// c: 89 77 40                      movl    %esi, 0x40(%rdi)
// f: 48 8b 07                      movq    (%rdi), %rax
// 12: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000014:  R_X86_64_64  PyCode_Type
// 1c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 20: 75 18                         jne     0x3a <_JIT_ENTRY+0x3a>
// 22: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000024:  R_X86_64_64  _JIT_TARGET
// 2c: 89 c9                         movl    %ecx, %ecx
// 2e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 32: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 38: 59                            popq    %rcx
// 39: c3                            retq
// 3a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000003c:  R_X86_64_64  .rodata.str1.1
// 44: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000046:  R_X86_64_64  .rodata.str1.1+0x1e
// 4e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000050:  R_X86_64_64  .rodata.str1.1+0x5d
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  __assert_fail
// 62: ba 4d 00 00 00                movl    $0x4d, %edx
// 67: ff d0                         callq   *%rax
// 69: 
static const unsigned char _EXIT_TRACE_code_body[106] = {0x50, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _EXIT_TRACE_code_holes[7] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x24, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x50, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _EXIT_TRACE_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _EXIT_TRACE_data_holes[1];

// _FORMAT_SIMPLE
// 
// /tmp/tmp3v1aptj0/_FORMAT_SIMPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  PyUnicode_Type
// 20: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 25: 74 63                         je      0x8a <_JIT_ENTRY+0x8a>
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_Format
// 31: 4c 89 e7                      movq    %r12, %rdi
// 34: 31 f6                         xorl    %esi, %esi
// 36: ff d0                         callq   *%rax
// 38: 49 89 c5                      movq    %rax, %r13
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 28                         jns     0x70 <_JIT_ENTRY+0x70>
// 48: eb 38                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 63: 4c 89 e2                      movq    %r12, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 04 24                   movq    (%r12), %rax
// 6c: 85 c0                         testl   %eax, %eax
// 6e: 78 12                         js      0x82 <_JIT_ENTRY+0x82>
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7a: ff d0                         callq   *%rax
// 7c: 49 ff 0c 24                   decq    (%r12)
// 80: 74 2a                         je      0xac <_JIT_ENTRY+0xac>
// 82: 4d 89 ec                      movq    %r13, %r12
// 85: 4d 85 ed                      testq   %r13, %r13
// 88: 74 39                         je      0xc3 <_JIT_ENTRY+0xc3>
// 8a: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _JIT_CONTINUE
// 98: 4c 89 f7                      movq    %r14, %rdi
// 9b: 48 89 de                      movq    %rbx, %rsi
// 9e: 4c 89 fa                      movq    %r15, %rdx
// a1: 5b                            popq    %rbx
// a2: 41 5c                         popq    %r12
// a4: 41 5d                         popq    %r13
// a6: 41 5e                         popq    %r14
// a8: 41 5f                         popq    %r15
// aa: ff e0                         jmpq    *%rax
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4d 89 ec                      movq    %r13, %r12
// be: 4d 85 ed                      testq   %r13, %r13
// c1: 75 c7                         jne     0x8a <_JIT_ENTRY+0x8a>
// c3: 49 8b 06                      movq    (%r14), %rax
// c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c8:  R_X86_64_64  PyCode_Type
// d0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// d4: 75 38                         jne     0x10e <_JIT_ENTRY+0x10e>
// d6: 8b 40 48                      movl    0x48(%rax), %eax
// d9: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// dd: 48 83 c0 48                   addq    $0x48, %rax
// e1: 48 89 d9                      movq    %rbx, %rcx
// e4: 48 29 c1                      subq    %rax, %rcx
// e7: 48 c1 e9 03                   shrq    $0x3, %rcx
// eb: 85 c9                         testl   %ecx, %ecx
// ed: 7e 4e                         jle     0x13d <_JIT_ENTRY+0x13d>
// ef: 48 83 c3 f8                   addq    $-0x8, %rbx
// f3: 49 8d 46 48                   leaq    0x48(%r14), %rax
// f7: 48 29 c3                      subq    %rax, %rbx
// fa: 48 c1 eb 03                   shrq    $0x3, %rbx
// fe: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 102: 31 c0                         xorl    %eax, %eax
// 104: 5b                            popq    %rbx
// 105: 41 5c                         popq    %r12
// 107: 41 5d                         popq    %r13
// 109: 41 5e                         popq    %r14
// 10b: 41 5f                         popq    %r15
// 10d: c3                            retq
// 10e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1+0xce
// 118: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1+0xec
// 122: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000124:  R_X86_64_64  .rodata.str1.1+0x12b
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  __assert_fail
// 136: ba 4d 00 00 00                movl    $0x4d, %edx
// 13b: ff d0                         callq   *%rax
// 13d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1+0x87
// 147: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000149:  R_X86_64_64  .rodata.str1.1+0x9a
// 151: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000153:  R_X86_64_64  .rodata.str1.1+0x39
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  __assert_fail
// 165: ba 5b 00 00 00                movl    $0x5b, %edx
// 16a: ff d0                         callq   *%rax
// 16c: 
static const unsigned char _FORMAT_SIMPLE_code_body[365] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2a, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x74, 0x39, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x75, 0xc7, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x38, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4e, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _FORMAT_SIMPLE_code_holes[17] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x124, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _FORMAT_SIMPLE_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _FORMAT_SIMPLE_data_holes[1];

// _FORMAT_WITH_SPEC
// 
// /tmp/tmp3v1aptj0/_FORMAT_WITH_SPEC.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 19: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001f:  R_X86_64_64  PyObject_Format
// 27: 48 89 ef                      movq    %rbp, %rdi
// 2a: 4c 89 ee                      movq    %r13, %rsi
// 2d: ff d0                         callq   *%rax
// 2f: 49 89 c4                      movq    %rax, %r12
// 32: 48 8b 45 00                   movq    (%rbp), %rax
// 36: 48 85 c0                      testq   %rax, %rax
// 39: 7e 10                         jle     0x4b <_JIT_ENTRY+0x4b>
// 3b: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000003d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 32                         jns     0x7b <_JIT_ENTRY+0x7b>
// 49: eb 39                         jmp     0x84 <_JIT_ENTRY+0x84>
// 4b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004d:  R_X86_64_64  .rodata.str1.1
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _Py_NegativeRefcount
// 5f: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 64: 48 89 ea                      movq    %rbp, %rdx
// 67: ff d0                         callq   *%rax
// 69: 48 8b 45 00                   movq    (%rbp), %rax
// 6d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000006f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 77: 85 c0                         testl   %eax, %eax
// 79: 78 09                         js      0x84 <_JIT_ENTRY+0x84>
// 7b: 41 ff d7                      callq   *%r15
// 7e: 48 ff 4d 00                   decq    (%rbp)
// 82: 74 0f                         je      0x93 <_JIT_ENTRY+0x93>
// 84: 49 8b 45 00                   movq    (%r13), %rax
// 88: 48 85 c0                      testq   %rax, %rax
// 8b: 7e 1e                         jle     0xab <_JIT_ENTRY+0xab>
// 8d: 85 c0                         testl   %eax, %eax
// 8f: 79 40                         jns     0xd1 <_JIT_ENTRY+0xd1>
// 91: eb 47                         jmp     0xda <_JIT_ENTRY+0xda>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_Dealloc
// 9d: 48 89 ef                      movq    %rbp, %rdi
// a0: ff d0                         callq   *%rax
// a2: 49 8b 45 00                   movq    (%r13), %rax
// a6: 48 85 c0                      testq   %rax, %rax
// a9: 7f e2                         jg      0x8d <_JIT_ENTRY+0x8d>
// ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ad:  R_X86_64_64  .rodata.str1.1
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_NegativeRefcount
// bf: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// c4: 4c 89 ea                      movq    %r13, %rdx
// c7: ff d0                         callq   *%rax
// c9: 49 8b 45 00                   movq    (%r13), %rax
// cd: 85 c0                         testl   %eax, %eax
// cf: 78 09                         js      0xda <_JIT_ENTRY+0xda>
// d1: 41 ff d7                      callq   *%r15
// d4: 49 ff 4d 00                   decq    (%r13)
// d8: 74 31                         je      0x10b <_JIT_ENTRY+0x10b>
// da: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// de: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// e2: 4d 85 e4                      testq   %r12, %r12
// e5: 74 40                         je      0x127 <_JIT_ENTRY+0x127>
// e7: 4c 89 20                      movq    %r12, (%rax)
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _JIT_CONTINUE
// f4: 48 89 df                      movq    %rbx, %rdi
// f7: 48 8b 14 24                   movq    (%rsp), %rdx
// fb: 48 83 c4 08                   addq    $0x8, %rsp
// ff: 5b                            popq    %rbx
// 100: 41 5c                         popq    %r12
// 102: 41 5d                         popq    %r13
// 104: 41 5e                         popq    %r14
// 106: 41 5f                         popq    %r15
// 108: 5d                            popq    %rbp
// 109: ff e0                         jmpq    *%rax
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_Dealloc
// 115: 4c 89 ef                      movq    %r13, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 11e: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 122: 4d 85 e4                      testq   %r12, %r12
// 125: 75 c0                         jne     0xe7 <_JIT_ENTRY+0xe7>
// 127: 48 8b 0b                      movq    (%rbx), %rcx
// 12a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012c:  R_X86_64_64  PyCode_Type
// 134: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 138: 75 42                         jne     0x17c <_JIT_ENTRY+0x17c>
// 13a: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 13e: 48 8d 0c cb                   leaq    (%rbx,%rcx,8), %rcx
// 142: 48 83 c1 48                   addq    $0x48, %rcx
// 146: 49 29 ce                      subq    %rcx, %r14
// 149: 49 c1 ee 03                   shrq    $0x3, %r14
// 14d: 45 85 f6                      testl   %r14d, %r14d
// 150: 7e 59                         jle     0x1ab <_JIT_ENTRY+0x1ab>
// 152: 48 29 ce                      subq    %rcx, %rsi
// 155: 48 c1 ee 03                   shrq    $0x3, %rsi
// 159: 85 f6                         testl   %esi, %esi
// 15b: 7e 7d                         jle     0x1da <_JIT_ENTRY+0x1da>
// 15d: 48 8d 4b 48                   leaq    0x48(%rbx), %rcx
// 161: 48 29 c8                      subq    %rcx, %rax
// 164: 48 c1 e8 03                   shrq    $0x3, %rax
// 168: 89 43 40                      movl    %eax, 0x40(%rbx)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: 48 83 c4 08                   addq    $0x8, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: c3                            retq
// 17c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017e:  R_X86_64_64  .rodata.str1.1+0xce
// 186: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1+0xec
// 190: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000192:  R_X86_64_64  .rodata.str1.1+0x12b
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  __assert_fail
// 1a4: ba 4d 00 00 00                movl    $0x4d, %edx
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ad:  R_X86_64_64  .rodata.str1.1+0x87
// 1b5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1+0x9a
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1+0x39
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  __assert_fail
// 1d3: ba 59 00 00 00                movl    $0x59, %edx
// 1d8: ff d0                         callq   *%rax
// 1da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x87
// 1e4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e6:  R_X86_64_64  .rodata.str1.1+0x9a
// 1ee: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1+0x39
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  __assert_fail
// 202: ba 5b 00 00 00                movl    $0x5b, %edx
// 207: ff d0                         callq   *%rax
// 209: 
static const unsigned char _FORMAT_WITH_SPEC_code_body[522] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x31, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x40, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x49, 0x8d, 0x46, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xc0, 0x48, 0x8b, 0x0b, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x42, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcb, 0x48, 0x83, 0xc1, 0x48, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x7e, 0x59, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x7e, 0x7d, 0x48, 0x8d, 0x4b, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _FORMAT_WITH_SPEC_code_holes[24] = {
    {0x1f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _FORMAT_WITH_SPEC_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _FORMAT_WITH_SPEC_data_holes[1];

// _FOR_ITER_TIER_TWO
// 
// /tmp/tmp3v1aptj0/_FOR_ITER_TIER_TWO.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d4                      movq    %rdx, %r12
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 15: 49 8b 47 08                   movq    0x8(%r15), %rax
// 19: 4c 89 ff                      movq    %r15, %rdi
// 1c: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 22: 48 85 c0                      testq   %rax, %rax
// 25: 74 27                         je      0x4e <_JIT_ENTRY+0x4e>
// 27: 48 89 03                      movq    %rax, (%rbx)
// 2a: 48 83 c3 08                   addq    $0x8, %rbx
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _JIT_CONTINUE
// 38: 4c 89 f7                      movq    %r14, %rdi
// 3b: 48 89 de                      movq    %rbx, %rsi
// 3e: 4c 89 e2                      movq    %r12, %rdx
// 41: 48 83 c4 08                   addq    $0x8, %rsp
// 45: 5b                            popq    %rbx
// 46: 41 5c                         popq    %r12
// 48: 41 5e                         popq    %r14
// 4a: 41 5f                         popq    %r15
// 4c: ff e0                         jmpq    *%rax
// 4e: 4d 85 e4                      testq   %r12, %r12
// 51: 0f 84 13 01 00 00             je      0x16a <_JIT_ENTRY+0x16a>
// 57: 49 8b 44 24 68                movq    0x68(%r12), %rax
// 5c: 48 85 c0                      testq   %rax, %rax
// 5f: 74 3a                         je      0x9b <_JIT_ENTRY+0x9b>
// 61: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 66: 74 33                         je      0x9b <_JIT_ENTRY+0x9b>
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  PyExc_StopIteration
// 72: 48 8b 30                      movq    (%rax), %rsi
// 75: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000077:  R_X86_64_64  _PyErr_ExceptionMatches
// 7f: 4c 89 e7                      movq    %r12, %rdi
// 82: ff d0                         callq   *%rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 84 cb 00 00 00             je      0x157 <_JIT_ENTRY+0x157>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _PyErr_Clear
// 96: 4c 89 e7                      movq    %r12, %rdi
// 99: ff d0                         callq   *%rax
// 9b: 49 8b 07                      movq    (%r15), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7e 06                         jle     0xa9 <_JIT_ENTRY+0xa9>
// a3: 85 c0                         testl   %eax, %eax
// a5: 79 27                         jns     0xce <_JIT_ENTRY+0xce>
// a7: eb 45                         jmp     0xee <_JIT_ENTRY+0xee>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// c2: 4c 89 fa                      movq    %r15, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 07                      movq    (%r15), %rax
// ca: 85 c0                         testl   %eax, %eax
// cc: 78 20                         js      0xee <_JIT_ENTRY+0xee>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d8: ff d0                         callq   *%rax
// da: 49 ff 0f                      decq    (%r15)
// dd: 75 0f                         jne     0xee <_JIT_ENTRY+0xee>
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: 4c 89 ff                      movq    %r15, %rdi
// ec: ff d0                         callq   *%rax
// ee: 49 8b 06                      movq    (%r14), %rax
// f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f3:  R_X86_64_64  PyCode_Type
// fb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// ff: 0f 85 94 00 00 00             jne     0x199 <_JIT_ENTRY+0x199>
// 105: 8b 48 48                      movl    0x48(%rax), %ecx
// 108: 49 8d 0c ce                   leaq    (%r14,%rcx,8), %rcx
// 10c: 48 83 c1 48                   addq    $0x48, %rcx
// 110: 48 89 da                      movq    %rbx, %rdx
// 113: 48 29 ca                      subq    %rcx, %rdx
// 116: 48 c1 ea 03                   shrq    $0x3, %rdx
// 11a: 85 d2                         testl   %edx, %edx
// 11c: 0f 8e a6 00 00 00             jle     0x1c8 <_JIT_ENTRY+0x1c8>
// 122: 48 83 c3 f8                   addq    $-0x8, %rbx
// 126: 49 8d 4e 48                   leaq    0x48(%r14), %rcx
// 12a: 48 29 cb                      subq    %rcx, %rbx
// 12d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 131: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 135: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000137:  R_X86_64_64  _JIT_TARGET
// 13f: 89 c9                         movl    %ecx, %ecx
// 141: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 145: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 14b: 48 83 c4 08                   addq    $0x8, %rsp
// 14f: 5b                            popq    %rbx
// 150: 41 5c                         popq    %r12
// 152: 41 5e                         popq    %r14
// 154: 41 5f                         popq    %r15
// 156: c3                            retq
// 157: 4c 29 f3                      subq    %r14, %rbx
// 15a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 15e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 162: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 166: 31 c0                         xorl    %eax, %eax
// 168: eb e1                         jmp     0x14b <_JIT_ENTRY+0x14b>
// 16a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016c:  R_X86_64_64  .rodata.str1.1+0x12d
// 174: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000176:  R_X86_64_64  .rodata.str1.1+0x13c
// 17e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000180:  R_X86_64_64  .rodata.str1.1+0x17e
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  __assert_fail
// 192: ba 4b 00 00 00                movl    $0x4b, %edx
// 197: ff d0                         callq   *%rax
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1+0x9a
// 1a3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a5:  R_X86_64_64  .rodata.str1.1+0xb8
// 1ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001af:  R_X86_64_64  .rodata.str1.1+0xf7
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  __assert_fail
// 1c1: ba 4d 00 00 00                movl    $0x4d, %edx
// 1c6: ff d0                         callq   *%rax
// 1c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ca:  R_X86_64_64  .rodata.str1.1+0x87
// 1d2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d4:  R_X86_64_64  .rodata.str1.1
// 1dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001de:  R_X86_64_64  .rodata.str1.1+0x39
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  __assert_fail
// 1f0: ba 81 08 00 00                movl    $0x881, %edx            # imm = 0x881
// 1f5: ff d0                         callq   *%rax
// 1f7: 
static const unsigned char _FOR_ITER_TIER_TWO_code_body[504] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x7e, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x4c, 0x89, 0xff, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x94, 0x00, 0x00, 0x00, 0x8b, 0x48, 0x48, 0x49, 0x8d, 0x0c, 0xce, 0x48, 0x83, 0xc1, 0x48, 0x48, 0x89, 0xda, 0x48, 0x29, 0xca, 0x48, 0xc1, 0xea, 0x03, 0x85, 0xd2, 0x0f, 0x8e, 0xa6, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x4e, 0x48, 0x48, 0x29, 0xcb, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x81, 0x08, 0x00, 0x00, 0xff, 0xd0};
static const Hole _FOR_ITER_TIER_TWO_code_holes[23] = {
    {0x30, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12d},
    {0x176, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13c},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17e},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb8},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf7},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00'
// 1a9: 00 00 00 00 00 00 00
static const unsigned char _FOR_ITER_TIER_TWO_data_body[433] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _FOR_ITER_TIER_TWO_data_holes[1];

// _GET_AITER
// 
// /tmp/tmp3v1aptj0/_GET_AITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d5                      movq    %rdx, %r13
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 16: 49 8b 47 08                   movq    0x8(%r15), %rax
// 1a: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1e: 48 85 c9                      testq   %rcx, %rcx
// 21: 74 2a                         je      0x4d <_JIT_ENTRY+0x4d>
// 23: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 27: 48 85 c9                      testq   %rcx, %rcx
// 2a: 74 21                         je      0x4d <_JIT_ENTRY+0x4d>
// 2c: 4c 89 ff                      movq    %r15, %rdi
// 2f: ff d1                         callq   *%rcx
// 31: 49 89 c4                      movq    %rax, %r12
// 34: 49 8b 07                      movq    (%r15), %rax
// 37: 48 85 c0                      testq   %rax, %rax
// 3a: 0f 8e 9d 00 00 00             jle     0xdd <_JIT_ENTRY+0xdd>
// 40: 85 c0                         testl   %eax, %eax
// 42: 0f 89 ba 00 00 00             jns     0x102 <_JIT_ENTRY+0x102>
// 48: e9 ca 00 00 00                jmp     0x117 <_JIT_ENTRY+0x117>
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  PyExc_TypeError
// 57: 48 8b 31                      movq    (%rcx), %rsi
// 5a: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 5e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000060:  R_X86_64_64  .rodata.str1.1+0x87
// 68: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000006a:  R_X86_64_64  _PyErr_Format
// 72: 4c 89 ef                      movq    %r13, %rdi
// 75: 31 c0                         xorl    %eax, %eax
// 77: 41 ff d0                      callq   *%r8
// 7a: 49 8b 07                      movq    (%r15), %rax
// 7d: 48 85 c0                      testq   %rax, %rax
// 80: 7e 09                         jle     0x8b <_JIT_ENTRY+0x8b>
// 82: 85 c0                         testl   %eax, %eax
// 84: 79 2e                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 86: e9 5a 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// 8b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008d:  R_X86_64_64  .rodata.str1.1
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  _Py_NegativeRefcount
// 9f: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// a4: 4c 89 fa                      movq    %r15, %rdx
// a7: ff d0                         callq   *%rax
// a9: 49 8b 07                      movq    (%r15), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 0f 88 31 01 00 00             js      0x1e5 <_JIT_ENTRY+0x1e5>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 ff 0f                      decq    (%r15)
// c3: 0f 85 1c 01 00 00             jne     0x1e5 <_JIT_ENTRY+0x1e5>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_Dealloc
// d3: 4c 89 ff                      movq    %r15, %rdi
// d6: ff d0                         callq   *%rax
// d8: e9 08 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// f6: 4c 89 fa                      movq    %r15, %rdx
// f9: ff d0                         callq   *%rax
// fb: 49 8b 07                      movq    (%r15), %rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 15                         js      0x117 <_JIT_ENTRY+0x117>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0f                      decq    (%r15)
// 111: 0f 84 b6 00 00 00             je      0x1cd <_JIT_ENTRY+0x1cd>
// 117: 4d 85 e4                      testq   %r12, %r12
// 11a: 0f 84 c5 00 00 00             je      0x1e5 <_JIT_ENTRY+0x1e5>
// 120: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 125: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 129: 48 85 c9                      testq   %rcx, %rcx
// 12c: 74 29                         je      0x157 <_JIT_ENTRY+0x157>
// 12e: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 133: 74 22                         je      0x157 <_JIT_ENTRY+0x157>
// 135: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _JIT_CONTINUE
// 143: 4c 89 f7                      movq    %r14, %rdi
// 146: 48 89 de                      movq    %rbx, %rsi
// 149: 4c 89 ea                      movq    %r13, %rdx
// 14c: 5b                            popq    %rbx
// 14d: 41 5c                         popq    %r12
// 14f: 41 5d                         popq    %r13
// 151: 41 5e                         popq    %r14
// 153: 41 5f                         popq    %r15
// 155: ff e0                         jmpq    *%rax
// 157: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000159:  R_X86_64_64  PyExc_TypeError
// 161: 48 8b 31                      movq    (%rcx), %rsi
// 164: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 168: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000016a:  R_X86_64_64  .rodata.str1.1+0xc8
// 172: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000174:  R_X86_64_64  _PyErr_Format
// 17c: 4c 89 ef                      movq    %r13, %rdi
// 17f: 31 c0                         xorl    %eax, %eax
// 181: 41 ff d0                      callq   *%r8
// 184: 49 8b 04 24                   movq    (%r12), %rax
// 188: 48 85 c0                      testq   %rax, %rax
// 18b: 7f 22                         jg      0x1af <_JIT_ENTRY+0x1af>
// 18d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018f:  R_X86_64_64  .rodata.str1.1
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_NegativeRefcount
// 1a1: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 1a6: 4c 89 e2                      movq    %r12, %rdx
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8b 04 24                   movq    (%r12), %rax
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 78 32                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 ff 0c 24                   decq    (%r12)
// 1c3: 4d 89 e7                      movq    %r12, %r15
// 1c6: 75 1d                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1c8: e9 fc fe ff ff                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_Dealloc
// 1d7: 4c 89 ff                      movq    %r15, %rdi
// 1da: ff d0                         callq   *%rax
// 1dc: 4d 85 e4                      testq   %r12, %r12
// 1df: 0f 85 3b ff ff ff             jne     0x120 <_JIT_ENTRY+0x120>
// 1e5: 49 8b 06                      movq    (%r14), %rax
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  PyCode_Type
// 1f2: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1f6: 75 38                         jne     0x230 <_JIT_ENTRY+0x230>
// 1f8: 8b 40 48                      movl    0x48(%rax), %eax
// 1fb: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1ff: 48 83 c0 48                   addq    $0x48, %rax
// 203: 48 89 d9                      movq    %rbx, %rcx
// 206: 48 29 c1                      subq    %rax, %rcx
// 209: 48 c1 e9 03                   shrq    $0x3, %rcx
// 20d: 85 c9                         testl   %ecx, %ecx
// 20f: 7e 4e                         jle     0x25f <_JIT_ENTRY+0x25f>
// 211: 48 83 c3 f8                   addq    $-0x8, %rbx
// 215: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 219: 48 29 c3                      subq    %rax, %rbx
// 21c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 220: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 224: 31 c0                         xorl    %eax, %eax
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: c3                            retq
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1+0x167
// 23a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023c:  R_X86_64_64  .rodata.str1.1+0x185
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  .rodata.str1.1+0x1c4
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  __assert_fail
// 258: ba 4d 00 00 00                movl    $0x4d, %edx
// 25d: ff d0                         callq   *%rax
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1+0x120
// 269: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1+0x133
// 273: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000275:  R_X86_64_64  .rodata.str1.1+0x39
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  __assert_fail
// 287: ba 5b 00 00 00                movl    $0x5b, %edx
// 28c: ff d0                         callq   *%rax
// 28e: 
static const unsigned char _GET_AITER_code_body[655] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x7e, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x74, 0x2a, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x21, 0x4c, 0x89, 0xff, 0xff, 0xd1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xba, 0x00, 0x00, 0x00, 0xe9, 0xca, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x1c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x08, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x74, 0x29, 0x48, 0x83, 0x79, 0x10, 0x00, 0x74, 0x22, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xea, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x4d, 0x89, 0xe7, 0x75, 0x1d, 0xe9, 0xfc, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x3b, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x38, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4e, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GET_AITER_code_holes[28] = {
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc8},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x167},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x185},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c4},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x120},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x133},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00"
// 1fa: 00 00 00 00 00 00
static const unsigned char _GET_AITER_data_body[513] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GET_AITER_data_holes[1];

// _GET_ANEXT
// 
// /tmp/tmp3v1aptj0/_GET_ANEXT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 8b 7e f8                   movq    -0x8(%rsi), %rdi
// 16: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 1a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001c:  R_X86_64_64  PyAsyncGen_Type
// 24: 48 39 c8                      cmpq    %rcx, %rax
// 27: 0f 84 c3 00 00 00             je      0xf0 <_JIT_ENTRY+0xf0>
// 2d: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 31: 48 85 c9                      testq   %rcx, %rcx
// 34: 0f 84 84 00 00 00             je      0xbe <_JIT_ENTRY+0xbe>
// 3a: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 3e: 48 85 c9                      testq   %rcx, %rcx
// 41: 74 7b                         je      0xbe <_JIT_ENTRY+0xbe>
// 43: ff d1                         callq   *%rcx
// 45: 48 85 c0                      testq   %rax, %rax
// 48: 0f 84 58 01 00 00             je      0x1a6 <_JIT_ENTRY+0x1a6>
// 4e: 49 89 c4                      movq    %rax, %r12
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 5b: 4c 89 e7                      movq    %r12, %rdi
// 5e: ff d0                         callq   *%rax
// 60: 48 85 c0                      testq   %rax, %rax
// 63: 0f 84 bf 00 00 00             je      0x128 <_JIT_ENTRY+0x128>
// 69: 49 89 c5                      movq    %rax, %r13
// 6c: 49 8b 04 24                   movq    (%r12), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7f 22                         jg      0x97 <_JIT_ENTRY+0x97>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 68                         js      0x103 <_JIT_ENTRY+0x103>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 75 56                         jne     0x103 <_JIT_ENTRY+0x103>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_Dealloc
// b7: 4c 89 e7                      movq    %r12, %rdi
// ba: ff d0                         callq   *%rax
// bc: eb 45                         jmp     0x103 <_JIT_ENTRY+0x103>
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  PyExc_TypeError
// c8: 48 8b 31                      movq    (%rcx), %rsi
// cb: 48 8b 48 18                   movq    0x18(%rax), %rcx
// cf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000d1:  R_X86_64_64  .rodata.str1.1+0x39
// d9: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000db:  R_X86_64_64  _PyErr_Format
// e3: 4c 89 ff                      movq    %r15, %rdi
// e6: 31 c0                         xorl    %eax, %eax
// e8: 41 ff d0                      callq   *%r8
// eb: e9 b6 00 00 00                jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// f0: 48 8b 41 50                   movq    0x50(%rcx), %rax
// f4: ff 50 10                      callq   *0x10(%rax)
// f7: 49 89 c5                      movq    %rax, %r13
// fa: 48 85 c0                      testq   %rax, %rax
// fd: 0f 84 a3 00 00 00             je      0x1a6 <_JIT_ENTRY+0x1a6>
// 103: 4c 89 2b                      movq    %r13, (%rbx)
// 106: 48 83 c3 08                   addq    $0x8, %rbx
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _JIT_CONTINUE
// 114: 4c 89 f7                      movq    %r14, %rdi
// 117: 48 89 de                      movq    %rbx, %rsi
// 11a: 4c 89 fa                      movq    %r15, %rdx
// 11d: 5b                            popq    %rbx
// 11e: 41 5c                         popq    %r12
// 120: 41 5d                         popq    %r13
// 122: 41 5e                         popq    %r14
// 124: 41 5f                         popq    %r15
// 126: ff e0                         jmpq    *%rax
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  PyExc_TypeError
// 132: 48 8b 38                      movq    (%rax), %rdi
// 135: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 13a: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 13e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000140:  R_X86_64_64  .rodata.str1.1+0x7c
// 148: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014a:  R_X86_64_64  _PyErr_FormatFromCause
// 152: 31 c0                         xorl    %eax, %eax
// 154: ff d1                         callq   *%rcx
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 48 85 c0                      testq   %rax, %rax
// 15d: 7f 22                         jg      0x181 <_JIT_ENTRY+0x181>
// 15f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000161:  R_X86_64_64  .rodata.str1.1
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_NegativeRefcount
// 173: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 178: 4c 89 e2                      movq    %r12, %rdx
// 17b: ff d0                         callq   *%rax
// 17d: 49 8b 04 24                   movq    (%r12), %rax
// 181: 85 c0                         testl   %eax, %eax
// 183: 78 21                         js      0x1a6 <_JIT_ENTRY+0x1a6>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18f: ff d0                         callq   *%rax
// 191: 49 ff 0c 24                   decq    (%r12)
// 195: 75 0f                         jne     0x1a6 <_JIT_ENTRY+0x1a6>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 e7                      movq    %r12, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 4c 29 f3                      subq    %r14, %rbx
// 1a9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ad: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1b5: 31 c0                         xorl    %eax, %eax
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: c3                            retq
// 1c1: 
static const unsigned char _GET_ANEXT_code_body[450] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x7e, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7b, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x58, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xb6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _GET_ANEXT_code_holes[18] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GET_ANEXT_data_holes[1];

// _GET_AWAITABLE
// 
// /tmp/tmp3v1aptj0/_GET_AWAITABLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 22: 4c 89 ef                      movq    %r13, %rdi
// 25: ff d0                         callq   *%rax
// 27: 49 89 c4                      movq    %rax, %r12
// 2a: 48 85 c0                      testq   %rax, %rax
// 2d: 74 0f                         je      0x3e <_JIT_ENTRY+0x3e>
// 2f: 49 8b 45 00                   movq    (%r13), %rax
// 33: 48 85 c0                      testq   %rax, %rax
// 36: 7e 2f                         jle     0x67 <_JIT_ENTRY+0x67>
// 38: 85 c0                         testl   %eax, %eax
// 3a: 79 51                         jns     0x8d <_JIT_ENTRY+0x8d>
// 3c: eb 65                         jmp     0xa3 <_JIT_ENTRY+0xa3>
// 3e: 49 8b 75 08                   movq    0x8(%r13), %rsi
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  _JIT_OPARG
// 4c: 0f b7 d0                      movzwl  %ax, %edx
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_FormatAwaitableError
// 59: 4c 89 ff                      movq    %r15, %rdi
// 5c: ff d0                         callq   *%rax
// 5e: 49 8b 45 00                   movq    (%r13), %rax
// 62: 48 85 c0                      testq   %rax, %rax
// 65: 7f d1                         jg      0x38 <_JIT_ENTRY+0x38>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 80: 4c 89 ea                      movq    %r13, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 45 00                   movq    (%r13), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 16                         js      0xa3 <_JIT_ENTRY+0xa3>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 4d 00                   decq    (%r13)
// 9d: 0f 84 15 01 00 00             je      0x1b8 <_JIT_ENTRY+0x1b8>
// a3: 4d 85 e4                      testq   %r12, %r12
// a6: 0f 84 24 01 00 00             je      0x1d0 <_JIT_ENTRY+0x1d0>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  PyCoro_Type
// b6: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// bb: 74 27                         je      0xe4 <_JIT_ENTRY+0xe4>
// bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _JIT_CONTINUE
// cb: 4c 89 f7                      movq    %r14, %rdi
// ce: 48 89 de                      movq    %rbx, %rsi
// d1: 4c 89 fa                      movq    %r15, %rdx
// d4: 48 83 c4 08                   addq    $0x8, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5d                         popq    %r13
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: 5d                            popq    %rbp
// e2: ff e0                         jmpq    *%rax
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _PyGen_yf
// ee: 4c 89 e7                      movq    %r12, %rdi
// f1: ff d0                         callq   *%rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 74 c5                         je      0xbd <_JIT_ENTRY+0xbd>
// f8: 49 89 c5                      movq    %rax, %r13
// fb: 48 8b 00                      movq    (%rax), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f 22                         jg      0x125 <_JIT_ENTRY+0x125>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 11c: 4c 89 ea                      movq    %r13, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 49 8b 45 00                   movq    (%r13), %rax
// 125: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000127:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 17                         js      0x14a <_JIT_ENTRY+0x14a>
// 133: ff d5                         callq   *%rbp
// 135: 49 ff 4d 00                   decq    (%r13)
// 139: 75 0f                         jne     0x14a <_JIT_ENTRY+0x14a>
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _Py_Dealloc
// 145: 4c 89 ef                      movq    %r13, %rdi
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 04 24                   movq    (%r12), %rax
// 14e: 48 85 c0                      testq   %rax, %rax
// 151: 7f 22                         jg      0x175 <_JIT_ENTRY+0x175>
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_NegativeRefcount
// 167: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 16c: 4c 89 e2                      movq    %r12, %rdx
// 16f: ff d0                         callq   *%rax
// 171: 49 8b 04 24                   movq    (%r12), %rax
// 175: 85 c0                         testl   %eax, %eax
// 177: 78 17                         js      0x190 <_JIT_ENTRY+0x190>
// 179: ff d5                         callq   *%rbp
// 17b: 49 ff 0c 24                   decq    (%r12)
// 17f: 75 0f                         jne     0x190 <_JIT_ENTRY+0x190>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 4c 89 e7                      movq    %r12, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  PyExc_RuntimeError
// 19a: 48 8b 30                      movq    (%rax), %rsi
// 19d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019f:  R_X86_64_64  .rodata.str1.1+0x87
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _PyErr_SetString
// 1b1: 4c 89 ff                      movq    %r15, %rdi
// 1b4: ff d0                         callq   *%rax
// 1b6: eb 18                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_Dealloc
// 1c2: 4c 89 ef                      movq    %r13, %rdi
// 1c5: ff d0                         callq   *%rax
// 1c7: 4d 85 e4                      testq   %r12, %r12
// 1ca: 0f 85 dc fe ff ff             jne     0xac <_JIT_ENTRY+0xac>
// 1d0: 49 8b 06                      movq    (%r14), %rax
// 1d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d5:  R_X86_64_64  PyCode_Type
// 1dd: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1e1: 75 3d                         jne     0x220 <_JIT_ENTRY+0x220>
// 1e3: 8b 40 48                      movl    0x48(%rax), %eax
// 1e6: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1ea: 48 83 c0 48                   addq    $0x48, %rax
// 1ee: 48 89 d9                      movq    %rbx, %rcx
// 1f1: 48 29 c1                      subq    %rax, %rcx
// 1f4: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1f8: 85 c9                         testl   %ecx, %ecx
// 1fa: 7e 53                         jle     0x24f <_JIT_ENTRY+0x24f>
// 1fc: 48 83 c3 f8                   addq    $-0x8, %rbx
// 200: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 204: 48 29 c3                      subq    %rax, %rbx
// 207: 48 c1 eb 03                   shrq    $0x3, %rbx
// 20b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 20f: 31 c0                         xorl    %eax, %eax
// 211: 48 83 c4 08                   addq    $0x8, %rsp
// 215: 5b                            popq    %rbx
// 216: 41 5c                         popq    %r12
// 218: 41 5d                         popq    %r13
// 21a: 41 5e                         popq    %r14
// 21c: 41 5f                         popq    %r15
// 21e: 5d                            popq    %rbp
// 21f: c3                            retq
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1+0xf1
// 22a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022c:  R_X86_64_64  .rodata.str1.1+0x10f
// 234: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000236:  R_X86_64_64  .rodata.str1.1+0x14e
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  __assert_fail
// 248: ba 4d 00 00 00                movl    $0x4d, %edx
// 24d: ff d0                         callq   *%rax
// 24f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000251:  R_X86_64_64  .rodata.str1.1+0xaa
// 259: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025b:  R_X86_64_64  .rodata.str1.1+0xbd
// 263: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000265:  R_X86_64_64  .rodata.str1.1+0x39
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  __assert_fail
// 277: ba 5b 00 00 00                movl    $0x5b, %edx
// 27c: ff d0                         callq   *%rax
// 27e: 
static const unsigned char _GET_AWAITABLE_code_body[639] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2f, 0x85, 0xc0, 0x79, 0x51, 0xeb, 0x65, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x27, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc5, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0xdc, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3d, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x53, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GET_AWAITABLE_code_holes[30] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf1},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10f},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14e},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xaa},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbd},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00coroutine is being awaited already\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 184: 00 00 00 00
static const unsigned char _GET_AWAITABLE_data_body[393] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GET_AWAITABLE_data_holes[1];

// _GET_ITER
// 
// /tmp/tmp3v1aptj0/_GET_ITER.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  PyObject_GetIter
// 20: 4c 89 ef                      movq    %r13, %rdi
// 23: ff d0                         callq   *%rax
// 25: 49 89 c4                      movq    %rax, %r12
// 28: 49 8b 45 00                   movq    (%r13), %rax
// 2c: 48 85 c0                      testq   %rax, %rax
// 2f: 7e 06                         jle     0x37 <_JIT_ENTRY+0x37>
// 31: 85 c0                         testl   %eax, %eax
// 33: 79 28                         jns     0x5d <_JIT_ENTRY+0x5d>
// 35: eb 38                         jmp     0x6f <_JIT_ENTRY+0x6f>
// 37: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000039:  R_X86_64_64  .rodata.str1.1
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  _Py_NegativeRefcount
// 4b: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 50: 4c 89 ea                      movq    %r13, %rdx
// 53: ff d0                         callq   *%rax
// 55: 49 8b 45 00                   movq    (%r13), %rax
// 59: 85 c0                         testl   %eax, %eax
// 5b: 78 12                         js      0x6f <_JIT_ENTRY+0x6f>
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 67: ff d0                         callq   *%rax
// 69: 49 ff 4d 00                   decq    (%r13)
// 6d: 74 27                         je      0x96 <_JIT_ENTRY+0x96>
// 6f: 4d 85 e4                      testq   %r12, %r12
// 72: 74 36                         je      0xaa <_JIT_ENTRY+0xaa>
// 74: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _JIT_CONTINUE
// 82: 4c 89 f7                      movq    %r14, %rdi
// 85: 48 89 de                      movq    %rbx, %rsi
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: 5b                            popq    %rbx
// 8c: 41 5c                         popq    %r12
// 8e: 41 5d                         popq    %r13
// 90: 41 5e                         popq    %r14
// 92: 41 5f                         popq    %r15
// 94: ff e0                         jmpq    *%rax
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_Dealloc
// a0: 4c 89 ef                      movq    %r13, %rdi
// a3: ff d0                         callq   *%rax
// a5: 4d 85 e4                      testq   %r12, %r12
// a8: 75 ca                         jne     0x74 <_JIT_ENTRY+0x74>
// aa: 49 8b 06                      movq    (%r14), %rax
// ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000af:  R_X86_64_64  PyCode_Type
// b7: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// bb: 75 38                         jne     0xf5 <_JIT_ENTRY+0xf5>
// bd: 8b 40 48                      movl    0x48(%rax), %eax
// c0: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// c4: 48 83 c0 48                   addq    $0x48, %rax
// c8: 48 89 d9                      movq    %rbx, %rcx
// cb: 48 29 c1                      subq    %rax, %rcx
// ce: 48 c1 e9 03                   shrq    $0x3, %rcx
// d2: 85 c9                         testl   %ecx, %ecx
// d4: 7e 4e                         jle     0x124 <_JIT_ENTRY+0x124>
// d6: 48 83 c3 f8                   addq    $-0x8, %rbx
// da: 49 8d 46 48                   leaq    0x48(%r14), %rax
// de: 48 29 c3                      subq    %rax, %rbx
// e1: 48 c1 eb 03                   shrq    $0x3, %rbx
// e5: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e9: 31 c0                         xorl    %eax, %eax
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1+0xce
// ff: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000101:  R_X86_64_64  .rodata.str1.1+0xec
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  .rodata.str1.1+0x12b
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  __assert_fail
// 11d: ba 4d 00 00 00                movl    $0x4d, %edx
// 122: ff d0                         callq   *%rax
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1+0x87
// 12e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000130:  R_X86_64_64  .rodata.str1.1+0x9a
// 138: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013a:  R_X86_64_64  .rodata.str1.1+0x39
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  __assert_fail
// 14c: ba 5b 00 00 00                movl    $0x5b, %edx
// 151: ff d0                         callq   *%rax
// 153: 
static const unsigned char _GET_ITER_code_body[340] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x27, 0x4d, 0x85, 0xe4, 0x74, 0x36, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xca, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x38, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4e, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GET_ITER_code_holes[16] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x101, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _GET_ITER_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GET_ITER_data_holes[1];

// _GET_LEN
// 
// /tmp/tmp3v1aptj0/_GET_LEN.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 49 89 d7                      movq    %rdx, %r15
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 8b 7e f8                   movq    -0x8(%rsi), %rdi
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  PyObject_Size
// 1c: ff d0                         callq   *%rax
// 1e: 48 85 c0                      testq   %rax, %rax
// 21: 78 35                         js      0x58 <_JIT_ENTRY+0x58>
// 23: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000025:  R_X86_64_64  PyLong_FromSsize_t
// 2d: 48 89 c7                      movq    %rax, %rdi
// 30: ff d1                         callq   *%rcx
// 32: 48 85 c0                      testq   %rax, %rax
// 35: 74 21                         je      0x58 <_JIT_ENTRY+0x58>
// 37: 48 89 03                      movq    %rax, (%rbx)
// 3a: 48 83 c3 08                   addq    $0x8, %rbx
// 3e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000040:  R_X86_64_64  _JIT_CONTINUE
// 48: 4c 89 f7                      movq    %r14, %rdi
// 4b: 48 89 de                      movq    %rbx, %rsi
// 4e: 4c 89 fa                      movq    %r15, %rdx
// 51: 5b                            popq    %rbx
// 52: 41 5e                         popq    %r14
// 54: 41 5f                         popq    %r15
// 56: ff e0                         jmpq    *%rax
// 58: 4c 29 f3                      subq    %r14, %rbx
// 5b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 63: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 67: 31 c0                         xorl    %eax, %eax
// 69: 5b                            popq    %rbx
// 6a: 41 5e                         popq    %r14
// 6c: 41 5f                         popq    %r15
// 6e: c3                            retq
// 6f: 
static const unsigned char _GET_LEN_code_body[112] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x35, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _GET_LEN_code_holes[4] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _GET_LEN_data_body[1];
static const Hole _GET_LEN_data_holes[1];

// _GET_YIELD_FROM_ITER
// 
// /tmp/tmp3v1aptj0/_GET_YIELD_FROM_ITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 16: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001d:  R_X86_64_64  PyCoro_Type
// 25: 48 39 c8                      cmpq    %rcx, %rax
// 28: 0f 84 83 00 00 00             je      0xb1 <_JIT_ENTRY+0xb1>
// 2e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000030:  R_X86_64_64  PyGen_Type
// 38: 48 39 c8                      cmpq    %rcx, %rax
// 3b: 0f 84 8e 00 00 00             je      0xcf <_JIT_ENTRY+0xcf>
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  PyObject_GetIter
// 4b: 4c 89 e7                      movq    %r12, %rdi
// 4e: ff d0                         callq   *%rax
// 50: 48 85 c0                      testq   %rax, %rax
// 53: 0f 84 be 00 00 00             je      0x117 <_JIT_ENTRY+0x117>
// 59: 49 89 c5                      movq    %rax, %r13
// 5c: 49 8b 04 24                   movq    (%r12), %rax
// 60: 48 85 c0                      testq   %rax, %rax
// 63: 7f 22                         jg      0x87 <_JIT_ENTRY+0x87>
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_NegativeRefcount
// 79: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 7e: 4c 89 e2                      movq    %r12, %rdx
// 81: ff d0                         callq   *%rax
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 85 c0                         testl   %eax, %eax
// 89: 78 21                         js      0xac <_JIT_ENTRY+0xac>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 95: ff d0                         callq   *%rax
// 97: 49 ff 0c 24                   decq    (%r12)
// 9b: 75 0f                         jne     0xac <_JIT_ENTRY+0xac>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_Dealloc
// a7: 4c 89 e7                      movq    %r12, %rdi
// aa: ff d0                         callq   *%rax
// ac: 4d 89 ec                      movq    %r13, %r12
// af: eb 1e                         jmp     0xcf <_JIT_ENTRY+0xcf>
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  PyCode_Type
// be: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c2: 75 6e                         jne     0x132 <_JIT_ENTRY+0x132>
// c4: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// c8: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// cd: 74 22                         je      0xf1 <_JIT_ENTRY+0xf1>
// cf: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_CONTINUE
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 89 de                      movq    %rbx, %rsi
// e3: 4c 89 fa                      movq    %r15, %rdx
// e6: 5b                            popq    %rbx
// e7: 41 5c                         popq    %r12
// e9: 41 5d                         popq    %r13
// eb: 41 5e                         popq    %r14
// ed: 41 5f                         popq    %r15
// ef: ff e0                         jmpq    *%rax
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  PyExc_TypeError
// fb: 48 8b 30                      movq    (%rax), %rsi
// fe: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000100:  R_X86_64_64  .rodata.str1.1+0x39
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _PyErr_SetString
// 112: 4c 89 ff                      movq    %r15, %rdi
// 115: ff d0                         callq   *%rax
// 117: 4c 29 f3                      subq    %r14, %rbx
// 11a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 11e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 122: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 126: 31 c0                         xorl    %eax, %eax
// 128: 5b                            popq    %rbx
// 129: 41 5c                         popq    %r12
// 12b: 41 5d                         popq    %r13
// 12d: 41 5e                         popq    %r14
// 12f: 41 5f                         popq    %r15
// 131: c3                            retq
// 132: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000134:  R_X86_64_64  .rodata.str1.1+0x7d
// 13c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1+0x9b
// 146: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0xda
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  __assert_fail
// 15a: ba 4d 00 00 00                movl    $0x4d, %edx
// 15f: ff d0                         callq   *%rax
// 161: 
static const unsigned char _GET_YIELD_FROM_ITER_code_body[354] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0xeb, 0x1e, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x6e, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x22, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GET_YIELD_FROM_ITER_code_holes[17] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7d},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9b},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xda},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00"
// 110: 
static const unsigned char _GET_YIELD_FROM_ITER_data_body[273] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00};
static const Hole _GET_YIELD_FROM_ITER_data_holes[1];

// _GUARD_BOTH_FLOAT
// 
// /tmp/tmp3v1aptj0/_GUARD_BOTH_FLOAT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000007:  R_X86_64_64  PyFloat_Type
// f: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 13: 75 0a                         jne     0x1f <_JIT_ENTRY+0x1f>
// 15: 48 8b 4e f8                   movq    -0x8(%rsi), %rcx
// 19: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1d: 74 39                         je      0x58 <_JIT_ENTRY+0x58>
// 1f: 48 29 fe                      subq    %rdi, %rsi
// 22: 48 83 c6 b8                   addq    $-0x48, %rsi
// 26: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2a: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2d: 48 8b 07                      movq    (%rdi), %rax
// 30: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000032:  R_X86_64_64  PyCode_Type
// 3a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 3e: 75 25                         jne     0x65 <_JIT_ENTRY+0x65>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _JIT_TARGET
// 4a: 89 c9                         movl    %ecx, %ecx
// 4c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 50: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 56: 59                            popq    %rcx
// 57: c3                            retq
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _JIT_CONTINUE
// 62: 59                            popq    %rcx
// 63: ff e0                         jmpq    *%rax
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x1e
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  .rodata.str1.1+0x5d
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  __assert_fail
// 8d: ba 4d 00 00 00                movl    $0x4d, %edx
// 92: ff d0                         callq   *%rax
// 94: 
static const unsigned char _GUARD_BOTH_FLOAT_code_body[149] = {0x50, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4e, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_BOTH_FLOAT_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _GUARD_BOTH_FLOAT_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_BOTH_FLOAT_data_holes[1];

// _GUARD_BOTH_INT
// 
// /tmp/tmp3v1aptj0/_GUARD_BOTH_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000007:  R_X86_64_64  PyLong_Type
// f: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 13: 75 0a                         jne     0x1f <_JIT_ENTRY+0x1f>
// 15: 48 8b 4e f8                   movq    -0x8(%rsi), %rcx
// 19: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1d: 74 39                         je      0x58 <_JIT_ENTRY+0x58>
// 1f: 48 29 fe                      subq    %rdi, %rsi
// 22: 48 83 c6 b8                   addq    $-0x48, %rsi
// 26: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2a: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2d: 48 8b 07                      movq    (%rdi), %rax
// 30: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000032:  R_X86_64_64  PyCode_Type
// 3a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 3e: 75 25                         jne     0x65 <_JIT_ENTRY+0x65>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _JIT_TARGET
// 4a: 89 c9                         movl    %ecx, %ecx
// 4c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 50: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 56: 59                            popq    %rcx
// 57: c3                            retq
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _JIT_CONTINUE
// 62: 59                            popq    %rcx
// 63: ff e0                         jmpq    *%rax
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x1e
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  .rodata.str1.1+0x5d
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  __assert_fail
// 8d: ba 4d 00 00 00                movl    $0x4d, %edx
// 92: ff d0                         callq   *%rax
// 94: 
static const unsigned char _GUARD_BOTH_INT_code_body[149] = {0x50, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4e, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_BOTH_INT_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _GUARD_BOTH_INT_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_BOTH_INT_data_holes[1];

// _GUARD_BOTH_UNICODE
// 
// /tmp/tmp3v1aptj0/_GUARD_BOTH_UNICODE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000007:  R_X86_64_64  PyUnicode_Type
// f: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 13: 75 0a                         jne     0x1f <_JIT_ENTRY+0x1f>
// 15: 48 8b 4e f8                   movq    -0x8(%rsi), %rcx
// 19: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 1d: 74 39                         je      0x58 <_JIT_ENTRY+0x58>
// 1f: 48 29 fe                      subq    %rdi, %rsi
// 22: 48 83 c6 b8                   addq    $-0x48, %rsi
// 26: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2a: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2d: 48 8b 07                      movq    (%rdi), %rax
// 30: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000032:  R_X86_64_64  PyCode_Type
// 3a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 3e: 75 25                         jne     0x65 <_JIT_ENTRY+0x65>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _JIT_TARGET
// 4a: 89 c9                         movl    %ecx, %ecx
// 4c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 50: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 56: 59                            popq    %rcx
// 57: c3                            retq
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _JIT_CONTINUE
// 62: 59                            popq    %rcx
// 63: ff e0                         jmpq    *%rax
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x1e
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  .rodata.str1.1+0x5d
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  __assert_fail
// 8d: ba 4d 00 00 00                movl    $0x4d, %edx
// 92: ff d0                         callq   *%rax
// 94: 
static const unsigned char _GUARD_BOTH_UNICODE_code_body[149] = {0x50, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4e, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_BOTH_UNICODE_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x32, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _GUARD_BOTH_UNICODE_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_BOTH_UNICODE_data_holes[1];

// _GUARD_BUILTINS_VERSION
// 
// /tmp/tmp3v1aptj0/_GUARD_BUILTINS_VERSION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 47 20                   movq    0x20(%rdi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyDict_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 75 29                         jne     0x3e <_JIT_ENTRY+0x3e>
// 15: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001b:  R_X86_64_64  _JIT_OPERAND
// 23: 0f b7 c9                      movzwl  %cx, %ecx
// 26: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 29: 75 13                         jne     0x3e <_JIT_ENTRY+0x3e>
// 2b: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 2f: 74 75                         je      0xa6 <_JIT_ENTRY+0xa6>
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_CONTINUE
// 3b: 59                            popq    %rcx
// 3c: ff e0                         jmpq    *%rax
// 3e: 48 29 fe                      subq    %rdi, %rsi
// 41: 48 83 c6 b8                   addq    $-0x48, %rsi
// 45: 48 c1 ee 03                   shrq    $0x3, %rsi
// 49: 89 77 40                      movl    %esi, 0x40(%rdi)
// 4c: 48 8b 07                      movq    (%rdi), %rax
// 4f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000051:  R_X86_64_64  PyCode_Type
// 59: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 5d: 75 18                         jne     0x77 <_JIT_ENTRY+0x77>
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: 59                            popq    %rcx
// 76: c3                            retq
// 77: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000079:  R_X86_64_64  .rodata.str1.1+0xa4
// 81: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1+0xc2
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  .rodata.str1.1+0x101
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  __assert_fail
// 9f: ba 4d 00 00 00                movl    $0x4d, %edx
// a4: ff d0                         callq   *%rax
// a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1+0x87
// b0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  __assert_fail
// ce: ba 7c 04 00 00                movl    $0x47c, %edx            # imm = 0x47C
// d3: ff d0                         callq   *%rax
// d5: 
static const unsigned char _GUARD_BUILTINS_VERSION_code_body[214] = {0x50, 0x48, 0x8b, 0x47, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x29, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x13, 0x80, 0x78, 0x0a, 0x00, 0x74, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7c, 0x04, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_BUILTINS_VERSION_code_holes[14] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc2},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x101},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00DK_IS_UNICODE(dict->ma_keys)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 137: 00
static const unsigned char _GUARD_BUILTINS_VERSION_data_body[313] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x44, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x28, 0x64, 0x69, 0x63, 0x74, 0x2d, 0x3e, 0x6d, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _GUARD_BUILTINS_VERSION_data_holes[1];

// _GUARD_DORV_VALUES
// 
// /tmp/tmp3v1aptj0/_GUARD_DORV_VALUES.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 9: f6 81 a8 00 00 00 10          testb   $0x10, 0xa8(%rcx)
// 10: 74 4c                         je      0x5e <_JIT_ENTRY+0x5e>
// 12: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 16: 75 39                         jne     0x51 <_JIT_ENTRY+0x51>
// 18: 48 29 fe                      subq    %rdi, %rsi
// 1b: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1f: 48 c1 ee 03                   shrq    $0x3, %rsi
// 23: 89 77 40                      movl    %esi, 0x40(%rdi)
// 26: 48 8b 07                      movq    (%rdi), %rax
// 29: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002b:  R_X86_64_64  PyCode_Type
// 33: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 37: 75 54                         jne     0x8d <_JIT_ENTRY+0x8d>
// 39: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003b:  R_X86_64_64  _JIT_TARGET
// 43: 89 c9                         movl    %ecx, %ecx
// 45: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 49: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4f: 59                            popq    %rcx
// 50: c3                            retq
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_CONTINUE
// 5b: 59                            popq    %rcx
// 5c: ff e0                         jmpq    *%rax
// 5e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000060:  R_X86_64_64  .rodata.str1.1+0x87
// 68: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000006a:  R_X86_64_64  .rodata.str1.1
// 72: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000074:  R_X86_64_64  .rodata.str1.1+0x39
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  __assert_fail
// 86: ba 01 07 00 00                movl    $0x701, %edx            # imm = 0x701
// 8b: ff d0                         callq   *%rax
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1+0xba
// 97: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1+0xd8
// a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a3:  R_X86_64_64  .rodata.str1.1+0x117
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  __assert_fail
// b5: ba 4d 00 00 00                movl    $0x4d, %edx
// ba: ff d0                         callq   *%rax
// bc: 
static const unsigned char _GUARD_DORV_VALUES_code_body[189] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x10, 0x74, 0x4c, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x54, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x01, 0x07, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_DORV_VALUES_code_holes[12] = {
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xba},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd8},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x117},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(owner)->tp_flags & Py_TPFLAGS_MANAGED_DICT\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 14d: 00 00 00
static const unsigned char _GUARD_DORV_VALUES_data_body[337] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x26, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_DORV_VALUES_data_holes[1];

// _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmp3v1aptj0/_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 49 89 fe                      movq    %rdi, %r14
// 8: 48 8b 7e f8                   movq    -0x8(%rsi), %rdi
// c: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 10: f6 80 a8 00 00 00 10          testb   $0x10, 0xa8(%rax)
// 17: 74 78                         je      0x91 <_JIT_ENTRY+0x91>
// 19: 49 89 d7                      movq    %rdx, %r15
// 1c: 48 89 f3                      movq    %rsi, %rbx
// 1f: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 23: 75 14                         jne     0x39 <_JIT_ENTRY+0x39>
// 25: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 33: ff d0                         callq   *%rax
// 35: 84 c0                         testb   %al, %al
// 37: 74 1a                         je      0x53 <_JIT_ENTRY+0x53>
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _JIT_CONTINUE
// 43: 4c 89 f7                      movq    %r14, %rdi
// 46: 48 89 de                      movq    %rbx, %rsi
// 49: 4c 89 fa                      movq    %r15, %rdx
// 4c: 5b                            popq    %rbx
// 4d: 41 5e                         popq    %r14
// 4f: 41 5f                         popq    %r15
// 51: ff e0                         jmpq    *%rax
// 53: 4c 29 f3                      subq    %r14, %rbx
// 56: 48 83 c3 b8                   addq    $-0x48, %rbx
// 5a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 5e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 62: 49 8b 06                      movq    (%r14), %rax
// 65: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000067:  R_X86_64_64  PyCode_Type
// 6f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 73: 75 4b                         jne     0xc0 <_JIT_ENTRY+0xc0>
// 75: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000077:  R_X86_64_64  _JIT_TARGET
// 7f: 89 c9                         movl    %ecx, %ecx
// 81: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 85: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8b: 5b                            popq    %rbx
// 8c: 41 5e                         popq    %r14
// 8e: 41 5f                         popq    %r15
// 90: c3                            retq
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1+0x87
// 9b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009d:  R_X86_64_64  .rodata.str1.1
// a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a7:  R_X86_64_64  .rodata.str1.1+0x39
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  __assert_fail
// b9: ba 87 09 00 00                movl    $0x987, %edx            # imm = 0x987
// be: ff d0                         callq   *%rax
// c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0xba
// ca: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1+0xd8
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1+0x117
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  __assert_fail
// e8: ba 4d 00 00 00                movl    $0x4d, %edx
// ed: ff d0                         callq   *%rax
// ef: 
static const unsigned char _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[240] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x7e, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x10, 0x74, 0x78, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x4b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[13] = {
    {0x2b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xba},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd8},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x117},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(owner)->tp_flags & Py_TPFLAGS_MANAGED_DICT\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 14d: 00 00 00
static const unsigned char _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[337] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x26, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _GUARD_GLOBALS_VERSION
// 
// /tmp/tmp3v1aptj0/_GUARD_GLOBALS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 47 18                   movq    0x18(%rdi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyDict_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 75 29                         jne     0x3e <_JIT_ENTRY+0x3e>
// 15: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001b:  R_X86_64_64  _JIT_OPERAND
// 23: 0f b7 c9                      movzwl  %cx, %ecx
// 26: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 29: 75 13                         jne     0x3e <_JIT_ENTRY+0x3e>
// 2b: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 2f: 74 75                         je      0xa6 <_JIT_ENTRY+0xa6>
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_CONTINUE
// 3b: 59                            popq    %rcx
// 3c: ff e0                         jmpq    *%rax
// 3e: 48 29 fe                      subq    %rdi, %rsi
// 41: 48 83 c6 b8                   addq    $-0x48, %rsi
// 45: 48 c1 ee 03                   shrq    $0x3, %rsi
// 49: 89 77 40                      movl    %esi, 0x40(%rdi)
// 4c: 48 8b 07                      movq    (%rdi), %rax
// 4f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000051:  R_X86_64_64  PyCode_Type
// 59: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 5d: 75 18                         jne     0x77 <_JIT_ENTRY+0x77>
// 5f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000061:  R_X86_64_64  _JIT_TARGET
// 69: 89 c9                         movl    %ecx, %ecx
// 6b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 6f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 75: 59                            popq    %rcx
// 76: c3                            retq
// 77: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000079:  R_X86_64_64  .rodata.str1.1+0xa4
// 81: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1+0xc2
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  .rodata.str1.1+0x101
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  __assert_fail
// 9f: ba 4d 00 00 00                movl    $0x4d, %edx
// a4: ff d0                         callq   *%rax
// a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1+0x87
// b0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  .rodata.str1.1+0x39
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  __assert_fail
// ce: ba 73 04 00 00                movl    $0x473, %edx            # imm = 0x473
// d3: ff d0                         callq   *%rax
// d5: 
static const unsigned char _GUARD_GLOBALS_VERSION_code_body[214] = {0x50, 0x48, 0x8b, 0x47, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x29, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x13, 0x80, 0x78, 0x0a, 0x00, 0x74, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x73, 0x04, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_GLOBALS_VERSION_code_holes[14] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc2},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x101},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00DK_IS_UNICODE(dict->ma_keys)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 137: 00
static const unsigned char _GUARD_GLOBALS_VERSION_data_body[313] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x44, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x28, 0x64, 0x69, 0x63, 0x74, 0x2d, 0x3e, 0x6d, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _GUARD_GLOBALS_VERSION_data_holes[1];

// _GUARD_IS_FALSE_POP
// 
// /tmp/tmp3v1aptj0/_GUARD_IS_FALSE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  _Py_TrueStruct
// f: 48 39 c8                      cmpq    %rcx, %rax
// 12: 74 20                         je      0x34 <_JIT_ENTRY+0x34>
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _Py_FalseStruct
// 1e: 48 39 c8                      cmpq    %rcx, %rax
// 21: 75 4a                         jne     0x6d <_JIT_ENTRY+0x6d>
// 23: 48 83 c6 f8                   addq    $-0x8, %rsi
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_CONTINUE
// 31: 59                            popq    %rcx
// 32: ff e0                         jmpq    *%rax
// 34: 48 29 fe                      subq    %rdi, %rsi
// 37: 48 83 c6 b8                   addq    $-0x48, %rsi
// 3b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 3f: 89 77 40                      movl    %esi, 0x40(%rdi)
// 42: 48 8b 07                      movq    (%rdi), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  PyCode_Type
// 4f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 53: 75 47                         jne     0x9c <_JIT_ENTRY+0x9c>
// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000057:  R_X86_64_64  _JIT_TARGET
// 5f: 89 c9                         movl    %ecx, %ecx
// 61: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 65: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6b: 59                            popq    %rcx
// 6c: c3                            retq
// 6d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006f:  R_X86_64_64  .rodata.str1.1+0x87
// 77: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000079:  R_X86_64_64  .rodata.str1.1
// 81: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000083:  R_X86_64_64  .rodata.str1.1+0x39
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  __assert_fail
// 95: ba 03 0d 00 00                movl    $0xd03, %edx            # imm = 0xD03
// 9a: ff d0                         callq   *%rax
// 9c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009e:  R_X86_64_64  .rodata.str1.1+0x98
// a6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1+0xb6
// b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1+0xf5
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  __assert_fail
// c4: ba 4d 00 00 00                movl    $0x4d, %edx
// c9: ff d0                         callq   *%rax
// cb: 
static const unsigned char _GUARD_IS_FALSE_POP_code_body[204] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x75, 0x4a, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x03, 0x0d, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_IS_FALSE_POP_code_holes[14] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x79, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x98},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb6},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf5},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_IsFalse(flag)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 12b: 00 00 00 00 00
static const unsigned char _GUARD_IS_FALSE_POP_data_body[305] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x49, 0x73, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x28, 0x66, 0x6c, 0x61, 0x67, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_IS_FALSE_POP_data_holes[1];

// _GUARD_IS_NONE_POP
// 
// /tmp/tmp3v1aptj0/_GUARD_IS_NONE_POP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 89 f0                      movq    %rsi, %rax
// 4: 48 83 c6 f8                   addq    $-0x8, %rsi
// 8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000a:  R_X86_64_64  _Py_NoneStruct
// 12: 48 39 48 f8                   cmpq    %rcx, -0x8(%rax)
// 16: 48 0f 45 f0                   cmovneq %rax, %rsi
// 1a: 74 39                         je      0x55 <_JIT_ENTRY+0x55>
// 1c: 48 29 fe                      subq    %rdi, %rsi
// 1f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 23: 48 c1 ee 03                   shrq    $0x3, %rsi
// 27: 89 77 40                      movl    %esi, 0x40(%rdi)
// 2a: 48 8b 07                      movq    (%rdi), %rax
// 2d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002f:  R_X86_64_64  PyCode_Type
// 37: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 3b: 75 25                         jne     0x62 <_JIT_ENTRY+0x62>
// 3d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003f:  R_X86_64_64  _JIT_TARGET
// 47: 89 c9                         movl    %ecx, %ecx
// 49: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 4d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 53: 59                            popq    %rcx
// 54: c3                            retq
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _JIT_CONTINUE
// 5f: 59                            popq    %rcx
// 60: ff e0                         jmpq    *%rax
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1+0x1e
// 76: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000078:  R_X86_64_64  .rodata.str1.1+0x5d
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  __assert_fail
// 8a: ba 4d 00 00 00                movl    $0x4d, %edx
// 8f: ff d0                         callq   *%rax
// 91: 
static const unsigned char _GUARD_IS_NONE_POP_code_body[146] = {0x50, 0x48, 0x89, 0xf0, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0xf8, 0x48, 0x0f, 0x45, 0xf0, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_IS_NONE_POP_code_holes[9] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _GUARD_IS_NONE_POP_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_IS_NONE_POP_data_holes[1];

// _GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmp3v1aptj0/_GUARD_IS_NOT_NONE_POP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _Py_NoneStruct
// 1c: 49 39 c4                      cmpq    %rax, %r12
// 1f: 74 19                         je      0x3a <_JIT_ENTRY+0x3a>
// 21: 49 89 d7                      movq    %rdx, %r15
// 24: 49 8b 04 24                   movq    (%r12), %rax
// 28: 48 85 c0                      testq   %rax, %rax
// 2b: 7e 55                         jle     0x82 <_JIT_ENTRY+0x82>
// 2d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 31: 85 c0                         testl   %eax, %eax
// 33: 79 77                         jns     0xac <_JIT_ENTRY+0xac>
// 35: e9 93 00 00 00                jmp     0xcd <_JIT_ENTRY+0xcd>
// 3a: 4c 29 f3                      subq    %r14, %rbx
// 3d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 41: 48 c1 eb 03                   shrq    $0x3, %rbx
// 45: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 49: 49 8b 06                      movq    (%r14), %rax
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  PyCode_Type
// 56: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 5a: 0f 85 8d 00 00 00             jne     0xed <_JIT_ENTRY+0xed>
// 60: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000062:  R_X86_64_64  _JIT_TARGET
// 6a: 89 c9                         movl    %ecx, %ecx
// 6c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 70: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 48 83 c3 f8                   addq    $-0x8, %rbx
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 21                         js      0xcd <_JIT_ENTRY+0xcd>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 0c 24                   decq    (%r12)
// bc: 75 0f                         jne     0xcd <_JIT_ENTRY+0xcd>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_Dealloc
// c8: 4c 89 e7                      movq    %r12, %rdi
// cb: ff d0                         callq   *%rax
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_CONTINUE
// d7: 4c 89 f7                      movq    %r14, %rdi
// da: 48 89 de                      movq    %rbx, %rsi
// dd: 4c 89 fa                      movq    %r15, %rdx
// e0: 48 83 c4 08                   addq    $0x8, %rsp
// e4: 5b                            popq    %rbx
// e5: 41 5c                         popq    %r12
// e7: 41 5e                         popq    %r14
// e9: 41 5f                         popq    %r15
// eb: ff e0                         jmpq    *%rax
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1+0x39
// f7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f9:  R_X86_64_64  .rodata.str1.1+0x57
// 101: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000103:  R_X86_64_64  .rodata.str1.1+0x96
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  __assert_fail
// 115: ba 4d 00 00 00                movl    $0x4d, %edx
// 11a: ff d0                         callq   *%rax
// 11c: 
static const unsigned char _GUARD_IS_NOT_NONE_POP_code_body[285] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x19, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x55, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x77, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_IS_NOT_NONE_POP_code_holes[13] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// cc: 00 00 00 00
static const unsigned char _GUARD_IS_NOT_NONE_POP_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_IS_NOT_NONE_POP_data_holes[1];

// _GUARD_IS_TRUE_POP
// 
// /tmp/tmp3v1aptj0/_GUARD_IS_TRUE_POP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  _Py_FalseStruct
// f: 48 39 c8                      cmpq    %rcx, %rax
// 12: 74 20                         je      0x34 <_JIT_ENTRY+0x34>
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _Py_TrueStruct
// 1e: 48 39 c8                      cmpq    %rcx, %rax
// 21: 75 4a                         jne     0x6d <_JIT_ENTRY+0x6d>
// 23: 48 83 c6 f8                   addq    $-0x8, %rsi
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  _JIT_CONTINUE
// 31: 59                            popq    %rcx
// 32: ff e0                         jmpq    *%rax
// 34: 48 29 fe                      subq    %rdi, %rsi
// 37: 48 83 c6 b8                   addq    $-0x48, %rsi
// 3b: 48 c1 ee 03                   shrq    $0x3, %rsi
// 3f: 89 77 40                      movl    %esi, 0x40(%rdi)
// 42: 48 8b 07                      movq    (%rdi), %rax
// 45: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000047:  R_X86_64_64  PyCode_Type
// 4f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 53: 75 47                         jne     0x9c <_JIT_ENTRY+0x9c>
// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000057:  R_X86_64_64  _JIT_TARGET
// 5f: 89 c9                         movl    %ecx, %ecx
// 61: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 65: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6b: 59                            popq    %rcx
// 6c: c3                            retq
// 6d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006f:  R_X86_64_64  .rodata.str1.1+0x87
// 77: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000079:  R_X86_64_64  .rodata.str1.1
// 81: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000083:  R_X86_64_64  .rodata.str1.1+0x39
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  __assert_fail
// 95: ba fa 0c 00 00                movl    $0xcfa, %edx            # imm = 0xCFA
// 9a: ff d0                         callq   *%rax
// 9c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009e:  R_X86_64_64  .rodata.str1.1+0x97
// a6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1+0xb5
// b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b2:  R_X86_64_64  .rodata.str1.1+0xf4
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  __assert_fail
// c4: ba 4d 00 00 00                movl    $0x4d, %edx
// c9: ff d0                         callq   *%rax
// cb: 
static const unsigned char _GUARD_IS_TRUE_POP_code_body[204] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x75, 0x4a, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xfa, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_IS_TRUE_POP_code_holes[14] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x29, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x79, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x97},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb5},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf4},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_IsTrue(flag)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 12a: 00 00 00 00 00 00
static const unsigned char _GUARD_IS_TRUE_POP_data_body[305] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x49, 0x73, 0x54, 0x72, 0x75, 0x65, 0x28, 0x66, 0x6c, 0x61, 0x67, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_IS_TRUE_POP_data_holes[1];

// _GUARD_KEYS_VERSION
// 
// /tmp/tmp3v1aptj0/_GUARD_KEYS_VERSION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 8b 40 08                   movq    0x8(%rax), %rax
// 9: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 10: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000012:  R_X86_64_64  _JIT_OPERAND
// 1a: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1d: 75 0d                         jne     0x2c <_JIT_ENTRY+0x2c>
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _JIT_CONTINUE
// 29: 59                            popq    %rcx
// 2a: ff e0                         jmpq    *%rax
// 2c: 48 29 fe                      subq    %rdi, %rsi
// 2f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 33: 48 c1 ee 03                   shrq    $0x3, %rsi
// 37: 89 77 40                      movl    %esi, 0x40(%rdi)
// 3a: 48 8b 07                      movq    (%rdi), %rax
// 3d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003f:  R_X86_64_64  PyCode_Type
// 47: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 4b: 75 18                         jne     0x65 <_JIT_ENTRY+0x65>
// 4d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004f:  R_X86_64_64  _JIT_TARGET
// 57: 89 c9                         movl    %ecx, %ecx
// 59: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 63: 59                            popq    %rcx
// 64: c3                            retq
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x1e
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  .rodata.str1.1+0x5d
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  __assert_fail
// 8d: ba 4d 00 00 00                movl    $0x4d, %edx
// 92: ff d0                         callq   *%rax
// 94: 
static const unsigned char _GUARD_KEYS_VERSION_code_body[149] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_KEYS_VERSION_code_holes[9] = {
    {0x12, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x21, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _GUARD_KEYS_VERSION_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_KEYS_VERSION_data_holes[1];

// _GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmp3v1aptj0/_GUARD_NOT_EXHAUSTED_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyListIter_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 0f 85 95 00 00 00             jne     0xae <_JIT_ENTRY+0xae>
// 19: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1d: 48 85 c9                      testq   %rcx, %rcx
// 20: 74 4f                         je      0x71 <_JIT_ENTRY+0x71>
// 22: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 26: 41 f6 80 ab 00 00 00 02       testb   $0x2, 0xab(%r8)
// 2e: 0f 84 a9 00 00 00             je      0xdd <_JIT_ENTRY+0xdd>
// 34: 49 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %r9
// 0000000000000036:  R_X86_64_64  PyLong_Type
// 3e: 4d 39 c8                      cmpq    %r9, %r8
// 41: 0f 84 c5 00 00 00             je      0x10c <_JIT_ENTRY+0x10c>
// 47: 49 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %r9
// 0000000000000049:  R_X86_64_64  PyBool_Type
// 51: 4d 39 c8                      cmpq    %r9, %r8
// 54: 0f 84 e1 00 00 00             je      0x13b <_JIT_ENTRY+0x13b>
// 5a: 48 8b 40 10                   movq    0x10(%rax), %rax
// 5e: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 62: 7d 0d                         jge     0x71 <_JIT_ENTRY+0x71>
// 64: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000066:  R_X86_64_64  _JIT_CONTINUE
// 6e: 59                            popq    %rcx
// 6f: ff e0                         jmpq    *%rax
// 71: 48 29 fe                      subq    %rdi, %rsi
// 74: 48 83 c6 b8                   addq    $-0x48, %rsi
// 78: 48 c1 ee 03                   shrq    $0x3, %rsi
// 7c: 89 77 40                      movl    %esi, 0x40(%rdi)
// 7f: 48 8b 07                      movq    (%rdi), %rax
// 82: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000084:  R_X86_64_64  PyCode_Type
// 8c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 90: 0f 85 d4 00 00 00             jne     0x16a <_JIT_ENTRY+0x16a>
// 96: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000098:  R_X86_64_64  _JIT_TARGET
// a0: 89 c9                         movl    %ecx, %ecx
// a2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ac: 59                            popq    %rcx
// ad: c3                            retq
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1+0x87
// b8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ba:  R_X86_64_64  .rodata.str1.1
// c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c4:  R_X86_64_64  .rodata.str1.1+0x39
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  __assert_fail
// d6: ba 9a 08 00 00                movl    $0x89a, %edx            # imm = 0x89A
// db: ff d0                         callq   *%rax
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1+0x1c3
// e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1+0x1d4
// f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f3:  R_X86_64_64  .rodata.str1.1+0x210
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  __assert_fail
// 105: ba 1f 00 00 00                movl    $0x1f, %edx
// 10a: ff d0                         callq   *%rax
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1+0x16c
// 116: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000118:  R_X86_64_64  .rodata.str1.1+0x13c
// 120: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000122:  R_X86_64_64  .rodata.str1.1+0x188
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  __assert_fail
// 134: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 139: ff d0                         callq   *%rax
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1+0x1a7
// 145: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1+0x13c
// 14f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000151:  R_X86_64_64  .rodata.str1.1+0x188
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  __assert_fail
// 163: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 168: ff d0                         callq   *%rax
// 16a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016c:  R_X86_64_64  .rodata.str1.1+0xa9
// 174: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000176:  R_X86_64_64  .rodata.str1.1+0xc7
// 17e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000180:  R_X86_64_64  .rodata.str1.1+0x106
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  __assert_fail
// 192: ba 4d 00 00 00                movl    $0x4d, %edx
// 197: ff d0                         callq   *%rax
// 199: 
static const unsigned char _GUARD_NOT_EXHAUSTED_LIST_code_body[410] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x95, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x4f, 0x4c, 0x8b, 0x41, 0x08, 0x41, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x49, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0xc8, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x49, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0xc8, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x9a, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_NOT_EXHAUSTED_LIST_code_holes[27] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c3},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d4},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x210},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16c},
    {0x118, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13c},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x188},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13c},
    {0x151, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x188},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa9},
    {0x176, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc7},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x106},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(iter) == &PyListIter_Type\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00PyList_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/listobject.h\x00Py_ssize_t PyList_GET_SIZE(PyObject *)\x00'
// 237: 00
static const unsigned char _GUARD_NOT_EXHAUSTED_LIST_data_body[569] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x69, 0x74, 0x65, 0x72, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmp3v1aptj0/_GUARD_NOT_EXHAUSTED_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyRangeIter_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 75 4d                         jne     0x62 <_JIT_ENTRY+0x62>
// 15: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 1a: 7e 0d                         jle     0x29 <_JIT_ENTRY+0x29>
// 1c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001e:  R_X86_64_64  _JIT_CONTINUE
// 26: 59                            popq    %rcx
// 27: ff e0                         jmpq    *%rax
// 29: 48 29 fe                      subq    %rdi, %rsi
// 2c: 48 83 c6 b8                   addq    $-0x48, %rsi
// 30: 48 c1 ee 03                   shrq    $0x3, %rsi
// 34: 89 77 40                      movl    %esi, 0x40(%rdi)
// 37: 48 8b 07                      movq    (%rdi), %rax
// 3a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003c:  R_X86_64_64  PyCode_Type
// 44: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 48: 75 47                         jne     0x91 <_JIT_ENTRY+0x91>
// 4a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004c:  R_X86_64_64  _JIT_TARGET
// 54: 89 c9                         movl    %ecx, %ecx
// 56: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 60: 59                            popq    %rcx
// 61: c3                            retq
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1+0x87
// 6c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1
// 76: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000078:  R_X86_64_64  .rodata.str1.1+0x39
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  __assert_fail
// 8a: ba e1 08 00 00                movl    $0x8e1, %edx            # imm = 0x8E1
// 8f: ff d0                         callq   *%rax
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1+0xa7
// 9b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009d:  R_X86_64_64  .rodata.str1.1+0xc5
// a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a7:  R_X86_64_64  .rodata.str1.1+0x104
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  __assert_fail
// b9: ba 4d 00 00 00                movl    $0x4d, %edx
// be: ff d0                         callq   *%rax
// c0: 
static const unsigned char _GUARD_NOT_EXHAUSTED_RANGE_code_body[193] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x4d, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xe1, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_NOT_EXHAUSTED_RANGE_code_holes[13] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x1e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc5},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x104},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(r) == &PyRangeIter_Type\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 13a: 00 00 00 00 00 00
static const unsigned char _GUARD_NOT_EXHAUSTED_RANGE_data_body[321] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x72, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmp3v1aptj0/_GUARD_NOT_EXHAUSTED_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyTupleIter_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 0f 85 95 00 00 00             jne     0xae <_JIT_ENTRY+0xae>
// 19: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1d: 48 85 c9                      testq   %rcx, %rcx
// 20: 74 4f                         je      0x71 <_JIT_ENTRY+0x71>
// 22: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 26: 41 f6 80 ab 00 00 00 04       testb   $0x4, 0xab(%r8)
// 2e: 0f 84 a9 00 00 00             je      0xdd <_JIT_ENTRY+0xdd>
// 34: 49 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %r9
// 0000000000000036:  R_X86_64_64  PyLong_Type
// 3e: 4d 39 c8                      cmpq    %r9, %r8
// 41: 0f 84 c5 00 00 00             je      0x10c <_JIT_ENTRY+0x10c>
// 47: 49 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %r9
// 0000000000000049:  R_X86_64_64  PyBool_Type
// 51: 4d 39 c8                      cmpq    %r9, %r8
// 54: 0f 84 e1 00 00 00             je      0x13b <_JIT_ENTRY+0x13b>
// 5a: 48 8b 40 10                   movq    0x10(%rax), %rax
// 5e: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 62: 7d 0d                         jge     0x71 <_JIT_ENTRY+0x71>
// 64: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000066:  R_X86_64_64  _JIT_CONTINUE
// 6e: 59                            popq    %rcx
// 6f: ff e0                         jmpq    *%rax
// 71: 48 29 fe                      subq    %rdi, %rsi
// 74: 48 83 c6 b8                   addq    $-0x48, %rsi
// 78: 48 c1 ee 03                   shrq    $0x3, %rsi
// 7c: 89 77 40                      movl    %esi, 0x40(%rdi)
// 7f: 48 8b 07                      movq    (%rdi), %rax
// 82: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000084:  R_X86_64_64  PyCode_Type
// 8c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 90: 0f 85 d4 00 00 00             jne     0x16a <_JIT_ENTRY+0x16a>
// 96: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000098:  R_X86_64_64  _JIT_TARGET
// a0: 89 c9                         movl    %ecx, %ecx
// a2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ac: 59                            popq    %rcx
// ad: c3                            retq
// ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b0:  R_X86_64_64  .rodata.str1.1+0x87
// b8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ba:  R_X86_64_64  .rodata.str1.1
// c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c4:  R_X86_64_64  .rodata.str1.1+0x39
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  __assert_fail
// d6: ba bd 08 00 00                movl    $0x8bd, %edx            # imm = 0x8BD
// db: ff d0                         callq   *%rax
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1+0x1c4
// e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1+0x1d6
// f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f3:  R_X86_64_64  .rodata.str1.1+0x213
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  __assert_fail
// 105: ba 16 00 00 00                movl    $0x16, %edx
// 10a: ff d0                         callq   *%rax
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1+0x16d
// 116: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000118:  R_X86_64_64  .rodata.str1.1+0x13d
// 120: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000122:  R_X86_64_64  .rodata.str1.1+0x189
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  __assert_fail
// 134: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 139: ff d0                         callq   *%rax
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1+0x1a8
// 145: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1+0x13d
// 14f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000151:  R_X86_64_64  .rodata.str1.1+0x189
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  __assert_fail
// 163: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 168: ff d0                         callq   *%rax
// 16a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016c:  R_X86_64_64  .rodata.str1.1+0xaa
// 174: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000176:  R_X86_64_64  .rodata.str1.1+0xc8
// 17e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000180:  R_X86_64_64  .rodata.str1.1+0x107
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  __assert_fail
// 192: ba 4d 00 00 00                movl    $0x4d, %edx
// 197: ff d0                         callq   *%rax
// 199: 
static const unsigned char _GUARD_NOT_EXHAUSTED_TUPLE_code_body[410] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x95, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x4f, 0x4c, 0x8b, 0x41, 0x08, 0x41, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x49, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0xc8, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x49, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0xc8, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xbd, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x16, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_NOT_EXHAUSTED_TUPLE_code_holes[27] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c4},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d6},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x213},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16d},
    {0x118, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13d},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x189},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a8},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13d},
    {0x151, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x189},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xaa},
    {0x176, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc8},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x107},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(iter) == &PyTupleIter_Type\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00PyTuple_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/tupleobject.h\x00Py_ssize_t PyTuple_GET_SIZE(PyObject *)\x00'
// 23b: 00 00 00 00 00
static const unsigned char _GUARD_NOT_EXHAUSTED_TUPLE_data_body[577] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x69, 0x74, 0x65, 0x72, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _GUARD_TYPE_VERSION
// 
// /tmp/tmp3v1aptj0/_GUARD_TYPE_VERSION.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000003:  R_X86_64_64  _JIT_OPERAND
// b: 85 c0                         testl   %eax, %eax
// d: 74 60                         je      0x6f <_JIT_ENTRY+0x6f>
// f: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 13: 48 8b 40 08                   movq    0x8(%rax), %rax
// 17: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000019:  R_X86_64_64  _JIT_OPERAND
// 21: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 27: 75 0d                         jne     0x36 <_JIT_ENTRY+0x36>
// 29: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002b:  R_X86_64_64  _JIT_CONTINUE
// 33: 59                            popq    %rcx
// 34: ff e0                         jmpq    *%rax
// 36: 48 29 fe                      subq    %rdi, %rsi
// 39: 48 83 c6 b8                   addq    $-0x48, %rsi
// 3d: 48 c1 ee 03                   shrq    $0x3, %rsi
// 41: 89 77 40                      movl    %esi, 0x40(%rdi)
// 44: 48 8b 07                      movq    (%rdi), %rax
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  PyCode_Type
// 51: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 55: 75 47                         jne     0x9e <_JIT_ENTRY+0x9e>
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  _JIT_TARGET
// 61: 89 c9                         movl    %ecx, %ecx
// 63: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 67: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 6d: 59                            popq    %rcx
// 6e: c3                            retq
// 6f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x87
// 79: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000085:  R_X86_64_64  .rodata.str1.1+0x39
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  __assert_fail
// 97: ba 59 06 00 00                movl    $0x659, %edx            # imm = 0x659
// 9c: ff d0                         callq   *%rax
// 9e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a0:  R_X86_64_64  .rodata.str1.1+0x99
// a8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000aa:  R_X86_64_64  .rodata.str1.1+0xb7
// b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b4:  R_X86_64_64  .rodata.str1.1+0xf6
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  __assert_fail
// c6: ba 4d 00 00 00                movl    $0x4d, %edx
// cb: ff d0                         callq   *%rax
// cd: 
static const unsigned char _GUARD_TYPE_VERSION_code_body[206] = {0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x60, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x47, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _GUARD_TYPE_VERSION_code_holes[14] = {
    {0x3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x99},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb7},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00type_version != 0\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 12c: 00 00 00 00
static const unsigned char _GUARD_TYPE_VERSION_data_body[305] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _GUARD_TYPE_VERSION_data_holes[1];

// _INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp3v1aptj0/_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 49 89 ff                      movq    %rdi, %r15
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPARG
// 1f: 0f b7 c0                      movzwl  %ax, %eax
// 22: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 27: 29 c1                         subl    %eax, %ecx
// 29: 48 63 c1                      movslq  %ecx, %rax
// 2c: 4c 8b 24 c6                   movq    (%rsi,%rax,8), %r12
// 30: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 35: 41 8b 45 00                   movl    (%r13), %eax
// 39: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000003b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 43: ff c0                         incl    %eax
// 45: 74 06                         je      0x4d <_JIT_ENTRY+0x4d>
// 47: 41 89 45 00                   movl    %eax, (%r13)
// 4b: ff d3                         callq   *%rbx
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: f7 d0                         notl    %eax
// 59: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 5e: 48 98                         cltq
// 60: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 64: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 69: 8b 45 00                      movl    (%rbp), %eax
// 6c: ff c0                         incl    %eax
// 6e: 74 05                         je      0x75 <_JIT_ENTRY+0x75>
// 70: 89 45 00                      movl    %eax, (%rbp)
// 73: ff d3                         callq   *%rbx
// 75: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000077:  R_X86_64_64  _JIT_OPARG
// 7f: 0f b7 c0                      movzwl  %ax, %eax
// 82: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 87: 29 c1                         subl    %eax, %ecx
// 89: 48 63 c1                      movslq  %ecx, %rax
// 8c: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 90: 49 8b 04 24                   movq    (%r12), %rax
// 94: 48 85 c0                      testq   %rax, %rax
// 97: 7e 06                         jle     0x9f <_JIT_ENTRY+0x9f>
// 99: 85 c0                         testl   %eax, %eax
// 9b: 79 28                         jns     0xc5 <_JIT_ENTRY+0xc5>
// 9d: eb 47                         jmp     0xe6 <_JIT_ENTRY+0xe6>
// 9f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a1:  R_X86_64_64  .rodata.str1.1
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_NegativeRefcount
// b3: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// b8: 4c 89 e2                      movq    %r12, %rdx
// bb: ff d0                         callq   *%rax
// bd: 49 8b 04 24                   movq    (%r12), %rax
// c1: 85 c0                         testl   %eax, %eax
// c3: 78 21                         js      0xe6 <_JIT_ENTRY+0xe6>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cf: ff d0                         callq   *%rax
// d1: 49 ff 0c 24                   decq    (%r12)
// d5: 75 0f                         jne     0xe6 <_JIT_ENTRY+0xe6>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_Dealloc
// e1: 4c 89 e7                      movq    %r12, %rdi
// e4: ff d0                         callq   *%rax
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_OPARG
// f0: 0f b7 c0                      movzwl  %ax, %eax
// f3: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// f8: 29 c1                         subl    %eax, %ecx
// fa: 48 63 c9                      movslq  %ecx, %rcx
// fd: 49 89 2c ce                   movq    %rbp, (%r14,%rcx,8)
// 101: f7 d0                         notl    %eax
// 103: 48 98                         cltq
// 105: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _JIT_CONTINUE
// 113: 4c 89 ff                      movq    %r15, %rdi
// 116: 4c 89 f6                      movq    %r14, %rsi
// 119: 48 8b 14 24                   movq    (%rsp), %rdx
// 11d: 48 83 c4 08                   addq    $0x8, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5d                         popq    %r13
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: 5d                            popq    %rbp
// 12b: ff e0                         jmpq    *%rax
// 12d: 
static const unsigned char _INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[302] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8b, 0x24, 0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x2c, 0xc6, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x05, 0x89, 0x45, 0x00, 0xff, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x2c, 0xc6, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x2c, 0xce, 0xf7, 0xd0, 0x48, 0x98, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[11] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmp3v1aptj0/_INIT_CALL_PY_EXACT_ARGS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d3                      movq    %rdx, %rbx
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 f9                      movq    %rdi, %r9
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 26: 29 c1                         subl    %eax, %ecx
// 28: f7 d0                         notl    %eax
// 2a: 4c 63 d0                      movslq  %eax, %r10
// 2d: 48 63 c1                      movslq  %ecx, %rax
// 30: 4c 8b 34 c6                   movq    (%rsi,%rax,8), %r14
// 34: 4a 83 3c d6 00                cmpq    $0x0, (%rsi,%r10,8)
// 39: 49 8b 6e 30                   movq    0x30(%r14), %rbp
// 3d: 4c 8b a2 00 01 00 00          movq    0x100(%rdx), %r12
// 44: 48 8b 82 08 01 00 00          movq    0x108(%rdx), %rax
// 4b: 48 63 4d 4c                   movslq  0x4c(%rbp), %rcx
// 4f: 49 8d 0c cc                   leaq    (%r12,%rcx,8), %rcx
// 53: 48 89 8a 00 01 00 00          movq    %rcx, 0x100(%rdx)
// 5a: 0f 84 06 01 00 00             je      0x166 <_JIT_ENTRY+0x166>
// 60: 48 39 c1                      cmpq    %rax, %rcx
// 63: 0f 83 fd 02 00 00             jae     0x366 <_JIT_ENTRY+0x366>
// 69: 4d 89 74 24 10                movq    %r14, 0x10(%r12)
// 6e: 8b 45 00                      movl    (%rbp), %eax
// 71: ff c0                         incl    %eax
// 73: 74 29                         je      0x9e <_JIT_ENTRY+0x9e>
// 75: 89 45 00                      movl    %eax, (%rbp)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 82: 4d 89 cd                      movq    %r9, %r13
// 85: 4c 89 3c 24                   movq    %r15, (%rsp)
// 89: 49 89 df                      movq    %rbx, %r15
// 8c: 4c 89 d3                      movq    %r10, %rbx
// 8f: ff d0                         callq   *%rax
// 91: 49 89 da                      movq    %rbx, %r10
// 94: 4c 89 fb                      movq    %r15, %rbx
// 97: 4c 8b 3c 24                   movq    (%rsp), %r15
// 9b: 4d 89 e9                      movq    %r13, %r9
// 9e: 49 89 2c 24                   movq    %rbp, (%r12)
// a2: 41 0f 10 46 10                movups  0x10(%r14), %xmm0
// a7: 41 0f 11 44 24 18             movups  %xmm0, 0x18(%r12)
// ad: 49 c7 44 24 28 00 00 00 00    movq    $0x0, 0x28(%r12)
// b6: 8b 4d 48                      movl    0x48(%rbp), %ecx
// b9: 41 89 4c 24 40                movl    %ecx, 0x40(%r12)
// be: 49 c7 44 24 30 00 00 00 00    movq    $0x0, 0x30(%r12)
// c7: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// ce: 49 89 6c 24 38                movq    %rbp, 0x38(%r12)
// d3: 66 41 c7 44 24 44 00 00       movw    $0x0, 0x44(%r12)
// db: 41 c6 44 24 46 00             movb    $0x0, 0x46(%r12)
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _JIT_OPARG
// eb: 0f b7 e8                      movzwl  %ax, %ebp
// ee: ff c5                         incl    %ebp
// f0: 85 ed                         testl   %ebp, %ebp
// f2: 0f 9f c2                      setg    %dl
// f5: 39 e9                         cmpl    %ebp, %ecx
// f7: 0f 8e 46 01 00 00             jle     0x243 <_JIT_ENTRY+0x243>
// fd: 0f b7 e8                      movzwl  %ax, %ebp
// 100: ff c5                         incl    %ebp
// 102: 49 8d 3c ec                   leaq    (%r12,%rbp,8), %rdi
// 106: 48 83 c7 48                   addq    $0x48, %rdi
// 10a: 89 e8                         movl    %ebp, %eax
// 10c: f7 d0                         notl    %eax
// 10e: 01 c1                         addl    %eax, %ecx
// 110: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  memset
// 122: 31 f6                         xorl    %esi, %esi
// 124: 4d 89 cd                      movq    %r9, %r13
// 127: 4d 89 fe                      movq    %r15, %r14
// 12a: 49 89 df                      movq    %rbx, %r15
// 12d: 4c 89 d3                      movq    %r10, %rbx
// 130: ff d0                         callq   *%rax
// 132: 49 89 da                      movq    %rbx, %r10
// 135: 4c 89 fb                      movq    %r15, %rbx
// 138: 4d 89 f7                      movq    %r14, %r15
// 13b: 4d 89 e9                      movq    %r13, %r9
// 13e: 85 ed                         testl   %ebp, %ebp
// 140: 0f 8e e1 01 00 00             jle     0x327 <_JIT_ENTRY+0x327>
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_OPARG
// 150: 0f b7 c8                      movzwl  %ax, %ecx
// 153: 48 c1 e1 03                   shlq    $0x3, %rcx
// 157: 4c 89 f8                      movq    %r15, %rax
// 15a: 48 29 c8                      subq    %rcx, %rax
// 15d: 48 83 c0 f8                   addq    $-0x8, %rax
// 161: e9 02 01 00 00                jmp     0x268 <_JIT_ENTRY+0x268>
// 166: 48 39 c1                      cmpq    %rax, %rcx
// 169: 0f 83 f7 01 00 00             jae     0x366 <_JIT_ENTRY+0x366>
// 16f: 4d 89 74 24 10                movq    %r14, 0x10(%r12)
// 174: 8b 45 00                      movl    (%rbp), %eax
// 177: ff c0                         incl    %eax
// 179: 74 1d                         je      0x198 <_JIT_ENTRY+0x198>
// 17b: 89 45 00                      movl    %eax, (%rbp)
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 188: 4c 89 0c 24                   movq    %r9, (%rsp)
// 18c: 4d 89 d5                      movq    %r10, %r13
// 18f: ff d0                         callq   *%rax
// 191: 4d 89 ea                      movq    %r13, %r10
// 194: 4c 8b 0c 24                   movq    (%rsp), %r9
// 198: 49 89 2c 24                   movq    %rbp, (%r12)
// 19c: 41 0f 10 46 10                movups  0x10(%r14), %xmm0
// 1a1: 41 0f 11 44 24 18             movups  %xmm0, 0x18(%r12)
// 1a7: 49 c7 44 24 28 00 00 00 00    movq    $0x0, 0x28(%r12)
// 1b0: 8b 45 48                      movl    0x48(%rbp), %eax
// 1b3: 41 89 44 24 40                movl    %eax, 0x40(%r12)
// 1b8: 49 c7 44 24 30 00 00 00 00    movq    $0x0, 0x30(%r12)
// 1c1: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 1c8: 49 89 6c 24 38                movq    %rbp, 0x38(%r12)
// 1cd: 66 41 c7 44 24 44 00 00       movw    $0x0, 0x44(%r12)
// 1d5: 41 c6 44 24 46 00             movb    $0x0, 0x46(%r12)
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  _JIT_OPARG
// 1e5: 0f b7 e9                      movzwl  %cx, %ebp
// 1e8: 85 ed                         testl   %ebp, %ebp
// 1ea: 0f 9f c2                      setg    %dl
// 1ed: 39 e8                         cmpl    %ebp, %eax
// 1ef: 7e 64                         jle     0x255 <_JIT_ENTRY+0x255>
// 1f1: 0f b7 d1                      movzwl  %cx, %edx
// 1f4: 48 89 14 24                   movq    %rdx, (%rsp)
// 1f8: 49 8d 3c d4                   leaq    (%r12,%rdx,8), %rdi
// 1fc: 48 83 c7 48                   addq    $0x48, %rdi
// 200: 0f b7 e9                      movzwl  %cx, %ebp
// 203: 89 e9                         movl    %ebp, %ecx
// 205: f7 d1                         notl    %ecx
// 207: 01 c8                         addl    %ecx, %eax
// 209: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  memset
// 21b: 31 f6                         xorl    %esi, %esi
// 21d: 4d 89 cd                      movq    %r9, %r13
// 220: 4d 89 d6                      movq    %r10, %r14
// 223: ff d0                         callq   *%rax
// 225: 4d 89 f2                      movq    %r14, %r10
// 228: 4d 89 e9                      movq    %r13, %r9
// 22b: 85 ed                         testl   %ebp, %ebp
// 22d: 0f 8e f4 00 00 00             jle     0x327 <_JIT_ENTRY+0x327>
// 233: 48 8b 0c 24                   movq    (%rsp), %rcx
// 237: 48 c1 e1 03                   shlq    $0x3, %rcx
// 23b: 4c 89 f8                      movq    %r15, %rax
// 23e: 48 29 c8                      subq    %rcx, %rax
// 241: eb 25                         jmp     0x268 <_JIT_ENTRY+0x268>
// 243: f7 d0                         notl    %eax
// 245: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 24b: f6 c2 01                      testb   $0x1, %dl
// 24e: 75 14                         jne     0x264 <_JIT_ENTRY+0x264>
// 250: e9 d2 00 00 00                jmp     0x327 <_JIT_ENTRY+0x327>
// 255: 0f b7 c1                      movzwl  %cx, %eax
// 258: 48 f7 d8                      negq    %rax
// 25b: f6 c2 01                      testb   $0x1, %dl
// 25e: 0f 84 c3 00 00 00             je      0x327 <_JIT_ENTRY+0x327>
// 264: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 268: 83 fd 02                      cmpl    $0x2, %ebp
// 26b: b9 01 00 00 00                movl    $0x1, %ecx
// 270: 0f 4d cd                      cmovgel %ebp, %ecx
// 273: 83 f9 08                      cmpl    $0x8, %ecx
// 276: 72 10                         jb      0x288 <_JIT_ENTRY+0x288>
// 278: 4c 89 e2                      movq    %r12, %rdx
// 27b: 48 29 c2                      subq    %rax, %rdx
// 27e: 48 83 c2 48                   addq    $0x48, %rdx
// 282: 48 83 fa 20                   cmpq    $0x20, %rdx
// 286: 73 6a                         jae     0x2f2 <_JIT_ENTRY+0x2f2>
// 288: 31 d2                         xorl    %edx, %edx
// 28a: 48 89 d6                      movq    %rdx, %rsi
// 28d: 48 f7 d6                      notq    %rsi
// 290: 48 01 ce                      addq    %rcx, %rsi
// 293: 48 89 cf                      movq    %rcx, %rdi
// 296: 48 83 e7 03                   andq    $0x3, %rdi
// 29a: 74 15                         je      0x2b1 <_JIT_ENTRY+0x2b1>
// 29c: 0f 1f 40 00                   nopl    (%rax)
// 2a0: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 2a4: 4d 89 44 d4 48                movq    %r8, 0x48(%r12,%rdx,8)
// 2a9: 48 ff c2                      incq    %rdx
// 2ac: 48 ff cf                      decq    %rdi
// 2af: 75 ef                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 2b1: 48 83 fe 03                   cmpq    $0x3, %rsi
// 2b5: 72 70                         jb      0x327 <_JIT_ENTRY+0x327>
// 2b7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 2c0: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 2c4: 49 89 74 d4 48                movq    %rsi, 0x48(%r12,%rdx,8)
// 2c9: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 2ce: 49 89 74 d4 50                movq    %rsi, 0x50(%r12,%rdx,8)
// 2d3: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 2d8: 49 89 74 d4 58                movq    %rsi, 0x58(%r12,%rdx,8)
// 2dd: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 2e2: 49 89 74 d4 60                movq    %rsi, 0x60(%r12,%rdx,8)
// 2e7: 48 83 c2 04                   addq    $0x4, %rdx
// 2eb: 48 39 d1                      cmpq    %rdx, %rcx
// 2ee: 75 d0                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2f0: eb 35                         jmp     0x327 <_JIT_ENTRY+0x327>
// 2f2: 89 ca                         movl    %ecx, %edx
// 2f4: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 2fa: 31 f6                         xorl    %esi, %esi
// 2fc: 0f 1f 40 00                   nopl    (%rax)
// 300: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 304: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 309: 41 0f 11 44 f4 48             movups  %xmm0, 0x48(%r12,%rsi,8)
// 30f: 41 0f 11 4c f4 58             movups  %xmm1, 0x58(%r12,%rsi,8)
// 315: 48 83 c6 04                   addq    $0x4, %rsi
// 319: 48 39 f2                      cmpq    %rsi, %rdx
// 31c: 75 e2                         jne     0x300 <_JIT_ENTRY+0x300>
// 31e: 48 39 ca                      cmpq    %rcx, %rdx
// 321: 0f 85 63 ff ff ff             jne     0x28a <_JIT_ENTRY+0x28a>
// 327: 4b 8d 34 d7                   leaq    (%r15,%r10,8), %rsi
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _JIT_OPARG
// 335: 0f b7 c0                      movzwl  %ax, %eax
// 338: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 33d: 29 c1                         subl    %eax, %ecx
// 33f: 48 63 c1                      movslq  %ecx, %rax
// 342: 4d 89 24 c7                   movq    %r12, (%r15,%rax,8)
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _JIT_CONTINUE
// 350: 4c 89 cf                      movq    %r9, %rdi
// 353: 48 89 da                      movq    %rbx, %rdx
// 356: 48 83 c4 08                   addq    $0x8, %rsp
// 35a: 5b                            popq    %rbx
// 35b: 41 5c                         popq    %r12
// 35d: 41 5d                         popq    %r13
// 35f: 41 5e                         popq    %r14
// 361: 41 5f                         popq    %r15
// 363: 5d                            popq    %rbp
// 364: ff e0                         jmpq    *%rax
// 366: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000368:  R_X86_64_64  .rodata.str1.1+0x3f
// 370: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000372:  R_X86_64_64  .rodata.str1.1
// 37a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000037c:  R_X86_64_64  .rodata.str1.1+0x6f
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  __assert_fail
// 38e: ba 0f 01 00 00                movl    $0x10f, %edx            # imm = 0x10F
// 393: ff d0                         callq   *%rax
// 395: 
static const unsigned char _INIT_CALL_PY_EXACT_ARGS_code_body[918] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xf9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x4c, 0x8b, 0x34, 0xc6, 0x4a, 0x83, 0x3c, 0xd6, 0x00, 0x49, 0x8b, 0x6e, 0x30, 0x4c, 0x8b, 0xa2, 0x00, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x82, 0x08, 0x01, 0x00, 0x00, 0x48, 0x63, 0x4d, 0x4c, 0x49, 0x8d, 0x0c, 0xcc, 0x48, 0x89, 0x8a, 0x00, 0x01, 0x00, 0x00, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x48, 0x39, 0xc1, 0x0f, 0x83, 0xfd, 0x02, 0x00, 0x00, 0x4d, 0x89, 0x74, 0x24, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x29, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xcd, 0x4c, 0x89, 0x3c, 0x24, 0x49, 0x89, 0xdf, 0x4c, 0x89, 0xd3, 0xff, 0xd0, 0x49, 0x89, 0xda, 0x4c, 0x89, 0xfb, 0x4c, 0x8b, 0x3c, 0x24, 0x4d, 0x89, 0xe9, 0x49, 0x89, 0x2c, 0x24, 0x41, 0x0f, 0x10, 0x46, 0x10, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x18, 0x49, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6c, 0x24, 0x38, 0x66, 0x41, 0xc7, 0x44, 0x24, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x44, 0x24, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0x46, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x49, 0x8d, 0x3c, 0xec, 0x48, 0x83, 0xc7, 0x48, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x4d, 0x89, 0xcd, 0x4d, 0x89, 0xfe, 0x49, 0x89, 0xdf, 0x4c, 0x89, 0xd3, 0xff, 0xd0, 0x49, 0x89, 0xda, 0x4c, 0x89, 0xfb, 0x4d, 0x89, 0xf7, 0x4d, 0x89, 0xe9, 0x85, 0xed, 0x0f, 0x8e, 0xe1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x48, 0x39, 0xc1, 0x0f, 0x83, 0xf7, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x74, 0x24, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x1d, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xd5, 0xff, 0xd0, 0x4d, 0x89, 0xea, 0x4c, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x2c, 0x24, 0x41, 0x0f, 0x10, 0x46, 0x10, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x18, 0x49, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x44, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6c, 0x24, 0x38, 0x66, 0x41, 0xc7, 0x44, 0x24, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x44, 0x24, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x7e, 0x64, 0x0f, 0xb7, 0xd1, 0x48, 0x89, 0x14, 0x24, 0x49, 0x8d, 0x3c, 0xd4, 0x48, 0x83, 0xc7, 0x48, 0x0f, 0xb7, 0xe9, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x4d, 0x89, 0xcd, 0x4d, 0x89, 0xd6, 0xff, 0xd0, 0x4d, 0x89, 0xf2, 0x4d, 0x89, 0xe9, 0x85, 0xed, 0x0f, 0x8e, 0xf4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xc8, 0xeb, 0x25, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x14, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xc7, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xe2, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x6a, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x15, 0x0f, 0x1f, 0x40, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd4, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd4, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd4, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd4, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd4, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf4, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf4, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x63, 0xff, 0xff, 0xff, 0x4b, 0x8d, 0x34, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x24, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xcf, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xd0};
static const Hole _INIT_CALL_PY_EXACT_ARGS_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x3f},
    {0x372, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x37c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x6f},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00tstate->datastack_top < tstate->datastack_limit\x00_PyInterpreterFrame *_PyFrame_PushUnchecked(PyThreadState *, PyFunctionObject *, int)\x00'
// c5: 00 00 00
static const unsigned char _INIT_CALL_PY_EXACT_ARGS_data_body[201] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x20, 0x3c, 0x20, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x00, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x75, 0x73, 0x68, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _INSERT
// 
// /tmp/tmp3v1aptj0/_INSERT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 d3                      movq    %rdx, %rbx
// c: 49 89 f6                      movq    %rsi, %r14
// f: 49 89 ff                      movq    %rdi, %r15
// 12: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  _JIT_OPARG
// 20: 0f b7 d0                      movzwl  %ax, %edx
// 23: f7 d0                         notl    %eax
// 25: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a: 4c 63 e8                      movslq  %eax, %r13
// 2d: 4a 8d 3c ee                   leaq    (%rsi,%r13,8), %rdi
// 31: 48 c1 e2 03                   shlq    $0x3, %rdx
// 35: 48 29 d6                      subq    %rdx, %rsi
// 38: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003a:  R_X86_64_64  memmove
// 42: ff d0                         callq   *%rax
// 44: 4f 89 24 ee                   movq    %r12, (%r14,%r13,8)
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _JIT_CONTINUE
// 52: 4c 89 ff                      movq    %r15, %rdi
// 55: 4c 89 f6                      movq    %r14, %rsi
// 58: 48 89 da                      movq    %rbx, %rdx
// 5b: 5b                            popq    %rbx
// 5c: 41 5c                         popq    %r12
// 5e: 41 5d                         popq    %r13
// 60: 41 5e                         popq    %r14
// 62: 41 5f                         popq    %r15
// 64: ff e0                         jmpq    *%rax
// 66: 
static const unsigned char _INSERT_code_body[103] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4a, 0x8d, 0x3c, 0xee, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0x29, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4f, 0x89, 0x24, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _INSERT_code_holes[4] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _INSERT_data_body[1];
static const Hole _INSERT_data_holes[1];

// _IS_NONE
// 
// /tmp/tmp3v1aptj0/_IS_NONE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 d3                      movq    %rdx, %rbx
// c: 49 89 f6                      movq    %rsi, %r14
// f: 49 89 ff                      movq    %rdi, %r15
// 12: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  _Py_NoneStruct
// 20: 49 39 c4                      cmpq    %rax, %r12
// 23: 74 19                         je      0x3e <_JIT_ENTRY+0x3e>
// 25: 49 8b 04 24                   movq    (%r12), %rax
// 29: 48 85 c0                      testq   %rax, %rax
// 2c: 7e 1c                         jle     0x4a <_JIT_ENTRY+0x4a>
// 2e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000030:  R_X86_64_64  _Py_FalseStruct
// 38: 85 c0                         testl   %eax, %eax
// 3a: 79 3e                         jns     0x7a <_JIT_ENTRY+0x7a>
// 3c: eb 5d                         jmp     0x9b <_JIT_ENTRY+0x9b>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_TrueStruct
// 48: eb 51                         jmp     0x9b <_JIT_ENTRY+0x9b>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 63: 4c 89 e2                      movq    %r12, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 04 24                   movq    (%r12), %rax
// 6c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000006e:  R_X86_64_64  _Py_FalseStruct
// 76: 85 c0                         testl   %eax, %eax
// 78: 78 21                         js      0x9b <_JIT_ENTRY+0x9b>
// 7a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 84: ff d0                         callq   *%rax
// 86: 49 ff 0c 24                   decq    (%r12)
// 8a: 75 0f                         jne     0x9b <_JIT_ENTRY+0x9b>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_Dealloc
// 96: 4c 89 e7                      movq    %r12, %rdi
// 99: ff d0                         callq   *%rax
// 9b: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _JIT_CONTINUE
// a9: 4c 89 ff                      movq    %r15, %rdi
// ac: 4c 89 f6                      movq    %r14, %rsi
// af: 48 89 da                      movq    %rbx, %rdx
// b2: 5b                            popq    %rbx
// b3: 41 5c                         popq    %r12
// b5: 41 5d                         popq    %r13
// b7: 41 5e                         popq    %r14
// b9: 41 5f                         popq    %r15
// bb: ff e0                         jmpq    *%rax
// bd: 
static const unsigned char _IS_NONE_code_body[190] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x19, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x5d, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x51, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _IS_NONE_code_holes[10] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _IS_NONE_data_holes[1];

// _IS_OP
// 
// /tmp/tmp3v1aptj0/_IS_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d3                      movq    %rdx, %rbx
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 66 f0                   movq    -0x10(%rsi), %r12
// 18: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1c: 49 8b 04 24                   movq    (%r12), %rax
// 20: 48 85 c0                      testq   %rax, %rax
// 23: 7e 10                         jle     0x35 <_JIT_ENTRY+0x35>
// 25: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000027:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f: 85 c0                         testl   %eax, %eax
// 31: 79 32                         jns     0x65 <_JIT_ENTRY+0x65>
// 33: eb 38                         jmp     0x6d <_JIT_ENTRY+0x6d>
// 35: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000037:  R_X86_64_64  .rodata.str1.1
// 3f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000041:  R_X86_64_64  _Py_NegativeRefcount
// 49: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 4e: 4c 89 e2                      movq    %r12, %rdx
// 51: ff d0                         callq   *%rax
// 53: 49 8b 04 24                   movq    (%r12), %rax
// 57: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000059:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 61: 85 c0                         testl   %eax, %eax
// 63: 78 08                         js      0x6d <_JIT_ENTRY+0x6d>
// 65: ff d1                         callq   *%rcx
// 67: 49 ff 0c 24                   decq    (%r12)
// 6b: 74 13                         je      0x80 <_JIT_ENTRY+0x80>
// 6d: 49 8b 45 00                   movq    (%r13), %rax
// 71: 48 85 c0                      testq   %rax, %rax
// 74: 7e 22                         jle     0x98 <_JIT_ENTRY+0x98>
// 76: 49 8d 6f f8                   leaq    -0x8(%r15), %rbp
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 44                         jns     0xc2 <_JIT_ENTRY+0xc2>
// 7e: eb 63                         jmp     0xe3 <_JIT_ENTRY+0xe3>
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _Py_Dealloc
// 8a: 4c 89 e7                      movq    %r12, %rdi
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 45 00                   movq    (%r13), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f de                         jg      0x76 <_JIT_ENTRY+0x76>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// b1: 4c 89 ea                      movq    %r13, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 45 00                   movq    (%r13), %rax
// ba: 49 8d 6f f8                   leaq    -0x8(%r15), %rbp
// be: 85 c0                         testl   %eax, %eax
// c0: 78 21                         js      0xe3 <_JIT_ENTRY+0xe3>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cc: ff d0                         callq   *%rax
// ce: 49 ff 4d 00                   decq    (%r13)
// d2: 75 0f                         jne     0xe3 <_JIT_ENTRY+0xe3>
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_Dealloc
// de: 4c 89 ef                      movq    %r13, %rdi
// e1: ff d0                         callq   *%rax
// e3: 31 c0                         xorl    %eax, %eax
// e5: 4d 39 ec                      cmpq    %r13, %r12
// e8: 0f 94 c0                      sete    %al
// eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 66 39 c8                      cmpw    %cx, %ax
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_FalseStruct
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _Py_TrueStruct
// 10c: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 110: 49 89 4f f0                   movq    %rcx, -0x10(%r15)
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _JIT_CONTINUE
// 11e: 4c 89 f7                      movq    %r14, %rdi
// 121: 48 89 ee                      movq    %rbp, %rsi
// 124: 48 89 da                      movq    %rbx, %rdx
// 127: 48 83 c4 08                   addq    $0x8, %rsp
// 12b: 5b                            popq    %rbx
// 12c: 41 5c                         popq    %r12
// 12e: 41 5d                         popq    %r13
// 130: 41 5e                         popq    %r14
// 132: 41 5f                         popq    %r15
// 134: 5d                            popq    %rbp
// 135: ff e0                         jmpq    *%rax
// 137: 
static const unsigned char _IS_OP_code_body[312] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x13, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x6f, 0xf8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x6f, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _IS_OP_code_holes[14] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _IS_OP_data_holes[1];

// _ITER_CHECK_LIST
// 
// /tmp/tmp3v1aptj0/_ITER_CHECK_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyListIter_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 74 39                         je      0x4e <_JIT_ENTRY+0x4e>
// 15: 48 29 fe                      subq    %rdi, %rsi
// 18: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20: 89 77 40                      movl    %esi, 0x40(%rdi)
// 23: 48 8b 07                      movq    (%rdi), %rax
// 26: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000028:  R_X86_64_64  PyCode_Type
// 30: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 34: 75 25                         jne     0x5b <_JIT_ENTRY+0x5b>
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  _JIT_TARGET
// 40: 89 c9                         movl    %ecx, %ecx
// 42: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 46: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4c: 59                            popq    %rcx
// 4d: c3                            retq
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _JIT_CONTINUE
// 58: 59                            popq    %rcx
// 59: ff e0                         jmpq    *%rax
// 5b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000005d:  R_X86_64_64  .rodata.str1.1
// 65: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1+0x1e
// 6f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x5d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  __assert_fail
// 83: ba 4d 00 00 00                movl    $0x4d, %edx
// 88: ff d0                         callq   *%rax
// 8a: 
static const unsigned char _ITER_CHECK_LIST_code_body[139] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _ITER_CHECK_LIST_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _ITER_CHECK_LIST_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _ITER_CHECK_LIST_data_holes[1];

// _ITER_CHECK_RANGE
// 
// /tmp/tmp3v1aptj0/_ITER_CHECK_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyRangeIter_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 74 39                         je      0x4e <_JIT_ENTRY+0x4e>
// 15: 48 29 fe                      subq    %rdi, %rsi
// 18: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20: 89 77 40                      movl    %esi, 0x40(%rdi)
// 23: 48 8b 07                      movq    (%rdi), %rax
// 26: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000028:  R_X86_64_64  PyCode_Type
// 30: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 34: 75 25                         jne     0x5b <_JIT_ENTRY+0x5b>
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  _JIT_TARGET
// 40: 89 c9                         movl    %ecx, %ecx
// 42: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 46: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4c: 59                            popq    %rcx
// 4d: c3                            retq
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _JIT_CONTINUE
// 58: 59                            popq    %rcx
// 59: ff e0                         jmpq    *%rax
// 5b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000005d:  R_X86_64_64  .rodata.str1.1
// 65: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1+0x1e
// 6f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x5d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  __assert_fail
// 83: ba 4d 00 00 00                movl    $0x4d, %edx
// 88: ff d0                         callq   *%rax
// 8a: 
static const unsigned char _ITER_CHECK_RANGE_code_body[139] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _ITER_CHECK_RANGE_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _ITER_CHECK_RANGE_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _ITER_CHECK_RANGE_data_holes[1];

// _ITER_CHECK_TUPLE
// 
// /tmp/tmp3v1aptj0/_ITER_CHECK_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyTupleIter_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 74 39                         je      0x4e <_JIT_ENTRY+0x4e>
// 15: 48 29 fe                      subq    %rdi, %rsi
// 18: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20: 89 77 40                      movl    %esi, 0x40(%rdi)
// 23: 48 8b 07                      movq    (%rdi), %rax
// 26: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000028:  R_X86_64_64  PyCode_Type
// 30: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 34: 75 25                         jne     0x5b <_JIT_ENTRY+0x5b>
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  _JIT_TARGET
// 40: 89 c9                         movl    %ecx, %ecx
// 42: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 46: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4c: 59                            popq    %rcx
// 4d: c3                            retq
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _JIT_CONTINUE
// 58: 59                            popq    %rcx
// 59: ff e0                         jmpq    *%rax
// 5b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000005d:  R_X86_64_64  .rodata.str1.1
// 65: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1+0x1e
// 6f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x5d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  __assert_fail
// 83: ba 4d 00 00 00                movl    $0x4d, %edx
// 88: ff d0                         callq   *%rax
// 8a: 
static const unsigned char _ITER_CHECK_TUPLE_code_body[139] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _ITER_CHECK_TUPLE_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _ITER_CHECK_TUPLE_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _ITER_CHECK_TUPLE_data_holes[1];

// _ITER_NEXT_LIST
// 
// /tmp/tmp3v1aptj0/_ITER_NEXT_LIST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000e:  R_X86_64_64  PyListIter_Type
// 16: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1a: 0f 85 aa 00 00 00             jne     0xca <_JIT_ENTRY+0xca>
// 20: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 24: 48 85 c9                      testq   %rcx, %rcx
// 27: 0f 84 cc 00 00 00             je      0xf9 <_JIT_ENTRY+0xf9>
// 2d: 48 89 d3                      movq    %rdx, %rbx
// 30: 48 8b 51 08                   movq    0x8(%rcx), %rdx
// 34: f6 82 ab 00 00 00 02          testb   $0x2, 0xab(%rdx)
// 3b: 0f 84 e7 00 00 00             je      0x128 <_JIT_ENTRY+0x128>
// 41: 49 89 f6                      movq    %rsi, %r14
// 44: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000046:  R_X86_64_64  PyLong_Type
// 4e: 48 39 f2                      cmpq    %rsi, %rdx
// 51: 0f 84 00 01 00 00             je      0x157 <_JIT_ENTRY+0x157>
// 57: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000059:  R_X86_64_64  PyBool_Type
// 61: 48 39 f2                      cmpq    %rsi, %rdx
// 64: 0f 84 1c 01 00 00             je      0x186 <_JIT_ENTRY+0x186>
// 6a: 48 8b 50 10                   movq    0x10(%rax), %rdx
// 6e: 48 3b 51 10                   cmpq    0x10(%rcx), %rdx
// 72: 0f 8d 3d 01 00 00             jge     0x1b5 <_JIT_ENTRY+0x1b5>
// 78: 49 89 ff                      movq    %rdi, %r15
// 7b: 48 8b 49 18                   movq    0x18(%rcx), %rcx
// 7f: 48 8d 72 01                   leaq    0x1(%rdx), %rsi
// 83: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 87: 4c 8b 24 d1                   movq    (%rcx,%rdx,8), %r12
// 8b: 41 8b 04 24                   movl    (%r12), %eax
// 8f: ff c0                         incl    %eax
// 91: 74 10                         je      0xa3 <_JIT_ENTRY+0xa3>
// 93: 41 89 04 24                   movl    %eax, (%r12)
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_INCREF_IncRefTotal
// a1: ff d0                         callq   *%rax
// a3: 4d 89 26                      movq    %r12, (%r14)
// a6: 49 83 c6 08                   addq    $0x8, %r14
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _JIT_CONTINUE
// b4: 4c 89 ff                      movq    %r15, %rdi
// b7: 4c 89 f6                      movq    %r14, %rsi
// ba: 48 89 da                      movq    %rbx, %rdx
// bd: 48 83 c4 08                   addq    $0x8, %rsp
// c1: 5b                            popq    %rbx
// c2: 41 5c                         popq    %r12
// c4: 41 5e                         popq    %r14
// c6: 41 5f                         popq    %r15
// c8: ff e0                         jmpq    *%rax
// ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cc:  R_X86_64_64  .rodata.str1.1+0x87
// d4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e0:  R_X86_64_64  .rodata.str1.1+0x39
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  __assert_fail
// f2: ba a6 08 00 00                movl    $0x8a6, %edx            # imm = 0x8A6
// f7: ff d0                         callq   *%rax
// f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fb:  R_X86_64_64  .rodata.str1.1+0xa9
// 103: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  .rodata.str1.1+0x39
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  __assert_fail
// 121: ba a8 08 00 00                movl    $0x8a8, %edx            # imm = 0x8A8
// 126: ff d0                         callq   *%rax
// 128: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012a:  R_X86_64_64  .rodata.str1.1+0x158
// 132: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000134:  R_X86_64_64  .rodata.str1.1+0x169
// 13c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013e:  R_X86_64_64  .rodata.str1.1+0x1a5
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  __assert_fail
// 150: ba 1f 00 00 00                movl    $0x1f, %edx
// 155: ff d0                         callq   *%rax
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1+0x101
// 161: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000163:  R_X86_64_64  .rodata.str1.1+0xd1
// 16b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016d:  R_X86_64_64  .rodata.str1.1+0x11d
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  __assert_fail
// 17f: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 184: ff d0                         callq   *%rax
// 186: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1+0x13c
// 190: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1+0xd1
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  .rodata.str1.1+0x11d
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  __assert_fail
// 1ae: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1+0xad
// 1bf: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  .rodata.str1.1+0x39
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  __assert_fail
// 1dd: ba a9 08 00 00                movl    $0x8a9, %edx            # imm = 0x8A9
// 1e2: ff d0                         callq   *%rax
// 1e4: 
static const unsigned char _ITER_NEXT_LIST_code_body[485] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xaa, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xcc, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x48, 0x8b, 0x51, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf2, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf2, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x50, 0x10, 0x48, 0x3b, 0x51, 0x10, 0x0f, 0x8d, 0x3d, 0x01, 0x00, 0x00, 0x49, 0x89, 0xff, 0x48, 0x8b, 0x49, 0x18, 0x48, 0x8d, 0x72, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x24, 0xd1, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xa6, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xa8, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xa9, 0x08, 0x00, 0x00, 0xff, 0xd0};
static const Hole _ITER_NEXT_LIST_code_holes[30] = {
    {0xe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa9},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x158},
    {0x134, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x169},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a5},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x101},
    {0x163, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd1},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11d},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13c},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd1},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11d},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xad},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(iter) == &PyListIter_Type\x00seq\x00it->it_index < PyList_GET_SIZE(seq)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00PyList_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/listobject.h\x00Py_ssize_t PyList_GET_SIZE(PyObject *)\x00'
// 1cc: 00 00 00 00
static const unsigned char _ITER_NEXT_LIST_data_body[465] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x69, 0x74, 0x65, 0x72, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x73, 0x65, 0x71, 0x00, 0x69, 0x74, 0x2d, 0x3e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x73, 0x65, 0x71, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _ITER_NEXT_LIST_data_holes[1];

// _ITER_NEXT_RANGE
// 
// /tmp/tmp3v1aptj0/_ITER_NEXT_RANGE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000b:  R_X86_64_64  PyRangeIter_Type
// 13: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 17: 75 75                         jne     0x8e <_JIT_ENTRY+0x8e>
// 19: 48 8b 48 20                   movq    0x20(%rax), %rcx
// 1d: 48 85 c9                      testq   %rcx, %rcx
// 20: 0f 8e 97 00 00 00             jle     0xbd <_JIT_ENTRY+0xbd>
// 26: 49 89 d7                      movq    %rdx, %r15
// 29: 48 89 f3                      movq    %rsi, %rbx
// 2c: 49 89 fe                      movq    %rdi, %r14
// 2f: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 33: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 37: 48 01 fa                      addq    %rdi, %rdx
// 3a: 48 89 50 10                   movq    %rdx, 0x10(%rax)
// 3e: 48 ff c9                      decq    %rcx
// 41: 48 89 48 20                   movq    %rcx, 0x20(%rax)
// 45: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000047:  R_X86_64_64  PyLong_FromLong
// 4f: ff d0                         callq   *%rax
// 51: 48 85 c0                      testq   %rax, %rax
// 54: 74 21                         je      0x77 <_JIT_ENTRY+0x77>
// 56: 48 89 03                      movq    %rax, (%rbx)
// 59: 48 83 c3 08                   addq    $0x8, %rbx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _JIT_CONTINUE
// 67: 4c 89 f7                      movq    %r14, %rdi
// 6a: 48 89 de                      movq    %rbx, %rsi
// 6d: 4c 89 fa                      movq    %r15, %rdx
// 70: 5b                            popq    %rbx
// 71: 41 5e                         popq    %r14
// 73: 41 5f                         popq    %r15
// 75: ff e0                         jmpq    *%rax
// 77: 4c 29 f3                      subq    %r14, %rbx
// 7a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 82: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 86: 31 c0                         xorl    %eax, %eax
// 88: 5b                            popq    %rbx
// 89: 41 5e                         popq    %r14
// 8b: 41 5f                         popq    %r15
// 8d: c3                            retq
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1+0x87
// 98: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a4:  R_X86_64_64  .rodata.str1.1+0x39
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  __assert_fail
// b6: ba eb 08 00 00                movl    $0x8eb, %edx            # imm = 0x8EB
// bb: ff d0                         callq   *%rax
// bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000bf:  R_X86_64_64  .rodata.str1.1+0xa7
// c7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c9:  R_X86_64_64  .rodata.str1.1
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1+0x39
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  __assert_fail
// e5: ba ec 08 00 00                movl    $0x8ec, %edx            # imm = 0x8EC
// ea: ff d0                         callq   *%rax
// ec: 
static const unsigned char _ITER_NEXT_RANGE_code_body[237] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x75, 0x48, 0x8b, 0x48, 0x20, 0x48, 0x85, 0xc9, 0x0f, 0x8e, 0x97, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x01, 0xfa, 0x48, 0x89, 0x50, 0x10, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xeb, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xec, 0x08, 0x00, 0x00, 0xff, 0xd0};
static const Hole _ITER_NEXT_RANGE_code_holes[12] = {
    {0xb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(r) == &PyRangeIter_Type\x00r->len > 0\x00'
// b2: 00 00 00 00 00 00
static const unsigned char _ITER_NEXT_RANGE_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x72, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x72, 0x2d, 0x3e, 0x6c, 0x65, 0x6e, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _ITER_NEXT_RANGE_data_holes[1];

// _ITER_NEXT_TUPLE
// 
// /tmp/tmp3v1aptj0/_ITER_NEXT_TUPLE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000e:  R_X86_64_64  PyTupleIter_Type
// 16: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1a: 0f 85 a7 00 00 00             jne     0xc7 <_JIT_ENTRY+0xc7>
// 20: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 24: 48 85 c9                      testq   %rcx, %rcx
// 27: 0f 84 c9 00 00 00             je      0xf6 <_JIT_ENTRY+0xf6>
// 2d: 48 89 d3                      movq    %rdx, %rbx
// 30: 48 8b 51 08                   movq    0x8(%rcx), %rdx
// 34: f6 82 ab 00 00 00 04          testb   $0x4, 0xab(%rdx)
// 3b: 0f 84 e4 00 00 00             je      0x125 <_JIT_ENTRY+0x125>
// 41: 49 89 f6                      movq    %rsi, %r14
// 44: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000046:  R_X86_64_64  PyLong_Type
// 4e: 48 39 f2                      cmpq    %rsi, %rdx
// 51: 0f 84 fd 00 00 00             je      0x154 <_JIT_ENTRY+0x154>
// 57: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000059:  R_X86_64_64  PyBool_Type
// 61: 48 39 f2                      cmpq    %rsi, %rdx
// 64: 0f 84 19 01 00 00             je      0x183 <_JIT_ENTRY+0x183>
// 6a: 48 8b 50 10                   movq    0x10(%rax), %rdx
// 6e: 48 3b 51 10                   cmpq    0x10(%rcx), %rdx
// 72: 0f 8d 3a 01 00 00             jge     0x1b2 <_JIT_ENTRY+0x1b2>
// 78: 49 89 ff                      movq    %rdi, %r15
// 7b: 48 8d 72 01                   leaq    0x1(%rdx), %rsi
// 7f: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 83: 4c 8b 64 d1 18                movq    0x18(%rcx,%rdx,8), %r12
// 88: 41 8b 04 24                   movl    (%r12), %eax
// 8c: ff c0                         incl    %eax
// 8e: 74 10                         je      0xa0 <_JIT_ENTRY+0xa0>
// 90: 41 89 04 24                   movl    %eax, (%r12)
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9e: ff d0                         callq   *%rax
// a0: 4d 89 26                      movq    %r12, (%r14)
// a3: 49 83 c6 08                   addq    $0x8, %r14
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _JIT_CONTINUE
// b1: 4c 89 ff                      movq    %r15, %rdi
// b4: 4c 89 f6                      movq    %r14, %rsi
// b7: 48 89 da                      movq    %rbx, %rdx
// ba: 48 83 c4 08                   addq    $0x8, %rsp
// be: 5b                            popq    %rbx
// bf: 41 5c                         popq    %r12
// c1: 41 5e                         popq    %r14
// c3: 41 5f                         popq    %r15
// c5: ff e0                         jmpq    *%rax
// c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c9:  R_X86_64_64  .rodata.str1.1+0x8b
// d1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000dd:  R_X86_64_64  .rodata.str1.1+0x39
// e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e7:  R_X86_64_64  __assert_fail
// ef: ba c9 08 00 00                movl    $0x8c9, %edx            # imm = 0x8C9
// f4: ff d0                         callq   *%rax
// f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f8:  R_X86_64_64  .rodata.str1.1+0x87
// 100: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010c:  R_X86_64_64  .rodata.str1.1+0x39
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  __assert_fail
// 11e: ba cb 08 00 00                movl    $0x8cb, %edx            # imm = 0x8CB
// 123: ff d0                         callq   *%rax
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1+0x15a
// 12f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000131:  R_X86_64_64  .rodata.str1.1+0x16c
// 139: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013b:  R_X86_64_64  .rodata.str1.1+0x1a9
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  __assert_fail
// 14d: ba 16 00 00 00                movl    $0x16, %edx
// 152: ff d0                         callq   *%rax
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1+0x103
// 15e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000160:  R_X86_64_64  .rodata.str1.1+0xd3
// 168: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016a:  R_X86_64_64  .rodata.str1.1+0x11f
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  __assert_fail
// 17c: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 181: ff d0                         callq   *%rax
// 183: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000185:  R_X86_64_64  .rodata.str1.1+0x13e
// 18d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000018f:  R_X86_64_64  .rodata.str1.1+0xd3
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  .rodata.str1.1+0x11f
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  __assert_fail
// 1ab: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b4:  R_X86_64_64  .rodata.str1.1+0xae
// 1bc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  .rodata.str1.1+0x39
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  __assert_fail
// 1da: ba cc 08 00 00                movl    $0x8cc, %edx            # imm = 0x8CC
// 1df: ff d0                         callq   *%rax
// 1e1: 
static const unsigned char _ITER_NEXT_TUPLE_code_body[482] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xa7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x48, 0x8b, 0x51, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xe4, 0x00, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf2, 0x0f, 0x84, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf2, 0x0f, 0x84, 0x19, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x50, 0x10, 0x48, 0x3b, 0x51, 0x10, 0x0f, 0x8d, 0x3a, 0x01, 0x00, 0x00, 0x49, 0x89, 0xff, 0x48, 0x8d, 0x72, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x64, 0xd1, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xc9, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcb, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x16, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcc, 0x08, 0x00, 0x00, 0xff, 0xd0};
static const Hole _ITER_NEXT_TUPLE_code_holes[30] = {
    {0xe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x8b},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15a},
    {0x131, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16c},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a9},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x103},
    {0x160, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd3},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11f},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13e},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd3},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11f},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xae},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00seq\x00Py_TYPE(iter) == &PyTupleIter_Type\x00it->it_index < PyTuple_GET_SIZE(seq)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00PyTuple_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/tupleobject.h\x00Py_ssize_t PyTuple_GET_SIZE(PyObject *)\x00'
// 1d1: 00 00 00 00 00 00 00
static const unsigned char _ITER_NEXT_TUPLE_data_body[473] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x73, 0x65, 0x71, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x69, 0x74, 0x65, 0x72, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x69, 0x74, 0x2d, 0x3e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x73, 0x65, 0x71, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _ITER_NEXT_TUPLE_data_holes[1];

// _JUMP_TO_TOP
// 
// /tmp/tmp3v1aptj0/_JUMP_TO_TOP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 49 89 d7                      movq    %rdx, %r15
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 12: 48 8b 00                      movq    (%rax), %rax
// 15: 84 c0                         testb   %al, %al
// 17: 74 2a                         je      0x43 <_JIT_ENTRY+0x43>
// 19: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001b:  R_X86_64_64  _Py_HandlePending
// 23: 4c 89 ff                      movq    %r15, %rdi
// 26: ff d0                         callq   *%rax
// 28: 85 c0                         testl   %eax, %eax
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 4c 29 f3                      subq    %r14, %rbx
// 2f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 33: 48 c1 eb 03                   shrq    $0x3, %rbx
// 37: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 3b: 31 c0                         xorl    %eax, %eax
// 3d: 5b                            popq    %rbx
// 3e: 41 5e                         popq    %r14
// 40: 41 5f                         popq    %r15
// 42: c3                            retq
// 43: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000045:  R_X86_64_64  _JIT_TOP
// 4d: 4c 89 f7                      movq    %r14, %rdi
// 50: 48 89 de                      movq    %rbx, %rsi
// 53: 4c 89 fa                      movq    %r15, %rdx
// 56: 5b                            popq    %rbx
// 57: 41 5e                         popq    %r14
// 59: 41 5f                         popq    %r15
// 5b: ff e0                         jmpq    *%rax
// 5d: 
static const unsigned char _JUMP_TO_TOP_code_body[94] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x2a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x17, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _JUMP_TO_TOP_code_holes[3] = {
    {0x1b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_TOP, NULL, 0x0},
};
// 0: 
static const unsigned char _JUMP_TO_TOP_data_body[1];
static const Hole _JUMP_TO_TOP_data_holes[1];

// _LIST_APPEND
// 
// /tmp/tmp3v1aptj0/_LIST_APPEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 f6                      movq    %rsi, %r14
// b: 48 8b 76 f8                   movq    -0x8(%rsi), %rsi
// f: 48 85 f6                      testq   %rsi, %rsi
// 12: 0f 84 38 01 00 00             je      0x150 <_JIT_ENTRY+0x150>
// 18: 48 89 fb                      movq    %rdi, %rbx
// 1b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001d:  R_X86_64_64  _JIT_OPARG
// 25: f7 d0                         notl    %eax
// 27: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2c: 48 98                         cltq
// 2e: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 32: 48 85 ff                      testq   %rdi, %rdi
// 35: 0f 84 15 01 00 00             je      0x150 <_JIT_ENTRY+0x150>
// 3b: 49 89 d7                      movq    %rdx, %r15
// 3e: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 42: f6 82 ab 00 00 00 02          testb   $0x2, 0xab(%rdx)
// 49: 0f 84 30 01 00 00             je      0x17f <_JIT_ENTRY+0x17f>
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  PyLong_Type
// 59: 48 39 c2                      cmpq    %rax, %rdx
// 5c: 0f 84 4c 01 00 00             je      0x1ae <_JIT_ENTRY+0x1ae>
// 62: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000064:  R_X86_64_64  PyBool_Type
// 6c: 48 39 ca                      cmpq    %rcx, %rdx
// 6f: 0f 84 68 01 00 00             je      0x1dd <_JIT_ENTRY+0x1dd>
// 75: 4c 8b 47 10                   movq    0x10(%rdi), %r8
// 79: 49 8d 50 01                   leaq    0x1(%r8), %rdx
// 7d: 49 b9 ff ff ff ff ff ff ff 7f movabsq $0x7fffffffffffffff, %r9 # imm = 0x7FFFFFFFFFFFFFFF
// 87: 4c 39 ca                      cmpq    %r9, %rdx
// 8a: 0f 83 7c 01 00 00             jae     0x20c <_JIT_ENTRY+0x20c>
// 90: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 94: 4c 39 47 20                   cmpq    %r8, 0x20(%rdi)
// 98: 7e 2d                         jle     0xc7 <_JIT_ENTRY+0xc7>
// 9a: 4d 85 c0                      testq   %r8, %r8
// 9d: 0f 88 98 01 00 00             js      0x23b <_JIT_ENTRY+0x23b>
// a3: 4c 8b 4f 18                   movq    0x18(%rdi), %r9
// a7: 4b 89 34 c1                   movq    %rsi, (%r9,%r8,8)
// ab: 48 8b 77 08                   movq    0x8(%rdi), %rsi
// af: 48 39 c6                      cmpq    %rax, %rsi
// b2: 0f 84 b2 01 00 00             je      0x26a <_JIT_ENTRY+0x26a>
// b8: 48 39 ce                      cmpq    %rcx, %rsi
// bb: 0f 84 d8 01 00 00             je      0x299 <_JIT_ENTRY+0x299>
// c1: 48 89 57 10                   movq    %rdx, 0x10(%rdi)
// c5: eb 14                         jmp     0xdb <_JIT_ENTRY+0xdb>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _PyList_AppendTakeRefListResize
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 4d 0f 49 f4                   cmovnsq %r12, %r14
// d9: 78 20                         js      0xfb <_JIT_ENTRY+0xfb>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_CONTINUE
// e5: 48 89 df                      movq    %rbx, %rdi
// e8: 4c 89 e6                      movq    %r12, %rsi
// eb: 4c 89 fa                      movq    %r15, %rdx
// ee: 48 83 c4 08                   addq    $0x8, %rsp
// f2: 5b                            popq    %rbx
// f3: 41 5c                         popq    %r12
// f5: 41 5e                         popq    %r14
// f7: 41 5f                         popq    %r15
// f9: ff e0                         jmpq    *%rax
// fb: 48 8b 03                      movq    (%rbx), %rax
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  PyCode_Type
// 108: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 10c: 0f 85 b6 01 00 00             jne     0x2c8 <_JIT_ENTRY+0x2c8>
// 112: 8b 40 48                      movl    0x48(%rax), %eax
// 115: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// 119: 48 83 c0 48                   addq    $0x48, %rax
// 11d: 4c 89 f1                      movq    %r14, %rcx
// 120: 48 29 c1                      subq    %rax, %rcx
// 123: 48 c1 e9 03                   shrq    $0x3, %rcx
// 127: 85 c9                         testl   %ecx, %ecx
// 129: 0f 8e c8 01 00 00             jle     0x2f7 <_JIT_ENTRY+0x2f7>
// 12f: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 133: 49 29 c6                      subq    %rax, %r14
// 136: 49 83 c6 f8                   addq    $-0x8, %r14
// 13a: 49 c1 ee 03                   shrq    $0x3, %r14
// 13e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 142: 31 c0                         xorl    %eax, %eax
// 144: 48 83 c4 08                   addq    $0x8, %rsp
// 148: 5b                            popq    %rbx
// 149: 41 5c                         popq    %r12
// 14b: 41 5e                         popq    %r14
// 14d: 41 5f                         popq    %r15
// 14f: c3                            retq
// 150: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000152:  R_X86_64_64  .rodata.str1.1+0x1eb
// 15a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1+0x20b
// 164: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000166:  R_X86_64_64  .rodata.str1.1+0x249
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  __assert_fail
// 178: ba 30 00 00 00                movl    $0x30, %edx
// 17d: ff d0                         callq   *%rax
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1+0x27f
// 189: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000018b:  R_X86_64_64  .rodata.str1.1+0x20b
// 193: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000195:  R_X86_64_64  .rodata.str1.1+0x249
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  __assert_fail
// 1a7: ba 31 00 00 00                movl    $0x31, %edx
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b0:  R_X86_64_64  .rodata.str1.1+0x158
// 1b8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1+0x128
// 1c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1+0x174
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  __assert_fail
// 1d6: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 1db: ff d0                         callq   *%rax
// 1dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1+0x193
// 1e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x128
// 1f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1+0x174
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  __assert_fail
// 205: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 20a: ff d0                         callq   *%rax
// 20c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020e:  R_X86_64_64  .rodata.str1.1+0x292
// 216: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1+0x20b
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  .rodata.str1.1+0x249
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  __assert_fail
// 234: ba 34 00 00 00                movl    $0x34, %edx
// 239: ff d0                         callq   *%rax
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0x360
// 245: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1+0x1af
// 24f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000251:  R_X86_64_64  .rodata.str1.1+0x327
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  __assert_fail
// 263: ba 29 00 00 00                movl    $0x29, %edx
// 268: ff d0                         callq   *%rax
// 26a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026c:  R_X86_64_64  .rodata.str1.1+0x2b3
// 274: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1+0x128
// 27e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000280:  R_X86_64_64  .rodata.str1.1+0x2d7
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  __assert_fail
// 292: ba ab 01 00 00                movl    $0x1ab, %edx            # imm = 0x1AB
// 297: ff d0                         callq   *%rax
// 299: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029b:  R_X86_64_64  .rodata.str1.1+0x303
// 2a3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a5:  R_X86_64_64  .rodata.str1.1+0x128
// 2ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002af:  R_X86_64_64  .rodata.str1.1+0x2d7
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  __assert_fail
// 2c1: ba ac 01 00 00                movl    $0x1ac, %edx            # imm = 0x1AC
// 2c6: ff d0                         callq   *%rax
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1+0x95
// 2d2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002d4:  R_X86_64_64  .rodata.str1.1+0xb3
// 2dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002de:  R_X86_64_64  .rodata.str1.1+0xf2
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  __assert_fail
// 2f0: ba 4d 00 00 00                movl    $0x4d, %edx
// 2f5: ff d0                         callq   *%rax
// 2f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f9:  R_X86_64_64  .rodata.str1.1+0x4e
// 301: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000303:  R_X86_64_64  .rodata.str1.1+0x61
// 30b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000030d:  R_X86_64_64  .rodata.str1.1
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  __assert_fail
// 31f: ba 5b 00 00 00                movl    $0x5b, %edx
// 324: ff d0                         callq   *%rax
// 326: 
static const unsigned char _LIST_APPEND_code_body[807] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x8b, 0x76, 0xf8, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x38, 0x01, 0x00, 0x00, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x57, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc2, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xca, 0x0f, 0x84, 0x68, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x47, 0x10, 0x49, 0x8d, 0x50, 0x01, 0x49, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x4c, 0x39, 0xca, 0x0f, 0x83, 0x7c, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x4c, 0x39, 0x47, 0x20, 0x7e, 0x2d, 0x4d, 0x85, 0xc0, 0x0f, 0x88, 0x98, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x4f, 0x18, 0x4b, 0x89, 0x34, 0xc1, 0x48, 0x8b, 0x77, 0x08, 0x48, 0x39, 0xc6, 0x0f, 0x84, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x39, 0xce, 0x0f, 0x84, 0xd8, 0x01, 0x00, 0x00, 0x48, 0x89, 0x57, 0x10, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x49, 0xf4, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xb6, 0x01, 0x00, 0x00, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xc8, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x43, 0x48, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x30, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x31, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x34, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x29, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xab, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xac, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LIST_APPEND_code_holes[47] = {
    {0x1d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1eb},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x20b},
    {0x166, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x27f},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x20b},
    {0x195, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x158},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x174},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x193},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x174},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x292},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x20b},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x360},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1af},
    {0x251, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x327},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2b3},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2d7},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x303},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x128},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2d7},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x95},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf2},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4e},
    {0x303, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x61},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00/home/jglass/Documents/cpython/Include/cpython/listobject.h\x00self != NULL && newitem != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_list.h\x00int _PyList_AppendTakeRef(PyListObject *, PyObject *)\x00PyList_Check(self)\x00(size_t)len + 1 < PY_SSIZE_T_MAX\x00ob->ob_base.ob_type != &PyLong_Type\x00void Py_SET_SIZE(PyVarObject *, Py_ssize_t)\x00ob->ob_base.ob_type != &PyBool_Type\x00void PyList_SET_ITEM(PyObject *, Py_ssize_t, PyObject *)\x000 <= index\x00'
// 36b: 00 00 00 00 00
static const unsigned char _LIST_APPEND_data_body[881] = {0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x20, 0x26, 0x26, 0x20, 0x6e, 0x65, 0x77, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x68, 0x00, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x28, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x73, 0x65, 0x6c, 0x66, 0x29, 0x00, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x6c, 0x65, 0x6e, 0x20, 0x2b, 0x20, 0x31, 0x20, 0x3c, 0x20, 0x50, 0x59, 0x5f, 0x53, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x56, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x30, 0x20, 0x3c, 0x3d, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LIST_APPEND_data_holes[1];

// _LIST_EXTEND
// 
// /tmp/tmp3v1aptj0/_LIST_EXTEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d5                      movq    %rdx, %r13
// e: 49 89 f4                      movq    %rsi, %r12
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 8d 5e f8                   leaq    -0x8(%rsi), %rbx
// 18: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001e:  R_X86_64_64  _JIT_OPARG
// 26: f7 d0                         notl    %eax
// 28: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2d: 48 98                         cltq
// 2f: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 33: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000035:  R_X86_64_64  _PyList_Extend
// 3d: 4c 89 fe                      movq    %r15, %rsi
// 40: ff d0                         callq   *%rax
// 42: 48 85 c0                      testq   %rax, %rax
// 45: 74 2c                         je      0x73 <_JIT_ENTRY+0x73>
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _Py_NoneStruct
// 51: 48 39 c8                      cmpq    %rcx, %rax
// 54: 0f 85 9e 01 00 00             jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 5a: 49 8b 07                      movq    (%r15), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 0f 8e 9b 00 00 00             jle     0x101 <_JIT_ENTRY+0x101>
// 66: 85 c0                         testl   %eax, %eax
// 68: 0f 89 b8 00 00 00             jns     0x126 <_JIT_ENTRY+0x126>
// 6e: e9 d3 00 00 00                jmp     0x146 <_JIT_ENTRY+0x146>
// 73: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000075:  R_X86_64_64  PyExc_TypeError
// 7d: 48 8b 75 00                   movq    (%rbp), %rsi
// 81: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000083:  R_X86_64_64  _PyErr_ExceptionMatches
// 8b: 4c 89 ef                      movq    %r13, %rdi
// 8e: ff d0                         callq   *%rax
// 90: 85 c0                         testl   %eax, %eax
// 92: 74 58                         je      0xec <_JIT_ENTRY+0xec>
// 94: 49 8b 47 08                   movq    0x8(%r15), %rax
// 98: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// a0: 75 4a                         jne     0xec <_JIT_ENTRY+0xec>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  PySequence_Check
// ac: 4c 89 ff                      movq    %r15, %rdi
// af: ff d0                         callq   *%rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 75 37                         jne     0xec <_JIT_ENTRY+0xec>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _PyErr_Clear
// bf: 4c 89 ef                      movq    %r13, %rdi
// c2: ff d0                         callq   *%rax
// c4: 48 8b 75 00                   movq    (%rbp), %rsi
// c8: 49 8b 47 08                   movq    0x8(%r15), %rax
// cc: 48 8b 48 18                   movq    0x18(%rax), %rcx
// d0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000d2:  R_X86_64_64  .rodata.str1.1+0x87
// da: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000dc:  R_X86_64_64  _PyErr_Format
// e4: 4c 89 ef                      movq    %r13, %rdi
// e7: 31 c0                         xorl    %eax, %eax
// e9: 41 ff d0                      callq   *%r8
// ec: 49 8b 07                      movq    (%r15), %rax
// ef: 48 85 c0                      testq   %rax, %rax
// f2: 7e 75                         jle     0x169 <_JIT_ENTRY+0x169>
// f4: 85 c0                         testl   %eax, %eax
// f6: 0f 89 92 00 00 00             jns     0x18e <_JIT_ENTRY+0x18e>
// fc: e9 ad 00 00 00                jmp     0x1ae <_JIT_ENTRY+0x1ae>
// 101: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000103:  R_X86_64_64  .rodata.str1.1
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _Py_NegativeRefcount
// 115: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 11a: 4c 89 fa                      movq    %r15, %rdx
// 11d: ff d0                         callq   *%rax
// 11f: 49 8b 07                      movq    (%r15), %rax
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 20                         js      0x146 <_JIT_ENTRY+0x146>
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 130: ff d0                         callq   *%rax
// 132: 49 ff 0f                      decq    (%r15)
// 135: 75 0f                         jne     0x146 <_JIT_ENTRY+0x146>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_Dealloc
// 141: 4c 89 ff                      movq    %r15, %rdi
// 144: ff d0                         callq   *%rax
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_CONTINUE
// 150: 4c 89 f7                      movq    %r14, %rdi
// 153: 48 89 de                      movq    %rbx, %rsi
// 156: 4c 89 ea                      movq    %r13, %rdx
// 159: 48 83 c4 08                   addq    $0x8, %rsp
// 15d: 5b                            popq    %rbx
// 15e: 41 5c                         popq    %r12
// 160: 41 5d                         popq    %r13
// 162: 41 5e                         popq    %r14
// 164: 41 5f                         popq    %r15
// 166: 5d                            popq    %rbp
// 167: ff e0                         jmpq    *%rax
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 182: 4c 89 fa                      movq    %r15, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 07                      movq    (%r15), %rax
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 78 20                         js      0x1ae <_JIT_ENTRY+0x1ae>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 198: ff d0                         callq   *%rax
// 19a: 49 ff 0f                      decq    (%r15)
// 19d: 75 0f                         jne     0x1ae <_JIT_ENTRY+0x1ae>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _Py_Dealloc
// 1a9: 4c 89 ff                      movq    %r15, %rdi
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 8b 06                      movq    (%r14), %rax
// 1b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b3:  R_X86_64_64  PyCode_Type
// 1bb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1bf: 75 66                         jne     0x227 <_JIT_ENTRY+0x227>
// 1c1: 8b 40 48                      movl    0x48(%rax), %eax
// 1c4: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1c8: 48 83 c0 48                   addq    $0x48, %rax
// 1cc: 49 29 c4                      subq    %rax, %r12
// 1cf: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d3: 45 85 e4                      testl   %r12d, %r12d
// 1d6: 7e 7e                         jle     0x256 <_JIT_ENTRY+0x256>
// 1d8: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 1dc: 48 29 c3                      subq    %rax, %rbx
// 1df: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1e3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e7: 31 c0                         xorl    %eax, %eax
// 1e9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: c3                            retq
// 1f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fa:  R_X86_64_64  .rodata.str1.1+0xb5
// 202: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000204:  R_X86_64_64  .rodata.str1.1
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  .rodata.str1.1+0x39
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  __assert_fail
// 220: ba 46 05 00 00                movl    $0x546, %edx            # imm = 0x546
// 225: ff d0                         callq   *%rax
// 227: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000229:  R_X86_64_64  .rodata.str1.1+0x110
// 231: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1+0x12e
// 23b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023d:  R_X86_64_64  .rodata.str1.1+0x16d
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  __assert_fail
// 24f: ba 4d 00 00 00                movl    $0x4d, %edx
// 254: ff d0                         callq   *%rax
// 256: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000258:  R_X86_64_64  .rodata.str1.1+0xc9
// 260: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1+0xdc
// 26a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026c:  R_X86_64_64  .rodata.str1.1+0x39
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  __assert_fail
// 27e: ba 5b 00 00 00                movl    $0x5b, %edx
// 283: ff d0                         callq   *%rax
// 285: 
static const unsigned char _LIST_EXTEND_code_body[646] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x49, 0x89, 0xfe, 0x48, 0x8d, 0x5e, 0xf8, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2c, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x85, 0x9e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9b, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb8, 0x00, 0x00, 0x00, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x58, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x75, 0x00, 0x49, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x75, 0x85, 0xc0, 0x0f, 0x89, 0x92, 0x00, 0x00, 0x00, 0xe9, 0xad, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x66, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc4, 0x49, 0xc1, 0xec, 0x03, 0x45, 0x85, 0xe4, 0x7e, 0x7e, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x46, 0x05, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LIST_EXTEND_code_holes[32] = {
    {0x1e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb5},
    {0x204, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x110},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12e},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16d},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc9},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdc},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Value after * must be an iterable, not %.200s\x00Py_IsNone(none_val)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 1a3: 00 00 00 00 00
static const unsigned char _LIST_EXTEND_data_body[425] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x50, 0x79, 0x5f, 0x49, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x28, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LIST_EXTEND_data_holes[1];

// _LOAD_ASSERTION_ERROR
// 
// /tmp/tmp3v1aptj0/_LOAD_ASSERTION_ERROR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 d3                      movq    %rdx, %rbx
// b: 49 89 f6                      movq    %rsi, %r14
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  PyExc_AssertionError
// 1b: 4c 8b 20                      movq    (%rax), %r12
// 1e: 41 8b 04 24                   movl    (%r12), %eax
// 22: ff c0                         incl    %eax
// 24: 74 10                         je      0x36 <_JIT_ENTRY+0x36>
// 26: 41 89 04 24                   movl    %eax, (%r12)
// 2a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 34: ff d0                         callq   *%rax
// 36: 4d 89 26                      movq    %r12, (%r14)
// 39: 49 83 c6 08                   addq    $0x8, %r14
// 3d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003f:  R_X86_64_64  _JIT_CONTINUE
// 47: 4c 89 ff                      movq    %r15, %rdi
// 4a: 4c 89 f6                      movq    %r14, %rsi
// 4d: 48 89 da                      movq    %rbx, %rdx
// 50: 48 83 c4 08                   addq    $0x8, %rsp
// 54: 5b                            popq    %rbx
// 55: 41 5c                         popq    %r12
// 57: 41 5e                         popq    %r14
// 59: 41 5f                         popq    %r15
// 5b: ff e0                         jmpq    *%rax
// 5d: 
static const unsigned char _LOAD_ASSERTION_ERROR_code_body[94] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _LOAD_ASSERTION_ERROR_code_holes[4] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _LOAD_ASSERTION_ERROR_data_body[1];
static const Hole _LOAD_ASSERTION_ERROR_data_holes[1];

// _LOAD_ATTR
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 8b 07                      movq    (%rdi), %rax
// e: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000010:  R_X86_64_64  PyCode_Type
// 18: 48 39 68 08                   cmpq    %rbp, 0x8(%rax)
// 1c: 0f 85 fd 01 00 00             jne     0x21f <_JIT_ENTRY+0x21f>
// 22: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 2a: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 31: 0f 84 17 02 00 00             je      0x24e <_JIT_ENTRY+0x24e>
// 37: 49 89 d7                      movq    %rdx, %r15
// 3a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000003c:  R_X86_64_64  _JIT_OPARG
// 44: 0f b7 d2                      movzwl  %dx, %edx
// 47: d1 ea                         shrl    %edx
// 49: 0f 88 2e 02 00 00             js      0x27d <_JIT_ENTRY+0x27d>
// 4f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000051:  R_X86_64_64  PyLong_Type
// 59: 48 39 d1                      cmpq    %rdx, %rcx
// 5c: 0f 84 4a 02 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 62: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000064:  R_X86_64_64  PyBool_Type
// 6c: 48 39 d1                      cmpq    %rdx, %rcx
// 6f: 0f 84 66 02 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 75: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000077:  R_X86_64_64  _JIT_OPARG
// 7f: 0f b7 c9                      movzwl  %cx, %ecx
// 82: 48 d1 e9                      shrq    %rcx
// 85: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 89: 0f 8e 7b 02 00 00             jle     0x30a <_JIT_ENTRY+0x30a>
// 8f: 49 89 f6                      movq    %rsi, %r14
// 92: 48 89 fb                      movq    %rdi, %rbx
// 95: 4c 8d 6e f8                   leaq    -0x8(%rsi), %r13
// 99: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 9d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009f:  R_X86_64_64  _JIT_OPARG
// a7: 89 ca                         movl    %ecx, %edx
// a9: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// af: 48 8b 74 90 18                movq    0x18(%rax,%rdx,4), %rsi
// b4: f6 c1 01                      testb   $0x1, %cl
// b7: 74 6b                         je      0x124 <_JIT_ENTRY+0x124>
// b9: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _PyObject_GetMethod
// cb: 48 89 e2                      movq    %rsp, %rdx
// ce: 4c 89 e7                      movq    %r12, %rdi
// d1: ff d0                         callq   *%rax
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 84 80 00 00 00             je      0x15b <_JIT_ENTRY+0x15b>
// db: 48 8b 04 24                   movq    (%rsp), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 0f 84 51 02 00 00             je      0x339 <_JIT_ENTRY+0x339>
// e8: 49 89 45 00                   movq    %rax, (%r13)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: a8 01                         testb   $0x1, %al
// f8: 74 03                         je      0xfd <_JIT_ENTRY+0xfd>
// fa: 4d 89 26                      movq    %r12, (%r14)
// fd: 83 e0 01                      andl    $0x1, %eax
// 100: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 48 89 df                      movq    %rbx, %rdi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 48 83 c4 08                   addq    $0x8, %rsp
// 118: 5b                            popq    %rbx
// 119: 41 5c                         popq    %r12
// 11b: 41 5d                         popq    %r13
// 11d: 41 5e                         popq    %r14
// 11f: 41 5f                         popq    %r15
// 121: 5d                            popq    %rbp
// 122: ff e0                         jmpq    *%rax
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  PyObject_GetAttr
// 12e: 4c 89 e7                      movq    %r12, %rdi
// 131: ff d0                         callq   *%rax
// 133: 48 89 04 24                   movq    %rax, (%rsp)
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7f 46                         jg      0x186 <_JIT_ENTRY+0x186>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 159: eb 22                         jmp     0x17d <_JIT_ENTRY+0x17d>
// 15b: 49 8b 04 24                   movq    (%r12), %rax
// 15f: 48 85 c0                      testq   %rax, %rax
// 162: 7f 22                         jg      0x186 <_JIT_ENTRY+0x186>
// 164: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000166:  R_X86_64_64  .rodata.str1.1
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_NegativeRefcount
// 178: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 17d: 4c 89 e2                      movq    %r12, %rdx
// 180: ff d0                         callq   *%rax
// 182: 49 8b 04 24                   movq    (%r12), %rax
// 186: 85 c0                         testl   %eax, %eax
// 188: 78 12                         js      0x19c <_JIT_ENTRY+0x19c>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 194: ff d0                         callq   *%rax
// 196: 49 ff 0c 24                   decq    (%r12)
// 19a: 74 27                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 19c: 48 8b 04 24                   movq    (%rsp), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 74 36                         je      0x1db <_JIT_ENTRY+0x1db>
// 1a5: 45 31 e4                      xorl    %r12d, %r12d
// 1a8: 49 89 45 00                   movq    %rax, (%r13)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: a8 01                         testb   $0x1, %al
// 1b8: 0f 85 3c ff ff ff             jne     0xfa <_JIT_ENTRY+0xfa>
// 1be: e9 3a ff ff ff                jmp     0xfd <_JIT_ENTRY+0xfd>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 8b 04 24                   movq    (%rsp), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 75 ca                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 1db: 48 8b 03                      movq    (%rbx), %rax
// 1de: 48 39 68 08                   cmpq    %rbp, 0x8(%rax)
// 1e2: 75 3b                         jne     0x21f <_JIT_ENTRY+0x21f>
// 1e4: 8b 40 48                      movl    0x48(%rax), %eax
// 1e7: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// 1eb: 48 83 c0 48                   addq    $0x48, %rax
// 1ef: 49 29 c6                      subq    %rax, %r14
// 1f2: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f6: 45 85 f6                      testl   %r14d, %r14d
// 1f9: 0f 8e 69 01 00 00             jle     0x368 <_JIT_ENTRY+0x368>
// 1ff: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 203: 49 29 c5                      subq    %rax, %r13
// 206: 49 c1 ed 03                   shrq    $0x3, %r13
// 20a: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 20e: 31 c0                         xorl    %eax, %eax
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: c3                            retq
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1+0xdb
// 229: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1+0xf9
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  .rodata.str1.1+0x138
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  __assert_fail
// 247: ba 4d 00 00 00                movl    $0x4d, %edx
// 24c: ff d0                         callq   *%rax
// 24e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000250:  R_X86_64_64  .rodata.str1.1+0x16e
// 258: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025a:  R_X86_64_64  .rodata.str1.1+0x17f
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  .rodata.str1.1+0x1b4
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  __assert_fail
// 276: ba 86 00 00 00                movl    $0x86, %edx
// 27b: ff d0                         callq   *%rax
// 27d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027f:  R_X86_64_64  .rodata.str1.1+0x1de
// 287: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1+0x17f
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  .rodata.str1.1+0x1b4
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  __assert_fail
// 2a5: ba 87 00 00 00                movl    $0x87, %edx
// 2aa: ff d0                         callq   *%rax
// 2ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1+0x22d
// 2b6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1+0x1fd
// 2c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1+0x249
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  __assert_fail
// 2d4: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 2d9: ff d0                         callq   *%rax
// 2db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x268
// 2e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1+0x1fd
// 2ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1+0x249
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  __assert_fail
// 303: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 308: ff d0                         callq   *%rax
// 30a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030c:  R_X86_64_64  .rodata.str1.1+0x1e5
// 314: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000316:  R_X86_64_64  .rodata.str1.1+0x17f
// 31e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000320:  R_X86_64_64  .rodata.str1.1+0x1b4
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  __assert_fail
// 332: ba 88 00 00 00                movl    $0x88, %edx
// 337: ff d0                         callq   *%rax
// 339: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033b:  R_X86_64_64  .rodata.str1.1+0x87
// 343: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000345:  R_X86_64_64  .rodata.str1.1
// 34d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000034f:  R_X86_64_64  .rodata.str1.1+0x39
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  __assert_fail
// 361: ba 39 06 00 00                movl    $0x639, %edx            # imm = 0x639
// 366: ff d0                         callq   *%rax
// 368: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036a:  R_X86_64_64  .rodata.str1.1+0x94
// 372: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000374:  R_X86_64_64  .rodata.str1.1+0xa7
// 37c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000037e:  R_X86_64_64  .rodata.str1.1+0x39
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  __assert_fail
// 390: ba 5b 00 00 00                movl    $0x5b, %edx
// 395: ff d0                         callq   *%rax
// 397: 
static const unsigned char _LOAD_ATTR_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x68, 0x08, 0x0f, 0x85, 0xfd, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x17, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0xd1, 0xea, 0x0f, 0x88, 0x2e, 0x02, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x4a, 0x02, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x66, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xd1, 0xe9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x7b, 0x02, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x6e, 0xf8, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x90, 0x18, 0xf6, 0xc1, 0x01, 0x74, 0x6b, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x51, 0x02, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x03, 0x4d, 0x89, 0x26, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x27, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x3c, 0xff, 0xff, 0xff, 0xe9, 0x3a, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x75, 0xca, 0x48, 0x8b, 0x03, 0x48, 0x39, 0x68, 0x08, 0x75, 0x3b, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0x69, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x43, 0x48, 0x49, 0x29, 0xc5, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x39, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_code_holes[50] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdb},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf9},
    {0x235, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x138},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16e},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17f},
    {0x264, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b4},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1de},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17f},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b4},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x22d},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1fd},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x268},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1fd},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e5},
    {0x316, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17f},
    {0x320, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b4},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x345, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x94},
    {0x374, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00attr != NULL\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 284: 00 00 00 00
static const unsigned char _LOAD_ATTR_data_body[649] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x61, 0x74, 0x74, 0x72, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_data_holes[1];

// _LOAD_ATTR_CLASS
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_CLASS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 d3                      movq    %rdx, %rbx
// c: 49 89 f7                      movq    %rsi, %r15
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 16: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000018:  R_X86_64_64  _JIT_OPERAND
// 20: 41 8b 45 00                   movl    (%r13), %eax
// 24: ff c0                         incl    %eax
// 26: 75 0f                         jne     0x37 <_JIT_ENTRY+0x37>
// 28: 49 8b 04 24                   movq    (%r12), %rax
// 2c: 48 85 c0                      testq   %rax, %rax
// 2f: 7e 1f                         jle     0x50 <_JIT_ENTRY+0x50>
// 31: 85 c0                         testl   %eax, %eax
// 33: 79 41                         jns     0x76 <_JIT_ENTRY+0x76>
// 35: eb 51                         jmp     0x88 <_JIT_ENTRY+0x88>
// 37: 41 89 45 00                   movl    %eax, (%r13)
// 3b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 45: ff d0                         callq   *%rax
// 47: 49 8b 04 24                   movq    (%r12), %rax
// 4b: 48 85 c0                      testq   %rax, %rax
// 4e: 7f e1                         jg      0x31 <_JIT_ENTRY+0x31>
// 50: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000052:  R_X86_64_64  .rodata.str1.1
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _Py_NegativeRefcount
// 64: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 69: 4c 89 e2                      movq    %r12, %rdx
// 6c: ff d0                         callq   *%rax
// 6e: 49 8b 04 24                   movq    (%r12), %rax
// 72: 85 c0                         testl   %eax, %eax
// 74: 78 12                         js      0x88 <_JIT_ENTRY+0x88>
// 76: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000078:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 80: ff d0                         callq   *%rax
// 82: 49 ff 0c 24                   decq    (%r12)
// 86: 74 3b                         je      0xc3 <_JIT_ENTRY+0xc3>
// 88: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _JIT_OPARG
// 96: a8 01                         testb   $0x1, %al
// 98: 74 07                         je      0xa1 <_JIT_ENTRY+0xa1>
// 9a: 49 c7 07 00 00 00 00          movq    $0x0, (%r15)
// a1: 83 e0 01                      andl    $0x1, %eax
// a4: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _JIT_CONTINUE
// b2: 4c 89 f7                      movq    %r14, %rdi
// b5: 48 89 da                      movq    %rbx, %rdx
// b8: 5b                            popq    %rbx
// b9: 41 5c                         popq    %r12
// bb: 41 5d                         popq    %r13
// bd: 41 5e                         popq    %r14
// bf: 41 5f                         popq    %r15
// c1: ff e0                         jmpq    *%rax
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _Py_Dealloc
// cd: 4c 89 e7                      movq    %r12, %rdi
// d0: ff d0                         callq   *%rax
// d2: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _JIT_OPARG
// e0: a8 01                         testb   $0x1, %al
// e2: 75 b6                         jne     0x9a <_JIT_ENTRY+0x9a>
// e4: eb bb                         jmp     0xa1 <_JIT_ENTRY+0xa1>
// e6: 
static const unsigned char _LOAD_ATTR_CLASS_code_body[231] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x51, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0xb6, 0xeb, 0xbb};
static const Hole _LOAD_ATTR_CLASS_code_holes[10] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_CLASS_data_holes[1];

// _LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_INSTANCE_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// d: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 12: f6 80 a8 00 00 00 10          testb   $0x10, 0xa8(%rax)
// 19: 0f 84 2c 01 00 00             je      0x14b <_JIT_ENTRY+0x14b>
// 1f: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 24: a8 01                         testb   $0x1, %al
// 26: 0f 84 4e 01 00 00             je      0x17a <_JIT_ENTRY+0x17a>
// 2c: 49 89 f6                      movq    %rsi, %r14
// 2f: 48 89 fb                      movq    %rdi, %rbx
// 32: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000034:  R_X86_64_64  _JIT_OPERAND
// 3c: 0f b7 c9                      movzwl  %cx, %ecx
// 3f: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// 44: 4d 85 ed                      testq   %r13, %r13
// 47: 74 21                         je      0x6a <_JIT_ENTRY+0x6a>
// 49: 49 89 d7                      movq    %rdx, %r15
// 4c: 41 8b 45 00                   movl    (%r13), %eax
// 50: ff c0                         incl    %eax
// 52: 75 5c                         jne     0xb0 <_JIT_ENTRY+0xb0>
// 54: 49 8b 04 24                   movq    (%r12), %rax
// 58: 48 85 c0                      testq   %rax, %rax
// 5b: 7e 6c                         jle     0xc9 <_JIT_ENTRY+0xc9>
// 5d: 85 c0                         testl   %eax, %eax
// 5f: 0f 89 8a 00 00 00             jns     0xef <_JIT_ENTRY+0xef>
// 65: e9 a6 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 6a: 49 29 de                      subq    %rbx, %r14
// 6d: 49 83 c6 b8                   addq    $-0x48, %r14
// 71: 49 c1 ee 03                   shrq    $0x3, %r14
// 75: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 79: 48 8b 03                      movq    (%rbx), %rax
// 7c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007e:  R_X86_64_64  PyCode_Type
// 86: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 8a: 0f 85 19 01 00 00             jne     0x1a9 <_JIT_ENTRY+0x1a9>
// 90: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000092:  R_X86_64_64  _JIT_TARGET
// 9a: 89 c9                         movl    %ecx, %ecx
// 9c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// a0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// a6: 5b                            popq    %rbx
// a7: 41 5c                         popq    %r12
// a9: 41 5d                         popq    %r13
// ab: 41 5e                         popq    %r14
// ad: 41 5f                         popq    %r15
// af: c3                            retq
// b0: 41 89 45 00                   movl    %eax, (%r13)
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// be: ff d0                         callq   *%rax
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7f 94                         jg      0x5d <_JIT_ENTRY+0x5d>
// c9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cb:  R_X86_64_64  .rodata.str1.1
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _Py_NegativeRefcount
// dd: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// e2: 4c 89 e2                      movq    %r12, %rdx
// e5: ff d0                         callq   *%rax
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 85 c0                         testl   %eax, %eax
// ed: 78 21                         js      0x110 <_JIT_ENTRY+0x110>
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f9: ff d0                         callq   *%rax
// fb: 49 ff 0c 24                   decq    (%r12)
// ff: 75 0f                         jne     0x110 <_JIT_ENTRY+0x110>
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_Dealloc
// 10b: 4c 89 e7                      movq    %r12, %rdi
// 10e: ff d0                         callq   *%rax
// 110: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _JIT_OPARG
// 11e: a8 01                         testb   $0x1, %al
// 120: 74 07                         je      0x129 <_JIT_ENTRY+0x129>
// 122: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 129: 83 e0 01                      andl    $0x1, %eax
// 12c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _JIT_CONTINUE
// 13a: 48 89 df                      movq    %rbx, %rdi
// 13d: 4c 89 fa                      movq    %r15, %rdx
// 140: 5b                            popq    %rbx
// 141: 41 5c                         popq    %r12
// 143: 41 5d                         popq    %r13
// 145: 41 5e                         popq    %r14
// 147: 41 5f                         popq    %r15
// 149: ff e0                         jmpq    *%rax
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1+0x10c
// 155: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1+0xcc
// 15f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000161:  R_X86_64_64  .rodata.str1.1+0x13d
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  __assert_fail
// 173: ba ed 01 00 00                movl    $0x1ed, %edx            # imm = 0x1ED
// 178: ff d0                         callq   *%rax
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1+0x177
// 184: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000186:  R_X86_64_64  .rodata.str1.1+0xcc
// 18e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000190:  R_X86_64_64  .rodata.str1.1+0x196
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  __assert_fail
// 1a2: ba fa 01 00 00                movl    $0x1fa, %edx            # imm = 0x1FA
// 1a7: ff d0                         callq   *%rax
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1+0x39
// 1b3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1+0x57
// 1bd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bf:  R_X86_64_64  .rodata.str1.1+0x96
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  __assert_fail
// 1d1: ba 4d 00 00 00                movl    $0x4d, %edx
// 1d6: ff d0                         callq   *%rax
// 1d8: 
static const unsigned char _LOAD_ATTR_INSTANCE_VALUE_code_body[473] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x84, 0x2c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0xa8, 0x01, 0x0f, 0x84, 0x4e, 0x01, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x21, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x6c, 0x85, 0xc0, 0x0f, 0x89, 0x8a, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x94, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xed, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xfa, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_INSTANCE_VALUE_code_holes[23] = {
    {0x34, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10c},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcc},
    {0x161, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13d},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x177},
    {0x186, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcc},
    {0x190, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x196},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00Py_TYPE(obj)->tp_flags & Py_TPFLAGS_MANAGED_DICT\x00PyDictOrValues *_PyObject_DictOrValuesPointer(PyObject *)\x00_PyDictOrValues_IsValues(dorv)\x00PyDictValues *_PyDictOrValues_GetValues(PyDictOrValues)\x00'
// 1ce: 00 00
static const unsigned char _LOAD_ATTR_INSTANCE_VALUE_data_body[465] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x62, 0x6a, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x26, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x5f, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x28, 0x64, 0x6f, 0x72, 0x76, 0x29, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x28, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x29, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_METHOD_LAZY_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000b:  R_X86_64_64  _JIT_OPARG
// 13: a8 01                         testb   $0x1, %al
// 15: 74 66                         je      0x7d <_JIT_ENTRY+0x7d>
// 17: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000019:  R_X86_64_64  _JIT_OPERAND
// 21: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 26: f6 80 aa 00 00 00 02          testb   $0x2, 0xaa(%rax)
// 2d: 74 7d                         je      0xac <_JIT_ENTRY+0xac>
// 2f: 48 89 d3                      movq    %rdx, %rbx
// 32: 49 89 f6                      movq    %rsi, %r14
// 35: 49 89 ff                      movq    %rdi, %r15
// 38: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 3c: 41 8b 04 24                   movl    (%r12), %eax
// 40: ff c0                         incl    %eax
// 42: 74 10                         je      0x54 <_JIT_ENTRY+0x54>
// 44: 41 89 04 24                   movl    %eax, (%r12)
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 52: ff d0                         callq   *%rax
// 54: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 58: 4d 89 2e                      movq    %r13, (%r14)
// 5b: 49 83 c6 08                   addq    $0x8, %r14
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_CONTINUE
// 69: 4c 89 ff                      movq    %r15, %rdi
// 6c: 4c 89 f6                      movq    %r14, %rsi
// 6f: 48 89 da                      movq    %rbx, %rdx
// 72: 5b                            popq    %rbx
// 73: 41 5c                         popq    %r12
// 75: 41 5d                         popq    %r13
// 77: 41 5e                         popq    %r14
// 79: 41 5f                         popq    %r15
// 7b: ff e0                         jmpq    *%rax
// 7d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007f:  R_X86_64_64  .rodata.str1.1+0x87
// 87: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000089:  R_X86_64_64  .rodata.str1.1
// 91: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000093:  R_X86_64_64  .rodata.str1.1+0x39
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  __assert_fail
// a5: ba f2 09 00 00                movl    $0x9f2, %edx            # imm = 0x9F2
// aa: ff d0                         callq   *%rax
// ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ae:  R_X86_64_64  .rodata.str1.1+0x91
// b6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000b8:  R_X86_64_64  .rodata.str1.1
// c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c2:  R_X86_64_64  .rodata.str1.1+0x39
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  __assert_fail
// d4: ba f5 09 00 00                movl    $0x9f5, %edx            # imm = 0x9F5
// d9: ff d0                         callq   *%rax
// db: 
static const unsigned char _LOAD_ATTR_METHOD_LAZY_DICT_code_body[220] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x66, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xaa, 0x00, 0x00, 0x00, 0x02, 0x74, 0x7d, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x6e, 0xf8, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf8, 0x4d, 0x89, 0x2e, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xf2, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xf5, 0x09, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_METHOD_LAZY_DICT_code_holes[13] = {
    {0xb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x89, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x91},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg & 1\x00_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR)\x00'
// d2: 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_METHOD_LAZY_DICT_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x31, 0x00, 0x5f, 0x50, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x61, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x28, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x64, 0x65, 0x73, 0x63, 0x72, 0x29, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_METHOD_NO_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000b:  R_X86_64_64  _JIT_OPARG
// 13: a8 01                         testb   $0x1, %al
// 15: 74 7c                         je      0x93 <_JIT_ENTRY+0x93>
// 17: 49 89 f6                      movq    %rsi, %r14
// 1a: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1e: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 23: 48 83 b8 20 01 00 00 00       cmpq    $0x0, 0x120(%rax)
// 2b: 0f 85 91 00 00 00             jne     0xc2 <_JIT_ENTRY+0xc2>
// 31: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000033:  R_X86_64_64  _JIT_OPERAND
// 3b: 49 8b 45 08                   movq    0x8(%r13), %rax
// 3f: f6 80 aa 00 00 00 02          testb   $0x2, 0xaa(%rax)
// 46: 0f 84 a5 00 00 00             je      0xf1 <_JIT_ENTRY+0xf1>
// 4c: 48 89 d3                      movq    %rdx, %rbx
// 4f: 49 89 ff                      movq    %rdi, %r15
// 52: 41 8b 45 00                   movl    (%r13), %eax
// 56: ff c0                         incl    %eax
// 58: 74 10                         je      0x6a <_JIT_ENTRY+0x6a>
// 5a: 41 89 45 00                   movl    %eax, (%r13)
// 5e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000060:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 68: ff d0                         callq   *%rax
// 6a: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 6e: 4d 89 26                      movq    %r12, (%r14)
// 71: 49 83 c6 08                   addq    $0x8, %r14
// 75: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000077:  R_X86_64_64  _JIT_CONTINUE
// 7f: 4c 89 ff                      movq    %r15, %rdi
// 82: 4c 89 f6                      movq    %r14, %rsi
// 85: 48 89 da                      movq    %rbx, %rdx
// 88: 5b                            popq    %rbx
// 89: 41 5c                         popq    %r12
// 8b: 41 5d                         popq    %r13
// 8d: 41 5e                         popq    %r14
// 8f: 41 5f                         popq    %r15
// 91: ff e0                         jmpq    *%rax
// 93: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000095:  R_X86_64_64  .rodata.str1.1+0x87
// 9d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009f:  R_X86_64_64  .rodata.str1.1
// a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1+0x39
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  __assert_fail
// bb: ba b2 09 00 00                movl    $0x9b2, %edx            # imm = 0x9B2
// c0: ff d0                         callq   *%rax
// c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c4:  R_X86_64_64  .rodata.str1.1+0x91
// cc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ce:  R_X86_64_64  .rodata.str1.1
// d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1+0x39
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  __assert_fail
// ea: ba b3 09 00 00                movl    $0x9b3, %edx            # imm = 0x9B3
// ef: ff d0                         callq   *%rax
// f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f3:  R_X86_64_64  .rodata.str1.1+0xb4
// fb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000fd:  R_X86_64_64  .rodata.str1.1
// 105: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000107:  R_X86_64_64  .rodata.str1.1+0x39
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  __assert_fail
// 119: ba b6 09 00 00                movl    $0x9b6, %edx            # imm = 0x9B6
// 11e: ff d0                         callq   *%rax
// 120: 
static const unsigned char _LOAD_ATTR_METHOD_NO_DICT_code_body[289] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x7c, 0x49, 0x89, 0xf6, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x83, 0xb8, 0x20, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x91, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xaa, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xff, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb2, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb3, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb6, 0x09, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_METHOD_NO_DICT_code_holes[17] = {
    {0xb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x91},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb4},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg & 1\x00Py_TYPE(owner)->tp_dictoffset == 0\x00_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR)\x00'
// f5: 00 00 00
static const unsigned char _LOAD_ATTR_METHOD_NO_DICT_data_body[249] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x31, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x00, 0x5f, 0x50, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x61, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x28, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x64, 0x65, 0x73, 0x63, 0x72, 0x29, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_METHOD_WITH_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000b:  R_X86_64_64  _JIT_OPARG
// 13: a8 01                         testb   $0x1, %al
// 15: 74 65                         je      0x7c <_JIT_ENTRY+0x7c>
// 17: 48 89 d3                      movq    %rdx, %rbx
// 1a: 49 89 f6                      movq    %rsi, %r14
// 1d: 49 89 ff                      movq    %rdi, %r15
// 20: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 24: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000026:  R_X86_64_64  _JIT_OPERAND
// 2e: 41 8b 45 00                   movl    (%r13), %eax
// 32: ff c0                         incl    %eax
// 34: 74 10                         je      0x46 <_JIT_ENTRY+0x46>
// 36: 41 89 45 00                   movl    %eax, (%r13)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 44: ff d0                         callq   *%rax
// 46: 49 8b 45 08                   movq    0x8(%r13), %rax
// 4a: f6 80 aa 00 00 00 02          testb   $0x2, 0xaa(%rax)
// 51: 74 58                         je      0xab <_JIT_ENTRY+0xab>
// 53: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 57: 4d 89 26                      movq    %r12, (%r14)
// 5a: 49 83 c6 08                   addq    $0x8, %r14
// 5e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000060:  R_X86_64_64  _JIT_CONTINUE
// 68: 4c 89 ff                      movq    %r15, %rdi
// 6b: 4c 89 f6                      movq    %r14, %rsi
// 6e: 48 89 da                      movq    %rbx, %rdx
// 71: 5b                            popq    %rbx
// 72: 41 5c                         popq    %r12
// 74: 41 5d                         popq    %r13
// 76: 41 5e                         popq    %r14
// 78: 41 5f                         popq    %r15
// 7a: ff e0                         jmpq    *%rax
// 7c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007e:  R_X86_64_64  .rodata.str1.1+0x87
// 86: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000092:  R_X86_64_64  .rodata.str1.1+0x39
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  __assert_fail
// a4: ba 9e 09 00 00                movl    $0x99e, %edx            # imm = 0x99E
// a9: ff d0                         callq   *%rax
// ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ad:  R_X86_64_64  .rodata.str1.1+0x91
// b5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000b7:  R_X86_64_64  .rodata.str1.1
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  .rodata.str1.1+0x39
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  __assert_fail
// d3: ba a3 09 00 00                movl    $0x9a3, %edx            # imm = 0x9A3
// d8: ff d0                         callq   *%rax
// da: 
static const unsigned char _LOAD_ATTR_METHOD_WITH_VALUES_code_body[219] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x65, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xaa, 0x00, 0x00, 0x00, 0x02, 0x74, 0x58, 0x4d, 0x89, 0x6e, 0xf8, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x9e, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xa3, 0x09, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_METHOD_WITH_VALUES_code_holes[13] = {
    {0xb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x3c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x91},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg & 1\x00_PyType_HasFeature(Py_TYPE(attr), Py_TPFLAGS_METHOD_DESCRIPTOR)\x00'
// d1: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_METHOD_WITH_VALUES_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x31, 0x00, 0x5f, 0x50, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x61, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x28, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x61, 0x74, 0x74, 0x72, 0x29, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _LOAD_ATTR_MODULE
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_MODULE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// d: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 12: 48 8b 40 20                   movq    0x20(%rax), %rax
// 16: 80 78 0a 01                   cmpb    $0x1, 0xa(%rax)
// 1a: 0f 85 49 01 00 00             jne     0x169 <_JIT_ENTRY+0x169>
// 20: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000022:  R_X86_64_64  _JIT_OPERAND
// 2a: 0f b7 c9                      movzwl  %cx, %ecx
// 2d: 48 39 48 18                   cmpq    %rcx, 0x18(%rax)
// 31: 0f 8e 61 01 00 00             jle     0x198 <_JIT_ENTRY+0x198>
// 37: 49 89 d7                      movq    %rdx, %r15
// 3a: 49 89 f6                      movq    %rsi, %r14
// 3d: 48 89 fb                      movq    %rdi, %rbx
// 40: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 44: ba 01 00 00 00                movl    $0x1, %edx
// 49: 48 d3 e2                      shlq    %cl, %rdx
// 4c: 48 01 c2                      addq    %rax, %rdx
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _JIT_OPERAND
// 59: 0f b7 c0                      movzwl  %ax, %eax
// 5c: 48 c1 e0 04                   shlq    $0x4, %rax
// 60: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 65: 4d 85 ed                      testq   %r13, %r13
// 68: 74 1e                         je      0x88 <_JIT_ENTRY+0x88>
// 6a: 41 8b 45 00                   movl    (%r13), %eax
// 6e: ff c0                         incl    %eax
// 70: 75 5c                         jne     0xce <_JIT_ENTRY+0xce>
// 72: 49 8b 04 24                   movq    (%r12), %rax
// 76: 48 85 c0                      testq   %rax, %rax
// 79: 7e 6c                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 7b: 85 c0                         testl   %eax, %eax
// 7d: 0f 89 8a 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 83: e9 a6 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 88: 49 29 de                      subq    %rbx, %r14
// 8b: 49 83 c6 b8                   addq    $-0x48, %r14
// 8f: 49 c1 ee 03                   shrq    $0x3, %r14
// 93: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 97: 48 8b 03                      movq    (%rbx), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  PyCode_Type
// a4: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// a8: 0f 85 19 01 00 00             jne     0x1c7 <_JIT_ENTRY+0x1c7>
// ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b0:  R_X86_64_64  _JIT_TARGET
// b8: 89 c9                         movl    %ecx, %ecx
// ba: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// be: 48 05 c8 00 00 00             addq    $0xc8, %rax
// c4: 5b                            popq    %rbx
// c5: 41 5c                         popq    %r12
// c7: 41 5d                         popq    %r13
// c9: 41 5e                         popq    %r14
// cb: 41 5f                         popq    %r15
// cd: c3                            retq
// ce: 41 89 45 00                   movl    %eax, (%r13)
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// dc: ff d0                         callq   *%rax
// de: 49 8b 04 24                   movq    (%r12), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7f 94                         jg      0x7b <_JIT_ENTRY+0x7b>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 100: 4c 89 e2                      movq    %r12, %rdx
// 103: ff d0                         callq   *%rax
// 105: 49 8b 04 24                   movq    (%r12), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 49 ff 0c 24                   decq    (%r12)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 4c 89 e7                      movq    %r12, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: a8 01                         testb   $0x1, %al
// 13e: 74 07                         je      0x147 <_JIT_ENTRY+0x147>
// 140: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 147: 83 e0 01                      andl    $0x1, %eax
// 14a: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _JIT_CONTINUE
// 158: 48 89 df                      movq    %rbx, %rdi
// 15b: 4c 89 fa                      movq    %r15, %rdx
// 15e: 5b                            popq    %rbx
// 15f: 41 5c                         popq    %r12
// 161: 41 5d                         popq    %r13
// 163: 41 5e                         popq    %r14
// 165: 41 5f                         popq    %r15
// 167: ff e0                         jmpq    *%rax
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1+0x87
// 173: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000175:  R_X86_64_64  .rodata.str1.1
// 17d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017f:  R_X86_64_64  .rodata.str1.1+0x39
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  __assert_fail
// 191: ba 8f 06 00 00                movl    $0x68f, %edx            # imm = 0x68F
// 196: ff d0                         callq   *%rax
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1+0xb3
// 1a2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a4:  R_X86_64_64  .rodata.str1.1
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1+0x39
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  __assert_fail
// 1c0: ba 90 06 00 00                movl    $0x690, %edx            # imm = 0x690
// 1c5: ff d0                         callq   *%rax
// 1c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c9:  R_X86_64_64  .rodata.str1.1+0xd6
// 1d1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d3:  R_X86_64_64  .rodata.str1.1+0xf4
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1+0x133
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  __assert_fail
// 1ef: ba 4d 00 00 00                movl    $0x4d, %edx
// 1f4: ff d0                         callq   *%rax
// 1f6: 
static const unsigned char _LOAD_ATTR_MODULE_code_body[503] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x80, 0x78, 0x0a, 0x01, 0x0f, 0x85, 0x49, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x18, 0x0f, 0x8e, 0x61, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x1e, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x6c, 0x85, 0xc0, 0x0f, 0x89, 0x8a, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x19, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x94, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x8f, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x90, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_MODULE_code_holes[24] = {
    {0x22, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x175, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd6},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf4},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x133},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00dict->ma_keys->dk_kind == DICT_KEYS_UNICODE\x00index < dict->ma_keys->dk_nentries\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 169: 00 00 00 00 00 00 00
static const unsigned char _LOAD_ATTR_MODULE_data_body[369] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x64, 0x69, 0x63, 0x74, 0x2d, 0x3e, 0x6d, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2d, 0x3e, 0x64, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x00, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x3c, 0x20, 0x64, 0x69, 0x63, 0x74, 0x2d, 0x3e, 0x6d, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2d, 0x3e, 0x64, 0x6b, 0x5f, 0x6e, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_MODULE_data_holes[1];

// _LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPARG
// 12: a8 01                         testb   $0x1, %al
// 14: 0f 85 d0 00 00 00             jne     0xea <_JIT_ENTRY+0xea>
// 1a: 49 89 f6                      movq    %rsi, %r14
// 1d: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 21: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 26: 48 83 b8 20 01 00 00 00       cmpq    $0x0, 0x120(%rax)
// 2e: 0f 85 e5 00 00 00             jne     0x119 <_JIT_ENTRY+0x119>
// 34: 48 89 d3                      movq    %rdx, %rbx
// 37: 49 89 ff                      movq    %rdi, %r15
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 06                         jle     0x49 <_JIT_ENTRY+0x49>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 28                         jns     0x6f <_JIT_ENTRY+0x6f>
// 47: eb 38                         jmp     0x81 <_JIT_ENTRY+0x81>
// 49: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004b:  R_X86_64_64  .rodata.str1.1
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _Py_NegativeRefcount
// 5d: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 62: 4c 89 e2                      movq    %r12, %rdx
// 65: ff d0                         callq   *%rax
// 67: 49 8b 04 24                   movq    (%r12), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 12                         js      0x81 <_JIT_ENTRY+0x81>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0c 24                   decq    (%r12)
// 7f: 74 46                         je      0xc7 <_JIT_ENTRY+0xc7>
// 81: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000083:  R_X86_64_64  _JIT_OPERAND
// 8b: 41 8b 04 24                   movl    (%r12), %eax
// 8f: ff c0                         incl    %eax
// 91: 74 10                         je      0xa3 <_JIT_ENTRY+0xa3>
// 93: 41 89 04 24                   movl    %eax, (%r12)
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_INCREF_IncRefTotal
// a1: ff d0                         callq   *%rax
// a3: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _JIT_CONTINUE
// b1: 4c 89 ff                      movq    %r15, %rdi
// b4: 4c 89 f6                      movq    %r14, %rsi
// b7: 48 89 da                      movq    %rbx, %rdx
// ba: 48 83 c4 08                   addq    $0x8, %rsp
// be: 5b                            popq    %rbx
// bf: 41 5c                         popq    %r12
// c1: 41 5e                         popq    %r14
// c3: 41 5f                         popq    %r15
// c5: ff e0                         jmpq    *%rax
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 e7                      movq    %r12, %rdi
// d4: ff d0                         callq   *%rax
// d6: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000d8:  R_X86_64_64  _JIT_OPERAND
// e0: 41 8b 04 24                   movl    (%r12), %eax
// e4: ff c0                         incl    %eax
// e6: 75 ab                         jne     0x93 <_JIT_ENTRY+0x93>
// e8: eb b9                         jmp     0xa3 <_JIT_ENTRY+0xa3>
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0xaa
// f4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  .rodata.str1.1+0x39
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  __assert_fail
// 112: ba d5 09 00 00                movl    $0x9d5, %edx            # imm = 0x9D5
// 117: ff d0                         callq   *%rax
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1+0x87
// 123: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000125:  R_X86_64_64  .rodata.str1.1
// 12d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012f:  R_X86_64_64  .rodata.str1.1+0x39
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  __assert_fail
// 141: ba d6 09 00 00                movl    $0x9d6, %edx            # imm = 0x9D6
// 146: ff d0                         callq   *%rax
// 148: 
static const unsigned char _LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[329] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x83, 0xb8, 0x20, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xe5, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x46, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0xab, 0xeb, 0xb9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xd5, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xd6, 0x09, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[18] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xaa},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x125, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00Py_TYPE(owner)->tp_dictoffset == 0\x00(oparg & 1) == 0\x00'
// bb: 00 00 00 00 00
static const unsigned char _LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x00, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x31, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPARG
// 12: a8 01                         testb   $0x1, %al
// 14: 0f 85 bd 00 00 00             jne     0xd7 <_JIT_ENTRY+0xd7>
// 1a: 48 89 d3                      movq    %rdx, %rbx
// 1d: 49 89 f6                      movq    %rsi, %r14
// 20: 49 89 ff                      movq    %rdi, %r15
// 23: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 27: 49 8b 04 24                   movq    (%r12), %rax
// 2b: 48 85 c0                      testq   %rax, %rax
// 2e: 7e 06                         jle     0x36 <_JIT_ENTRY+0x36>
// 30: 85 c0                         testl   %eax, %eax
// 32: 79 28                         jns     0x5c <_JIT_ENTRY+0x5c>
// 34: eb 38                         jmp     0x6e <_JIT_ENTRY+0x6e>
// 36: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000038:  R_X86_64_64  .rodata.str1.1
// 40: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000042:  R_X86_64_64  _Py_NegativeRefcount
// 4a: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 4f: 4c 89 e2                      movq    %r12, %rdx
// 52: ff d0                         callq   *%rax
// 54: 49 8b 04 24                   movq    (%r12), %rax
// 58: 85 c0                         testl   %eax, %eax
// 5a: 78 12                         js      0x6e <_JIT_ENTRY+0x6e>
// 5c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 66: ff d0                         callq   *%rax
// 68: 49 ff 0c 24                   decq    (%r12)
// 6c: 74 46                         je      0xb4 <_JIT_ENTRY+0xb4>
// 6e: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000070:  R_X86_64_64  _JIT_OPERAND
// 78: 41 8b 04 24                   movl    (%r12), %eax
// 7c: ff c0                         incl    %eax
// 7e: 74 10                         je      0x90 <_JIT_ENTRY+0x90>
// 80: 41 89 04 24                   movl    %eax, (%r12)
// 84: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000086:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 8e: ff d0                         callq   *%rax
// 90: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _JIT_CONTINUE
// 9e: 4c 89 ff                      movq    %r15, %rdi
// a1: 4c 89 f6                      movq    %r14, %rsi
// a4: 48 89 da                      movq    %rbx, %rdx
// a7: 48 83 c4 08                   addq    $0x8, %rsp
// ab: 5b                            popq    %rbx
// ac: 41 5c                         popq    %r12
// ae: 41 5e                         popq    %r14
// b0: 41 5f                         popq    %r15
// b2: ff e0                         jmpq    *%rax
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_Dealloc
// be: 4c 89 e7                      movq    %r12, %rdi
// c1: ff d0                         callq   *%rax
// c3: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000c5:  R_X86_64_64  _JIT_OPERAND
// cd: 41 8b 04 24                   movl    (%r12), %eax
// d1: ff c0                         incl    %eax
// d3: 75 ab                         jne     0x80 <_JIT_ENTRY+0x80>
// d5: eb b9                         jmp     0x90 <_JIT_ENTRY+0x90>
// d7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d9:  R_X86_64_64  .rodata.str1.1+0x87
// e1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e3:  R_X86_64_64  .rodata.str1.1
// eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x39
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  __assert_fail
// ff: ba c5 09 00 00                movl    $0x9c5, %edx            # imm = 0x9C5
// 104: ff d0                         callq   *%rax
// 106: 
static const unsigned char _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[263] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xbd, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x46, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0xab, 0xeb, 0xb9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xc5, 0x09, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[14] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00(oparg & 1) == 0\x00'
// 98: 
static const unsigned char _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x31, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x00};
static const Hole _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _LOAD_ATTR_SLOT
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_SLOT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPERAND
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 24: 4d 85 ed                      testq   %r13, %r13
// 27: 74 21                         je      0x4a <_JIT_ENTRY+0x4a>
// 29: 49 89 d7                      movq    %rdx, %r15
// 2c: 41 8b 45 00                   movl    (%r13), %eax
// 30: ff c0                         incl    %eax
// 32: 75 5c                         jne     0x90 <_JIT_ENTRY+0x90>
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 6c                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 0f 89 8a 00 00 00             jns     0xcf <_JIT_ENTRY+0xcf>
// 45: e9 a6 00 00 00                jmp     0xf0 <_JIT_ENTRY+0xf0>
// 4a: 49 29 de                      subq    %rbx, %r14
// 4d: 49 83 c6 b8                   addq    $-0x48, %r14
// 51: 49 c1 ee 03                   shrq    $0x3, %r14
// 55: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  PyCode_Type
// 66: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 6a: 0f 85 bb 00 00 00             jne     0x12b <_JIT_ENTRY+0x12b>
// 70: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000072:  R_X86_64_64  _JIT_TARGET
// 7a: 89 c9                         movl    %ecx, %ecx
// 7c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 80: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 86: 5b                            popq    %rbx
// 87: 41 5c                         popq    %r12
// 89: 41 5d                         popq    %r13
// 8b: 41 5e                         popq    %r14
// 8d: 41 5f                         popq    %r15
// 8f: c3                            retq
// 90: 41 89 45 00                   movl    %eax, (%r13)
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f 94                         jg      0x3d <_JIT_ENTRY+0x3d>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// c2: 4c 89 e2                      movq    %r12, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 04 24                   movq    (%r12), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 21                         js      0xf0 <_JIT_ENTRY+0xf0>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 0c 24                   decq    (%r12)
// df: 75 0f                         jne     0xf0 <_JIT_ENTRY+0xf0>
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_Dealloc
// eb: 4c 89 e7                      movq    %r12, %rdi
// ee: ff d0                         callq   *%rax
// f0: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _JIT_OPARG
// fe: a8 01                         testb   $0x1, %al
// 100: 74 07                         je      0x109 <_JIT_ENTRY+0x109>
// 102: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 109: 83 e0 01                      andl    $0x1, %eax
// 10c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _JIT_CONTINUE
// 11a: 48 89 df                      movq    %rbx, %rdi
// 11d: 4c 89 fa                      movq    %r15, %rdx
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5d                         popq    %r13
// 125: 41 5e                         popq    %r14
// 127: 41 5f                         popq    %r15
// 129: ff e0                         jmpq    *%rax
// 12b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012d:  R_X86_64_64  .rodata.str1.1+0x39
// 135: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1+0x57
// 13f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000141:  R_X86_64_64  .rodata.str1.1+0x96
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  __assert_fail
// 153: ba 4d 00 00 00                movl    $0x4d, %edx
// 158: ff d0                         callq   *%rax
// 15a: 
static const unsigned char _LOAD_ATTR_SLOT_code_body[347] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x21, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x6c, 0x85, 0xc0, 0x0f, 0x89, 0x8a, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x94, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_SLOT_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// cc: 00 00 00 00
static const unsigned char _LOAD_ATTR_SLOT_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_ATTR_SLOT_data_holes[1];

// _LOAD_ATTR_WITH_HINT
// 
// /tmp/tmp3v1aptj0/_LOAD_ATTR_WITH_HINT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// d: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 12: f6 80 a8 00 00 00 10          testb   $0x10, 0xa8(%rax)
// 19: 0f 84 79 02 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 1f: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 24: a8 01                         testb   $0x1, %al
// 26: 0f 85 9b 02 00 00             jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 2c: 49 89 d7                      movq    %rdx, %r15
// 2f: 49 89 f6                      movq    %rsi, %r14
// 32: 48 89 fb                      movq    %rdi, %rbx
// 35: 48 8b 50 20                   movq    0x20(%rax), %rdx
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _JIT_OPERAND
// 43: 0f b7 f0                      movzwl  %ax, %esi
// 46: 48 8b 07                      movq    (%rdi), %rax
// 49: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 4d: 48 39 72 18                   cmpq    %rsi, 0x18(%rdx)
// 51: 0f 86 e7 00 00 00             jbe     0x13e <_JIT_ENTRY+0x13e>
// 57: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000059:  R_X86_64_64  PyCode_Type
// 61: 48 39 f1                      cmpq    %rsi, %rcx
// 64: 0f 85 f2 00 00 00             jne     0x15c <_JIT_ENTRY+0x15c>
// 6a: 48 8b 70 20                   movq    0x20(%rax), %rsi
// 6e: 48 8b 4e 08                   movq    0x8(%rsi), %rcx
// 72: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 79: 0f 84 77 02 00 00             je      0x2f6 <_JIT_ENTRY+0x2f6>
// 7f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000081:  R_X86_64_64  _JIT_OPARG
// 89: 0f b7 ff                      movzwl  %di, %edi
// 8c: d1 ef                         shrl    %edi
// 8e: 0f 88 91 02 00 00             js      0x325 <_JIT_ENTRY+0x325>
// 94: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000096:  R_X86_64_64  PyLong_Type
// 9e: 48 39 f9                      cmpq    %rdi, %rcx
// a1: 0f 84 ad 02 00 00             je      0x354 <_JIT_ENTRY+0x354>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  PyBool_Type
// b1: 48 39 f9                      cmpq    %rdi, %rcx
// b4: 0f 84 c9 02 00 00             je      0x383 <_JIT_ENTRY+0x383>
// ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bc:  R_X86_64_64  _JIT_OPARG
// c4: 0f b7 c9                      movzwl  %cx, %ecx
// c7: 48 d1 e9                      shrq    %rcx
// ca: 48 39 4e 10                   cmpq    %rcx, 0x10(%rsi)
// ce: 0f 8e de 02 00 00             jle     0x3b2 <_JIT_ENTRY+0x3b2>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  _JIT_OPARG
// de: 81 e7 fe ff 00 00             andl    $0xfffe, %edi           # imm = 0xFFFE
// e4: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// e8: 41 b8 01 00 00 00             movl    $0x1, %r8d
// ee: 49 d3 e0                      shlq    %cl, %r8
// f1: 48 8b 74 be 18                movq    0x18(%rsi,%rdi,4), %rsi
// f6: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
// fa: 4a 8d 4c 02 20                leaq    0x20(%rdx,%r8), %rcx
// ff: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000101:  R_X86_64_64  _JIT_OPERAND
// 109: 0f b7 d2                      movzwl  %dx, %edx
// 10c: 74 7d                         je      0x18b <_JIT_ENTRY+0x18b>
// 10e: 48 c1 e2 04                   shlq    $0x4, %rdx
// 112: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
// 116: 75 7e                         jne     0x196 <_JIT_ENTRY+0x196>
// 118: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000011a:  R_X86_64_64  _JIT_OPERAND
// 122: 0f b7 d2                      movzwl  %dx, %edx
// 125: 48 c1 e2 04                   shlq    $0x4, %rdx
// 129: 48 01 d1                      addq    %rdx, %rcx
// 12c: 48 83 c1 08                   addq    $0x8, %rcx
// 130: 4c 8b 29                      movq    (%rcx), %r13
// 133: 4d 85 ed                      testq   %r13, %r13
// 136: 0f 85 aa 00 00 00             jne     0x1e6 <_JIT_ENTRY+0x1e6>
// 13c: eb 58                         jmp     0x196 <_JIT_ENTRY+0x196>
// 13e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000140:  R_X86_64_64  PyCode_Type
// 148: 49 29 de                      subq    %rbx, %r14
// 14b: 49 83 c6 b8                   addq    $-0x48, %r14
// 14f: 49 c1 ee 03                   shrq    $0x3, %r14
// 153: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 157: 48 39 d1                      cmpq    %rdx, %rcx
// 15a: 74 49                         je      0x1a5 <_JIT_ENTRY+0x1a5>
// 15c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015e:  R_X86_64_64  .rodata.str1.1+0x39
// 166: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000168:  R_X86_64_64  .rodata.str1.1+0x57
// 170: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000172:  R_X86_64_64  .rodata.str1.1+0x96
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  __assert_fail
// 184: ba 4d 00 00 00                movl    $0x4d, %edx
// 189: ff d0                         callq   *%rax
// 18b: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 18f: 48 39 74 d1 08                cmpq    %rsi, 0x8(%rcx,%rdx,8)
// 194: 74 2f                         je      0x1c5 <_JIT_ENTRY+0x1c5>
// 196: 49 29 de                      subq    %rbx, %r14
// 199: 49 83 c6 b8                   addq    $-0x48, %r14
// 19d: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a7:  R_X86_64_64  _JIT_TARGET
// 1af: 89 c9                         movl    %ecx, %ecx
// 1b1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: c3                            retq
// 1c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c7:  R_X86_64_64  _JIT_OPERAND
// 1cf: 0f b7 d2                      movzwl  %dx, %edx
// 1d2: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 1d6: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 1da: 48 83 c1 10                   addq    $0x10, %rcx
// 1de: 4c 8b 29                      movq    (%rcx), %r13
// 1e1: 4d 85 ed                      testq   %r13, %r13
// 1e4: 74 b0                         je      0x196 <_JIT_ENTRY+0x196>
// 1e6: 41 8b 45 00                   movl    (%r13), %eax
// 1ea: ff c0                         incl    %eax
// 1ec: 75 0f                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1ee: 49 8b 04 24                   movq    (%r12), %rax
// 1f2: 48 85 c0                      testq   %rax, %rax
// 1f5: 7e 1f                         jle     0x216 <_JIT_ENTRY+0x216>
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 79 41                         jns     0x23c <_JIT_ENTRY+0x23c>
// 1fb: eb 60                         jmp     0x25d <_JIT_ENTRY+0x25d>
// 1fd: 41 89 45 00                   movl    %eax, (%r13)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 8b 04 24                   movq    (%r12), %rax
// 211: 48 85 c0                      testq   %rax, %rax
// 214: 7f e1                         jg      0x1f7 <_JIT_ENTRY+0x1f7>
// 216: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_NegativeRefcount
// 22a: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 22f: 4c 89 e2                      movq    %r12, %rdx
// 232: ff d0                         callq   *%rax
// 234: 49 8b 04 24                   movq    (%r12), %rax
// 238: 85 c0                         testl   %eax, %eax
// 23a: 78 21                         js      0x25d <_JIT_ENTRY+0x25d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 49 ff 0c 24                   decq    (%r12)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 4c 89 e7                      movq    %r12, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: a8 01                         testb   $0x1, %al
// 26d: 74 07                         je      0x276 <_JIT_ENTRY+0x276>
// 26f: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 276: 83 e0 01                      andl    $0x1, %eax
// 279: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 48 89 df                      movq    %rbx, %rdi
// 28a: 4c 89 fa                      movq    %r15, %rdx
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: ff e0                         jmpq    *%rax
// 298: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029a:  R_X86_64_64  .rodata.str1.1+0x222
// 2a2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a4:  R_X86_64_64  .rodata.str1.1+0x1e2
// 2ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1+0x253
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  __assert_fail
// 2c0: ba ed 01 00 00                movl    $0x1ed, %edx            # imm = 0x1ED
// 2c5: ff d0                         callq   *%rax
// 2c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c9:  R_X86_64_64  .rodata.str1.1+0x28d
// 2d1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1+0x1e2
// 2db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x2ad
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  __assert_fail
// 2ef: ba 01 02 00 00                movl    $0x201, %edx            # imm = 0x201
// 2f4: ff d0                         callq   *%rax
// 2f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f8:  R_X86_64_64  .rodata.str1.1+0xcc
// 300: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000302:  R_X86_64_64  .rodata.str1.1+0xdd
// 30a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000030c:  R_X86_64_64  .rodata.str1.1+0x112
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  __assert_fail
// 31e: ba 86 00 00 00                movl    $0x86, %edx
// 323: ff d0                         callq   *%rax
// 325: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000327:  R_X86_64_64  .rodata.str1.1+0x13c
// 32f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000331:  R_X86_64_64  .rodata.str1.1+0xdd
// 339: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000033b:  R_X86_64_64  .rodata.str1.1+0x112
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  __assert_fail
// 34d: ba 87 00 00 00                movl    $0x87, %edx
// 352: ff d0                         callq   *%rax
// 354: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000356:  R_X86_64_64  .rodata.str1.1+0x18b
// 35e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000360:  R_X86_64_64  .rodata.str1.1+0x15b
// 368: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000036a:  R_X86_64_64  .rodata.str1.1+0x1a7
// 372: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000374:  R_X86_64_64  __assert_fail
// 37c: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 381: ff d0                         callq   *%rax
// 383: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000385:  R_X86_64_64  .rodata.str1.1+0x1c6
// 38d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000038f:  R_X86_64_64  .rodata.str1.1+0x15b
// 397: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000399:  R_X86_64_64  .rodata.str1.1+0x1a7
// 3a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a3:  R_X86_64_64  __assert_fail
// 3ab: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 3b0: ff d0                         callq   *%rax
// 3b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b4:  R_X86_64_64  .rodata.str1.1+0x143
// 3bc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003be:  R_X86_64_64  .rodata.str1.1+0xdd
// 3c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003c8:  R_X86_64_64  .rodata.str1.1+0x112
// 3d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d2:  R_X86_64_64  __assert_fail
// 3da: ba 88 00 00 00                movl    $0x88, %edx
// 3df: ff d0                         callq   *%rax
// 3e1: 
static const unsigned char _LOAD_ATTR_WITH_HINT_code_body[994] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x84, 0x79, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0xa8, 0x01, 0x0f, 0x85, 0x9b, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x50, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8b, 0x07, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x39, 0x72, 0x18, 0x0f, 0x86, 0xe7, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf1, 0x0f, 0x85, 0xf2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x70, 0x20, 0x48, 0x8b, 0x4e, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x77, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xff, 0xd1, 0xef, 0x0f, 0x88, 0x91, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf9, 0x0f, 0x84, 0xad, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf9, 0x0f, 0x84, 0xc9, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xd1, 0xe9, 0x48, 0x39, 0x4e, 0x10, 0x0f, 0x8e, 0xde, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x48, 0x8b, 0x74, 0xbe, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d, 0x4c, 0x02, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x7d, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x75, 0x7e, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x01, 0xd1, 0x48, 0x83, 0xc1, 0x08, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xaa, 0x00, 0x00, 0x00, 0xeb, 0x58, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x39, 0xd1, 0x74, 0x49, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x74, 0xd1, 0x08, 0x74, 0x2f, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x83, 0xc1, 0x10, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x74, 0xb0, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xed, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x01, 0x02, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_ATTR_WITH_HINT_code_holes[52] = {
    {0x3b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x168, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x172, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x222},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e2},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x253},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x28d},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e2},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2ad},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcc},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdd},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x112},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13c},
    {0x331, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdd},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x112},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x18b},
    {0x360, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15b},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x374, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x385, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c6},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15b},
    {0x399, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x3a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x143},
    {0x3be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdd},
    {0x3c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x112},
    {0x3d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00Py_TYPE(obj)->tp_flags & Py_TPFLAGS_MANAGED_DICT\x00PyDictOrValues *_PyObject_DictOrValuesPointer(PyObject *)\x00!_PyDictOrValues_IsValues(dorv)\x00PyObject *_PyDictOrValues_GetDict(PyDictOrValues)\x00'
// 2df: 00
static const unsigned char _LOAD_ATTR_WITH_HINT_data_body[737] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x62, 0x6a, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x26, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x21, 0x5f, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x28, 0x64, 0x6f, 0x72, 0x76, 0x29, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x28, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x29, 0x00, 0x00};
static const Hole _LOAD_ATTR_WITH_HINT_data_holes[1];

// _LOAD_BUILD_CLASS
// 
// /tmp/tmp3v1aptj0/_LOAD_BUILD_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 83 ec 10                   subq    $0x10, %rsp
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 8b 7f 20                   movq    0x20(%rdi), %rdi
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  PyMapping_GetOptionalItem
// 20: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000022:  R_X86_64_64  _PyRuntime
// 2a: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 31: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 36: ff d0                         callq   *%rax
// 38: 85 c0                         testl   %eax, %eax
// 3a: 78 55                         js      0x91 <_JIT_ENTRY+0x91>
// 3c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 74 25                         je      0x6b <_JIT_ENTRY+0x6b>
// 46: 48 89 03                      movq    %rax, (%rbx)
// 49: 48 83 c3 08                   addq    $0x8, %rbx
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_CONTINUE
// 57: 4c 89 f7                      movq    %r14, %rdi
// 5a: 48 89 de                      movq    %rbx, %rsi
// 5d: 4c 89 fa                      movq    %r15, %rdx
// 60: 48 83 c4 10                   addq    $0x10, %rsp
// 64: 5b                            popq    %rbx
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: ff e0                         jmpq    *%rax
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  PyExc_NameError
// 75: 48 8b 30                      movq    (%rax), %rsi
// 78: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _PyErr_SetString
// 8c: 4c 89 ff                      movq    %r15, %rdi
// 8f: ff d0                         callq   *%rax
// 91: 4c 29 f3                      subq    %r14, %rbx
// 94: 48 83 c3 b8                   addq    $-0x48, %rbx
// 98: 48 c1 eb 03                   shrq    $0x3, %rbx
// 9c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// a0: 31 c0                         xorl    %eax, %eax
// a2: 48 83 c4 10                   addq    $0x10, %rsp
// a6: 5b                            popq    %rbx
// a7: 41 5e                         popq    %r14
// a9: 41 5f                         popq    %r15
// ab: c3                            retq
// ac: 
static const unsigned char _LOAD_BUILD_CLASS_code_body[173] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x7f, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x55, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x25, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _LOAD_BUILD_CLASS_code_holes[7] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x22, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '__build_class__ not found\x00'
// 1a: 00 00 00 00 00 00
static const unsigned char _LOAD_BUILD_CLASS_data_body[33] = {0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_BUILD_CLASS_data_holes[1];

// _LOAD_CONST
// 
// /tmp/tmp3v1aptj0/_LOAD_CONST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 8b 07                      movq    (%rdi), %rax
// b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000000d:  R_X86_64_64  PyCode_Type
// 15: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 19: 0f 85 b6 00 00 00             jne     0xd5 <_JIT_ENTRY+0xd5>
// 1f: 48 8b 40 18                   movq    0x18(%rax), %rax
// 23: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 27: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 2e: 0f 84 d0 00 00 00             je      0x104 <_JIT_ENTRY+0x104>
// 34: 48 89 d3                      movq    %rdx, %rbx
// 37: b2 01                         movb    $0x1, %dl
// 39: 84 d2                         testb   %dl, %dl
// 3b: 0f 84 f2 00 00 00             je      0x133 <_JIT_ENTRY+0x133>
// 41: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000043:  R_X86_64_64  PyLong_Type
// 4b: 48 39 d1                      cmpq    %rdx, %rcx
// 4e: 0f 84 0e 01 00 00             je      0x162 <_JIT_ENTRY+0x162>
// 54: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000056:  R_X86_64_64  PyBool_Type
// 5e: 48 39 d1                      cmpq    %rdx, %rcx
// 61: 0f 84 2a 01 00 00             je      0x191 <_JIT_ENTRY+0x191>
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_OPARG
// 71: 0f b7 c9                      movzwl  %cx, %ecx
// 74: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 78: 0f 8e 42 01 00 00             jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 7e: 49 89 f6                      movq    %rsi, %r14
// 81: 49 89 ff                      movq    %rdi, %r15
// 84: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000086:  R_X86_64_64  _JIT_OPARG
// 8e: 0f b7 c9                      movzwl  %cx, %ecx
// 91: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 96: 41 8b 04 24                   movl    (%r12), %eax
// 9a: ff c0                         incl    %eax
// 9c: 74 10                         je      0xae <_JIT_ENTRY+0xae>
// 9e: 41 89 04 24                   movl    %eax, (%r12)
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// ac: ff d0                         callq   *%rax
// ae: 4d 89 26                      movq    %r12, (%r14)
// b1: 49 83 c6 08                   addq    $0x8, %r14
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _JIT_CONTINUE
// bf: 4c 89 ff                      movq    %r15, %rdi
// c2: 4c 89 f6                      movq    %r14, %rsi
// c5: 48 89 da                      movq    %rbx, %rdx
// c8: 48 83 c4 08                   addq    $0x8, %rsp
// cc: 5b                            popq    %rbx
// cd: 41 5c                         popq    %r12
// cf: 41 5e                         popq    %r14
// d1: 41 5f                         popq    %r15
// d3: ff e0                         jmpq    *%rax
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1+0x1e
// e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000eb:  R_X86_64_64  .rodata.str1.1+0x5d
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  __assert_fail
// fd: ba 4d 00 00 00                movl    $0x4d, %edx
// 102: ff d0                         callq   *%rax
// 104: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1+0x93
// 10e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000110:  R_X86_64_64  .rodata.str1.1+0xa4
// 118: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011a:  R_X86_64_64  .rodata.str1.1+0xd9
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  __assert_fail
// 12c: ba 86 00 00 00                movl    $0x86, %edx
// 131: ff d0                         callq   *%rax
// 133: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000135:  R_X86_64_64  .rodata.str1.1+0x103
// 13d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000013f:  R_X86_64_64  .rodata.str1.1+0xa4
// 147: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000149:  R_X86_64_64  .rodata.str1.1+0xd9
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  __assert_fail
// 15b: ba 87 00 00 00                movl    $0x87, %edx
// 160: ff d0                         callq   *%rax
// 162: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000164:  R_X86_64_64  .rodata.str1.1+0x152
// 16c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000016e:  R_X86_64_64  .rodata.str1.1+0x122
// 176: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000178:  R_X86_64_64  .rodata.str1.1+0x16e
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  __assert_fail
// 18a: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 18f: ff d0                         callq   *%rax
// 191: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000193:  R_X86_64_64  .rodata.str1.1+0x18d
// 19b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1+0x122
// 1a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a7:  R_X86_64_64  .rodata.str1.1+0x16e
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  __assert_fail
// 1b9: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 1be: ff d0                         callq   *%rax
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1+0x10a
// 1ca: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001cc:  R_X86_64_64  .rodata.str1.1+0xa4
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1+0xd9
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  __assert_fail
// 1e8: ba 88 00 00 00                movl    $0x88, %edx
// 1ed: ff d0                         callq   *%rax
// 1ef: 
static const unsigned char _LOAD_CONST_code_body[496] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xb6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x18, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x42, 0x01, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_CONST_code_holes[32] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd9},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x103},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x149, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd9},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x152},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x122},
    {0x178, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16e},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x18d},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x122},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16e},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10a},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd9},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 1a9: 00 00 00 00 00 00 00
static const unsigned char _LOAD_CONST_data_body[433] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_CONST_data_holes[1];

// _LOAD_DEREF
// 
// /tmp/tmp3v1aptj0/_LOAD_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPARG
// 12: 0f b7 c0                      movzwl  %ax, %eax
// 15: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 1a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001c:  R_X86_64_64  PyCell_Type
// 24: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 28: 0f 85 9d 00 00 00             jne     0xcb <_JIT_ENTRY+0xcb>
// 2e: 49 89 d7                      movq    %rdx, %r15
// 31: 48 89 f3                      movq    %rsi, %rbx
// 34: 49 89 fe                      movq    %rdi, %r14
// 37: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 3b: 4d 85 e4                      testq   %r12, %r12
// 3e: 74 3f                         je      0x7f <_JIT_ENTRY+0x7f>
// 40: 41 8b 04 24                   movl    (%r12), %eax
// 44: ff c0                         incl    %eax
// 46: 74 10                         je      0x58 <_JIT_ENTRY+0x58>
// 48: 41 89 04 24                   movl    %eax, (%r12)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 56: ff d0                         callq   *%rax
// 58: 4c 89 23                      movq    %r12, (%rbx)
// 5b: 48 83 c3 08                   addq    $0x8, %rbx
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  _JIT_CONTINUE
// 69: 4c 89 f7                      movq    %r14, %rdi
// 6c: 48 89 de                      movq    %rbx, %rsi
// 6f: 4c 89 fa                      movq    %r15, %rdx
// 72: 48 83 c4 08                   addq    $0x8, %rsp
// 76: 5b                            popq    %rbx
// 77: 41 5c                         popq    %r12
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: ff e0                         jmpq    *%rax
// 7f: 49 8b 36                      movq    (%r14), %rsi
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  PyCode_Type
// 8c: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 90: 75 68                         jne     0xfa <_JIT_ENTRY+0xfa>
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _JIT_OPARG
// 9c: 0f b7 d0                      movzwl  %ax, %edx
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _PyEval_FormatExcUnbound
// a9: 4c 89 ff                      movq    %r15, %rdi
// ac: ff d0                         callq   *%rax
// ae: 4c 29 f3                      subq    %r14, %rbx
// b1: 48 83 c3 b8                   addq    $-0x48, %rbx
// b5: 48 c1 eb 03                   shrq    $0x3, %rbx
// b9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// bd: 31 c0                         xorl    %eax, %eax
// bf: 48 83 c4 08                   addq    $0x8, %rsp
// c3: 5b                            popq    %rbx
// c4: 41 5c                         popq    %r12
// c6: 41 5e                         popq    %r14
// c8: 41 5f                         popq    %r15
// ca: c3                            retq
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1+0x93
// d5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1+0xa4
// df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1+0xe0
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  __assert_fail
// f3: ba 1a 00 00 00                movl    $0x1a, %edx
// f8: ff d0                         callq   *%rax
// fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fc:  R_X86_64_64  .rodata.str1.1
// 104: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000106:  R_X86_64_64  .rodata.str1.1+0x1e
// 10e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000110:  R_X86_64_64  .rodata.str1.1+0x5d
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  __assert_fail
// 122: ba 4d 00 00 00                movl    $0x4d, %edx
// 127: ff d0                         callq   *%rax
// 129: 
static const unsigned char _LOAD_DEREF_code_body[298] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x9d, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0x08, 0x75, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1a, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_DEREF_code_holes[16] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_Type, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x110, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyCell_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/cellobject.h\x00PyObject *PyCell_GET(PyObject *)\x00'
// 101: 00 00 00 00 00 00 00
static const unsigned char _LOAD_DEREF_data_body[265] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x47, 0x45, 0x54, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_DEREF_data_holes[1];

// _LOAD_FAST
// 
// /tmp/tmp3v1aptj0/_LOAD_FAST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPARG
// 12: 0f b7 c0                      movzwl  %ax, %eax
// 15: 4c 8b 64 c7 48                movq    0x48(%rdi,%rax,8), %r12
// 1a: 4d 85 e4                      testq   %r12, %r12
// 1d: 74 48                         je      0x67 <_JIT_ENTRY+0x67>
// 1f: 48 89 d3                      movq    %rdx, %rbx
// 22: 49 89 f6                      movq    %rsi, %r14
// 25: 49 89 ff                      movq    %rdi, %r15
// 28: 41 8b 04 24                   movl    (%r12), %eax
// 2c: ff c0                         incl    %eax
// 2e: 74 10                         je      0x40 <_JIT_ENTRY+0x40>
// 30: 41 89 04 24                   movl    %eax, (%r12)
// 34: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000036:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3e: ff d0                         callq   *%rax
// 40: 4d 89 26                      movq    %r12, (%r14)
// 43: 49 83 c6 08                   addq    $0x8, %r14
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_CONTINUE
// 51: 4c 89 ff                      movq    %r15, %rdi
// 54: 4c 89 f6                      movq    %r14, %rsi
// 57: 48 89 da                      movq    %rbx, %rdx
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5e                         popq    %r14
// 63: 41 5f                         popq    %r15
// 65: ff e0                         jmpq    *%rax
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1+0x87
// 71: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1
// 7b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007d:  R_X86_64_64  .rodata.str1.1+0x39
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  __assert_fail
// 8f: ba 2c 00 00 00                movl    $0x2c, %edx
// 94: ff d0                         callq   *%rax
// 96: 
static const unsigned char _LOAD_FAST_code_body[151] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc7, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x48, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x2c, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_FAST_code_holes[8] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00value != NULL\x00'
// 95: 00 00 00
static const unsigned char _LOAD_FAST_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_FAST_data_holes[1];

// _LOAD_FAST_AND_CLEAR
// 
// /tmp/tmp3v1aptj0/_LOAD_FAST_AND_CLEAR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_OPARG
// a: 0f b7 c0                      movzwl  %ax, %eax
// d: 48 8b 4c c7 48                movq    0x48(%rdi,%rax,8), %rcx
// 12: 48 c7 44 c7 48 00 00 00 00    movq    $0x0, 0x48(%rdi,%rax,8)
// 1b: 48 89 0e                      movq    %rcx, (%rsi)
// 1e: 48 83 c6 08                   addq    $0x8, %rsi
// 22: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000024:  R_X86_64_64  _JIT_CONTINUE
// 2c: ff e0                         jmpq    *%rax
// 2e: 
static const unsigned char _LOAD_FAST_AND_CLEAR_code_body[47] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x4c, 0xc7, 0x48, 0x48, 0xc7, 0x44, 0xc7, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0e, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _LOAD_FAST_AND_CLEAR_code_holes[3] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _LOAD_FAST_AND_CLEAR_data_body[1];
static const Hole _LOAD_FAST_AND_CLEAR_data_holes[1];

// _LOAD_FAST_CHECK
// 
// /tmp/tmp3v1aptj0/_LOAD_FAST_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 4c 8b 64 c7 48                movq    0x48(%rdi,%rax,8), %r12
// 23: 4d 85 e4                      testq   %r12, %r12
// 26: 74 3f                         je      0x67 <_JIT_ENTRY+0x67>
// 28: 41 8b 04 24                   movl    (%r12), %eax
// 2c: ff c0                         incl    %eax
// 2e: 74 10                         je      0x40 <_JIT_ENTRY+0x40>
// 30: 41 89 04 24                   movl    %eax, (%r12)
// 34: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000036:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 3e: ff d0                         callq   *%rax
// 40: 4c 89 23                      movq    %r12, (%rbx)
// 43: 48 83 c3 08                   addq    $0x8, %rbx
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_CONTINUE
// 51: 4c 89 f7                      movq    %r14, %rdi
// 54: 48 89 de                      movq    %rbx, %rsi
// 57: 4c 89 fa                      movq    %r15, %rdx
// 5a: 48 83 c4 08                   addq    $0x8, %rsp
// 5e: 5b                            popq    %rbx
// 5f: 41 5c                         popq    %r12
// 61: 41 5e                         popq    %r14
// 63: 41 5f                         popq    %r15
// 65: ff e0                         jmpq    *%rax
// 67: 49 8b 06                      movq    (%r14), %rax
// 6a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006c:  R_X86_64_64  PyCode_Type
// 74: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 78: 75 67                         jne     0xe1 <_JIT_ENTRY+0xe1>
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  PyExc_UnboundLocalError
// 84: 4c 8b 21                      movq    (%rcx), %r12
// 87: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _JIT_OPARG
// 95: 0f b7 f0                      movzwl  %ax, %esi
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  PyTuple_GetItem
// a2: ff d0                         callq   *%rax
// a4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000a6:  R_X86_64_64  .rodata.str1.1
// ae: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000b0:  R_X86_64_64  _PyEval_FormatExcCheckArg
// b8: 4c 89 ff                      movq    %r15, %rdi
// bb: 4c 89 e6                      movq    %r12, %rsi
// be: 48 89 c1                      movq    %rax, %rcx
// c1: 41 ff d0                      callq   *%r8
// c4: 4c 29 f3                      subq    %r14, %rbx
// c7: 48 83 c3 b8                   addq    $-0x48, %rbx
// cb: 48 c1 eb 03                   shrq    $0x3, %rbx
// cf: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d3: 31 c0                         xorl    %eax, %eax
// d5: 48 83 c4 08                   addq    $0x8, %rsp
// d9: 5b                            popq    %rbx
// da: 41 5c                         popq    %r12
// dc: 41 5e                         popq    %r14
// de: 41 5f                         popq    %r15
// e0: c3                            retq
// e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e3:  R_X86_64_64  .rodata.str1.1+0x4a
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1+0x68
// f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1+0xa7
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  __assert_fail
// 109: ba 4d 00 00 00                movl    $0x4d, %edx
// 10e: ff d0                         callq   *%rax
// 110: 
static const unsigned char _LOAD_FAST_CHECK_code_body[273] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x64, 0xc7, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x67, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x21, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_FAST_CHECK_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4a},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x68},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "cannot access local variable '%s' where it is not associated with a value\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00"
// dd: 00 00 00
static const unsigned char _LOAD_FAST_CHECK_data_body[225] = {0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_FAST_CHECK_data_holes[1];

// _LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmp3v1aptj0/_LOAD_FROM_DICT_OR_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 11: 4d 85 e4                      testq   %r12, %r12
// 14: 0f 84 0a 02 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  _JIT_OPARG
// 24: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 29: 0f 88 97 01 00 00             js      0x1c6 <_JIT_ENTRY+0x1c6>
// 2f: 49 89 fe                      movq    %rdi, %r14
// 32: 48 8b 07                      movq    (%rdi), %rax
// 35: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000037:  R_X86_64_64  PyCode_Type
// 3f: 4c 39 68 08                   cmpq    %r13, 0x8(%rax)
// 43: 0f 85 ac 01 00 00             jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 49: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 c9                      movzwl  %cx, %ecx
// 56: 39 48 48                      cmpl    %ecx, 0x48(%rax)
// 59: 0f 8e 67 01 00 00             jle     0x1c6 <_JIT_ENTRY+0x1c6>
// 5f: 48 8b 40 60                   movq    0x60(%rax), %rax
// 63: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 67: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 6e: 0f 84 df 01 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 74: 49 89 d7                      movq    %rdx, %r15
// 77: 48 89 f3                      movq    %rsi, %rbx
// 7a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007c:  R_X86_64_64  _JIT_OPARG
// 84: 0f b7 c9                      movzwl  %cx, %ecx
// 87: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  PyMapping_GetOptionalItem
// 96: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 9b: 4c 89 e7                      movq    %r12, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 0f 88 ff 00 00 00             js      0x1a7 <_JIT_ENTRY+0x1a7>
// a8: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// ae: 74 12                         je      0xc2 <_JIT_ENTRY+0xc2>
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 48 85 c0                      testq   %rax, %rax
// b7: 7e 57                         jle     0x110 <_JIT_ENTRY+0x110>
// b9: 85 c0                         testl   %eax, %eax
// bb: 79 79                         jns     0x136 <_JIT_ENTRY+0x136>
// bd: e9 95 00 00 00                jmp     0x157 <_JIT_ENTRY+0x157>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: 0f b7 c0                      movzwl  %ax, %eax
// cf: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyCell_Type
// de: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// e2: 0f 85 9a 01 00 00             jne     0x282 <_JIT_ENTRY+0x282>
// e8: 48 8b 40 10                   movq    0x10(%rax), %rax
// ec: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// f1: 48 85 c0                      testq   %rax, %rax
// f4: 0f 84 88 00 00 00             je      0x182 <_JIT_ENTRY+0x182>
// fa: 8b 08                         movl    (%rax), %ecx
// fc: ff c1                         incl    %ecx
// fe: 74 b0                         je      0xb0 <_JIT_ENTRY+0xb0>
// 100: 89 08                         movl    %ecx, (%rax)
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: eb a0                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 21                         js      0x157 <_JIT_ENTRY+0x157>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 75 0f                         jne     0x157 <_JIT_ENTRY+0x157>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15c: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _JIT_CONTINUE
// 16a: 4c 89 f7                      movq    %r14, %rdi
// 16d: 48 89 de                      movq    %rbx, %rsi
// 170: 4c 89 fa                      movq    %r15, %rdx
// 173: 48 83 c4 10                   addq    $0x10, %rsp
// 177: 5b                            popq    %rbx
// 178: 41 5c                         popq    %r12
// 17a: 41 5d                         popq    %r13
// 17c: 41 5e                         popq    %r14
// 17e: 41 5f                         popq    %r15
// 180: ff e0                         jmpq    *%rax
// 182: 49 8b 36                      movq    (%r14), %rsi
// 185: 4c 39 6e 08                   cmpq    %r13, 0x8(%rsi)
// 189: 75 6a                         jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_OPARG
// 195: 0f b7 d0                      movzwl  %ax, %edx
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 1a2: 4c 89 ff                      movq    %r15, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 4c 29 f3                      subq    %r14, %rbx
// 1aa: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ae: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1b6: 31 c0                         xorl    %eax, %eax
// 1b8: 48 83 c4 10                   addq    $0x10, %rsp
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: c3                            retq
// 1c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c8:  R_X86_64_64  .rodata.str1.1+0x92
// 1d0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x39
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  __assert_fail
// 1ee: ba cf 04 00 00                movl    $0x4cf, %edx            # imm = 0x4CF
// 1f3: ff d0                         callq   *%rax
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0x10b
// 1ff: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1+0x129
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  .rodata.str1.1+0x168
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  __assert_fail
// 21d: ba 4d 00 00 00                movl    $0x4d, %edx
// 222: ff d0                         callq   *%rax
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1+0x87
// 22e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000230:  R_X86_64_64  .rodata.str1.1
// 238: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023a:  R_X86_64_64  .rodata.str1.1+0x39
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  __assert_fail
// 24c: ba ce 04 00 00                movl    $0x4ce, %edx            # imm = 0x4CE
// 251: ff d0                         callq   *%rax
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1+0xd0
// 25d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  .rodata.str1.1+0x39
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  __assert_fail
// 27b: ba d0 04 00 00                movl    $0x4d0, %edx            # imm = 0x4D0
// 280: ff d0                         callq   *%rax
// 282: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000284:  R_X86_64_64  .rodata.str1.1+0x19e
// 28c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1+0x1af
// 296: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000298:  R_X86_64_64  .rodata.str1.1+0x1eb
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  __assert_fail
// 2aa: ba 1a 00 00 00                movl    $0x1a, %edx
// 2af: ff d0                         callq   *%rax
// 2b1: 
static const unsigned char _LOAD_FROM_DICT_OR_DEREF_code_body[690] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x4c, 0x8b, 0x66, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x0a, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x88, 0x97, 0x01, 0x00, 0x00, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x07, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x68, 0x08, 0x0f, 0x85, 0xac, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x48, 0x0f, 0x8e, 0x67, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xdf, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xff, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x74, 0x12, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x9a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0xb0, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xa0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x36, 0x4c, 0x39, 0x6e, 0x08, 0x75, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcf, 0x04, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xce, 0x04, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xd0, 0x04, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1a, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_FROM_DICT_OR_DEREF_code_holes[36] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_Type, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x92},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10b},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x129},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x168},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x230, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19e},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1af},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1eb},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00class_dict\x00oparg >= 0 && oparg < _PyFrame_GetCode(frame)->co_nlocalsplus\x00PyTuple_Check(_PyFrame_GetCode(frame)->co_localsplusnames)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyCell_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/cellobject.h\x00PyObject *PyCell_GET(PyObject *)\x00'
// 20c: 00 00 00 00
static const unsigned char _LOAD_FROM_DICT_OR_DEREF_data_body[529] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3c, 0x20, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x29, 0x2d, 0x3e, 0x63, 0x6f, 0x5f, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x70, 0x6c, 0x75, 0x73, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x29, 0x2d, 0x3e, 0x63, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x70, 0x6c, 0x75, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x47, 0x45, 0x54, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmp3v1aptj0/_LOAD_FROM_DICT_OR_GLOBALS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 8b 07                      movq    (%rdi), %rax
// e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000010:  R_X86_64_64  PyCode_Type
// 18: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1c: 0f 85 ac 01 00 00             jne     0x1ce <_JIT_ENTRY+0x1ce>
// 22: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 2a: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 31: 0f 84 c6 01 00 00             je      0x1fd <_JIT_ENTRY+0x1fd>
// 37: 49 89 d7                      movq    %rdx, %r15
// 3a: b2 01                         movb    $0x1, %dl
// 3c: 84 d2                         testb   %dl, %dl
// 3e: 0f 84 e8 01 00 00             je      0x22c <_JIT_ENTRY+0x22c>
// 44: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000046:  R_X86_64_64  PyLong_Type
// 4e: 48 39 d1                      cmpq    %rdx, %rcx
// 51: 0f 84 04 02 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 57: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000059:  R_X86_64_64  PyBool_Type
// 61: 48 39 d1                      cmpq    %rdx, %rcx
// 64: 0f 84 20 02 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 6a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 0f b7 c9                      movzwl  %cx, %ecx
// 77: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 7b: 0f 8e 38 02 00 00             jle     0x2b9 <_JIT_ENTRY+0x2b9>
// 81: 48 89 f3                      movq    %rsi, %rbx
// 84: 49 89 fe                      movq    %rdi, %r14
// 87: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  _JIT_OPARG
// 95: 0f b7 c9                      movzwl  %cx, %ecx
// 98: 4c 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %r13
// 9d: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000009f:  R_X86_64_64  PyMapping_GetOptionalItem
// a7: 48 89 e2                      movq    %rsp, %rdx
// aa: 4c 89 e7                      movq    %r12, %rdi
// ad: 4c 89 ee                      movq    %r13, %rsi
// b0: ff d5                         callq   *%rbp
// b2: 85 c0                         testl   %eax, %eax
// b4: 0f 88 82 00 00 00             js      0x13c <_JIT_ENTRY+0x13c>
// ba: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// bf: 74 1a                         je      0xdb <_JIT_ENTRY+0xdb>
// c1: 49 8b 04 24                   movq    (%r12), %rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 0f 8e 8e 00 00 00             jle     0x15c <_JIT_ENTRY+0x15c>
// ce: 85 c0                         testl   %eax, %eax
// d0: 0f 89 ac 00 00 00             jns     0x182 <_JIT_ENTRY+0x182>
// d6: e9 c8 00 00 00                jmp     0x1a3 <_JIT_ENTRY+0x1a3>
// db: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  PyDict_GetItemRef
// e9: 48 89 e2                      movq    %rsp, %rdx
// ec: 4c 89 ee                      movq    %r13, %rsi
// ef: ff d0                         callq   *%rax
// f1: 85 c0                         testl   %eax, %eax
// f3: 78 47                         js      0x13c <_JIT_ENTRY+0x13c>
// f5: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// fa: 75 c5                         jne     0xc1 <_JIT_ENTRY+0xc1>
// fc: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 100: 48 89 e2                      movq    %rsp, %rdx
// 103: 4c 89 ee                      movq    %r13, %rsi
// 106: ff d5                         callq   *%rbp
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 30                         js      0x13c <_JIT_ENTRY+0x13c>
// 10c: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 111: 75 ae                         jne     0xc1 <_JIT_ENTRY+0xc1>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  PyExc_NameError
// 11d: 48 8b 30                      movq    (%rax), %rsi
// 120: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000122:  R_X86_64_64  .rodata.str1.1+0x39
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 134: 4c 89 ff                      movq    %r15, %rdi
// 137: 4c 89 e9                      movq    %r13, %rcx
// 13a: ff d0                         callq   *%rax
// 13c: 4c 29 f3                      subq    %r14, %rbx
// 13f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 143: 48 c1 eb 03                   shrq    $0x3, %rbx
// 147: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14b: 31 c0                         xorl    %eax, %eax
// 14d: 48 83 c4 08                   addq    $0x8, %rsp
// 151: 5b                            popq    %rbx
// 152: 41 5c                         popq    %r12
// 154: 41 5d                         popq    %r13
// 156: 41 5e                         popq    %r14
// 158: 41 5f                         popq    %r15
// 15a: 5d                            popq    %rbp
// 15b: c3                            retq
// 15c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015e:  R_X86_64_64  .rodata.str1.1
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_NegativeRefcount
// 170: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 175: 4c 89 e2                      movq    %r12, %rdx
// 178: ff d0                         callq   *%rax
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 85 c0                         testl   %eax, %eax
// 180: 78 21                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18c: ff d0                         callq   *%rax
// 18e: 49 ff 0c 24                   decq    (%r12)
// 192: 75 0f                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 4c 89 e7                      movq    %r12, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 48 8b 04 24                   movq    (%rsp), %rax
// 1a7: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _JIT_CONTINUE
// 1b5: 4c 89 f7                      movq    %r14, %rdi
// 1b8: 48 89 de                      movq    %rbx, %rsi
// 1bb: 4c 89 fa                      movq    %r15, %rdx
// 1be: 48 83 c4 08                   addq    $0x8, %rsp
// 1c2: 5b                            popq    %rbx
// 1c3: 41 5c                         popq    %r12
// 1c5: 41 5d                         popq    %r13
// 1c7: 41 5e                         popq    %r14
// 1c9: 41 5f                         popq    %r15
// 1cb: 5d                            popq    %rbp
// 1cc: ff e0                         jmpq    *%rax
// 1ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d0:  R_X86_64_64  .rodata.str1.1+0x56
// 1d8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001da:  R_X86_64_64  .rodata.str1.1+0x74
// 1e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e4:  R_X86_64_64  .rodata.str1.1+0xb3
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  __assert_fail
// 1f6: ba 4d 00 00 00                movl    $0x4d, %edx
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ff:  R_X86_64_64  .rodata.str1.1+0xe9
// 207: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000209:  R_X86_64_64  .rodata.str1.1+0xfa
// 211: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000213:  R_X86_64_64  .rodata.str1.1+0x12f
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  __assert_fail
// 225: ba 86 00 00 00                movl    $0x86, %edx
// 22a: ff d0                         callq   *%rax
// 22c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022e:  R_X86_64_64  .rodata.str1.1+0x159
// 236: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000238:  R_X86_64_64  .rodata.str1.1+0xfa
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  .rodata.str1.1+0x12f
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  __assert_fail
// 254: ba 87 00 00 00                movl    $0x87, %edx
// 259: ff d0                         callq   *%rax
// 25b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025d:  R_X86_64_64  .rodata.str1.1+0x1a8
// 265: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1+0x178
// 26f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000271:  R_X86_64_64  .rodata.str1.1+0x1c4
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  __assert_fail
// 283: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 288: ff d0                         callq   *%rax
// 28a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x1e3
// 294: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000296:  R_X86_64_64  .rodata.str1.1+0x178
// 29e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a0:  R_X86_64_64  .rodata.str1.1+0x1c4
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  __assert_fail
// 2b2: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 2b7: ff d0                         callq   *%rax
// 2b9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1+0x160
// 2c3: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1+0xfa
// 2cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cf:  R_X86_64_64  .rodata.str1.1+0x12f
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  __assert_fail
// 2e1: ba 88 00 00 00                movl    $0x88, %edx
// 2e6: ff d0                         callq   *%rax
// 2e8: 
static const unsigned char _LOAD_FROM_DICT_OR_GLOBALS_code_body[745] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xac, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xc6, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0xe8, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x04, 0x02, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x20, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x82, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x1a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x8e, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xac, 0x00, 0x00, 0x00, 0xe9, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x47, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0xc5, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x30, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0xae, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_FROM_DICT_OR_GLOBALS_code_holes[40] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x74},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb3},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe9},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xfa},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12f},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x159},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xfa},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12f},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a8},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x178},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c4},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e3},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x178},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c4},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x160},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xfa},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12f},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00"
// 1ff: 00
static const unsigned char _LOAD_FROM_DICT_OR_GLOBALS_data_body[513] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00};
static const Hole _LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _LOAD_GLOBAL
// 
// /tmp/tmp3v1aptj0/_LOAD_GLOBAL.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 48 8b 07                      movq    (%rdi), %rax
// 10: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000012:  R_X86_64_64  PyCode_Type
// 1a: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1e: 0f 85 d1 01 00 00             jne     0x1f5 <_JIT_ENTRY+0x1f5>
// 24: 48 8b 40 20                   movq    0x20(%rax), %rax
// 28: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 2c: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 33: 0f 84 eb 01 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 39: 49 89 d7                      movq    %rdx, %r15
// 3c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000003e:  R_X86_64_64  _JIT_OPARG
// 46: 0f b7 d2                      movzwl  %dx, %edx
// 49: d1 ea                         shrl    %edx
// 4b: 0f 88 02 02 00 00             js      0x253 <_JIT_ENTRY+0x253>
// 51: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000053:  R_X86_64_64  PyLong_Type
// 5b: 48 39 d1                      cmpq    %rdx, %rcx
// 5e: 0f 84 1e 02 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 64: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000066:  R_X86_64_64  PyBool_Type
// 6e: 48 39 d1                      cmpq    %rdx, %rcx
// 71: 0f 84 3a 02 00 00             je      0x2b1 <_JIT_ENTRY+0x2b1>
// 77: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000079:  R_X86_64_64  _JIT_OPARG
// 81: 0f b7 c9                      movzwl  %cx, %ecx
// 84: 48 d1 e9                      shrq    %rcx
// 87: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 8b: 0f 8e 4f 02 00 00             jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 91: 49 89 f6                      movq    %rsi, %r14
// 94: 48 89 fb                      movq    %rdi, %rbx
// 97: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000099:  R_X86_64_64  _JIT_OPARG
// a1: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// a7: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// ac: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  PyDict_Type
// ba: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// be: 75 0e                         jne     0xce <_JIT_ENTRY+0xce>
// c0: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// c4: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// c8: 0f 84 8b 00 00 00             je      0x159 <_JIT_ENTRY+0x159>
// ce: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000d0:  R_X86_64_64  PyMapping_GetOptionalItem
// d8: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// dd: 4c 89 e6                      movq    %r12, %rsi
// e0: 41 ff d5                      callq   *%r13
// e3: 85 c0                         testl   %eax, %eax
// e5: 0f 88 eb 00 00 00             js      0x1d6 <_JIT_ENTRY+0x1d6>
// eb: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// f0: 48 85 c0                      testq   %rax, %rax
// f3: 74 41                         je      0x136 <_JIT_ENTRY+0x136>
// f5: 49 89 06                      movq    %rax, (%r14)
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_OPARG
// 102: a8 01                         testb   $0x1, %al
// 104: 74 08                         je      0x10e <_JIT_ENTRY+0x10e>
// 106: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 10e: 83 e0 01                      andl    $0x1, %eax
// 111: ff c0                         incl    %eax
// 113: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _JIT_CONTINUE
// 121: 48 89 df                      movq    %rbx, %rdi
// 124: 4c 89 fa                      movq    %r15, %rdx
// 127: 48 83 c4 10                   addq    $0x10, %rsp
// 12b: 5b                            popq    %rbx
// 12c: 41 5c                         popq    %r12
// 12e: 41 5d                         popq    %r13
// 130: 41 5e                         popq    %r14
// 132: 41 5f                         popq    %r15
// 134: ff e0                         jmpq    *%rax
// 136: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 13a: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 13f: 4c 89 e6                      movq    %r12, %rsi
// 142: 41 ff d5                      callq   *%r13
// 145: 85 c0                         testl   %eax, %eax
// 147: 0f 88 89 00 00 00             js      0x1d6 <_JIT_ENTRY+0x1d6>
// 14d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 75 9e                         jne     0xf5 <_JIT_ENTRY+0xf5>
// 157: eb 54                         jmp     0x1ad <_JIT_ENTRY+0x1ad>
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _PyDict_LoadGlobal
// 163: 4c 89 e2                      movq    %r12, %rdx
// 166: ff d0                         callq   *%rax
// 168: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 16d: 48 85 c0                      testq   %rax, %rax
// 170: 74 22                         je      0x194 <_JIT_ENTRY+0x194>
// 172: 8b 08                         movl    (%rax), %ecx
// 174: ff c1                         incl    %ecx
// 176: 0f 84 79 ff ff ff             je      0xf5 <_JIT_ENTRY+0xf5>
// 17c: 89 08                         movl    %ecx, (%rax)
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 188: ff d0                         callq   *%rax
// 18a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18f: e9 61 ff ff ff                jmp     0xf5 <_JIT_ENTRY+0xf5>
// 194: 4d 85 ff                      testq   %r15, %r15
// 197: 0f 84 72 01 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// 19d: 49 8b 47 68                   movq    0x68(%r15), %rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 74 07                         je      0x1ad <_JIT_ENTRY+0x1ad>
// 1a6: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 1ab: 75 29                         jne     0x1d6 <_JIT_ENTRY+0x1d6>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyExc_NameError
// 1b7: 48 8b 30                      movq    (%rax), %rsi
// 1ba: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001bc:  R_X86_64_64  .rodata.str1.1
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1ce: 4c 89 ff                      movq    %r15, %rdi
// 1d1: 4c 89 e1                      movq    %r12, %rcx
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 29 de                      subq    %rbx, %r14
// 1d9: 49 83 c6 b8                   addq    $-0x48, %r14
// 1dd: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e5: 31 c0                         xorl    %eax, %eax
// 1e7: 48 83 c4 10                   addq    $0x10, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: c3                            retq
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0x1d
// 1ff: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1+0x3b
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  .rodata.str1.1+0x7a
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  __assert_fail
// 21d: ba 4d 00 00 00                movl    $0x4d, %edx
// 222: ff d0                         callq   *%rax
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1+0xb0
// 22e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000230:  R_X86_64_64  .rodata.str1.1+0xc1
// 238: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023a:  R_X86_64_64  .rodata.str1.1+0xf6
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  __assert_fail
// 24c: ba 86 00 00 00                movl    $0x86, %edx
// 251: ff d0                         callq   *%rax
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1+0x120
// 25d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1+0xc1
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  .rodata.str1.1+0xf6
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  __assert_fail
// 27b: ba 87 00 00 00                movl    $0x87, %edx
// 280: ff d0                         callq   *%rax
// 282: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000284:  R_X86_64_64  .rodata.str1.1+0x16f
// 28c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1+0x13f
// 296: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000298:  R_X86_64_64  .rodata.str1.1+0x18b
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  __assert_fail
// 2aa: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 2af: ff d0                         callq   *%rax
// 2b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b3:  R_X86_64_64  .rodata.str1.1+0x1aa
// 2bb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002bd:  R_X86_64_64  .rodata.str1.1+0x13f
// 2c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1+0x18b
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  __assert_fail
// 2d9: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 2de: ff d0                         callq   *%rax
// 2e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1+0x127
// 2ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ec:  R_X86_64_64  .rodata.str1.1+0xc1
// 2f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f6:  R_X86_64_64  .rodata.str1.1+0xf6
// 2fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000300:  R_X86_64_64  __assert_fail
// 308: ba 88 00 00 00                movl    $0x88, %edx
// 30d: ff d0                         callq   *%rax
// 30f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000311:  R_X86_64_64  .rodata.str1.1+0x1c6
// 319: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000031b:  R_X86_64_64  .rodata.str1.1+0x1d5
// 323: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000325:  R_X86_64_64  .rodata.str1.1+0x217
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  __assert_fail
// 337: ba 4b 00 00 00                movl    $0x4b, %edx
// 33c: ff d0                         callq   *%rax
// 33e: 
static const unsigned char _LOAD_GLOBAL_code_body[831] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xd1, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0xeb, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0xd1, 0xea, 0x0f, 0x88, 0x02, 0x02, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x1e, 0x02, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x3a, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xd1, 0xe9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x4f, 0x02, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0x8b, 0x7f, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xeb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x41, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x89, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x75, 0x9e, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x79, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x61, 0xff, 0xff, 0xff, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_GLOBAL_code_holes[44] = {
    {0x12, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x3b},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc1},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x120},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc1},
    {0x269, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16f},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13f},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x18b},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1aa},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13f},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x18b},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x127},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc1},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x300, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c6},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d5},
    {0x325, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x217},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "name '%.200s' is not defined\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00"
// 242: 00 00 00 00 00 00
static const unsigned char _LOAD_GLOBAL_data_body[585] = {0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_GLOBAL_data_holes[1];

// _LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmp3v1aptj0/_LOAD_GLOBAL_BUILTINS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 8b 47 20                   movq    0x20(%rdi), %rax
// c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 10: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 14: 0f 84 ce 00 00 00             je      0xe8 <_JIT_ENTRY+0xe8>
// 1a: 49 89 d7                      movq    %rdx, %r15
// 1d: 49 89 f6                      movq    %rsi, %r14
// 20: 48 89 fb                      movq    %rdi, %rbx
// 23: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 27: ba 01 00 00 00                movl    $0x1, %edx
// 2c: 48 d3 e2                      shlq    %cl, %rdx
// 2f: 48 01 c2                      addq    %rax, %rdx
// 32: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000034:  R_X86_64_64  _JIT_OPERAND
// 3c: 0f b7 c0                      movzwl  %ax, %eax
// 3f: 48 c1 e0 04                   shlq    $0x4, %rax
// 43: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 48: 4d 85 e4                      testq   %r12, %r12
// 4b: 74 57                         je      0xa4 <_JIT_ENTRY+0xa4>
// 4d: 41 8b 04 24                   movl    (%r12), %eax
// 51: ff c0                         incl    %eax
// 53: 74 10                         je      0x65 <_JIT_ENTRY+0x65>
// 55: 41 89 04 24                   movl    %eax, (%r12)
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 63: ff d0                         callq   *%rax
// 65: 4d 89 26                      movq    %r12, (%r14)
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: a8 01                         testb   $0x1, %al
// 74: 74 08                         je      0x7e <_JIT_ENTRY+0x7e>
// 76: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 7e: 83 e0 01                      andl    $0x1, %eax
// 81: ff c0                         incl    %eax
// 83: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _JIT_CONTINUE
// 91: 48 89 df                      movq    %rbx, %rdi
// 94: 4c 89 fa                      movq    %r15, %rdx
// 97: 48 83 c4 08                   addq    $0x8, %rsp
// 9b: 5b                            popq    %rbx
// 9c: 41 5c                         popq    %r12
// 9e: 41 5e                         popq    %r14
// a0: 41 5f                         popq    %r15
// a2: ff e0                         jmpq    *%rax
// a4: 49 29 de                      subq    %rbx, %r14
// a7: 49 83 c6 b8                   addq    $-0x48, %r14
// ab: 49 c1 ee 03                   shrq    $0x3, %r14
// af: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b3: 48 8b 03                      movq    (%rbx), %rax
// b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b8:  R_X86_64_64  PyCode_Type
// c0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c4: 75 51                         jne     0x117 <_JIT_ENTRY+0x117>
// c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c8:  R_X86_64_64  _JIT_TARGET
// d0: 89 c9                         movl    %ecx, %ecx
// d2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// dc: 48 83 c4 08                   addq    $0x8, %rsp
// e0: 5b                            popq    %rbx
// e1: 41 5c                         popq    %r12
// e3: 41 5e                         popq    %r14
// e5: 41 5f                         popq    %r15
// e7: c3                            retq
// e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x93
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0xb4
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  .rodata.str1.1+0xf2
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  __assert_fail
// 110: ba cb 00 00 00                movl    $0xcb, %edx
// 115: ff d0                         callq   *%rax
// 117: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000119:  R_X86_64_64  .rodata.str1.1
// 121: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000123:  R_X86_64_64  .rodata.str1.1+0x1e
// 12b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012d:  R_X86_64_64  .rodata.str1.1+0x5d
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  __assert_fail
// 13f: ba 4d 00 00 00                movl    $0x4d, %edx
// 144: ff d0                         callq   *%rax
// 146: 
static const unsigned char _LOAD_GLOBAL_BUILTINS_code_body[327] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x47, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x80, 0x78, 0x0a, 0x00, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x57, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x51, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcb, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_GLOBAL_BUILTINS_code_holes[15] = {
    {0x34, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb4},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf2},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00dk->dk_kind != DICT_KEYS_GENERAL\x00/home/jglass/Documents/cpython/Include/internal/pycore_dict.h\x00PyDictUnicodeEntry *DK_UNICODE_ENTRIES(PyDictKeysObject *)\x00'
// 12d: 00 00 00
static const unsigned char _LOAD_GLOBAL_BUILTINS_data_body[305] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x64, 0x6b, 0x2d, 0x3e, 0x64, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x2a, 0x44, 0x4b, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x28, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_GLOBAL_BUILTINS_data_holes[1];

// _LOAD_GLOBAL_MODULE
// 
// /tmp/tmp3v1aptj0/_LOAD_GLOBAL_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 8b 47 18                   movq    0x18(%rdi), %rax
// c: 48 8b 40 20                   movq    0x20(%rax), %rax
// 10: 80 78 0a 00                   cmpb    $0x0, 0xa(%rax)
// 14: 0f 84 ce 00 00 00             je      0xe8 <_JIT_ENTRY+0xe8>
// 1a: 49 89 d7                      movq    %rdx, %r15
// 1d: 49 89 f6                      movq    %rsi, %r14
// 20: 48 89 fb                      movq    %rdi, %rbx
// 23: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 27: ba 01 00 00 00                movl    $0x1, %edx
// 2c: 48 d3 e2                      shlq    %cl, %rdx
// 2f: 48 01 c2                      addq    %rax, %rdx
// 32: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000034:  R_X86_64_64  _JIT_OPERAND
// 3c: 0f b7 c0                      movzwl  %ax, %eax
// 3f: 48 c1 e0 04                   shlq    $0x4, %rax
// 43: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 48: 4d 85 e4                      testq   %r12, %r12
// 4b: 74 57                         je      0xa4 <_JIT_ENTRY+0xa4>
// 4d: 41 8b 04 24                   movl    (%r12), %eax
// 51: ff c0                         incl    %eax
// 53: 74 10                         je      0x65 <_JIT_ENTRY+0x65>
// 55: 41 89 04 24                   movl    %eax, (%r12)
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 63: ff d0                         callq   *%rax
// 65: 4d 89 26                      movq    %r12, (%r14)
// 68: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006a:  R_X86_64_64  _JIT_OPARG
// 72: a8 01                         testb   $0x1, %al
// 74: 74 08                         je      0x7e <_JIT_ENTRY+0x7e>
// 76: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 7e: 83 e0 01                      andl    $0x1, %eax
// 81: ff c0                         incl    %eax
// 83: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 87: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000089:  R_X86_64_64  _JIT_CONTINUE
// 91: 48 89 df                      movq    %rbx, %rdi
// 94: 4c 89 fa                      movq    %r15, %rdx
// 97: 48 83 c4 08                   addq    $0x8, %rsp
// 9b: 5b                            popq    %rbx
// 9c: 41 5c                         popq    %r12
// 9e: 41 5e                         popq    %r14
// a0: 41 5f                         popq    %r15
// a2: ff e0                         jmpq    *%rax
// a4: 49 29 de                      subq    %rbx, %r14
// a7: 49 83 c6 b8                   addq    $-0x48, %r14
// ab: 49 c1 ee 03                   shrq    $0x3, %r14
// af: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b3: 48 8b 03                      movq    (%rbx), %rax
// b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b8:  R_X86_64_64  PyCode_Type
// c0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c4: 75 51                         jne     0x117 <_JIT_ENTRY+0x117>
// c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c8:  R_X86_64_64  _JIT_TARGET
// d0: 89 c9                         movl    %ecx, %ecx
// d2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// dc: 48 83 c4 08                   addq    $0x8, %rsp
// e0: 5b                            popq    %rbx
// e1: 41 5c                         popq    %r12
// e3: 41 5e                         popq    %r14
// e5: 41 5f                         popq    %r15
// e7: c3                            retq
// e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1+0x93
// f2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1+0xb4
// fc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fe:  R_X86_64_64  .rodata.str1.1+0xf2
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  __assert_fail
// 110: ba cb 00 00 00                movl    $0xcb, %edx
// 115: ff d0                         callq   *%rax
// 117: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000119:  R_X86_64_64  .rodata.str1.1
// 121: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000123:  R_X86_64_64  .rodata.str1.1+0x1e
// 12b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012d:  R_X86_64_64  .rodata.str1.1+0x5d
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  __assert_fail
// 13f: ba 4d 00 00 00                movl    $0x4d, %edx
// 144: ff d0                         callq   *%rax
// 146: 
static const unsigned char _LOAD_GLOBAL_MODULE_code_body[327] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x47, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x80, 0x78, 0x0a, 0x00, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x57, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x51, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcb, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_GLOBAL_MODULE_code_holes[15] = {
    {0x34, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x93},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb4},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf2},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00dk->dk_kind != DICT_KEYS_GENERAL\x00/home/jglass/Documents/cpython/Include/internal/pycore_dict.h\x00PyDictUnicodeEntry *DK_UNICODE_ENTRIES(PyDictKeysObject *)\x00'
// 12d: 00 00 00
static const unsigned char _LOAD_GLOBAL_MODULE_data_body[305] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x64, 0x6b, 0x2d, 0x3e, 0x64, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x2a, 0x44, 0x4b, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x28, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_GLOBAL_MODULE_data_holes[1];

// _LOAD_LOCALS
// 
// /tmp/tmp3v1aptj0/_LOAD_LOCALS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 67 28                   movq    0x28(%rdi), %r12
// 15: 4d 85 e4                      testq   %r12, %r12
// 18: 74 3f                         je      0x59 <_JIT_ENTRY+0x59>
// 1a: 41 8b 04 24                   movl    (%r12), %eax
// 1e: ff c0                         incl    %eax
// 20: 74 10                         je      0x32 <_JIT_ENTRY+0x32>
// 22: 41 89 04 24                   movl    %eax, (%r12)
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 30: ff d0                         callq   *%rax
// 32: 4c 89 23                      movq    %r12, (%rbx)
// 35: 48 83 c3 08                   addq    $0x8, %rbx
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _JIT_CONTINUE
// 43: 4c 89 f7                      movq    %r14, %rdi
// 46: 48 89 de                      movq    %rbx, %rsi
// 49: 4c 89 fa                      movq    %r15, %rdx
// 4c: 48 83 c4 08                   addq    $0x8, %rsp
// 50: 5b                            popq    %rbx
// 51: 41 5c                         popq    %r12
// 53: 41 5e                         popq    %r14
// 55: 41 5f                         popq    %r15
// 57: ff e0                         jmpq    *%rax
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  PyExc_SystemError
// 63: 48 8b 30                      movq    (%rax), %rsi
// 66: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000068:  R_X86_64_64  .rodata.str1.1
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _PyErr_SetString
// 7a: 4c 89 ff                      movq    %r15, %rdi
// 7d: ff d0                         callq   *%rax
// 7f: 4c 29 f3                      subq    %r14, %rbx
// 82: 48 83 c3 b8                   addq    $-0x48, %rbx
// 86: 48 c1 eb 03                   shrq    $0x3, %rbx
// 8a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 8e: 31 c0                         xorl    %eax, %eax
// 90: 48 83 c4 08                   addq    $0x8, %rsp
// 94: 5b                            popq    %rbx
// 95: 41 5c                         popq    %r12
// 97: 41 5e                         popq    %r14
// 99: 41 5f                         popq    %r15
// 9b: c3                            retq
// 9c: 
static const unsigned char _LOAD_LOCALS_code_body[157] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x67, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _LOAD_LOCALS_code_holes[6] = {
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: 'no locals found\x00'
// 10: 
static const unsigned char _LOAD_LOCALS_data_body[17] = {0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00};
static const Hole _LOAD_LOCALS_data_holes[1];

// _LOAD_NAME
// 
// /tmp/tmp3v1aptj0/_LOAD_NAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 d7                      movq    %rdx, %r15
// 10: 48 89 f3                      movq    %rsi, %rbx
// 13: 49 89 fe                      movq    %rdi, %r14
// 16: 48 8b 7f 28                   movq    0x28(%rdi), %rdi
// 1a: 48 85 ff                      testq   %rdi, %rdi
// 1d: 0f 84 d1 00 00 00             je      0xf4 <_JIT_ENTRY+0xf4>
// 23: 49 8b 06                      movq    (%r14), %rax
// 26: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000028:  R_X86_64_64  PyCode_Type
// 30: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 34: 0f 85 78 01 00 00             jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 3a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 3e: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 42: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 49: 0f 84 92 01 00 00             je      0x1e1 <_JIT_ENTRY+0x1e1>
// 4f: b2 01                         movb    $0x1, %dl
// 51: 84 d2                         testb   %dl, %dl
// 53: 0f 84 b7 01 00 00             je      0x210 <_JIT_ENTRY+0x210>
// 59: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000005b:  R_X86_64_64  PyLong_Type
// 63: 48 39 d1                      cmpq    %rdx, %rcx
// 66: 0f 84 d3 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// 6c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000006e:  R_X86_64_64  PyBool_Type
// 76: 48 39 d1                      cmpq    %rdx, %rcx
// 79: 0f 84 ef 01 00 00             je      0x26e <_JIT_ENTRY+0x26e>
// 7f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000081:  R_X86_64_64  _JIT_OPARG
// 89: 0f b7 c9                      movzwl  %cx, %ecx
// 8c: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 90: 0f 8e 07 02 00 00             jle     0x29d <_JIT_ENTRY+0x29d>
// 96: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000098:  R_X86_64_64  _JIT_OPARG
// a0: 0f b7 c9                      movzwl  %cx, %ecx
// a3: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// a8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000aa:  R_X86_64_64  PyMapping_GetOptionalItem
// b2: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// b7: 4c 89 e6                      movq    %r12, %rsi
// ba: 41 ff d5                      callq   *%r13
// bd: 85 c0                         testl   %eax, %eax
// bf: 78 59                         js      0x11a <_JIT_ENTRY+0x11a>
// c1: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// c6: 48 85 c0                      testq   %rax, %rax
// c9: 74 6e                         je      0x139 <_JIT_ENTRY+0x139>
// cb: 48 89 03                      movq    %rax, (%rbx)
// ce: 48 83 c3 08                   addq    $0x8, %rbx
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _JIT_CONTINUE
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 89 de                      movq    %rbx, %rsi
// e2: 4c 89 fa                      movq    %r15, %rdx
// e5: 48 83 c4 10                   addq    $0x10, %rsp
// e9: 5b                            popq    %rbx
// ea: 41 5c                         popq    %r12
// ec: 41 5d                         popq    %r13
// ee: 41 5e                         popq    %r14
// f0: 41 5f                         popq    %r15
// f2: ff e0                         jmpq    *%rax
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  PyExc_SystemError
// fe: 48 8b 30                      movq    (%rax), %rsi
// 101: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000103:  R_X86_64_64  .rodata.str1.1+0x1d
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _PyErr_SetString
// 115: 4c 89 ff                      movq    %r15, %rdi
// 118: ff d0                         callq   *%rax
// 11a: 4c 29 f3                      subq    %r14, %rbx
// 11d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 121: 48 c1 eb 03                   shrq    $0x3, %rbx
// 125: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 129: 31 c0                         xorl    %eax, %eax
// 12b: 48 83 c4 10                   addq    $0x10, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5d                         popq    %r13
// 134: 41 5e                         popq    %r14
// 136: 41 5f                         popq    %r15
// 138: c3                            retq
// 139: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyDict_GetItemRef
// 147: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 14c: 4c 89 e6                      movq    %r12, %rsi
// 14f: ff d0                         callq   *%rax
// 151: 85 c0                         testl   %eax, %eax
// 153: 78 c5                         js      0x11a <_JIT_ENTRY+0x11a>
// 155: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15a: 48 85 c0                      testq   %rax, %rax
// 15d: 0f 85 68 ff ff ff             jne     0xcb <_JIT_ENTRY+0xcb>
// 163: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 167: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 16c: 4c 89 e6                      movq    %r12, %rsi
// 16f: 41 ff d5                      callq   *%r13
// 172: 85 c0                         testl   %eax, %eax
// 174: 78 a4                         js      0x11a <_JIT_ENTRY+0x11a>
// 176: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 17b: 48 85 c0                      testq   %rax, %rax
// 17e: 0f 85 47 ff ff ff             jne     0xcb <_JIT_ENTRY+0xcb>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  PyExc_NameError
// 18e: 48 8b 30                      movq    (%rax), %rsi
// 191: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000193:  R_X86_64_64  .rodata.str1.1
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1a5: 4c 89 ff                      movq    %r15, %rdi
// 1a8: 4c 89 e1                      movq    %r12, %rcx
// 1ab: ff d0                         callq   *%rax
// 1ad: e9 68 ff ff ff                jmp     0x11a <_JIT_ENTRY+0x11a>
// 1b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b4:  R_X86_64_64  .rodata.str1.1+0x2d
// 1bc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1+0x4b
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  .rodata.str1.1+0x8a
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  __assert_fail
// 1da: ba 4d 00 00 00                movl    $0x4d, %edx
// 1df: ff d0                         callq   *%rax
// 1e1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1+0xc0
// 1eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ed:  R_X86_64_64  .rodata.str1.1+0xd1
// 1f5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0x106
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  __assert_fail
// 209: ba 86 00 00 00                movl    $0x86, %edx
// 20e: ff d0                         callq   *%rax
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1+0x130
// 21a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000021c:  R_X86_64_64  .rodata.str1.1+0xd1
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  .rodata.str1.1+0x106
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  __assert_fail
// 238: ba 87 00 00 00                movl    $0x87, %edx
// 23d: ff d0                         callq   *%rax
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1+0x17f
// 249: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1+0x14f
// 253: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000255:  R_X86_64_64  .rodata.str1.1+0x19b
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  __assert_fail
// 267: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 26c: ff d0                         callq   *%rax
// 26e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000270:  R_X86_64_64  .rodata.str1.1+0x1ba
// 278: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1+0x14f
// 282: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000284:  R_X86_64_64  .rodata.str1.1+0x19b
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  __assert_fail
// 296: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 29b: ff d0                         callq   *%rax
// 29d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029f:  R_X86_64_64  .rodata.str1.1+0x137
// 2a7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a9:  R_X86_64_64  .rodata.str1.1+0xd1
// 2b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b3:  R_X86_64_64  .rodata.str1.1+0x106
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  __assert_fail
// 2c5: ba 88 00 00 00                movl    $0x88, %edx
// 2ca: ff d0                         callq   *%rax
// 2cc: 
static const unsigned char _LOAD_NAME_code_body[717] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x7f, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x78, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x92, 0x01, 0x00, 0x00, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0xb7, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0xd3, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0xef, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x07, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x59, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x6e, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x68, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xa4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x47, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x68, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_NAME_code_holes[39] = {
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2d},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4b},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x8a},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd1},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x106},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x130},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd1},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x106},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17f},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14f},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19b},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1ba},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14f},
    {0x284, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x19b},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x137},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd1},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x106},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "name '%.200s' is not defined\x00no locals found\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00"
// 1d6: 00 00
static const unsigned char _LOAD_NAME_data_body[473] = {0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00};
static const Hole _LOAD_NAME_data_holes[1];

// _LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmp3v1aptj0/_LOAD_SUPER_ATTR_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_OPARG
// 18: a8 01                         testb   $0x1, %al
// 1a: 0f 85 f3 02 00 00             jne     0x313 <_JIT_ENTRY+0x313>
// 20: 49 89 f6                      movq    %rsi, %r14
// 23: 48 89 fb                      movq    %rdi, %rbx
// 26: 4c 8d 7e e8                   leaq    -0x18(%rsi), %r15
// 2a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000002c:  R_X86_64_64  PySuper_Type
// 34: 49 39 2f                      cmpq    %rbp, (%r15)
// 37: 75 12                         jne     0x4b <_JIT_ENTRY+0x4b>
// 39: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 3d: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 42: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 49: 75 4b                         jne     0x96 <_JIT_ENTRY+0x96>
// 4b: 49 29 de                      subq    %rbx, %r14
// 4e: 49 83 c6 b8                   addq    $-0x48, %r14
// 52: 49 c1 ee 03                   shrq    $0x3, %r14
// 56: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 5a: 48 8b 03                      movq    (%rbx), %rax
// 5d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005f:  R_X86_64_64  PyCode_Type
// 67: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 6b: 0f 85 73 02 00 00             jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 71: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000073:  R_X86_64_64  _JIT_TARGET
// 7b: 89 c9                         movl    %ecx, %ecx
// 7d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 81: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 87: 48 83 c4 18                   addq    $0x18, %rsp
// 8b: 5b                            popq    %rbx
// 8c: 41 5c                         popq    %r12
// 8e: 41 5d                         popq    %r13
// 90: 41 5e                         popq    %r14
// 92: 41 5f                         popq    %r15
// 94: 5d                            popq    %rbp
// 95: c3                            retq
// 96: 48 8b 03                      movq    (%rbx), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  PyCode_Type
// a3: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// a7: 0f 85 37 02 00 00             jne     0x2e4 <_JIT_ENTRY+0x2e4>
// ad: 48 8b 40 20                   movq    0x20(%rax), %rax
// b1: 48 8b 48 08                   movq    0x8(%rax), %rcx
// b5: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// bc: 0f 84 80 02 00 00             je      0x342 <_JIT_ENTRY+0x342>
// c2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: 0f b7 f6                      movzwl  %si, %esi
// cf: c1 ee 02                      shrl    $0x2, %esi
// d2: 0f 88 99 02 00 00             js      0x371 <_JIT_ENTRY+0x371>
// d8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000da:  R_X86_64_64  PyLong_Type
// e2: 48 39 f1                      cmpq    %rsi, %rcx
// e5: 0f 84 b5 02 00 00             je      0x3a0 <_JIT_ENTRY+0x3a0>
// eb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ed:  R_X86_64_64  PyBool_Type
// f5: 48 39 f1                      cmpq    %rsi, %rcx
// f8: 0f 84 d1 02 00 00             je      0x3cf <_JIT_ENTRY+0x3cf>
// fe: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 103: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000105:  R_X86_64_64  _JIT_OPARG
// 10d: 0f b7 c9                      movzwl  %cx, %ecx
// 110: 48 c1 e9 02                   shrq    $0x2, %rcx
// 114: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 118: 0f 8e e0 02 00 00             jle     0x3fe <_JIT_ENTRY+0x3fe>
// 11e: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 122: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000124:  R_X86_64_64  _JIT_OPARG
// 12c: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 132: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _PySuper_Lookup
// 141: 4c 89 e7                      movq    %r12, %rdi
// 144: 4c 89 ee                      movq    %r13, %rsi
// 147: 31 c9                         xorl    %ecx, %ecx
// 149: ff d0                         callq   *%rax
// 14b: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 150: 48 8b 45 00                   movq    (%rbp), %rax
// 154: 48 85 c0                      testq   %rax, %rax
// 157: 7f 22                         jg      0x17b <_JIT_ENTRY+0x17b>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  .rodata.str1.1
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_NegativeRefcount
// 16d: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 172: 48 89 ea                      movq    %rbp, %rdx
// 175: ff d0                         callq   *%rax
// 177: 48 8b 45 00                   movq    (%rbp), %rax
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 78 28                         js      0x1a7 <_JIT_ENTRY+0x1a7>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 189: ff d0                         callq   *%rax
// 18b: 48 ff 4d 00                   decq    (%rbp)
// 18f: 75 16                         jne     0x1a7 <_JIT_ENTRY+0x1a7>
// 191: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000193:  R_X86_64_64  PySuper_Type
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_Dealloc
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 7f 22                         jg      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 1c9: 4c 89 e2                      movq    %r12, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 21                         js      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 0c 24                   decq    (%r12)
// 1e6: 75 0f                         jne     0x1f7 <_JIT_ENTRY+0x1f7>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_Dealloc
// 1f2: 4c 89 e7                      movq    %r12, %rdi
// 1f5: ff d0                         callq   *%rax
// 1f7: 49 8b 45 00                   movq    (%r13), %rax
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 7f 22                         jg      0x222 <_JIT_ENTRY+0x222>
// 200: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000202:  R_X86_64_64  .rodata.str1.1
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_NegativeRefcount
// 214: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 219: 4c 89 ea                      movq    %r13, %rdx
// 21c: ff d0                         callq   *%rax
// 21e: 49 8b 45 00                   movq    (%r13), %rax
// 222: 85 c0                         testl   %eax, %eax
// 224: 78 21                         js      0x247 <_JIT_ENTRY+0x247>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 230: ff d0                         callq   *%rax
// 232: 49 ff 4d 00                   decq    (%r13)
// 236: 75 0f                         jne     0x247 <_JIT_ENTRY+0x247>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 ef                      movq    %r13, %rdi
// 245: ff d0                         callq   *%rax
// 247: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 24b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 250: 48 85 c0                      testq   %rax, %rax
// 253: 74 25                         je      0x27a <_JIT_ENTRY+0x27a>
// 255: 49 89 07                      movq    %rax, (%r15)
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _JIT_CONTINUE
// 262: 48 89 df                      movq    %rbx, %rdi
// 265: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 26a: 48 83 c4 18                   addq    $0x18, %rsp
// 26e: 5b                            popq    %rbx
// 26f: 41 5c                         popq    %r12
// 271: 41 5d                         popq    %r13
// 273: 41 5e                         popq    %r14
// 275: 41 5f                         popq    %r15
// 277: 5d                            popq    %rbp
// 278: ff e0                         jmpq    *%rax
// 27a: 48 8b 03                      movq    (%rbx), %rax
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  PyCode_Type
// 287: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 28b: 75 57                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 28d: 48 63 40 48                   movslq  0x48(%rax), %rax
// 291: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// 295: 48 83 c0 48                   addq    $0x48, %rax
// 299: 4c 89 f1                      movq    %r14, %rcx
// 29c: 48 29 c1                      subq    %rax, %rcx
// 29f: 48 c1 e9 03                   shrq    $0x3, %rcx
// 2a3: 85 c9                         testl   %ecx, %ecx
// 2a5: 0f 8e 82 01 00 00             jle     0x42d <_JIT_ENTRY+0x42d>
// 2ab: 49 83 c6 f8                   addq    $-0x8, %r14
// 2af: 49 29 c6                      subq    %rax, %r14
// 2b2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b6: 45 85 f6                      testl   %r14d, %r14d
// 2b9: 0f 8e 9d 01 00 00             jle     0x45c <_JIT_ENTRY+0x45c>
// 2bf: 48 29 c6                      subq    %rax, %rsi
// 2c2: 48 c1 ee 03                   shrq    $0x3, %rsi
// 2c6: 85 f6                         testl   %esi, %esi
// 2c8: 0f 8e bd 01 00 00             jle     0x48b <_JIT_ENTRY+0x48b>
// 2ce: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 2d2: 49 29 c7                      subq    %rax, %r15
// 2d5: 49 c1 ef 03                   shrq    $0x3, %r15
// 2d9: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: e9 a3 fd ff ff                jmp     0x87 <_JIT_ENTRY+0x87>
// 2e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e6:  R_X86_64_64  .rodata.str1.1+0xdb
// 2ee: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f0:  R_X86_64_64  .rodata.str1.1+0xf9
// 2f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fa:  R_X86_64_64  .rodata.str1.1+0x138
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  __assert_fail
// 30c: ba 4d 00 00 00                movl    $0x4d, %edx
// 311: ff d0                         callq   *%rax
// 313: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000315:  R_X86_64_64  .rodata.str1.1+0x87
// 31d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000031f:  R_X86_64_64  .rodata.str1.1
// 327: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000329:  R_X86_64_64  .rodata.str1.1+0x39
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  __assert_fail
// 33b: ba f6 05 00 00                movl    $0x5f6, %edx            # imm = 0x5F6
// 340: ff d0                         callq   *%rax
// 342: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000344:  R_X86_64_64  .rodata.str1.1+0x16e
// 34c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000034e:  R_X86_64_64  .rodata.str1.1+0x17f
// 356: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000358:  R_X86_64_64  .rodata.str1.1+0x1b4
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  __assert_fail
// 36a: ba 86 00 00 00                movl    $0x86, %edx
// 36f: ff d0                         callq   *%rax
// 371: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000373:  R_X86_64_64  .rodata.str1.1+0x1de
// 37b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000037d:  R_X86_64_64  .rodata.str1.1+0x17f
// 385: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000387:  R_X86_64_64  .rodata.str1.1+0x1b4
// 38f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000391:  R_X86_64_64  __assert_fail
// 399: ba 87 00 00 00                movl    $0x87, %edx
// 39e: ff d0                         callq   *%rax
// 3a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a2:  R_X86_64_64  .rodata.str1.1+0x22d
// 3aa: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003ac:  R_X86_64_64  .rodata.str1.1+0x1fd
// 3b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003b6:  R_X86_64_64  .rodata.str1.1+0x249
// 3be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c0:  R_X86_64_64  __assert_fail
// 3c8: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 3cd: ff d0                         callq   *%rax
// 3cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d1:  R_X86_64_64  .rodata.str1.1+0x268
// 3d9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003db:  R_X86_64_64  .rodata.str1.1+0x1fd
// 3e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003e5:  R_X86_64_64  .rodata.str1.1+0x249
// 3ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ef:  R_X86_64_64  __assert_fail
// 3f7: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 3fc: ff d0                         callq   *%rax
// 3fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000400:  R_X86_64_64  .rodata.str1.1+0x1e5
// 408: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000040a:  R_X86_64_64  .rodata.str1.1+0x17f
// 412: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000414:  R_X86_64_64  .rodata.str1.1+0x1b4
// 41c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041e:  R_X86_64_64  __assert_fail
// 426: ba 88 00 00 00                movl    $0x88, %edx
// 42b: ff d0                         callq   *%rax
// 42d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000042f:  R_X86_64_64  .rodata.str1.1+0x94
// 437: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000439:  R_X86_64_64  .rodata.str1.1+0xa7
// 441: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000443:  R_X86_64_64  .rodata.str1.1+0x39
// 44b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000044d:  R_X86_64_64  __assert_fail
// 455: ba 57 00 00 00                movl    $0x57, %edx
// 45a: ff d0                         callq   *%rax
// 45c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000045e:  R_X86_64_64  .rodata.str1.1+0x94
// 466: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000468:  R_X86_64_64  .rodata.str1.1+0xa7
// 470: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000472:  R_X86_64_64  .rodata.str1.1+0x39
// 47a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047c:  R_X86_64_64  __assert_fail
// 484: ba 59 00 00 00                movl    $0x59, %edx
// 489: ff d0                         callq   *%rax
// 48b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000048d:  R_X86_64_64  .rodata.str1.1+0x94
// 495: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000497:  R_X86_64_64  .rodata.str1.1+0xa7
// 49f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000004a1:  R_X86_64_64  .rodata.str1.1+0x39
// 4a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ab:  R_X86_64_64  __assert_fail
// 4b3: ba 5b 00 00 00                movl    $0x5b, %edx
// 4b8: ff d0                         callq   *%rax
// 4ba: 
static const unsigned char _LOAD_SUPER_ATTR_ATTR_code_body[1211] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xf3, 0x02, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x7e, 0xe8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x2f, 0x75, 0x12, 0x4d, 0x8b, 0x66, 0xf0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x4b, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x73, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x37, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x80, 0x02, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xc1, 0xee, 0x02, 0x0f, 0x88, 0x99, 0x02, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf1, 0x0f, 0x84, 0xb5, 0x02, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf1, 0x0f, 0x84, 0xd1, 0x02, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe9, 0x02, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0xe0, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x25, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x57, 0x48, 0x63, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x82, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0x9d, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc6, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x0f, 0x8e, 0xbd, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x43, 0x48, 0x49, 0x29, 0xc7, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xf6, 0x05, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x57, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_SUPER_ATTR_ATTR_code_holes[67] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdb},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf9},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x138},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16e},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17f},
    {0x358, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b4},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1de},
    {0x37d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17f},
    {0x387, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b4},
    {0x391, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x22d},
    {0x3ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1fd},
    {0x3b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x3c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x3d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x268},
    {0x3db, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1fd},
    {0x3e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x249},
    {0x3ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x400, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e5},
    {0x40a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17f},
    {0x414, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b4},
    {0x41e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x42f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x94},
    {0x439, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x443, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x44d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x45e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x94},
    {0x468, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x472, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x47c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x48d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x94},
    {0x497, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x4a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x4ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00!(oparg & 1)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 284: 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_ATTR_data_body[649] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x21, 0x28, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x31, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmp3v1aptj0/_LOAD_SUPER_ATTR_METHOD.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_OPARG
// 18: a8 01                         testb   $0x1, %al
// 1a: 0f 84 81 03 00 00             je      0x3a1 <_JIT_ENTRY+0x3a1>
// 20: 49 89 f7                      movq    %rsi, %r15
// 23: 48 89 fb                      movq    %rdi, %rbx
// 26: 4c 8d 76 e8                   leaq    -0x18(%rsi), %r14
// 2a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000002c:  R_X86_64_64  PySuper_Type
// 34: 49 39 2e                      cmpq    %rbp, (%r14)
// 37: 75 11                         jne     0x4a <_JIT_ENTRY+0x4a>
// 39: 4d 8b 6f f0                   movq    -0x10(%r15), %r13
// 3d: 49 8b 45 08                   movq    0x8(%r13), %rax
// 41: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 48: 75 4b                         jne     0x95 <_JIT_ENTRY+0x95>
// 4a: 49 29 df                      subq    %rbx, %r15
// 4d: 49 83 c7 b8                   addq    $-0x48, %r15
// 51: 49 c1 ef 03                   shrq    $0x3, %r15
// 55: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 59: 48 8b 03                      movq    (%rbx), %rax
// 5c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005e:  R_X86_64_64  PyCode_Type
// 66: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 6a: 0f 85 02 03 00 00             jne     0x372 <_JIT_ENTRY+0x372>
// 70: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000072:  R_X86_64_64  _JIT_TARGET
// 7a: 89 c9                         movl    %ecx, %ecx
// 7c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 80: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 86: 48 83 c4 18                   addq    $0x18, %rsp
// 8a: 5b                            popq    %rbx
// 8b: 41 5c                         popq    %r12
// 8d: 41 5d                         popq    %r13
// 8f: 41 5e                         popq    %r14
// 91: 41 5f                         popq    %r15
// 93: 5d                            popq    %rbp
// 94: c3                            retq
// 95: 48 8b 03                      movq    (%rbx), %rax
// 98: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009a:  R_X86_64_64  PyCode_Type
// a2: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// a6: 0f 85 c6 02 00 00             jne     0x372 <_JIT_ENTRY+0x372>
// ac: 48 8b 40 20                   movq    0x20(%rax), %rax
// b0: 48 8b 48 08                   movq    0x8(%rax), %rcx
// b4: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// bb: 0f 84 0f 03 00 00             je      0x3d0 <_JIT_ENTRY+0x3d0>
// c1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c3:  R_X86_64_64  _JIT_OPARG
// cb: 0f b7 f6                      movzwl  %si, %esi
// ce: c1 ee 02                      shrl    $0x2, %esi
// d1: 0f 88 28 03 00 00             js      0x3ff <_JIT_ENTRY+0x3ff>
// d7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000d9:  R_X86_64_64  PyLong_Type
// e1: 48 39 f1                      cmpq    %rsi, %rcx
// e4: 0f 84 44 03 00 00             je      0x42e <_JIT_ENTRY+0x42e>
// ea: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000ec:  R_X86_64_64  PyBool_Type
// f4: 48 39 f1                      cmpq    %rsi, %rcx
// f7: 0f 84 60 03 00 00             je      0x45d <_JIT_ENTRY+0x45d>
// fd: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 102: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000104:  R_X86_64_64  _JIT_OPARG
// 10c: 0f b7 c9                      movzwl  %cx, %ecx
// 10f: 48 c1 e9 02                   shrq    $0x2, %rcx
// 113: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 117: 0f 8e 6f 03 00 00             jle     0x48c <_JIT_ENTRY+0x48c>
// 11d: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 121: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000123:  R_X86_64_64  _JIT_OPARG
// 12b: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 131: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 136: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
// 13e: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 143: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000145:  R_X86_64_64  PyObject_GenericGetAttr
// 14d: 31 f6                         xorl    %esi, %esi
// 14f: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 156: 48 8d 4c 24 04                leaq    0x4(%rsp), %rcx
// 15b: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _PySuper_Lookup
// 169: 4c 89 ef                      movq    %r13, %rdi
// 16c: 4c 89 e6                      movq    %r12, %rsi
// 16f: ff d0                         callq   *%rax
// 171: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 176: 48 8b 45 00                   movq    (%rbp), %rax
// 17a: 48 85 c0                      testq   %rax, %rax
// 17d: 7f 22                         jg      0x1a1 <_JIT_ENTRY+0x1a1>
// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_NegativeRefcount
// 193: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 198: 48 89 ea                      movq    %rbp, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 48 8b 45 00                   movq    (%rbp), %rax
// 1a1: 85 c0                         testl   %eax, %eax
// 1a3: 78 28                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 48 ff 4d 00                   decq    (%rbp)
// 1b5: 75 16                         jne     0x1cd <_JIT_ENTRY+0x1cd>
// 1b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b9:  R_X86_64_64  PySuper_Type
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 45 00                   movq    (%r13), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7f 22                         jg      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d8:  R_X86_64_64  .rodata.str1.1
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_NegativeRefcount
// 1ea: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 1ef: 4c 89 ea                      movq    %r13, %rdx
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 8b 45 00                   movq    (%r13), %rax
// 1f8: 85 c0                         testl   %eax, %eax
// 1fa: 78 21                         js      0x21d <_JIT_ENTRY+0x21d>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 206: ff d0                         callq   *%rax
// 208: 49 ff 4d 00                   decq    (%r13)
// 20c: 75 0f                         jne     0x21d <_JIT_ENTRY+0x21d>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_Dealloc
// 218: 4c 89 ef                      movq    %r13, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 4d 8d 6f f8                   leaq    -0x8(%r15), %r13
// 221: 49 8d 6f f0                   leaq    -0x10(%r15), %rbp
// 225: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 22a: 48 85 c0                      testq   %rax, %rax
// 22d: 0f 84 8b 00 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 233: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
// 238: 75 58                         jne     0x292 <_JIT_ENTRY+0x292>
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 22                         jg      0x265 <_JIT_ENTRY+0x265>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 e7                      movq    %r12, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 45 31 e4                      xorl    %r12d, %r12d
// 28d: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 292: 49 89 06                      movq    %rax, (%r14)
// 295: 4c 89 65 00                   movq    %r12, (%rbp)
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 48 89 df                      movq    %rbx, %rdi
// 2a6: 4c 89 ee                      movq    %r13, %rsi
// 2a9: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ae: 48 83 c4 18                   addq    $0x18, %rsp
// 2b2: 5b                            popq    %rbx
// 2b3: 41 5c                         popq    %r12
// 2b5: 41 5d                         popq    %r13
// 2b7: 41 5e                         popq    %r14
// 2b9: 41 5f                         popq    %r15
// 2bb: 5d                            popq    %rbp
// 2bc: ff e0                         jmpq    *%rax
// 2be: 49 8b 04 24                   movq    (%r12), %rax
// 2c2: 48 85 c0                      testq   %rax, %rax
// 2c5: 7f 22                         jg      0x2e9 <_JIT_ENTRY+0x2e9>
// 2c7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c9:  R_X86_64_64  .rodata.str1.1
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_NegativeRefcount
// 2db: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 2e0: 4c 89 e2                      movq    %r12, %rdx
// 2e3: ff d0                         callq   *%rax
// 2e5: 49 8b 04 24                   movq    (%r12), %rax
// 2e9: 85 c0                         testl   %eax, %eax
// 2eb: 78 21                         js      0x30e <_JIT_ENTRY+0x30e>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 ff 0c 24                   decq    (%r12)
// 2fd: 75 0f                         jne     0x30e <_JIT_ENTRY+0x30e>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 4c 89 e7                      movq    %r12, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 48 8b 03                      movq    (%rbx), %rax
// 311: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000313:  R_X86_64_64  PyCode_Type
// 31b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 31f: 75 51                         jne     0x372 <_JIT_ENTRY+0x372>
// 321: 48 63 40 48                   movslq  0x48(%rax), %rax
// 325: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// 329: 48 83 c0 48                   addq    $0x48, %rax
// 32d: 49 29 c7                      subq    %rax, %r15
// 330: 49 c1 ef 03                   shrq    $0x3, %r15
// 334: 45 85 ff                      testl   %r15d, %r15d
// 337: 0f 8e 7e 01 00 00             jle     0x4bb <_JIT_ENTRY+0x4bb>
// 33d: 49 29 c5                      subq    %rax, %r13
// 340: 49 c1 ed 03                   shrq    $0x3, %r13
// 344: 45 85 ed                      testl   %r13d, %r13d
// 347: 0f 8e 9d 01 00 00             jle     0x4ea <_JIT_ENTRY+0x4ea>
// 34d: 48 29 c5                      subq    %rax, %rbp
// 350: 48 c1 ed 03                   shrq    $0x3, %rbp
// 354: 85 ed                         testl   %ebp, %ebp
// 356: 0f 8e bd 01 00 00             jle     0x519 <_JIT_ENTRY+0x519>
// 35c: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 360: 49 29 c6                      subq    %rax, %r14
// 363: 49 c1 ee 03                   shrq    $0x3, %r14
// 367: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 36b: 31 c0                         xorl    %eax, %eax
// 36d: e9 14 fd ff ff                jmp     0x86 <_JIT_ENTRY+0x86>
// 372: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000374:  R_X86_64_64  .rodata.str1.1+0xd8
// 37c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000037e:  R_X86_64_64  .rodata.str1.1+0xf6
// 386: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000388:  R_X86_64_64  .rodata.str1.1+0x135
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  __assert_fail
// 39a: ba 4d 00 00 00                movl    $0x4d, %edx
// 39f: ff d0                         callq   *%rax
// 3a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a3:  R_X86_64_64  .rodata.str1.1+0x87
// 3ab: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003ad:  R_X86_64_64  .rodata.str1.1
// 3b5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003b7:  R_X86_64_64  .rodata.str1.1+0x39
// 3bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c1:  R_X86_64_64  __assert_fail
// 3c9: ba 0f 06 00 00                movl    $0x60f, %edx            # imm = 0x60F
// 3ce: ff d0                         callq   *%rax
// 3d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d2:  R_X86_64_64  .rodata.str1.1+0x16b
// 3da: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003dc:  R_X86_64_64  .rodata.str1.1+0x17c
// 3e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003e6:  R_X86_64_64  .rodata.str1.1+0x1b1
// 3ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f0:  R_X86_64_64  __assert_fail
// 3f8: ba 86 00 00 00                movl    $0x86, %edx
// 3fd: ff d0                         callq   *%rax
// 3ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000401:  R_X86_64_64  .rodata.str1.1+0x1db
// 409: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000040b:  R_X86_64_64  .rodata.str1.1+0x17c
// 413: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000415:  R_X86_64_64  .rodata.str1.1+0x1b1
// 41d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041f:  R_X86_64_64  __assert_fail
// 427: ba 87 00 00 00                movl    $0x87, %edx
// 42c: ff d0                         callq   *%rax
// 42e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000430:  R_X86_64_64  .rodata.str1.1+0x22a
// 438: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000043a:  R_X86_64_64  .rodata.str1.1+0x1fa
// 442: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000444:  R_X86_64_64  .rodata.str1.1+0x246
// 44c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000044e:  R_X86_64_64  __assert_fail
// 456: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 45b: ff d0                         callq   *%rax
// 45d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000045f:  R_X86_64_64  .rodata.str1.1+0x265
// 467: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000469:  R_X86_64_64  .rodata.str1.1+0x1fa
// 471: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000473:  R_X86_64_64  .rodata.str1.1+0x246
// 47b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047d:  R_X86_64_64  __assert_fail
// 485: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 48a: ff d0                         callq   *%rax
// 48c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000048e:  R_X86_64_64  .rodata.str1.1+0x1e2
// 496: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000498:  R_X86_64_64  .rodata.str1.1+0x17c
// 4a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000004a2:  R_X86_64_64  .rodata.str1.1+0x1b1
// 4aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ac:  R_X86_64_64  __assert_fail
// 4b4: ba 88 00 00 00                movl    $0x88, %edx
// 4b9: ff d0                         callq   *%rax
// 4bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000004bd:  R_X86_64_64  .rodata.str1.1+0x91
// 4c5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000004c7:  R_X86_64_64  .rodata.str1.1+0xa4
// 4cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000004d1:  R_X86_64_64  .rodata.str1.1+0x39
// 4d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004db:  R_X86_64_64  __assert_fail
// 4e3: ba 57 00 00 00                movl    $0x57, %edx
// 4e8: ff d0                         callq   *%rax
// 4ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000004ec:  R_X86_64_64  .rodata.str1.1+0x91
// 4f4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000004f6:  R_X86_64_64  .rodata.str1.1+0xa4
// 4fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000500:  R_X86_64_64  .rodata.str1.1+0x39
// 508: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000050a:  R_X86_64_64  __assert_fail
// 512: ba 59 00 00 00                movl    $0x59, %edx
// 517: ff d0                         callq   *%rax
// 519: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000051b:  R_X86_64_64  .rodata.str1.1+0x91
// 523: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000525:  R_X86_64_64  .rodata.str1.1+0xa4
// 52d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000052f:  R_X86_64_64  .rodata.str1.1+0x39
// 537: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000539:  R_X86_64_64  __assert_fail
// 541: ba 5b 00 00 00                movl    $0x5b, %edx
// 546: ff d0                         callq   *%rax
// 548: 
static const unsigned char _LOAD_SUPER_ATTR_METHOD_code_body[1353] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x84, 0x81, 0x03, 0x00, 0x00, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xe8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x2e, 0x75, 0x11, 0x4d, 0x8b, 0x6f, 0xf0, 0x49, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x4b, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x02, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xc6, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x0f, 0x03, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf6, 0xc1, 0xee, 0x02, 0x0f, 0x88, 0x28, 0x03, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf1, 0x0f, 0x84, 0x44, 0x03, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf1, 0x0f, 0x84, 0x60, 0x03, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe9, 0x02, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x6f, 0x03, 0x00, 0x00, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x04, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6f, 0xf8, 0x49, 0x8d, 0x6f, 0xf0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x75, 0x58, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x31, 0xe4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x06, 0x4c, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x51, 0x48, 0x63, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc7, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x85, 0xff, 0x0f, 0x8e, 0x7e, 0x01, 0x00, 0x00, 0x49, 0x29, 0xc5, 0x49, 0xc1, 0xed, 0x03, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0x9d, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc5, 0x48, 0xc1, 0xed, 0x03, 0x85, 0xed, 0x0f, 0x8e, 0xbd, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x43, 0x48, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x14, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x0f, 0x06, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x57, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _LOAD_SUPER_ATTR_METHOD_code_holes[72] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x313, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xd8},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x388, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x135},
    {0x392, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x3a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x3d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x16b},
    {0x3dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17c},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b1},
    {0x3f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x401, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1db},
    {0x40b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17c},
    {0x415, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b1},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x430, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x22a},
    {0x43a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1fa},
    {0x444, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x246},
    {0x44e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x45f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x265},
    {0x469, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1fa},
    {0x473, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x246},
    {0x47d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x48e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e2},
    {0x498, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17c},
    {0x4a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b1},
    {0x4ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x4bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x91},
    {0x4c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x4d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x4db, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x4ec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x91},
    {0x4f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x500, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x50a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x51b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x91},
    {0x525, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa4},
    {0x52f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x539, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg & 1\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 281: 00 00 00 00 00 00 00
static const unsigned char _LOAD_SUPER_ATTR_METHOD_data_body[649] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x26, 0x20, 0x31, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _MAKE_CELL
// 
// /tmp/tmp3v1aptj0/_MAKE_CELL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 7c c7 48                movq    0x48(%rdi,%rax,8), %rdi
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  PyCell_New
// 2d: ff d0                         callq   *%rax
// 2f: 48 85 c0                      testq   %rax, %rax
// 32: 74 2b                         je      0x5f <_JIT_ENTRY+0x5f>
// 34: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000036:  R_X86_64_64  _JIT_OPARG
// 3e: 0f b7 c9                      movzwl  %cx, %ecx
// 41: 4d 8b 64 ce 48                movq    0x48(%r14,%rcx,8), %r12
// 46: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// 4b: 4d 85 e4                      testq   %r12, %r12
// 4e: 74 73                         je      0xc3 <_JIT_ENTRY+0xc3>
// 50: 49 8b 04 24                   movq    (%r12), %rax
// 54: 48 85 c0                      testq   %rax, %rax
// 57: 7e 23                         jle     0x7c <_JIT_ENTRY+0x7c>
// 59: 85 c0                         testl   %eax, %eax
// 5b: 79 45                         jns     0xa2 <_JIT_ENTRY+0xa2>
// 5d: eb 64                         jmp     0xc3 <_JIT_ENTRY+0xc3>
// 5f: 4c 29 f3                      subq    %r14, %rbx
// 62: 48 83 c3 b8                   addq    $-0x48, %rbx
// 66: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 6e: 31 c0                         xorl    %eax, %eax
// 70: 48 83 c4 08                   addq    $0x8, %rsp
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5e                         popq    %r14
// 79: 41 5f                         popq    %r15
// 7b: c3                            retq
// 7c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007e:  R_X86_64_64  .rodata.str1.1
// 86: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000088:  R_X86_64_64  _Py_NegativeRefcount
// 90: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 95: 4c 89 e2                      movq    %r12, %rdx
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 04 24                   movq    (%r12), %rax
// 9e: 85 c0                         testl   %eax, %eax
// a0: 78 21                         js      0xc3 <_JIT_ENTRY+0xc3>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ac: ff d0                         callq   *%rax
// ae: 49 ff 0c 24                   decq    (%r12)
// b2: 75 0f                         jne     0xc3 <_JIT_ENTRY+0xc3>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_Dealloc
// be: 4c 89 e7                      movq    %r12, %rdi
// c1: ff d0                         callq   *%rax
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _JIT_CONTINUE
// cd: 4c 89 f7                      movq    %r14, %rdi
// d0: 48 89 de                      movq    %rbx, %rsi
// d3: 4c 89 fa                      movq    %r15, %rdx
// d6: 48 83 c4 08                   addq    $0x8, %rsp
// da: 5b                            popq    %rbx
// db: 41 5c                         popq    %r12
// dd: 41 5e                         popq    %r14
// df: 41 5f                         popq    %r15
// e1: ff e0                         jmpq    *%rax
// e3: 
static const unsigned char _MAKE_CELL_code_body[228] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x7c, 0xc7, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x73, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x23, 0x85, 0xc0, 0x79, 0x45, 0xeb, 0x64, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _MAKE_CELL_code_holes[9] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00'
// 30: 
static const unsigned char _MAKE_CELL_data_body[49] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _MAKE_CELL_data_holes[1];

// _MAKE_FUNCTION
// 
// /tmp/tmp3v1aptj0/_MAKE_FUNCTION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 16: 48 8b 77 18                   movq    0x18(%rdi), %rsi
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  PyFunction_New
// 24: 4c 89 e7                      movq    %r12, %rdi
// 27: ff d0                         callq   *%rax
// 29: 49 89 c5                      movq    %rax, %r13
// 2c: 49 8b 04 24                   movq    (%r12), %rax
// 30: 48 85 c0                      testq   %rax, %rax
// 33: 7e 06                         jle     0x3b <_JIT_ENTRY+0x3b>
// 35: 85 c0                         testl   %eax, %eax
// 37: 79 28                         jns     0x61 <_JIT_ENTRY+0x61>
// 39: eb 38                         jmp     0x73 <_JIT_ENTRY+0x73>
// 3b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000003d:  R_X86_64_64  .rodata.str1.1
// 45: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000047:  R_X86_64_64  _Py_NegativeRefcount
// 4f: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 54: 4c 89 e2                      movq    %r12, %rdx
// 57: ff d0                         callq   *%rax
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 85 c0                         testl   %eax, %eax
// 5f: 78 12                         js      0x73 <_JIT_ENTRY+0x73>
// 61: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000063:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 6b: ff d0                         callq   *%rax
// 6d: 49 ff 0c 24                   decq    (%r12)
// 71: 74 3b                         je      0xae <_JIT_ENTRY+0xae>
// 73: 4d 85 ed                      testq   %r13, %r13
// 76: 74 4a                         je      0xc2 <_JIT_ENTRY+0xc2>
// 78: 41 8b 74 24 5c                movl    0x5c(%r12), %esi
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _PyFunction_SetVersion
// 87: 4c 89 ef                      movq    %r13, %rdi
// 8a: ff d0                         callq   *%rax
// 8c: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _JIT_CONTINUE
// 9a: 4c 89 f7                      movq    %r14, %rdi
// 9d: 48 89 de                      movq    %rbx, %rsi
// a0: 4c 89 fa                      movq    %r15, %rdx
// a3: 5b                            popq    %rbx
// a4: 41 5c                         popq    %r12
// a6: 41 5d                         popq    %r13
// a8: 41 5e                         popq    %r14
// aa: 41 5f                         popq    %r15
// ac: ff e0                         jmpq    *%rax
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_Dealloc
// b8: 4c 89 e7                      movq    %r12, %rdi
// bb: ff d0                         callq   *%rax
// bd: 4d 85 ed                      testq   %r13, %r13
// c0: 75 b6                         jne     0x78 <_JIT_ENTRY+0x78>
// c2: 4c 29 f3                      subq    %r14, %rbx
// c5: 48 83 c3 b8                   addq    $-0x48, %rbx
// c9: 48 c1 eb 03                   shrq    $0x3, %rbx
// cd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d1: 31 c0                         xorl    %eax, %eax
// d3: 5b                            popq    %rbx
// d4: 41 5c                         popq    %r12
// d6: 41 5d                         popq    %r13
// d8: 41 5e                         popq    %r14
// da: 41 5f                         popq    %r15
// dc: c3                            retq
// dd: 
static const unsigned char _MAKE_FUNCTION_code_body[222] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x77, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x4d, 0x85, 0xed, 0x74, 0x4a, 0x41, 0x8b, 0x74, 0x24, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xb6, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _MAKE_FUNCTION_code_holes[8] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x3d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x47, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x63, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _MAKE_FUNCTION_data_holes[1];

// _MAP_ADD
// 
// /tmp/tmp3v1aptj0/_MAP_ADD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 fb                      movq    %rdi, %rbx
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_OPARG
// 15: 0f b7 c0                      movzwl  %ax, %eax
// 18: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1d: 29 c1                         subl    %eax, %ecx
// 1f: 48 63 c1                      movslq  %ecx, %rax
// 22: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyDict_Type
// 30: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 34: 0f 85 b0 00 00 00             jne     0xea <_JIT_ENTRY+0xea>
// 3a: 49 89 d7                      movq    %rdx, %r15
// 3d: 49 89 f4                      movq    %rsi, %r12
// 40: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 44: 48 8b 76 f0                   movq    -0x10(%rsi), %rsi
// 48: 49 8b 54 24 f8                movq    -0x8(%r12), %rdx
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _PyDict_SetItem_Take2
// 57: ff d0                         callq   *%rax
// 59: 85 c0                         testl   %eax, %eax
// 5b: 4d 0f 45 f4                   cmovneq %r12, %r14
// 5f: 74 69                         je      0xca <_JIT_ENTRY+0xca>
// 61: 48 8b 03                      movq    (%rbx), %rax
// 64: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000066:  R_X86_64_64  PyCode_Type
// 6e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 72: 0f 85 a1 00 00 00             jne     0x119 <_JIT_ENTRY+0x119>
// 78: 48 63 40 48                   movslq  0x48(%rax), %rax
// 7c: 48 8d 0c c3                   leaq    (%rbx,%rax,8), %rcx
// 80: 48 83 c1 48                   addq    $0x48, %rcx
// 84: 4c 89 f0                      movq    %r14, %rax
// 87: 48 29 c8                      subq    %rcx, %rax
// 8a: 48 89 c1                      movq    %rax, %rcx
// 8d: 48 c1 e9 03                   shrq    $0x3, %rcx
// 91: 85 c9                         testl   %ecx, %ecx
// 93: 0f 8e af 00 00 00             jle     0x148 <_JIT_ENTRY+0x148>
// 99: 48 83 c0 f8                   addq    $-0x8, %rax
// 9d: 48 c1 e8 03                   shrq    $0x3, %rax
// a1: 85 c0                         testl   %eax, %eax
// a3: 0f 8e ce 00 00 00             jle     0x177 <_JIT_ENTRY+0x177>
// a9: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// ad: 49 29 c6                      subq    %rax, %r14
// b0: 49 83 c6 f0                   addq    $-0x10, %r14
// b4: 49 c1 ee 03                   shrq    $0x3, %r14
// b8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// bc: 31 c0                         xorl    %eax, %eax
// be: 48 83 c4 08                   addq    $0x8, %rsp
// c2: 5b                            popq    %rbx
// c3: 41 5c                         popq    %r12
// c5: 41 5e                         popq    %r14
// c7: 41 5f                         popq    %r15
// c9: c3                            retq
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _JIT_CONTINUE
// d4: 48 89 df                      movq    %rbx, %rdi
// d7: 4c 89 f6                      movq    %r14, %rsi
// da: 4c 89 fa                      movq    %r15, %rdx
// dd: 48 83 c4 08                   addq    $0x8, %rsp
// e1: 5b                            popq    %rbx
// e2: 41 5c                         popq    %r12
// e4: 41 5e                         popq    %r14
// e6: 41 5f                         popq    %r15
// e8: ff e0                         jmpq    *%rax
// ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ec:  R_X86_64_64  .rodata.str1.1+0x87
// f4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1
// fe: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000100:  R_X86_64_64  .rodata.str1.1+0x39
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  __assert_fail
// 112: ba e3 05 00 00                movl    $0x5e3, %edx            # imm = 0x5E3
// 117: ff d0                         callq   *%rax
// 119: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011b:  R_X86_64_64  .rodata.str1.1+0xe6
// 123: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000125:  R_X86_64_64  .rodata.str1.1+0x104
// 12d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000012f:  R_X86_64_64  .rodata.str1.1+0x143
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  __assert_fail
// 141: ba 4d 00 00 00                movl    $0x4d, %edx
// 146: ff d0                         callq   *%rax
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1+0x9f
// 152: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000154:  R_X86_64_64  .rodata.str1.1+0xb2
// 15c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015e:  R_X86_64_64  .rodata.str1.1+0x39
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  __assert_fail
// 170: ba 59 00 00 00                movl    $0x59, %edx
// 175: ff d0                         callq   *%rax
// 177: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000179:  R_X86_64_64  .rodata.str1.1+0x9f
// 181: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1+0xb2
// 18b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018d:  R_X86_64_64  .rodata.str1.1+0x39
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  __assert_fail
// 19f: ba 5b 00 00 00                movl    $0x5b, %edx
// 1a4: ff d0                         callq   *%rax
// 1a6: 
static const unsigned char _MAP_ADD_code_body[423] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0x8b, 0x76, 0xf0, 0x49, 0x8b, 0x54, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x45, 0xf4, 0x74, 0x69, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xa1, 0x00, 0x00, 0x00, 0x48, 0x63, 0x40, 0x48, 0x48, 0x8d, 0x0c, 0xc3, 0x48, 0x83, 0xc1, 0x48, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xc8, 0x48, 0x89, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xaf, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0xc1, 0xe8, 0x03, 0x85, 0xc0, 0x0f, 0x8e, 0xce, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x43, 0x48, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xe3, 0x05, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _MAP_ADD_code_holes[22] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe6},
    {0x125, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x104},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x143},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9f},
    {0x154, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb2},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9f},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb2},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyDict_CheckExact(dict)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 179: 00 00 00 00 00 00 00
static const unsigned char _MAP_ADD_data_body[385] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x28, 0x64, 0x69, 0x63, 0x74, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _MAP_ADD_data_holes[1];

// _MATCH_CLASS
// 
// /tmp/tmp3v1aptj0/_MATCH_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 3c 24                   movq    %rdi, (%rsp)
// f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  PyTuple_Type
// 1d: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 21: 0f 85 38 02 00 00             jne     0x25f <_JIT_ENTRY+0x25f>
// 27: 49 89 d7                      movq    %rdx, %r15
// 2a: 49 89 f6                      movq    %rsi, %r14
// 2d: 48 8b 5e e8                   movq    -0x18(%rsi), %rbx
// 31: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 35: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000037:  R_X86_64_64  _JIT_OPARG
// 3f: 0f b7 c8                      movzwl  %ax, %ecx
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  _PyEval_MatchClass
// 4c: 48 89 d7                      movq    %rdx, %rdi
// 4f: 48 89 de                      movq    %rbx, %rsi
// 52: 48 89 ea                      movq    %rbp, %rdx
// 55: 4d 89 e8                      movq    %r13, %r8
// 58: ff d0                         callq   *%rax
// 5a: 49 89 c4                      movq    %rax, %r12
// 5d: 48 8b 03                      movq    (%rbx), %rax
// 60: 48 85 c0                      testq   %rax, %rax
// 63: 7e 06                         jle     0x6b <_JIT_ENTRY+0x6b>
// 65: 85 c0                         testl   %eax, %eax
// 67: 79 27                         jns     0x90 <_JIT_ENTRY+0x90>
// 69: eb 36                         jmp     0xa1 <_JIT_ENTRY+0xa1>
// 6b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006d:  R_X86_64_64  .rodata.str1.1
// 75: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000077:  R_X86_64_64  _Py_NegativeRefcount
// 7f: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 84: 48 89 da                      movq    %rbx, %rdx
// 87: ff d0                         callq   *%rax
// 89: 48 8b 03                      movq    (%rbx), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 11                         js      0xa1 <_JIT_ENTRY+0xa1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 48 ff 0b                      decq    (%rbx)
// 9f: 74 0f                         je      0xb0 <_JIT_ENTRY+0xb0>
// a1: 48 8b 45 00                   movq    (%rbp), %rax
// a5: 48 85 c0                      testq   %rax, %rax
// a8: 7e 1e                         jle     0xc8 <_JIT_ENTRY+0xc8>
// aa: 85 c0                         testl   %eax, %eax
// ac: 79 40                         jns     0xee <_JIT_ENTRY+0xee>
// ae: eb 50                         jmp     0x100 <_JIT_ENTRY+0x100>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 48 89 df                      movq    %rbx, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 8b 45 00                   movq    (%rbp), %rax
// c3: 48 85 c0                      testq   %rax, %rax
// c6: 7f e2                         jg      0xaa <_JIT_ENTRY+0xaa>
// c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ca:  R_X86_64_64  .rodata.str1.1
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _Py_NegativeRefcount
// dc: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// e1: 48 89 ea                      movq    %rbp, %rdx
// e4: ff d0                         callq   *%rax
// e6: 48 8b 45 00                   movq    (%rbp), %rax
// ea: 85 c0                         testl   %eax, %eax
// ec: 78 12                         js      0x100 <_JIT_ENTRY+0x100>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f8: ff d0                         callq   *%rax
// fa: 48 ff 4d 00                   decq    (%rbp)
// fe: 74 0f                         je      0x10f <_JIT_ENTRY+0x10f>
// 100: 49 8b 45 00                   movq    (%r13), %rax
// 104: 48 85 c0                      testq   %rax, %rax
// 107: 7e 1e                         jle     0x127 <_JIT_ENTRY+0x127>
// 109: 85 c0                         testl   %eax, %eax
// 10b: 79 40                         jns     0x14d <_JIT_ENTRY+0x14d>
// 10d: eb 50                         jmp     0x15f <_JIT_ENTRY+0x15f>
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_Dealloc
// 119: 48 89 ef                      movq    %rbp, %rdi
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 45 00                   movq    (%r13), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7f e2                         jg      0x109 <_JIT_ENTRY+0x109>
// 127: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000129:  R_X86_64_64  .rodata.str1.1
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_NegativeRefcount
// 13b: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 140: 4c 89 ea                      movq    %r13, %rdx
// 143: ff d0                         callq   *%rax
// 145: 49 8b 45 00                   movq    (%r13), %rax
// 149: 85 c0                         testl   %eax, %eax
// 14b: 78 12                         js      0x15f <_JIT_ENTRY+0x15f>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 157: ff d0                         callq   *%rax
// 159: 49 ff 4d 00                   decq    (%r13)
// 15d: 74 46                         je      0x1a5 <_JIT_ENTRY+0x1a5>
// 15f: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 163: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 167: 4d 85 e4                      testq   %r12, %r12
// 16a: 74 55                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  PyTuple_Type
// 176: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 17b: 0f 85 0d 01 00 00             jne     0x28e <_JIT_ENTRY+0x28e>
// 181: 4c 89 20                      movq    %r12, (%rax)
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _JIT_CONTINUE
// 18e: 48 8b 3c 24                   movq    (%rsp), %rdi
// 192: 4c 89 fa                      movq    %r15, %rdx
// 195: 48 83 c4 08                   addq    $0x8, %rsp
// 199: 5b                            popq    %rbx
// 19a: 41 5c                         popq    %r12
// 19c: 41 5d                         popq    %r13
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: 5d                            popq    %rbp
// 1a3: ff e0                         jmpq    *%rax
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_Dealloc
// 1af: 4c 89 ef                      movq    %r13, %rdi
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 8d 76 f0                   leaq    -0x10(%r14), %rsi
// 1b8: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 1bc: 4d 85 e4                      testq   %r12, %r12
// 1bf: 75 ab                         jne     0x16c <_JIT_ENTRY+0x16c>
// 1c1: 4d 85 ff                      testq   %r15, %r15
// 1c4: 0f 84 f3 00 00 00             je      0x2bd <_JIT_ENTRY+0x2bd>
// 1ca: 49 8b 4f 68                   movq    0x68(%r15), %rcx
// 1ce: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001d0:  R_X86_64_64  _Py_NoneStruct
// 1d8: 48 85 c9                      testq   %rcx, %rcx
// 1db: 74 a4                         je      0x181 <_JIT_ENTRY+0x181>
// 1dd: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 1e2: 74 9d                         je      0x181 <_JIT_ENTRY+0x181>
// 1e4: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e8: 48 8b 0f                      movq    (%rdi), %rcx
// 1eb: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ed:  R_X86_64_64  PyCode_Type
// 1f5: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 1f9: 0f 85 ed 00 00 00             jne     0x2ec <_JIT_ENTRY+0x2ec>
// 1ff: 48 63 49 48                   movslq  0x48(%rcx), %rcx
// 203: 48 8d 0c cf                   leaq    (%rdi,%rcx,8), %rcx
// 207: 48 83 c1 48                   addq    $0x48, %rcx
// 20b: 4c 89 f2                      movq    %r14, %rdx
// 20e: 48 29 ca                      subq    %rcx, %rdx
// 211: 48 c1 ea 03                   shrq    $0x3, %rdx
// 215: 85 d2                         testl   %edx, %edx
// 217: 0f 8e fe 00 00 00             jle     0x31b <_JIT_ENTRY+0x31b>
// 21d: 49 83 c6 f8                   addq    $-0x8, %r14
// 221: 49 29 ce                      subq    %rcx, %r14
// 224: 49 c1 ee 03                   shrq    $0x3, %r14
// 228: 45 85 f6                      testl   %r14d, %r14d
// 22b: 0f 8e 19 01 00 00             jle     0x34a <_JIT_ENTRY+0x34a>
// 231: 48 29 ce                      subq    %rcx, %rsi
// 234: 48 c1 ee 03                   shrq    $0x3, %rsi
// 238: 85 f6                         testl   %esi, %esi
// 23a: 0f 8e 39 01 00 00             jle     0x379 <_JIT_ENTRY+0x379>
// 240: 48 8d 4f 48                   leaq    0x48(%rdi), %rcx
// 244: 48 29 c8                      subq    %rcx, %rax
// 247: 48 c1 e8 03                   shrq    $0x3, %rax
// 24b: 89 47 40                      movl    %eax, 0x40(%rdi)
// 24e: 31 c0                         xorl    %eax, %eax
// 250: 48 83 c4 08                   addq    $0x8, %rsp
// 254: 5b                            popq    %rbx
// 255: 41 5c                         popq    %r12
// 257: 41 5d                         popq    %r13
// 259: 41 5e                         popq    %r14
// 25b: 41 5f                         popq    %r15
// 25d: 5d                            popq    %rbp
// 25e: c3                            retq
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1+0x87
// 269: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000275:  R_X86_64_64  .rodata.str1.1+0x39
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  __assert_fail
// 287: ba 0e 08 00 00                movl    $0x80e, %edx            # imm = 0x80E
// 28c: ff d0                         callq   *%rax
// 28e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000290:  R_X86_64_64  .rodata.str1.1+0xa1
// 298: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000029a:  R_X86_64_64  .rodata.str1.1
// 2a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a4:  R_X86_64_64  .rodata.str1.1+0x39
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  __assert_fail
// 2b6: ba 14 08 00 00                movl    $0x814, %edx            # imm = 0x814
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bf:  R_X86_64_64  .rodata.str1.1+0x195
// 2c7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002c9:  R_X86_64_64  .rodata.str1.1+0x1a4
// 2d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1+0x1e6
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  __assert_fail
// 2e5: ba 4b 00 00 00                movl    $0x4b, %edx
// 2ea: ff d0                         callq   *%rax
// 2ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1+0x102
// 2f6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f8:  R_X86_64_64  .rodata.str1.1+0x120
// 300: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000302:  R_X86_64_64  .rodata.str1.1+0x15f
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  __assert_fail
// 314: ba 4d 00 00 00                movl    $0x4d, %edx
// 319: ff d0                         callq   *%rax
// 31b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031d:  R_X86_64_64  .rodata.str1.1+0xbb
// 325: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000327:  R_X86_64_64  .rodata.str1.1+0xce
// 32f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000331:  R_X86_64_64  .rodata.str1.1+0x39
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  __assert_fail
// 343: ba 57 00 00 00                movl    $0x57, %edx
// 348: ff d0                         callq   *%rax
// 34a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000034c:  R_X86_64_64  .rodata.str1.1+0xbb
// 354: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000356:  R_X86_64_64  .rodata.str1.1+0xce
// 35e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000360:  R_X86_64_64  .rodata.str1.1+0x39
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  __assert_fail
// 372: ba 59 00 00 00                movl    $0x59, %edx
// 377: ff d0                         callq   *%rax
// 379: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000037b:  R_X86_64_64  .rodata.str1.1+0xbb
// 383: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000385:  R_X86_64_64  .rodata.str1.1+0xce
// 38d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000038f:  R_X86_64_64  .rodata.str1.1+0x39
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  __assert_fail
// 3a1: ba 5b 00 00 00                movl    $0x5b, %edx
// 3a6: ff d0                         callq   *%rax
// 3a8: 
static const unsigned char _MATCH_CLASS_code_body[937] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x38, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x8b, 0x5e, 0xe8, 0x48, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x48, 0x89, 0xde, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x46, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x55, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0x0d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf0, 0x49, 0x8d, 0x46, 0xe8, 0x4d, 0x85, 0xe4, 0x75, 0xab, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4f, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xa4, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0x9d, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x0f, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x0f, 0x85, 0xed, 0x00, 0x00, 0x00, 0x48, 0x63, 0x49, 0x48, 0x48, 0x8d, 0x0c, 0xcf, 0x48, 0x83, 0xc1, 0x48, 0x4c, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x48, 0xc1, 0xea, 0x03, 0x85, 0xd2, 0x0f, 0x8e, 0xfe, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xce, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0x19, 0x01, 0x00, 0x00, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x0f, 0x8e, 0x39, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x4f, 0x48, 0x48, 0x29, 0xc8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x47, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x0e, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x14, 0x08, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x57, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _MATCH_CLASS_code_holes[48] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa1},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x195},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a4},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e6},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x102},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x120},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15f},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbb},
    {0x327, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x331, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbb},
    {0x356, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x360, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbb},
    {0x385, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyTuple_CheckExact(names)\x00PyTuple_CheckExact(attrs)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00tstate != NULL\x00/home/jglass/Documents/cpython/Include/internal/pycore_pyerrors.h\x00PyObject *_PyErr_Occurred(PyThreadState *)\x00'
// 211: 00 00 00 00 00 00 00
static const unsigned char _MATCH_CLASS_data_body[537] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x28, 0x61, 0x74, 0x74, 0x72, 0x73, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x79, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x45, 0x72, 0x72, 0x5f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x28, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _MATCH_CLASS_data_holes[1];

// _MATCH_KEYS
// 
// /tmp/tmp3v1aptj0/_MATCH_KEYS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 49 89 d7                      movq    %rdx, %r15
// 8: 48 89 f3                      movq    %rsi, %rbx
// b: 49 89 fe                      movq    %rdi, %r14
// e: 48 8b 76 f0                   movq    -0x10(%rsi), %rsi
// 12: 48 8b 53 f8                   movq    -0x8(%rbx), %rdx
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  _PyEval_MatchKeys
// 20: 4c 89 ff                      movq    %r15, %rdi
// 23: ff d0                         callq   *%rax
// 25: 48 85 c0                      testq   %rax, %rax
// 28: 74 21                         je      0x4b <_JIT_ENTRY+0x4b>
// 2a: 48 89 03                      movq    %rax, (%rbx)
// 2d: 48 83 c3 08                   addq    $0x8, %rbx
// 31: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000033:  R_X86_64_64  _JIT_CONTINUE
// 3b: 4c 89 f7                      movq    %r14, %rdi
// 3e: 48 89 de                      movq    %rbx, %rsi
// 41: 4c 89 fa                      movq    %r15, %rdx
// 44: 5b                            popq    %rbx
// 45: 41 5e                         popq    %r14
// 47: 41 5f                         popq    %r15
// 49: ff e0                         jmpq    *%rax
// 4b: 4c 29 f3                      subq    %r14, %rbx
// 4e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 52: 48 c1 eb 03                   shrq    $0x3, %rbx
// 56: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 5a: 31 c0                         xorl    %eax, %eax
// 5c: 5b                            popq    %rbx
// 5d: 41 5e                         popq    %r14
// 5f: 41 5f                         popq    %r15
// 61: c3                            retq
// 62: 
static const unsigned char _MATCH_KEYS_code_body[99] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x76, 0xf0, 0x48, 0x8b, 0x53, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _MATCH_KEYS_code_holes[3] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x33, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _MATCH_KEYS_data_body[1];
static const Hole _MATCH_KEYS_data_holes[1];

// _MATCH_MAPPING
// 
// /tmp/tmp3v1aptj0/_MATCH_MAPPING.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 4: 48 8b 40 08                   movq    0x8(%rax), %rax
// 8: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _Py_FalseStruct
// 19: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001b:  R_X86_64_64  _Py_TrueStruct
// 23: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 27: 48 89 0e                      movq    %rcx, (%rsi)
// 2a: 48 83 c6 08                   addq    $0x8, %rsi
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _JIT_CONTINUE
// 38: ff e0                         jmpq    *%rax
// 3a: 
static const unsigned char _MATCH_MAPPING_code_body[59] = {0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0e, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _MATCH_MAPPING_code_holes[4] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _MATCH_MAPPING_data_body[1];
static const Hole _MATCH_MAPPING_data_holes[1];

// _MATCH_SEQUENCE
// 
// /tmp/tmp3v1aptj0/_MATCH_SEQUENCE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 4: 48 8b 40 08                   movq    0x8(%rax), %rax
// 8: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000011:  R_X86_64_64  _Py_FalseStruct
// 19: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001b:  R_X86_64_64  _Py_TrueStruct
// 23: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 27: 48 89 0e                      movq    %rcx, (%rsi)
// 2a: 48 83 c6 08                   addq    $0x8, %rsi
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _JIT_CONTINUE
// 38: ff e0                         jmpq    *%rax
// 3a: 
static const unsigned char _MATCH_SEQUENCE_code_body[59] = {0x48, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0e, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _MATCH_SEQUENCE_code_holes[4] = {
    {0x11, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _MATCH_SEQUENCE_data_body[1];
static const Hole _MATCH_SEQUENCE_data_holes[1];

// _NOP
// 
// /tmp/tmp3v1aptj0/_NOP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_CONTINUE
// a: ff e0                         jmpq    *%rax
// c: 
static const unsigned char _NOP_code_body[13] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _NOP_code_holes[2] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _NOP_data_body[1];
static const Hole _NOP_data_holes[1];

// _POP_EXCEPT
// 
// /tmp/tmp3v1aptj0/_POP_EXCEPT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 d3                      movq    %rdx, %rbx
// b: 49 89 f6                      movq    %rsi, %r14
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 15: 49 83 c6 f8                   addq    $-0x8, %r14
// 19: 48 8b 4a 70                   movq    0x70(%rdx), %rcx
// 1d: 4c 8b 21                      movq    (%rcx), %r12
// 20: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000022:  R_X86_64_64  _Py_NoneStruct
// 2a: 31 f6                         xorl    %esi, %esi
// 2c: 48 39 d0                      cmpq    %rdx, %rax
// 2f: 48 0f 45 f0                   cmovneq %rax, %rsi
// 33: 48 89 31                      movq    %rsi, (%rcx)
// 36: 4d 85 e4                      testq   %r12, %r12
// 39: 74 56                         je      0x91 <_JIT_ENTRY+0x91>
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 28                         jns     0x70 <_JIT_ENTRY+0x70>
// 48: eb 47                         jmp     0x91 <_JIT_ENTRY+0x91>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 63: 4c 89 e2                      movq    %r12, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 04 24                   movq    (%r12), %rax
// 6c: 85 c0                         testl   %eax, %eax
// 6e: 78 21                         js      0x91 <_JIT_ENTRY+0x91>
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7a: ff d0                         callq   *%rax
// 7c: 49 ff 0c 24                   decq    (%r12)
// 80: 75 0f                         jne     0x91 <_JIT_ENTRY+0x91>
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_Dealloc
// 8c: 4c 89 e7                      movq    %r12, %rdi
// 8f: ff d0                         callq   *%rax
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _JIT_CONTINUE
// 9b: 4c 89 ff                      movq    %r15, %rdi
// 9e: 4c 89 f6                      movq    %r14, %rsi
// a1: 48 89 da                      movq    %rbx, %rdx
// a4: 48 83 c4 08                   addq    $0x8, %rsp
// a8: 5b                            popq    %rbx
// a9: 41 5c                         popq    %r12
// ab: 41 5e                         popq    %r14
// ad: 41 5f                         popq    %r15
// af: ff e0                         jmpq    *%rax
// b1: 
static const unsigned char _POP_EXCEPT_code_body[178] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0x8b, 0x46, 0xf8, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x4a, 0x70, 0x4c, 0x8b, 0x21, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _POP_EXCEPT_code_holes[7] = {
    {0x22, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00'
// 30: 
static const unsigned char _POP_EXCEPT_data_body[49] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _POP_EXCEPT_data_holes[1];

// _POP_FRAME
// 
// /tmp/tmp3v1aptj0/_POP_FRAME.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 48 89 d3                      movq    %rdx, %rbx
// 8: 48 89 f8                      movq    %rdi, %rax
// b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// f: 48 83 c6 f8                   addq    $-0x8, %rsi
// 13: 48 8d 4f 48                   leaq    0x48(%rdi), %rcx
// 17: 48 89 f2                      movq    %rsi, %rdx
// 1a: 48 29 ca                      subq    %rcx, %rdx
// 1d: 48 c1 ea 03                   shrq    $0x3, %rdx
// 21: 89 57 40                      movl    %edx, 0x40(%rdi)
// 24: 48 8b 17                      movq    (%rdi), %rdx
// 27: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000029:  R_X86_64_64  PyCode_Type
// 31: 48 39 7a 08                   cmpq    %rdi, 0x8(%rdx)
// 35: 75 5f                         jne     0x96 <_JIT_ENTRY+0x96>
// 37: 8b 52 48                      movl    0x48(%rdx), %edx
// 3a: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 3e: 48 29 ce                      subq    %rcx, %rsi
// 41: 48 c1 ee 03                   shrq    $0x3, %rsi
// 45: 85 f6                         testl   %esi, %esi
// 47: 75 7c                         jne     0xc5 <_JIT_ENTRY+0xc5>
// 49: ff 43 24                      incl    0x24(%rbx)
// 4c: 4c 8b 70 08                   movq    0x8(%rax), %r14
// 50: 4c 89 73 40                   movq    %r14, 0x40(%rbx)
// 54: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000056:  R_X86_64_64  _PyEval_FrameClearAndPop
// 5e: 48 89 df                      movq    %rbx, %rdi
// 61: 48 89 c6                      movq    %rax, %rsi
// 64: ff d1                         callq   *%rcx
// 66: 49 63 46 40                   movslq  0x40(%r14), %rax
// 6a: 4d 89 7c c6 48                movq    %r15, 0x48(%r14,%rax,8)
// 6f: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 73: 48 83 c6 50                   addq    $0x50, %rsi
// 77: 41 c7 46 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r14) # imm = 0xFFFFFFFF
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _JIT_CONTINUE
// 89: 4c 89 f7                      movq    %r14, %rdi
// 8c: 48 89 da                      movq    %rbx, %rdx
// 8f: 5b                            popq    %rbx
// 90: 41 5e                         popq    %r14
// 92: 41 5f                         popq    %r15
// 94: ff e0                         jmpq    *%rax
// 96: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1+0x8f
// a0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000a2:  R_X86_64_64  .rodata.str1.1+0xad
// aa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ac:  R_X86_64_64  .rodata.str1.1+0xec
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  __assert_fail
// be: ba 4d 00 00 00                movl    $0x4d, %edx
// c3: ff d0                         callq   *%rax
// c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c7:  R_X86_64_64  .rodata.str1.1+0x87
// cf: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000d1:  R_X86_64_64  .rodata.str1.1
// d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000db:  R_X86_64_64  .rodata.str1.1+0x39
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  __assert_fail
// ed: ba 9d 02 00 00                movl    $0x29d, %edx            # imm = 0x29D
// f2: ff d0                         callq   *%rax
// f4: 
static const unsigned char _POP_FRAME_code_body[245] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x48, 0x89, 0xd3, 0x48, 0x89, 0xf8, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x8d, 0x4f, 0x48, 0x48, 0x89, 0xf2, 0x48, 0x29, 0xca, 0x48, 0xc1, 0xea, 0x03, 0x89, 0x57, 0x40, 0x48, 0x8b, 0x17, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x7a, 0x08, 0x75, 0x5f, 0x8b, 0x52, 0x48, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xee, 0x03, 0x85, 0xf6, 0x75, 0x7c, 0xff, 0x43, 0x24, 0x4c, 0x8b, 0x70, 0x08, 0x4c, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xc6, 0xff, 0xd1, 0x49, 0x63, 0x46, 0x40, 0x4d, 0x89, 0x7c, 0xc6, 0x48, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x46, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x9d, 0x02, 0x00, 0x00, 0xff, 0xd0};
static const Hole _POP_FRAME_code_holes[12] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x8f},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xad},
    {0xac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00EMPTY()\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 122: 00 00 00 00 00 00
static const unsigned char _POP_FRAME_data_body[297] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x28, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _POP_FRAME_data_holes[1];

// _POP_TOP
// 
// /tmp/tmp3v1aptj0/_POP_TOP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 d3                      movq    %rdx, %rbx
// b: 49 89 f6                      movq    %rsi, %r14
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 49 8b 04 24                   movq    (%r12), %rax
// 19: 48 85 c0                      testq   %rax, %rax
// 1c: 7e 0a                         jle     0x28 <_JIT_ENTRY+0x28>
// 1e: 49 83 c6 f8                   addq    $-0x8, %r14
// 22: 85 c0                         testl   %eax, %eax
// 24: 79 2c                         jns     0x52 <_JIT_ENTRY+0x52>
// 26: eb 4b                         jmp     0x73 <_JIT_ENTRY+0x73>
// 28: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000002a:  R_X86_64_64  .rodata.str1.1
// 32: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000034:  R_X86_64_64  _Py_NegativeRefcount
// 3c: be 54 00 00 00                movl    $0x54, %esi
// 41: 4c 89 e2                      movq    %r12, %rdx
// 44: ff d0                         callq   *%rax
// 46: 49 8b 04 24                   movq    (%r12), %rax
// 4a: 49 83 c6 f8                   addq    $-0x8, %r14
// 4e: 85 c0                         testl   %eax, %eax
// 50: 78 21                         js      0x73 <_JIT_ENTRY+0x73>
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 5c: ff d0                         callq   *%rax
// 5e: 49 ff 0c 24                   decq    (%r12)
// 62: 75 0f                         jne     0x73 <_JIT_ENTRY+0x73>
// 64: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000066:  R_X86_64_64  _Py_Dealloc
// 6e: 4c 89 e7                      movq    %r12, %rdi
// 71: ff d0                         callq   *%rax
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _JIT_CONTINUE
// 7d: 4c 89 ff                      movq    %r15, %rdi
// 80: 4c 89 f6                      movq    %r14, %rsi
// 83: 48 89 da                      movq    %rbx, %rdx
// 86: 48 83 c4 08                   addq    $0x8, %rsp
// 8a: 5b                            popq    %rbx
// 8b: 41 5c                         popq    %r12
// 8d: 41 5e                         popq    %r14
// 8f: 41 5f                         popq    %r15
// 91: ff e0                         jmpq    *%rax
// 93: 
static const unsigned char _POP_TOP_code_body[148] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x4b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _POP_TOP_code_holes[6] = {
    {0x2a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x34, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _POP_TOP_data_holes[1];

// _PUSH_EXC_INFO
// 
// /tmp/tmp3v1aptj0/_PUSH_EXC_INFO.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// f: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 14: f6 80 ab 00 00 00 40          testb   $0x40, 0xab(%rax)
// 1b: 74 6c                         je      0x89 <_JIT_ENTRY+0x89>
// 1d: 48 89 d3                      movq    %rdx, %rbx
// 20: 49 89 f6                      movq    %rsi, %r14
// 23: 49 89 ff                      movq    %rdi, %r15
// 26: 4c 8b 6a 70                   movq    0x70(%rdx), %r13
// 2a: 49 8b 6d 00                   movq    (%r13), %rbp
// 2e: 41 8b 04 24                   movl    (%r12), %eax
// 32: ff c0                         incl    %eax
// 34: 74 10                         je      0x46 <_JIT_ENTRY+0x46>
// 36: 41 89 04 24                   movl    %eax, (%r12)
// 3a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 44: ff d0                         callq   *%rax
// 46: 48 85 ed                      testq   %rbp, %rbp
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _Py_NoneStruct
// 53: 48 0f 45 c5                   cmovneq %rbp, %rax
// 57: 4d 89 65 00                   movq    %r12, (%r13)
// 5b: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 5f: 4d 89 26                      movq    %r12, (%r14)
// 62: 49 83 c6 08                   addq    $0x8, %r14
// 66: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000068:  R_X86_64_64  _JIT_CONTINUE
// 70: 4c 89 ff                      movq    %r15, %rdi
// 73: 4c 89 f6                      movq    %r14, %rsi
// 76: 48 89 da                      movq    %rbx, %rdx
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: ff e0                         jmpq    *%rax
// 89: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008b:  R_X86_64_64  .rodata.str1.1+0x87
// 93: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000095:  R_X86_64_64  .rodata.str1.1
// 9d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009f:  R_X86_64_64  .rodata.str1.1+0x39
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  __assert_fail
// b1: ba 7c 09 00 00                movl    $0x97c, %edx            # imm = 0x97C
// b6: ff d0                         callq   *%rax
// b8: 
static const unsigned char _PUSH_EXC_INFO_code_body[185] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x40, 0x74, 0x6c, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x6a, 0x70, 0x49, 0x8b, 0x6d, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x65, 0x00, 0x49, 0x89, 0x46, 0xf8, 0x4d, 0x89, 0x26, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7c, 0x09, 0x00, 0x00, 0xff, 0xd0};
static const Hole _PUSH_EXC_INFO_code_holes[8] = {
    {0x3c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x68, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x95, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyExceptionInstance_Check(new_exc)\x00'
// aa: 00 00 00 00 00 00
static const unsigned char _PUSH_EXC_INFO_data_body[177] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x63, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _PUSH_EXC_INFO_data_holes[1];

// _PUSH_FRAME
// 
// /tmp/tmp3v1aptj0/_PUSH_FRAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 5: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// d: 75 44                         jne     0x53 <_JIT_ENTRY+0x53>
// f: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 13: 48 83 c6 f8                   addq    $-0x8, %rsi
// 17: 48 29 fe                      subq    %rdi, %rsi
// 1a: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1e: 48 c1 ee 03                   shrq    $0x3, %rsi
// 22: 89 77 40                      movl    %esi, 0x40(%rdi)
// 25: 48 89 78 08                   movq    %rdi, 0x8(%rax)
// 29: 48 89 42 40                   movq    %rax, 0x40(%rdx)
// 2d: ff 4a 24                      decl    0x24(%rdx)
// 30: 48 63 48 40                   movslq  0x40(%rax), %rcx
// 34: 48 8d 34 c8                   leaq    (%rax,%rcx,8), %rsi
// 38: 48 83 c6 48                   addq    $0x48, %rsi
// 3c: c7 40 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rax) # imm = 0xFFFFFFFF
// 43: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000045:  R_X86_64_64  _JIT_CONTINUE
// 4d: 48 89 c7                      movq    %rax, %rdi
// 50: 58                            popq    %rax
// 51: ff e1                         jmpq    *%rcx
// 53: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000055:  R_X86_64_64  .rodata.str1.1+0x87
// 5d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000005f:  R_X86_64_64  .rodata.str1.1
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  .rodata.str1.1+0x39
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  __assert_fail
// 7b: ba 5b 0a 00 00                movl    $0xa5b, %edx            # imm = 0xA5B
// 80: ff d0                         callq   *%rax
// 82: 
static const unsigned char _PUSH_FRAME_code_body[131] = {0x50, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x75, 0x44, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x89, 0x78, 0x08, 0x48, 0x89, 0x42, 0x40, 0xff, 0x4a, 0x24, 0x48, 0x63, 0x48, 0x40, 0x48, 0x8d, 0x34, 0xc8, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x40, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0x58, 0xff, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x0a, 0x00, 0x00, 0xff, 0xd0};
static const Hole _PUSH_FRAME_code_holes[6] = {
    {0x45, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00tstate->interp->eval_frame == NULL\x00'
// aa: 00 00 00 00 00 00
static const unsigned char _PUSH_FRAME_data_body[177] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x2d, 0x3e, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _PUSH_FRAME_data_holes[1];

// _PUSH_NULL
// 
// /tmp/tmp3v1aptj0/_PUSH_NULL.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 c7 06 00 00 00 00          movq    $0x0, (%rsi)
// 7: 48 83 c6 08                   addq    $0x8, %rsi
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_CONTINUE
// 15: ff e0                         jmpq    *%rax
// 17: 
static const unsigned char _PUSH_NULL_code_body[24] = {0x48, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _PUSH_NULL_code_holes[2] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _PUSH_NULL_data_body[1];
static const Hole _PUSH_NULL_data_holes[1];

// _RESUME_CHECK
// 
// /tmp/tmp3v1aptj0/_RESUME_CHECK.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 5: 48 8b 08                      movq    (%rax), %rcx
// 8: 48 8b 07                      movq    (%rdi), %rax
// b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000000d:  R_X86_64_64  PyCode_Type
// 15: 4c 39 40 08                   cmpq    %r8, 0x8(%rax)
// 19: 75 44                         jne     0x5f <_JIT_ENTRY+0x5f>
// 1b: 4c 8b 80 a8 00 00 00          movq    0xa8(%rax), %r8
// 22: 45 84 c0                      testb   %r8b, %r8b
// 25: 75 67                         jne     0x8e <_JIT_ENTRY+0x8e>
// 27: 4c 39 c1                      cmpq    %r8, %rcx
// 2a: 75 0d                         jne     0x39 <_JIT_ENTRY+0x39>
// 2c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002e:  R_X86_64_64  _JIT_CONTINUE
// 36: 59                            popq    %rcx
// 37: ff e0                         jmpq    *%rax
// 39: 48 29 fe                      subq    %rdi, %rsi
// 3c: 48 83 c6 b8                   addq    $-0x48, %rsi
// 40: 48 c1 ee 03                   shrq    $0x3, %rsi
// 44: 89 77 40                      movl    %esi, 0x40(%rdi)
// 47: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000049:  R_X86_64_64  _JIT_TARGET
// 51: 89 c9                         movl    %ecx, %ecx
// 53: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 57: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 5d: 59                            popq    %rcx
// 5e: c3                            retq
// 5f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000061:  R_X86_64_64  .rodata.str1.1+0xad
// 69: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000006b:  R_X86_64_64  .rodata.str1.1+0xcb
// 73: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000075:  R_X86_64_64  .rodata.str1.1+0x10a
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  __assert_fail
// 87: ba 4d 00 00 00                movl    $0x4d, %edx
// 8c: ff d0                         callq   *%rax
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1+0x26
// a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a4:  R_X86_64_64  .rodata.str1.1+0x5f
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  __assert_fail
// b6: ba 16 00 00 00                movl    $0x16, %edx
// bb: ff d0                         callq   *%rax
// bd: 
static const unsigned char _RESUME_CHECK_code_body[190] = {0x50, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x48, 0x8b, 0x07, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x40, 0x08, 0x75, 0x44, 0x4c, 0x8b, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x45, 0x84, 0xc0, 0x75, 0x67, 0x4c, 0x39, 0xc1, 0x75, 0x0d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x16, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _RESUME_CHECK_code_holes[12] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x2e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x61, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xad},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcb},
    {0x75, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10a},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x26},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5f},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '(version & _PY_EVAL_EVENTS_MASK) == 0\x00/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 140: 
static const unsigned char _RESUME_CHECK_data_body[321] = {0x28, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x26, 0x20, 0x5f, 0x50, 0x59, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00};
static const Hole _RESUME_CHECK_data_holes[1];

// _SAVE_RETURN_OFFSET
// 
// /tmp/tmp3v1aptj0/_SAVE_RETURN_OFFSET.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000002:  R_X86_64_64  _JIT_OPARG
// a: 66 89 47 44                   movw    %ax, 0x44(%rdi)
// e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000010:  R_X86_64_64  _JIT_CONTINUE
// 18: ff e0                         jmpq    *%rax
// 1a: 
static const unsigned char _SAVE_RETURN_OFFSET_code_body[27] = {0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x47, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0};
static const Hole _SAVE_RETURN_OFFSET_code_holes[3] = {
    {0x2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: 
static const unsigned char _SAVE_RETURN_OFFSET_data_body[1];
static const Hole _SAVE_RETURN_OFFSET_data_holes[1];

// _SETUP_ANNOTATIONS
// 
// /tmp/tmp3v1aptj0/_SETUP_ANNOTATIONS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 8b 7f 28                   movq    0x28(%rdi), %rdi
// 18: 48 85 ff                      testq   %rdi, %rdi
// 1b: 0f 84 95 00 00 00             je      0xb6 <_JIT_ENTRY+0xb6>
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyMapping_GetOptionalItem
// 2b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000002d:  R_X86_64_64  _PyRuntime
// 35: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 3c: 48 89 e2                      movq    %rsp, %rdx
// 3f: 4c 89 ee                      movq    %r13, %rsi
// 42: ff d0                         callq   *%rax
// 44: 85 c0                         testl   %eax, %eax
// 46: 0f 88 92 00 00 00             js      0xde <_JIT_ENTRY+0xde>
// 4c: 4c 8b 24 24                   movq    (%rsp), %r12
// 50: 4d 85 e4                      testq   %r12, %r12
// 53: 0f 84 a5 00 00 00             je      0xfe <_JIT_ENTRY+0xfe>
// 59: 49 8b 04 24                   movq    (%r12), %rax
// 5d: 48 85 c0                      testq   %rax, %rax
// 60: 7f 22                         jg      0x84 <_JIT_ENTRY+0x84>
// 62: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000064:  R_X86_64_64  .rodata.str1.1
// 6c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006e:  R_X86_64_64  _Py_NegativeRefcount
// 76: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 7b: 4c 89 e2                      movq    %r12, %rdx
// 7e: ff d0                         callq   *%rax
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 88 fb 00 00 00             js      0x187 <_JIT_ENTRY+0x187>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0c 24                   decq    (%r12)
// 9c: 0f 85 e5 00 00 00             jne     0x187 <_JIT_ENTRY+0x187>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: e9 d1 00 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  PyExc_SystemError
// c0: 48 8b 30                      movq    (%rax), %rsi
// c3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000c5:  R_X86_64_64  .rodata.str1.1+0x39
// cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cf:  R_X86_64_64  _PyErr_Format
// d7: 4c 89 ff                      movq    %r15, %rdi
// da: 31 c0                         xorl    %eax, %eax
// dc: ff d1                         callq   *%rcx
// de: 4c 29 f3                      subq    %r14, %rbx
// e1: 48 83 c3 b8                   addq    $-0x48, %rbx
// e5: 48 c1 eb 03                   shrq    $0x3, %rbx
// e9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ed: 31 c0                         xorl    %eax, %eax
// ef: 48 83 c4 08                   addq    $0x8, %rsp
// f3: 5b                            popq    %rbx
// f4: 41 5c                         popq    %r12
// f6: 41 5d                         popq    %r13
// f8: 41 5e                         popq    %r14
// fa: 41 5f                         popq    %r15
// fc: 5d                            popq    %rbp
// fd: c3                            retq
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  PyDict_New
// 108: ff d0                         callq   *%rax
// 10a: 48 89 04 24                   movq    %rax, (%rsp)
// 10e: 48 85 c0                      testq   %rax, %rax
// 111: 74 cb                         je      0xde <_JIT_ENTRY+0xde>
// 113: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 117: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000119:  R_X86_64_64  PyObject_SetItem
// 121: 4c 89 ee                      movq    %r13, %rsi
// 124: 48 89 c2                      movq    %rax, %rdx
// 127: ff d1                         callq   *%rcx
// 129: 89 c5                         movl    %eax, %ebp
// 12b: 4c 8b 24 24                   movq    (%rsp), %r12
// 12f: 49 8b 04 24                   movq    (%r12), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7f 22                         jg      0x15a <_JIT_ENTRY+0x15a>
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_NegativeRefcount
// 14c: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 151: 4c 89 e2                      movq    %r12, %rdx
// 154: ff d0                         callq   *%rax
// 156: 49 8b 04 24                   movq    (%r12), %rax
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 21                         js      0x17f <_JIT_ENTRY+0x17f>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0c 24                   decq    (%r12)
// 16e: 75 0f                         jne     0x17f <_JIT_ENTRY+0x17f>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: 4c 89 e7                      movq    %r12, %rdi
// 17d: ff d0                         callq   *%rax
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 85 57 ff ff ff             jne     0xde <_JIT_ENTRY+0xde>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_CONTINUE
// 191: 4c 89 f7                      movq    %r14, %rdi
// 194: 48 89 de                      movq    %rbx, %rsi
// 197: 4c 89 fa                      movq    %r15, %rdx
// 19a: 48 83 c4 08                   addq    $0x8, %rsp
// 19e: 5b                            popq    %rbx
// 19f: 41 5c                         popq    %r12
// 1a1: 41 5d                         popq    %r13
// 1a3: 41 5e                         popq    %r14
// 1a5: 41 5f                         popq    %r15
// 1a7: 5d                            popq    %rbp
// 1a8: ff e0                         jmpq    *%rax
// 1aa: 
static const unsigned char _SETUP_ANNOTATIONS_code_body[427] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x7f, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xfb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xe5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0xcb, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x24, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x57, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _SETUP_ANNOTATIONS_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x2d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _SETUP_ANNOTATIONS_data_holes[1];

// _SET_ADD
// 
// /tmp/tmp3v1aptj0/_SET_ADD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPARG
// 22: f7 d0                         notl    %eax
// 24: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 29: 48 98                         cltq
// 2b: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  PySet_Add
// 39: 4c 89 e6                      movq    %r12, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 89 c5                         movl    %eax, %ebp
// 40: 49 8b 04 24                   movq    (%r12), %rax
// 44: 48 85 c0                      testq   %rax, %rax
// 47: 7e 0a                         jle     0x53 <_JIT_ENTRY+0x53>
// 49: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 4d: 85 c0                         testl   %eax, %eax
// 4f: 79 2c                         jns     0x7d <_JIT_ENTRY+0x7d>
// 51: eb 3c                         jmp     0x8f <_JIT_ENTRY+0x8f>
// 53: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000055:  R_X86_64_64  .rodata.str1.1
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _Py_NegativeRefcount
// 67: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 6c: 4c 89 e2                      movq    %r12, %rdx
// 6f: ff d0                         callq   *%rax
// 71: 49 8b 04 24                   movq    (%r12), %rax
// 75: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 79: 85 c0                         testl   %eax, %eax
// 7b: 78 12                         js      0x8f <_JIT_ENTRY+0x8f>
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 87: ff d0                         callq   *%rax
// 89: 49 ff 0c 24                   decq    (%r12)
// 8d: 74 5c                         je      0xeb <_JIT_ENTRY+0xeb>
// 8f: 85 ed                         testl   %ebp, %ebp
// 91: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 95: 74 6b                         je      0x102 <_JIT_ENTRY+0x102>
// 97: 49 8b 06                      movq    (%r14), %rax
// 9a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009c:  R_X86_64_64  PyCode_Type
// a4: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// a8: 75 7b                         jne     0x125 <_JIT_ENTRY+0x125>
// aa: 8b 40 48                      movl    0x48(%rax), %eax
// ad: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// b1: 48 83 c0 48                   addq    $0x48, %rax
// b5: 48 89 d9                      movq    %rbx, %rcx
// b8: 48 29 c1                      subq    %rax, %rcx
// bb: 48 c1 e9 03                   shrq    $0x3, %rcx
// bf: 85 c9                         testl   %ecx, %ecx
// c1: 0f 8e 8d 00 00 00             jle     0x154 <_JIT_ENTRY+0x154>
// c7: 49 8d 46 48                   leaq    0x48(%r14), %rax
// cb: 48 29 c3                      subq    %rax, %rbx
// ce: 48 83 c3 f8                   addq    $-0x8, %rbx
// d2: 48 c1 eb 03                   shrq    $0x3, %rbx
// d6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// da: 31 c0                         xorl    %eax, %eax
// dc: 48 83 c4 08                   addq    $0x8, %rsp
// e0: 5b                            popq    %rbx
// e1: 41 5c                         popq    %r12
// e3: 41 5d                         popq    %r13
// e5: 41 5e                         popq    %r14
// e7: 41 5f                         popq    %r15
// e9: 5d                            popq    %rbp
// ea: c3                            retq
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _Py_Dealloc
// f5: 4c 89 e7                      movq    %r12, %rdi
// f8: ff d0                         callq   *%rax
// fa: 85 ed                         testl   %ebp, %ebp
// fc: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 100: 75 95                         jne     0x97 <_JIT_ENTRY+0x97>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _JIT_CONTINUE
// 10c: 4c 89 f7                      movq    %r14, %rdi
// 10f: 48 89 de                      movq    %rbx, %rsi
// 112: 4c 89 fa                      movq    %r15, %rdx
// 115: 48 83 c4 08                   addq    $0x8, %rsp
// 119: 5b                            popq    %rbx
// 11a: 41 5c                         popq    %r12
// 11c: 41 5d                         popq    %r13
// 11e: 41 5e                         popq    %r14
// 120: 41 5f                         popq    %r15
// 122: 5d                            popq    %rbp
// 123: ff e0                         jmpq    *%rax
// 125: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1+0xce
// 12f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000131:  R_X86_64_64  .rodata.str1.1+0xec
// 139: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013b:  R_X86_64_64  .rodata.str1.1+0x12b
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  __assert_fail
// 14d: ba 4d 00 00 00                movl    $0x4d, %edx
// 152: ff d0                         callq   *%rax
// 154: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1+0x87
// 15e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000160:  R_X86_64_64  .rodata.str1.1+0x9a
// 168: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016a:  R_X86_64_64  .rodata.str1.1+0x39
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  __assert_fail
// 17c: ba 5b 00 00 00                movl    $0x5b, %edx
// 181: ff d0                         callq   *%rax
// 183: 
static const unsigned char _SET_ADD_code_body[388] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x5c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x6b, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x7b, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0x95, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _SET_ADD_code_holes[17] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x131, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x160, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _SET_ADD_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _SET_ADD_data_holes[1];

// _SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmp3v1aptj0/_SET_FUNCTION_ATTRIBUTE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyFunction_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 0f 85 ba 00 00 00             jne     0xd3 <_JIT_ENTRY+0xd3>
// 19: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 1d: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000001f:  R_X86_64_64  _JIT_OPARG
// 27: 45 0f b7 c0                   movzwl  %r8w, %r8d
// 2b: 41 83 f8 03                   cmpl    $0x3, %r8d
// 2f: 7f 35                         jg      0x66 <_JIT_ENTRY+0x66>
// 31: 41 83 f8 01                   cmpl    $0x1, %r8d
// 35: 74 50                         je      0x87 <_JIT_ENTRY+0x87>
// 37: 41 83 f8 02                   cmpl    $0x2, %r8d
// 3b: 0f 85 1f 01 00 00             jne     0x160 <_JIT_ENTRY+0x160>
// 41: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000043:  R_X86_64_64  PyDict_Type
// 4b: 4c 39 41 08                   cmpq    %r8, 0x8(%rcx)
// 4f: 0f 85 ad 00 00 00             jne     0x102 <_JIT_ENTRY+0x102>
// 55: 48 83 78 40 00                cmpq    $0x0, 0x40(%rax)
// 5a: 0f 85 d1 00 00 00             jne     0x131 <_JIT_ENTRY+0x131>
// 60: 4c 8d 40 40                   leaq    0x40(%rax), %r8
// 64: eb 55                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 66: 41 83 f8 04                   cmpl    $0x4, %r8d
// 6a: 74 40                         je      0xac <_JIT_ENTRY+0xac>
// 6c: 41 83 f8 08                   cmpl    $0x8, %r8d
// 70: 0f 85 ea 00 00 00             jne     0x160 <_JIT_ENTRY+0x160>
// 76: 48 83 78 48 00                cmpq    $0x0, 0x48(%rax)
// 7b: 0f 85 ff 00 00 00             jne     0x180 <_JIT_ENTRY+0x180>
// 81: 4c 8d 40 48                   leaq    0x48(%rax), %r8
// 85: eb 34                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 87: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000089:  R_X86_64_64  PyTuple_Type
// 91: 4c 39 41 08                   cmpq    %r8, 0x8(%rcx)
// 95: 0f 85 14 01 00 00             jne     0x1af <_JIT_ENTRY+0x1af>
// 9b: 48 83 78 38 00                cmpq    $0x0, 0x38(%rax)
// a0: 0f 85 38 01 00 00             jne     0x1de <_JIT_ENTRY+0x1de>
// a6: 4c 8d 40 38                   leaq    0x38(%rax), %r8
// aa: eb 0f                         jmp     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 83 78 70 00                cmpq    $0x0, 0x70(%rax)
// b1: 0f 85 56 01 00 00             jne     0x20d <_JIT_ENTRY+0x20d>
// b7: 4c 8d 40 70                   leaq    0x70(%rax), %r8
// bb: 49 89 08                      movq    %rcx, (%r8)
// be: 48 89 46 f0                   movq    %rax, -0x10(%rsi)
// c2: 48 83 c6 f8                   addq    $-0x8, %rsi
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _JIT_CONTINUE
// d0: 59                            popq    %rcx
// d1: ff e0                         jmpq    *%rax
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1+0x87
// dd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1+0x39
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  __assert_fail
// fb: ba 5f 0c 00 00                movl    $0xc5f, %edx            # imm = 0xC5F
// 100: ff d0                         callq   *%rax
// 102: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000104:  R_X86_64_64  .rodata.str1.1+0xe0
// 10c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000118:  R_X86_64_64  .rodata.str1.1+0x39
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  __assert_fail
// 12a: ba 6b 0c 00 00                movl    $0xc6b, %edx            # imm = 0xC6B
// 12f: ff d0                         callq   *%rax
// 131: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000133:  R_X86_64_64  .rodata.str1.1+0xf8
// 13b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000147:  R_X86_64_64  .rodata.str1.1+0x39
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  __assert_fail
// 159: ba 6c 0c 00 00                movl    $0xc6c, %edx            # imm = 0xC6C
// 15e: ff d0                         callq   *%rax
// 160: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000162:  R_X86_64_64  .rodata.str1.1+0x153
// 16a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000016c:  R_X86_64_64  .rodata.str1.1+0x15e
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_FatalErrorFunc
// 17e: ff d0                         callq   *%rax
// 180: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000182:  R_X86_64_64  .rodata.str1.1+0x9e
// 18a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000018c:  R_X86_64_64  .rodata.str1.1
// 194: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000196:  R_X86_64_64  .rodata.str1.1+0x39
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  __assert_fail
// 1a8: ba 63 0c 00 00                movl    $0xc63, %edx            # imm = 0xC63
// 1ad: ff d0                         callq   *%rax
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1+0x11a
// 1b9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001bb:  R_X86_64_64  .rodata.str1.1
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  .rodata.str1.1+0x39
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  __assert_fail
// 1d7: ba 70 0c 00 00                movl    $0xc70, %edx            # imm = 0xC70
// 1dc: ff d0                         callq   *%rax
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1+0x133
// 1e8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001ea:  R_X86_64_64  .rodata.str1.1
// 1f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f4:  R_X86_64_64  .rodata.str1.1+0x39
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  __assert_fail
// 206: ba 71 0c 00 00                movl    $0xc71, %edx            # imm = 0xC71
// 20b: ff d0                         callq   *%rax
// 20d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020f:  R_X86_64_64  .rodata.str1.1+0xbd
// 217: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000219:  R_X86_64_64  .rodata.str1.1
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  .rodata.str1.1+0x39
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  __assert_fail
// 235: ba 67 0c 00 00                movl    $0xc67, %edx            # imm = 0xC67
// 23a: ff d0                         callq   *%rax
// 23c: 
static const unsigned char _SET_FUNCTION_ATTRIBUTE_code_body[573] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4e, 0xf0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc0, 0x41, 0x83, 0xf8, 0x03, 0x7f, 0x35, 0x41, 0x83, 0xf8, 0x01, 0x74, 0x50, 0x41, 0x83, 0xf8, 0x02, 0x0f, 0x85, 0x1f, 0x01, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x41, 0x08, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x40, 0x00, 0x0f, 0x85, 0xd1, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x40, 0x40, 0xeb, 0x55, 0x41, 0x83, 0xf8, 0x04, 0x74, 0x40, 0x41, 0x83, 0xf8, 0x08, 0x0f, 0x85, 0xea, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x48, 0x00, 0x0f, 0x85, 0xff, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x40, 0x48, 0xeb, 0x34, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x41, 0x08, 0x0f, 0x85, 0x14, 0x01, 0x00, 0x00, 0x48, 0x83, 0x78, 0x38, 0x00, 0x0f, 0x85, 0x38, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x40, 0x38, 0xeb, 0x0f, 0x48, 0x83, 0x78, 0x70, 0x00, 0x0f, 0x85, 0x56, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x40, 0x70, 0x49, 0x89, 0x08, 0x48, 0x89, 0x46, 0xf0, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5f, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x6b, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x6c, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x63, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x70, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x71, 0x0c, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x67, 0x0c, 0x00, 0x00, 0xff, 0xd0};
static const Hole _SET_FUNCTION_ATTRIBUTE_code_holes[37] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x1f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf8},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x153},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x15e},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9e},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11a},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x133},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbd},
    {0x219, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyFunction_Check(func)\x00func_obj->func_closure == NULL\x00func_obj->func_annotations == NULL\x00PyDict_CheckExact(attr)\x00func_obj->func_kwdefaults == NULL\x00PyTuple_CheckExact(attr)\x00func_obj->func_defaults == NULL\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// 1ea: 00 00 00 00 00 00
static const unsigned char _SET_FUNCTION_ATTRIBUTE_data_body[497] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x29, 0x00, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x2d, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x2d, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x28, 0x61, 0x74, 0x74, 0x72, 0x29, 0x00, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x2d, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6b, 0x77, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x28, 0x61, 0x74, 0x74, 0x72, 0x29, 0x00, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x2d, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _SET_IP
// 
// /tmp/tmp3v1aptj0/_SET_IP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 07                      movq    (%rdi), %rax
// 4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000006:  R_X86_64_64  PyCode_Type
// e: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 12: 75 28                         jne     0x3c <_JIT_ENTRY+0x3c>
// 14: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c9                      movzwl  %cx, %ecx
// 21: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b: 48 89 47 38                   movq    %rax, 0x38(%rdi)
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _JIT_CONTINUE
// 39: 59                            popq    %rcx
// 3a: ff e0                         jmpq    *%rax
// 3c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000003e:  R_X86_64_64  .rodata.str1.1
// 46: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1+0x1e
// 50: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000052:  R_X86_64_64  .rodata.str1.1+0x5d
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  __assert_fail
// 64: ba 4d 00 00 00                movl    $0x4d, %edx
// 69: ff d0                         callq   *%rax
// 6b: 
static const unsigned char _SET_IP_code_body[108] = {0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x47, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _SET_IP_code_holes[8] = {
    {0x6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x52, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _SET_IP_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _SET_IP_data_holes[1];

// _SET_UPDATE
// 
// /tmp/tmp3v1aptj0/_SET_UPDATE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  _JIT_OPARG
// 22: f7 d0                         notl    %eax
// 24: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 29: 48 98                         cltq
// 2b: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
// 2f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000031:  R_X86_64_64  _PySet_Update
// 39: 4c 89 ee                      movq    %r13, %rsi
// 3c: ff d0                         callq   *%rax
// 3e: 89 c5                         movl    %eax, %ebp
// 40: 49 8b 45 00                   movq    (%r13), %rax
// 44: 48 85 c0                      testq   %rax, %rax
// 47: 7e 0a                         jle     0x53 <_JIT_ENTRY+0x53>
// 49: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 4d: 85 c0                         testl   %eax, %eax
// 4f: 79 2c                         jns     0x7d <_JIT_ENTRY+0x7d>
// 51: eb 3c                         jmp     0x8f <_JIT_ENTRY+0x8f>
// 53: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000055:  R_X86_64_64  .rodata.str1.1
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _Py_NegativeRefcount
// 67: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 6c: 4c 89 ea                      movq    %r13, %rdx
// 6f: ff d0                         callq   *%rax
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 79: 85 c0                         testl   %eax, %eax
// 7b: 78 12                         js      0x8f <_JIT_ENTRY+0x8f>
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 87: ff d0                         callq   *%rax
// 89: 49 ff 4d 00                   decq    (%r13)
// 8d: 74 2b                         je      0xba <_JIT_ENTRY+0xba>
// 8f: 85 ed                         testl   %ebp, %ebp
// 91: 4d 0f 48 e7                   cmovsq  %r15, %r12
// 95: 78 3a                         js      0xd1 <_JIT_ENTRY+0xd1>
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _JIT_CONTINUE
// a1: 48 89 df                      movq    %rbx, %rdi
// a4: 4c 89 e6                      movq    %r12, %rsi
// a7: 4c 89 f2                      movq    %r14, %rdx
// aa: 48 83 c4 08                   addq    $0x8, %rsp
// ae: 5b                            popq    %rbx
// af: 41 5c                         popq    %r12
// b1: 41 5d                         popq    %r13
// b3: 41 5e                         popq    %r14
// b5: 41 5f                         popq    %r15
// b7: 5d                            popq    %rbp
// b8: ff e0                         jmpq    *%rax
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 ef                      movq    %r13, %rdi
// c7: ff d0                         callq   *%rax
// c9: 85 ed                         testl   %ebp, %ebp
// cb: 4d 0f 48 e7                   cmovsq  %r15, %r12
// cf: 79 c6                         jns     0x97 <_JIT_ENTRY+0x97>
// d1: 48 8b 03                      movq    (%rbx), %rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyCode_Type
// de: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// e2: 75 3d                         jne     0x121 <_JIT_ENTRY+0x121>
// e4: 8b 40 48                      movl    0x48(%rax), %eax
// e7: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// eb: 48 83 c0 48                   addq    $0x48, %rax
// ef: 4c 89 e1                      movq    %r12, %rcx
// f2: 48 29 c1                      subq    %rax, %rcx
// f5: 48 c1 e9 03                   shrq    $0x3, %rcx
// f9: 85 c9                         testl   %ecx, %ecx
// fb: 7e 53                         jle     0x150 <_JIT_ENTRY+0x150>
// fd: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 101: 49 29 c4                      subq    %rax, %r12
// 104: 49 83 c4 f8                   addq    $-0x8, %r12
// 108: 49 c1 ec 03                   shrq    $0x3, %r12
// 10c: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 110: 31 c0                         xorl    %eax, %eax
// 112: 48 83 c4 08                   addq    $0x8, %rsp
// 116: 5b                            popq    %rbx
// 117: 41 5c                         popq    %r12
// 119: 41 5d                         popq    %r13
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: 5d                            popq    %rbp
// 120: c3                            retq
// 121: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000123:  R_X86_64_64  .rodata.str1.1+0xce
// 12b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000012d:  R_X86_64_64  .rodata.str1.1+0xec
// 135: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000137:  R_X86_64_64  .rodata.str1.1+0x12b
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  __assert_fail
// 149: ba 4d 00 00 00                movl    $0x4d, %edx
// 14e: ff d0                         callq   *%rax
// 150: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000152:  R_X86_64_64  .rodata.str1.1+0x87
// 15a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1+0x9a
// 164: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000166:  R_X86_64_64  .rodata.str1.1+0x39
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  __assert_fail
// 178: ba 5b 00 00 00                movl    $0x5b, %edx
// 17d: ff d0                         callq   *%rax
// 17f: 
static const unsigned char _SET_UPDATE_code_body[384] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4d, 0x8d, 0x67, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x67, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2b, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xe7, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xe7, 0x79, 0xc6, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3d, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x4c, 0x89, 0xe1, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x53, 0x48, 0x8d, 0x43, 0x48, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _SET_UPDATE_code_holes[17] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x166, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _SET_UPDATE_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _SET_UPDATE_data_holes[1];

// _STORE_ATTR
// 
// /tmp/tmp3v1aptj0/_STORE_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 8b 07                      movq    (%rdi), %rax
// e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000010:  R_X86_64_64  PyCode_Type
// 18: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1c: 0f 85 fd 01 00 00             jne     0x21f <_JIT_ENTRY+0x21f>
// 22: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 2a: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 31: 0f 84 17 02 00 00             je      0x24e <_JIT_ENTRY+0x24e>
// 37: 48 89 f3                      movq    %rsi, %rbx
// 3a: 40 b6 01                      movb    $0x1, %sil
// 3d: 40 84 f6                      testb   %sil, %sil
// 40: 0f 84 37 02 00 00             je      0x27d <_JIT_ENTRY+0x27d>
// 46: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000048:  R_X86_64_64  PyLong_Type
// 50: 48 39 f1                      cmpq    %rsi, %rcx
// 53: 0f 84 53 02 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 59: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000005b:  R_X86_64_64  PyBool_Type
// 63: 48 39 f1                      cmpq    %rsi, %rcx
// 66: 0f 84 6f 02 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 6c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006e:  R_X86_64_64  _JIT_OPARG
// 76: 0f b7 c9                      movzwl  %cx, %ecx
// 79: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 7d: 0f 8e 87 02 00 00             jle     0x30a <_JIT_ENTRY+0x30a>
// 83: 49 89 fe                      movq    %rdi, %r14
// 86: 48 89 14 24                   movq    %rdx, (%rsp)
// 8a: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 8e: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 92: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000094:  R_X86_64_64  _JIT_OPARG
// 9c: 0f b7 c9                      movzwl  %cx, %ecx
// 9f: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  PyObject_SetAttr
// ae: 4c 89 e7                      movq    %r12, %rdi
// b1: 4c 89 ea                      movq    %r13, %rdx
// b4: ff d0                         callq   *%rax
// b6: 89 c5                         movl    %eax, %ebp
// b8: 49 8b 45 00                   movq    (%r13), %rax
// bc: 48 85 c0                      testq   %rax, %rax
// bf: 7e 10                         jle     0xd1 <_JIT_ENTRY+0xd1>
// c1: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// cb: 85 c0                         testl   %eax, %eax
// cd: 79 32                         jns     0x101 <_JIT_ENTRY+0x101>
// cf: eb 39                         jmp     0x10a <_JIT_ENTRY+0x10a>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fd: 85 c0                         testl   %eax, %eax
// ff: 78 09                         js      0x10a <_JIT_ENTRY+0x10a>
// 101: 41 ff d7                      callq   *%r15
// 104: 49 ff 4d 00                   decq    (%r13)
// 108: 74 13                         je      0x11d <_JIT_ENTRY+0x11d>
// 10a: 49 8b 04 24                   movq    (%r12), %rax
// 10e: 48 85 c0                      testq   %rax, %rax
// 111: 7e 22                         jle     0x135 <_JIT_ENTRY+0x135>
// 113: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 117: 85 c0                         testl   %eax, %eax
// 119: 79 44                         jns     0x15f <_JIT_ENTRY+0x15f>
// 11b: eb 4b                         jmp     0x168 <_JIT_ENTRY+0x168>
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_Dealloc
// 127: 4c 89 ef                      movq    %r13, %rdi
// 12a: ff d0                         callq   *%rax
// 12c: 49 8b 04 24                   movq    (%r12), %rax
// 130: 48 85 c0                      testq   %rax, %rax
// 133: 7f de                         jg      0x113 <_JIT_ENTRY+0x113>
// 135: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000137:  R_X86_64_64  .rodata.str1.1
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _Py_NegativeRefcount
// 149: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 14e: 4c 89 e2                      movq    %r12, %rdx
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 78 09                         js      0x168 <_JIT_ENTRY+0x168>
// 15f: 41 ff d7                      callq   *%r15
// 162: 49 ff 0c 24                   decq    (%r12)
// 166: 74 78                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 168: 85 ed                         testl   %ebp, %ebp
// 16a: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 16e: 0f 84 87 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 174: 49 8b 06                      movq    (%r14), %rax
// 177: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000179:  R_X86_64_64  PyCode_Type
// 181: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 185: 0f 85 94 00 00 00             jne     0x21f <_JIT_ENTRY+0x21f>
// 18b: 48 63 40 48                   movslq  0x48(%rax), %rax
// 18f: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 193: 48 83 c1 48                   addq    $0x48, %rcx
// 197: 48 89 d8                      movq    %rbx, %rax
// 19a: 48 29 c8                      subq    %rcx, %rax
// 19d: 48 89 c1                      movq    %rax, %rcx
// 1a0: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1a4: 85 c9                         testl   %ecx, %ecx
// 1a6: 0f 8e 8d 01 00 00             jle     0x339 <_JIT_ENTRY+0x339>
// 1ac: 48 83 c0 f8                   addq    $-0x8, %rax
// 1b0: 48 c1 e8 03                   shrq    $0x3, %rax
// 1b4: 85 c0                         testl   %eax, %eax
// 1b6: 0f 8e ac 01 00 00             jle     0x368 <_JIT_ENTRY+0x368>
// 1bc: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 1c0: 48 29 c3                      subq    %rax, %rbx
// 1c3: 48 83 c3 f0                   addq    $-0x10, %rbx
// 1c7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1cb: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1cf: 31 c0                         xorl    %eax, %eax
// 1d1: 48 83 c4 08                   addq    $0x8, %rsp
// 1d5: 5b                            popq    %rbx
// 1d6: 41 5c                         popq    %r12
// 1d8: 41 5d                         popq    %r13
// 1da: 41 5e                         popq    %r14
// 1dc: 41 5f                         popq    %r15
// 1de: 5d                            popq    %rbp
// 1df: c3                            retq
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_Dealloc
// 1ea: 4c 89 e7                      movq    %r12, %rdi
// 1ed: ff d0                         callq   *%rax
// 1ef: 85 ed                         testl   %ebp, %ebp
// 1f1: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 1f5: 0f 85 79 ff ff ff             jne     0x174 <_JIT_ENTRY+0x174>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 4c 89 f7                      movq    %r14, %rdi
// 208: 48 89 de                      movq    %rbx, %rsi
// 20b: 48 8b 14 24                   movq    (%rsp), %rdx
// 20f: 48 83 c4 08                   addq    $0x8, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: ff e0                         jmpq    *%rax
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1+0xce
// 229: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1+0xec
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  .rodata.str1.1+0x12b
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  __assert_fail
// 247: ba 4d 00 00 00                movl    $0x4d, %edx
// 24c: ff d0                         callq   *%rax
// 24e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000250:  R_X86_64_64  .rodata.str1.1+0x161
// 258: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025a:  R_X86_64_64  .rodata.str1.1+0x172
// 262: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000264:  R_X86_64_64  .rodata.str1.1+0x1a7
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  __assert_fail
// 276: ba 86 00 00 00                movl    $0x86, %edx
// 27b: ff d0                         callq   *%rax
// 27d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027f:  R_X86_64_64  .rodata.str1.1+0x1d1
// 287: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1+0x172
// 291: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000293:  R_X86_64_64  .rodata.str1.1+0x1a7
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  __assert_fail
// 2a5: ba 87 00 00 00                movl    $0x87, %edx
// 2aa: ff d0                         callq   *%rax
// 2ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1+0x220
// 2b6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1+0x1f0
// 2c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1+0x23c
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  __assert_fail
// 2d4: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 2d9: ff d0                         callq   *%rax
// 2db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1+0x25b
// 2e5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002e7:  R_X86_64_64  .rodata.str1.1+0x1f0
// 2ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f1:  R_X86_64_64  .rodata.str1.1+0x23c
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  __assert_fail
// 303: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 308: ff d0                         callq   *%rax
// 30a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030c:  R_X86_64_64  .rodata.str1.1+0x1d8
// 314: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000316:  R_X86_64_64  .rodata.str1.1+0x172
// 31e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000320:  R_X86_64_64  .rodata.str1.1+0x1a7
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  __assert_fail
// 332: ba 88 00 00 00                movl    $0x88, %edx
// 337: ff d0                         callq   *%rax
// 339: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033b:  R_X86_64_64  .rodata.str1.1+0x87
// 343: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000345:  R_X86_64_64  .rodata.str1.1+0x9a
// 34d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000034f:  R_X86_64_64  .rodata.str1.1+0x39
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  __assert_fail
// 361: ba 59 00 00 00                movl    $0x59, %edx
// 366: ff d0                         callq   *%rax
// 368: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036a:  R_X86_64_64  .rodata.str1.1+0x87
// 372: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000374:  R_X86_64_64  .rodata.str1.1+0x9a
// 37c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000037e:  R_X86_64_64  .rodata.str1.1+0x39
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  __assert_fail
// 390: ba 5b 00 00 00                movl    $0x5b, %edx
// 395: ff d0                         callq   *%rax
// 397: 
static const unsigned char _STORE_ATTR_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xfd, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x17, 0x02, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x40, 0xb6, 0x01, 0x40, 0x84, 0xf6, 0x0f, 0x84, 0x37, 0x02, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf1, 0x0f, 0x84, 0x53, 0x02, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf1, 0x0f, 0x84, 0x6f, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x87, 0x02, 0x00, 0x00, 0x49, 0x89, 0xfe, 0x48, 0x89, 0x14, 0x24, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x39, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x78, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x94, 0x00, 0x00, 0x00, 0x48, 0x63, 0x40, 0x48, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0x48, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xc8, 0x48, 0x89, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x8d, 0x01, 0x00, 0x00, 0x48, 0x83, 0xc0, 0xf8, 0x48, 0xc1, 0xe8, 0x03, 0x85, 0xc0, 0x0f, 0x8e, 0xac, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_ATTR_code_holes[49] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x235, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x161},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x264, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d1},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x293, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x220},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x23c},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x25b},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x23c},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d8},
    {0x316, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x320, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x345, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x359, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x374, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 277: 00
static const unsigned char _STORE_ATTR_data_body[633] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00};
static const Hole _STORE_ATTR_data_holes[1];

// _STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp3v1aptj0/_STORE_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// d: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 12: f6 80 a8 00 00 00 10          testb   $0x10, 0xa8(%rax)
// 19: 0f 84 62 01 00 00             je      0x181 <_JIT_ENTRY+0x181>
// 1f: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 24: a8 01                         testb   $0x1, %al
// 26: 0f 84 84 01 00 00             je      0x1b0 <_JIT_ENTRY+0x1b0>
// 2c: 48 89 d3                      movq    %rdx, %rbx
// 2f: 49 89 f6                      movq    %rsi, %r14
// 32: 49 89 ff                      movq    %rdi, %r15
// 35: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
// 39: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000003b:  R_X86_64_64  _JIT_OPERAND
// 43: 0f b7 d2                      movzwl  %dx, %edx
// 46: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// 4b: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 50: 4d 85 ed                      testq   %r13, %r13
// 53: 74 12                         je      0x67 <_JIT_ENTRY+0x67>
// 55: 49 8b 45 00                   movq    (%r13), %rax
// 59: 48 85 c0                      testq   %rax, %rax
// 5c: 7e 57                         jle     0xb5 <_JIT_ENTRY+0xb5>
// 5e: 85 c0                         testl   %eax, %eax
// 60: 79 79                         jns     0xdb <_JIT_ENTRY+0xdb>
// 62: e9 86 00 00 00                jmp     0xed <_JIT_ENTRY+0xed>
// 67: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000069:  R_X86_64_64  _JIT_OPERAND
// 71: 0f b7 c9                      movzwl  %cx, %ecx
// 74: 48 83 f9 1e                   cmpq    $0x1e, %rcx
// 78: 0f 8d 61 01 00 00             jge     0x1df <_JIT_ENTRY+0x1df>
// 7e: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 82: 8d 51 02                      leal    0x2(%rcx), %edx
// 85: 0f b6 30                      movzbl  (%rax), %esi
// 88: 39 f2                         cmpl    %esi, %edx
// 8a: 0f 83 7e 01 00 00             jae     0x20e <_JIT_ENTRY+0x20e>
// 90: 8d 51 01                      leal    0x1(%rcx), %edx
// 93: f7 d1                         notl    %ecx
// 95: 48 63 c9                      movslq  %ecx, %rcx
// 98: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000009a:  R_X86_64_64  _JIT_OPERAND
// a2: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// a7: 88 50 ff                      movb    %dl, -0x1(%rax)
// aa: 49 8b 04 24                   movq    (%r12), %rax
// ae: 48 85 c0                      testq   %rax, %rax
// b1: 7f 43                         jg      0xf6 <_JIT_ENTRY+0xf6>
// b3: eb 63                         jmp     0x118 <_JIT_ENTRY+0x118>
// b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b7:  R_X86_64_64  .rodata.str1.1
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _Py_NegativeRefcount
// c9: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// ce: 4c 89 ea                      movq    %r13, %rdx
// d1: ff d0                         callq   *%rax
// d3: 49 8b 45 00                   movq    (%r13), %rax
// d7: 85 c0                         testl   %eax, %eax
// d9: 78 12                         js      0xed <_JIT_ENTRY+0xed>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// e5: ff d0                         callq   *%rax
// e7: 49 ff 4d 00                   decq    (%r13)
// eb: 74 13                         je      0x100 <_JIT_ENTRY+0x100>
// ed: 49 8b 04 24                   movq    (%r12), %rax
// f1: 48 85 c0                      testq   %rax, %rax
// f4: 7e 22                         jle     0x118 <_JIT_ENTRY+0x118>
// f6: 49 83 c6 f0                   addq    $-0x10, %r14
// fa: 85 c0                         testl   %eax, %eax
// fc: 79 44                         jns     0x142 <_JIT_ENTRY+0x142>
// fe: eb 63                         jmp     0x163 <_JIT_ENTRY+0x163>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_Dealloc
// 10a: 4c 89 ef                      movq    %r13, %rdi
// 10d: ff d0                         callq   *%rax
// 10f: 49 8b 04 24                   movq    (%r12), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 7f de                         jg      0xf6 <_JIT_ENTRY+0xf6>
// 118: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011a:  R_X86_64_64  .rodata.str1.1
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_NegativeRefcount
// 12c: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 131: 4c 89 e2                      movq    %r12, %rdx
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 49 83 c6 f0                   addq    $-0x10, %r14
// 13e: 85 c0                         testl   %eax, %eax
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 49 ff 0c 24                   decq    (%r12)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 4c 89 e7                      movq    %r12, %rdi
// 161: ff d0                         callq   *%rax
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _JIT_CONTINUE
// 16d: 4c 89 ff                      movq    %r15, %rdi
// 170: 4c 89 f6                      movq    %r14, %rsi
// 173: 48 89 da                      movq    %rbx, %rdx
// 176: 5b                            popq    %rbx
// 177: 41 5c                         popq    %r12
// 179: 41 5d                         popq    %r13
// 17b: 41 5e                         popq    %r14
// 17d: 41 5f                         popq    %r15
// 17f: ff e0                         jmpq    *%rax
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1+0xb7
// 18b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1+0x39
// 195: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000197:  R_X86_64_64  .rodata.str1.1+0xe8
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  __assert_fail
// 1a9: ba ed 01 00 00                movl    $0x1ed, %edx            # imm = 0x1ED
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1+0x122
// 1ba: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001bc:  R_X86_64_64  .rodata.str1.1+0x39
// 1c4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1+0x141
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  __assert_fail
// 1d8: ba fa 01 00 00                movl    $0x1fa, %edx            # imm = 0x1FA
// 1dd: ff d0                         callq   *%rax
// 1df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e1:  R_X86_64_64  .rodata.str1.1+0x179
// 1e9: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1+0x79
// 1f3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1+0x193
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  __assert_fail
// 207: ba f8 00 00 00                movl    $0xf8, %edx
// 20c: ff d0                         callq   *%rax
// 20e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000210:  R_X86_64_64  .rodata.str1.1+0x1d6
// 218: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1+0x79
// 222: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000224:  R_X86_64_64  .rodata.str1.1+0x193
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  __assert_fail
// 236: ba fb 00 00 00                movl    $0xfb, %edx
// 23b: ff d0                         callq   *%rax
// 23d: 
static const unsigned char _STORE_ATTR_INSTANCE_VALUE_code_body[574] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x84, 0x62, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0xa8, 0x01, 0x0f, 0x84, 0x84, 0x01, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0x8b, 0x4e, 0xf0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x12, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x83, 0xf9, 0x1e, 0x0f, 0x8d, 0x61, 0x01, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x02, 0x0f, 0xb6, 0x30, 0x39, 0xf2, 0x0f, 0x83, 0x7e, 0x01, 0x00, 0x00, 0x8d, 0x51, 0x01, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x43, 0xeb, 0x63, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xed, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xfa, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_ATTR_INSTANCE_VALUE_code_holes[29] = {
    {0x3b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb7},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x197, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xe8},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x122},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x141},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x179},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x79},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x193},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d6},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x79},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x193},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00/home/jglass/Documents/cpython/Include/internal/pycore_dict.h\x00Py_TYPE(obj)->tp_flags & Py_TPFLAGS_MANAGED_DICT\x00PyDictOrValues *_PyObject_DictOrValuesPointer(PyObject *)\x00_PyDictOrValues_IsValues(dorv)\x00PyDictValues *_PyDictOrValues_GetValues(PyDictOrValues)\x00ix < SHARED_KEYS_MAX_SIZE\x00void _PyDictValues_AddToInsertionOrder(PyDictValues *, Py_ssize_t)\x00size+2 < ((uint8_t *)values)[-1]\x00'
// 1f7: 00
static const unsigned char _STORE_ATTR_INSTANCE_VALUE_data_body[505] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x28, 0x6f, 0x62, 0x6a, 0x29, 0x2d, 0x3e, 0x74, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x26, 0x20, 0x50, 0x79, 0x5f, 0x54, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x5f, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x28, 0x64, 0x6f, 0x72, 0x76, 0x29, 0x00, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x28, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x29, 0x00, 0x69, 0x78, 0x20, 0x3c, 0x20, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x28, 0x50, 0x79, 0x44, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x73, 0x69, 0x7a, 0x65, 0x2b, 0x32, 0x20, 0x3c, 0x20, 0x28, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74, 0x20, 0x2a, 0x29, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x29, 0x5b, 0x2d, 0x31, 0x5d, 0x00, 0x00};
static const Hole _STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _STORE_ATTR_SLOT
// 
// /tmp/tmp3v1aptj0/_STORE_ATTR_SLOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 d3                      movq    %rdx, %rbx
// c: 49 89 f6                      movq    %rsi, %r14
// f: 49 89 ff                      movq    %rdi, %r15
// 12: 48 8b 46 f0                   movq    -0x10(%rsi), %rax
// 16: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001c:  R_X86_64_64  _JIT_OPERAND
// 24: 0f b7 c9                      movzwl  %cx, %ecx
// 27: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// 2b: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 2f: 4d 85 ed                      testq   %r13, %r13
// 32: 74 47                         je      0x7b <_JIT_ENTRY+0x7b>
// 34: 49 8b 45 00                   movq    (%r13), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 06                         jle     0x43 <_JIT_ENTRY+0x43>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 28                         jns     0x69 <_JIT_ENTRY+0x69>
// 41: eb 38                         jmp     0x7b <_JIT_ENTRY+0x7b>
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  .rodata.str1.1+0x39
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_NegativeRefcount
// 57: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 5c: 4c 89 ea                      movq    %r13, %rdx
// 5f: ff d0                         callq   *%rax
// 61: 49 8b 45 00                   movq    (%r13), %rax
// 65: 85 c0                         testl   %eax, %eax
// 67: 78 12                         js      0x7b <_JIT_ENTRY+0x7b>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 73: ff d0                         callq   *%rax
// 75: 49 ff 4d 00                   decq    (%r13)
// 79: 74 13                         je      0x8e <_JIT_ENTRY+0x8e>
// 7b: 49 8b 04 24                   movq    (%r12), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 22                         jle     0xa6 <_JIT_ENTRY+0xa6>
// 84: 49 83 c6 f0                   addq    $-0x10, %r14
// 88: 85 c0                         testl   %eax, %eax
// 8a: 79 44                         jns     0xd0 <_JIT_ENTRY+0xd0>
// 8c: eb 63                         jmp     0xf1 <_JIT_ENTRY+0xf1>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_Dealloc
// 98: 4c 89 ef                      movq    %r13, %rdi
// 9b: ff d0                         callq   *%rax
// 9d: 49 8b 04 24                   movq    (%r12), %rax
// a1: 48 85 c0                      testq   %rax, %rax
// a4: 7f de                         jg      0x84 <_JIT_ENTRY+0x84>
// a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_NegativeRefcount
// ba: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// bf: 4c 89 e2                      movq    %r12, %rdx
// c2: ff d0                         callq   *%rax
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 49 83 c6 f0                   addq    $-0x10, %r14
// cc: 85 c0                         testl   %eax, %eax
// ce: 78 21                         js      0xf1 <_JIT_ENTRY+0xf1>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// da: ff d0                         callq   *%rax
// dc: 49 ff 0c 24                   decq    (%r12)
// e0: 75 0f                         jne     0xf1 <_JIT_ENTRY+0xf1>
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_Dealloc
// ec: 4c 89 e7                      movq    %r12, %rdi
// ef: ff d0                         callq   *%rax
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _JIT_CONTINUE
// fb: 4c 89 ff                      movq    %r15, %rdi
// fe: 4c 89 f6                      movq    %r14, %rsi
// 101: 48 89 da                      movq    %rbx, %rdx
// 104: 5b                            popq    %rbx
// 105: 41 5c                         popq    %r12
// 107: 41 5d                         popq    %r13
// 109: 41 5e                         popq    %r14
// 10b: 41 5f                         popq    %r15
// 10d: ff e0                         jmpq    *%rax
// 10f: 
static const unsigned char _STORE_ATTR_SLOT_code_body[272] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0x8b, 0x46, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x47, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _STORE_ATTR_SLOT_code_holes[11] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_ATTR_SLOT_data_holes[1];

// _STORE_DEREF
// 
// /tmp/tmp3v1aptj0/_STORE_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPARG
// 12: 0f b7 c0                      movzwl  %ax, %eax
// 15: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 1a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001c:  R_X86_64_64  PyCell_Type
// 24: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 28: 0f 85 93 00 00 00             jne     0xc1 <_JIT_ENTRY+0xc1>
// 2e: 48 89 d3                      movq    %rdx, %rbx
// 31: 49 89 f6                      movq    %rsi, %r14
// 34: 49 89 ff                      movq    %rdi, %r15
// 37: 49 83 c6 f8                   addq    $-0x8, %r14
// 3b: 49 8b 0e                      movq    (%r14), %rcx
// 3e: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 42: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 46: 4d 85 e4                      testq   %r12, %r12
// 49: 74 56                         je      0xa1 <_JIT_ENTRY+0xa1>
// 4b: 49 8b 04 24                   movq    (%r12), %rax
// 4f: 48 85 c0                      testq   %rax, %rax
// 52: 7e 06                         jle     0x5a <_JIT_ENTRY+0x5a>
// 54: 85 c0                         testl   %eax, %eax
// 56: 79 28                         jns     0x80 <_JIT_ENTRY+0x80>
// 58: eb 47                         jmp     0xa1 <_JIT_ENTRY+0xa1>
// 5a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000005c:  R_X86_64_64  .rodata.str1.1
// 64: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000066:  R_X86_64_64  _Py_NegativeRefcount
// 6e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 73: 4c 89 e2                      movq    %r12, %rdx
// 76: ff d0                         callq   *%rax
// 78: 49 8b 04 24                   movq    (%r12), %rax
// 7c: 85 c0                         testl   %eax, %eax
// 7e: 78 21                         js      0xa1 <_JIT_ENTRY+0xa1>
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 8a: ff d0                         callq   *%rax
// 8c: 49 ff 0c 24                   decq    (%r12)
// 90: 75 0f                         jne     0xa1 <_JIT_ENTRY+0xa1>
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_Dealloc
// 9c: 4c 89 e7                      movq    %r12, %rdi
// 9f: ff d0                         callq   *%rax
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _JIT_CONTINUE
// ab: 4c 89 ff                      movq    %r15, %rdi
// ae: 4c 89 f6                      movq    %r14, %rsi
// b1: 48 89 da                      movq    %rbx, %rdx
// b4: 48 83 c4 08                   addq    $0x8, %rsp
// b8: 5b                            popq    %rbx
// b9: 41 5c                         popq    %r12
// bb: 41 5e                         popq    %r14
// bd: 41 5f                         popq    %r15
// bf: ff e0                         jmpq    *%rax
// c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c3:  R_X86_64_64  .rodata.str1.1+0x30
// cb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1+0x41
// d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1+0x7d
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  __assert_fail
// e9: ba 1a 00 00 00                movl    $0x1a, %edx
// ee: ff d0                         callq   *%rax
// f0: 
static const unsigned char _STORE_DEREF_code_body[241] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x93, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x8b, 0x0e, 0x4c, 0x8b, 0x60, 0x10, 0x48, 0x89, 0x48, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1a, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_DEREF_code_holes[12] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_Type, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x30},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x41},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7d},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00PyCell_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/cellobject.h\x00PyObject *PyCell_GET(PyObject *)\x00'
// 9e: 00 00
static const unsigned char _STORE_DEREF_data_body[161] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x50, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x5f, 0x47, 0x45, 0x54, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00};
static const Hole _STORE_DEREF_data_holes[1];

// _STORE_FAST
// 
// /tmp/tmp3v1aptj0/_STORE_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 89 d3                      movq    %rdx, %rbx
// b: 49 89 f6                      movq    %rsi, %r14
// e: 49 89 ff                      movq    %rdi, %r15
// 11: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 15: 49 83 c6 f8                   addq    $-0x8, %r14
// 19: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000001b:  R_X86_64_64  _JIT_OPARG
// 23: 0f b7 c9                      movzwl  %cx, %ecx
// 26: 4c 8b 64 cf 48                movq    0x48(%rdi,%rcx,8), %r12
// 2b: 48 89 44 cf 48                movq    %rax, 0x48(%rdi,%rcx,8)
// 30: 4d 85 e4                      testq   %r12, %r12
// 33: 74 56                         je      0x8b <_JIT_ENTRY+0x8b>
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 06                         jle     0x44 <_JIT_ENTRY+0x44>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 28                         jns     0x6a <_JIT_ENTRY+0x6a>
// 42: eb 47                         jmp     0x8b <_JIT_ENTRY+0x8b>
// 44: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000046:  R_X86_64_64  .rodata.str1.1
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _Py_NegativeRefcount
// 58: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 5d: 4c 89 e2                      movq    %r12, %rdx
// 60: ff d0                         callq   *%rax
// 62: 49 8b 04 24                   movq    (%r12), %rax
// 66: 85 c0                         testl   %eax, %eax
// 68: 78 21                         js      0x8b <_JIT_ENTRY+0x8b>
// 6a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 74: ff d0                         callq   *%rax
// 76: 49 ff 0c 24                   decq    (%r12)
// 7a: 75 0f                         jne     0x8b <_JIT_ENTRY+0x8b>
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _Py_Dealloc
// 86: 4c 89 e7                      movq    %r12, %rdi
// 89: ff d0                         callq   *%rax
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _JIT_CONTINUE
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: 4c 89 f6                      movq    %r14, %rsi
// 9b: 48 89 da                      movq    %rbx, %rdx
// 9e: 48 83 c4 08                   addq    $0x8, %rsp
// a2: 5b                            popq    %rbx
// a3: 41 5c                         popq    %r12
// a5: 41 5e                         popq    %r14
// a7: 41 5f                         popq    %r15
// a9: ff e0                         jmpq    *%rax
// ab: 
static const unsigned char _STORE_FAST_code_body[172] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd3, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x48, 0x8b, 0x46, 0xf8, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcf, 0x48, 0x48, 0x89, 0x44, 0xcf, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _STORE_FAST_code_holes[7] = {
    {0x1b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Include/object.h\x00'
// 30: 
static const unsigned char _STORE_FAST_data_body[49] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00};
static const Hole _STORE_FAST_data_holes[1];

// _STORE_GLOBAL
// 
// /tmp/tmp3v1aptj0/_STORE_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 8b 07                      movq    (%rdi), %rax
// e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000010:  R_X86_64_64  PyCode_Type
// 18: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1c: 0f 85 75 01 00 00             jne     0x197 <_JIT_ENTRY+0x197>
// 22: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 2a: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 31: 0f 84 8f 01 00 00             je      0x1c6 <_JIT_ENTRY+0x1c6>
// 37: 49 89 d7                      movq    %rdx, %r15
// 3a: b2 01                         movb    $0x1, %dl
// 3c: 84 d2                         testb   %dl, %dl
// 3e: 0f 84 b1 01 00 00             je      0x1f5 <_JIT_ENTRY+0x1f5>
// 44: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000046:  R_X86_64_64  PyLong_Type
// 4e: 48 39 d1                      cmpq    %rdx, %rcx
// 51: 0f 84 cd 01 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 57: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000059:  R_X86_64_64  PyBool_Type
// 61: 48 39 d1                      cmpq    %rdx, %rcx
// 64: 0f 84 e9 01 00 00             je      0x253 <_JIT_ENTRY+0x253>
// 6a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 0f b7 c9                      movzwl  %cx, %ecx
// 77: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 7b: 0f 8e 01 02 00 00             jle     0x282 <_JIT_ENTRY+0x282>
// 81: 48 89 f3                      movq    %rsi, %rbx
// 84: 49 89 fe                      movq    %rdi, %r14
// 87: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 8b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000008d:  R_X86_64_64  _JIT_OPARG
// 95: 0f b7 c9                      movzwl  %cx, %ecx
// 98: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 9d: 48 8b 7f 18                   movq    0x18(%rdi), %rdi
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  PyDict_SetItem
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 89 c5                         movl    %eax, %ebp
// b2: 49 8b 04 24                   movq    (%r12), %rax
// b6: 48 85 c0                      testq   %rax, %rax
// b9: 7e 0a                         jle     0xc5 <_JIT_ENTRY+0xc5>
// bb: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// bf: 85 c0                         testl   %eax, %eax
// c1: 79 2c                         jns     0xef <_JIT_ENTRY+0xef>
// c3: eb 3c                         jmp     0x101 <_JIT_ENTRY+0x101>
// c5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c7:  R_X86_64_64  .rodata.str1.1
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_NegativeRefcount
// d9: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// de: 4c 89 e2                      movq    %r12, %rdx
// e1: ff d0                         callq   *%rax
// e3: 49 8b 04 24                   movq    (%r12), %rax
// e7: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// eb: 85 c0                         testl   %eax, %eax
// ed: 78 12                         js      0x101 <_JIT_ENTRY+0x101>
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f9: ff d0                         callq   *%rax
// fb: 49 ff 0c 24                   decq    (%r12)
// ff: 74 5c                         je      0x15d <_JIT_ENTRY+0x15d>
// 101: 85 ed                         testl   %ebp, %ebp
// 103: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 107: 74 6b                         je      0x174 <_JIT_ENTRY+0x174>
// 109: 49 8b 06                      movq    (%r14), %rax
// 10c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010e:  R_X86_64_64  PyCode_Type
// 116: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 11a: 75 7b                         jne     0x197 <_JIT_ENTRY+0x197>
// 11c: 8b 40 48                      movl    0x48(%rax), %eax
// 11f: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 123: 48 83 c0 48                   addq    $0x48, %rax
// 127: 48 89 d9                      movq    %rbx, %rcx
// 12a: 48 29 c1                      subq    %rax, %rcx
// 12d: 48 c1 e9 03                   shrq    $0x3, %rcx
// 131: 85 c9                         testl   %ecx, %ecx
// 133: 0f 8e 78 01 00 00             jle     0x2b1 <_JIT_ENTRY+0x2b1>
// 139: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 13d: 48 29 c3                      subq    %rax, %rbx
// 140: 48 83 c3 f8                   addq    $-0x8, %rbx
// 144: 48 c1 eb 03                   shrq    $0x3, %rbx
// 148: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14c: 31 c0                         xorl    %eax, %eax
// 14e: 48 83 c4 08                   addq    $0x8, %rsp
// 152: 5b                            popq    %rbx
// 153: 41 5c                         popq    %r12
// 155: 41 5d                         popq    %r13
// 157: 41 5e                         popq    %r14
// 159: 41 5f                         popq    %r15
// 15b: 5d                            popq    %rbp
// 15c: c3                            retq
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 172: 75 95                         jne     0x109 <_JIT_ENTRY+0x109>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_CONTINUE
// 17e: 4c 89 f7                      movq    %r14, %rdi
// 181: 48 89 de                      movq    %rbx, %rsi
// 184: 4c 89 fa                      movq    %r15, %rdx
// 187: 48 83 c4 08                   addq    $0x8, %rsp
// 18b: 5b                            popq    %rbx
// 18c: 41 5c                         popq    %r12
// 18e: 41 5d                         popq    %r13
// 190: 41 5e                         popq    %r14
// 192: 41 5f                         popq    %r15
// 194: 5d                            popq    %rbp
// 195: ff e0                         jmpq    *%rax
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1+0xce
// 1a1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a3:  R_X86_64_64  .rodata.str1.1+0xec
// 1ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ad:  R_X86_64_64  .rodata.str1.1+0x12b
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  __assert_fail
// 1bf: ba 4d 00 00 00                movl    $0x4d, %edx
// 1c4: ff d0                         callq   *%rax
// 1c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c8:  R_X86_64_64  .rodata.str1.1+0x161
// 1d0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1+0x172
// 1da: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dc:  R_X86_64_64  .rodata.str1.1+0x1a7
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  __assert_fail
// 1ee: ba 86 00 00 00                movl    $0x86, %edx
// 1f3: ff d0                         callq   *%rax
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1+0x1d1
// 1ff: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1+0x172
// 209: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020b:  R_X86_64_64  .rodata.str1.1+0x1a7
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  __assert_fail
// 21d: ba 87 00 00 00                movl    $0x87, %edx
// 222: ff d0                         callq   *%rax
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1+0x220
// 22e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000230:  R_X86_64_64  .rodata.str1.1+0x1f0
// 238: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023a:  R_X86_64_64  .rodata.str1.1+0x23c
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  __assert_fail
// 24c: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 251: ff d0                         callq   *%rax
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1+0x25b
// 25d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1+0x1f0
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  .rodata.str1.1+0x23c
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  __assert_fail
// 27b: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 280: ff d0                         callq   *%rax
// 282: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000284:  R_X86_64_64  .rodata.str1.1+0x1d8
// 28c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1+0x172
// 296: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000298:  R_X86_64_64  .rodata.str1.1+0x1a7
// 2a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a2:  R_X86_64_64  __assert_fail
// 2aa: ba 88 00 00 00                movl    $0x88, %edx
// 2af: ff d0                         callq   *%rax
// 2b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b3:  R_X86_64_64  .rodata.str1.1+0x87
// 2bb: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002bd:  R_X86_64_64  .rodata.str1.1+0x9a
// 2c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1+0x39
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  __assert_fail
// 2d9: ba 5b 00 00 00                movl    $0x5b, %edx
// 2de: ff d0                         callq   *%rax
// 2e0: 
static const unsigned char _STORE_GLOBAL_code_body[737] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x75, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x8f, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0xb1, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0xcd, 0x01, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0xe9, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0x01, 0x02, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0x8b, 0x7f, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x5c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x6b, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x7b, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x78, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0x95, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_GLOBAL_code_holes[41] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x161},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d1},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x220},
    {0x230, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x23c},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x25b},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x23c},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1d8},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x172},
    {0x298, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1a7},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 277: 00
static const unsigned char _STORE_GLOBAL_data_body[633] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00};
static const Hole _STORE_GLOBAL_data_holes[1];

// _STORE_NAME
// 
// /tmp/tmp3v1aptj0/_STORE_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 8b 07                      movq    (%rdi), %rax
// e: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000010:  R_X86_64_64  PyCode_Type
// 18: 48 39 68 08                   cmpq    %rbp, 0x8(%rax)
// 1c: 0f 85 25 02 00 00             jne     0x247 <_JIT_ENTRY+0x247>
// 22: 48 8b 40 20                   movq    0x20(%rax), %rax
// 26: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 2a: f6 81 ab 00 00 00 04          testb   $0x4, 0xab(%rcx)
// 31: 0f 84 3f 02 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 37: 49 89 d4                      movq    %rdx, %r12
// 3a: b2 01                         movb    $0x1, %dl
// 3c: 84 d2                         testb   %dl, %dl
// 3e: 0f 84 61 02 00 00             je      0x2a5 <_JIT_ENTRY+0x2a5>
// 44: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000046:  R_X86_64_64  PyLong_Type
// 4e: 48 39 d1                      cmpq    %rdx, %rcx
// 51: 0f 84 7d 02 00 00             je      0x2d4 <_JIT_ENTRY+0x2d4>
// 57: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000059:  R_X86_64_64  PyBool_Type
// 61: 48 39 d1                      cmpq    %rdx, %rcx
// 64: 0f 84 99 02 00 00             je      0x303 <_JIT_ENTRY+0x303>
// 6a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000006c:  R_X86_64_64  _JIT_OPARG
// 74: 0f b7 c9                      movzwl  %cx, %ecx
// 77: 48 39 48 10                   cmpq    %rcx, 0x10(%rax)
// 7b: 0f 8e b1 02 00 00             jle     0x332 <_JIT_ENTRY+0x332>
// 81: 49 89 f6                      movq    %rsi, %r14
// 84: 48 89 fb                      movq    %rdi, %rbx
// 87: 4c 8d 7e f8                   leaq    -0x8(%rsi), %r15
// 8b: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 8f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000091:  R_X86_64_64  _JIT_OPARG
// 99: 0f b7 c9                      movzwl  %cx, %ecx
// 9c: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// a1: 48 8b 7f 28                   movq    0x28(%rdi), %rdi
// a5: 48 85 ff                      testq   %rdi, %rdi
// a8: 74 1c                         je      0xc6 <_JIT_ENTRY+0xc6>
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  PyDict_Type
// b4: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// b8: 74 4f                         je      0x109 <_JIT_ENTRY+0x109>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  PyObject_SetItem
// c4: eb 4d                         jmp     0x113 <_JIT_ENTRY+0x113>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  PyExc_SystemError
// d0: 48 8b 30                      movq    (%rax), %rsi
// d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1+0x87
// dd: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000000df:  R_X86_64_64  _PyErr_Format
// e7: 4c 89 e7                      movq    %r12, %rdi
// ea: 31 c0                         xorl    %eax, %eax
// ec: 41 ff d0                      callq   *%r8
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 0f 8e 9d 00 00 00             jle     0x199 <_JIT_ENTRY+0x199>
// fc: 85 c0                         testl   %eax, %eax
// fe: 0f 89 bb 00 00 00             jns     0x1bf <_JIT_ENTRY+0x1bf>
// 104: e9 fa 00 00 00                jmp     0x203 <_JIT_ENTRY+0x203>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  PyDict_SetItem
// 113: 48 89 ce                      movq    %rcx, %rsi
// 116: 4c 89 ea                      movq    %r13, %rdx
// 119: ff d0                         callq   *%rax
// 11b: 89 c5                         movl    %eax, %ebp
// 11d: 49 8b 45 00                   movq    (%r13), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 7e 06                         jle     0x12c <_JIT_ENTRY+0x12c>
// 126: 85 c0                         testl   %eax, %eax
// 128: 79 28                         jns     0x152 <_JIT_ENTRY+0x152>
// 12a: eb 38                         jmp     0x164 <_JIT_ENTRY+0x164>
// 12c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012e:  R_X86_64_64  .rodata.str1.1
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_NegativeRefcount
// 140: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 145: 4c 89 ea                      movq    %r13, %rdx
// 148: ff d0                         callq   *%rax
// 14a: 49 8b 45 00                   movq    (%r13), %rax
// 14e: 85 c0                         testl   %eax, %eax
// 150: 78 12                         js      0x164 <_JIT_ENTRY+0x164>
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15c: ff d0                         callq   *%rax
// 15e: 49 ff 4d 00                   decq    (%r13)
// 162: 74 7e                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 164: 85 ed                         testl   %ebp, %ebp
// 166: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000168:  R_X86_64_64  PyCode_Type
// 170: 0f 85 8d 00 00 00             jne     0x203 <_JIT_ENTRY+0x203>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _JIT_CONTINUE
// 180: 48 89 df                      movq    %rbx, %rdi
// 183: 4c 89 fe                      movq    %r15, %rsi
// 186: 4c 89 e2                      movq    %r12, %rdx
// 189: 48 83 c4 08                   addq    $0x8, %rsp
// 18d: 5b                            popq    %rbx
// 18e: 41 5c                         popq    %r12
// 190: 41 5d                         popq    %r13
// 192: 41 5e                         popq    %r14
// 194: 41 5f                         popq    %r15
// 196: 5d                            popq    %rbp
// 197: ff e0                         jmpq    *%rax
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 1b2: 4c 89 ea                      movq    %r13, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 49 8b 45 00                   movq    (%r13), %rax
// 1bb: 85 c0                         testl   %eax, %eax
// 1bd: 78 44                         js      0x203 <_JIT_ENTRY+0x203>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 49 ff 4d 00                   decq    (%r13)
// 1cf: 75 32                         jne     0x203 <_JIT_ENTRY+0x203>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 ef                      movq    %r13, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: eb 21                         jmp     0x203 <_JIT_ENTRY+0x203>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_Dealloc
// 1ec: 4c 89 ef                      movq    %r13, %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 85 ed                         testl   %ebp, %ebp
// 1f3: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001f5:  R_X86_64_64  PyCode_Type
// 1fd: 0f 84 73 ff ff ff             je      0x176 <_JIT_ENTRY+0x176>
// 203: 48 8b 03                      movq    (%rbx), %rax
// 206: 48 39 68 08                   cmpq    %rbp, 0x8(%rax)
// 20a: 75 3b                         jne     0x247 <_JIT_ENTRY+0x247>
// 20c: 8b 40 48                      movl    0x48(%rax), %eax
// 20f: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// 213: 48 83 c0 48                   addq    $0x48, %rax
// 217: 49 29 c6                      subq    %rax, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 45 85 f6                      testl   %r14d, %r14d
// 221: 0f 8e 3a 01 00 00             jle     0x361 <_JIT_ENTRY+0x361>
// 227: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 22b: 49 29 c7                      subq    %rax, %r15
// 22e: 49 c1 ef 03                   shrq    $0x3, %r15
// 232: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 236: 31 c0                         xorl    %eax, %eax
// 238: 48 83 c4 08                   addq    $0x8, %rsp
// 23c: 5b                            popq    %rbx
// 23d: 41 5c                         popq    %r12
// 23f: 41 5d                         popq    %r13
// 241: 41 5e                         popq    %r14
// 243: 41 5f                         popq    %r15
// 245: 5d                            popq    %rbp
// 246: c3                            retq
// 247: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1+0xee
// 251: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1+0x10c
// 25b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025d:  R_X86_64_64  .rodata.str1.1+0x14b
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  __assert_fail
// 26f: ba 4d 00 00 00                movl    $0x4d, %edx
// 274: ff d0                         callq   *%rax
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1+0x181
// 280: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1+0x192
// 28a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x1c7
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  __assert_fail
// 29e: ba 86 00 00 00                movl    $0x86, %edx
// 2a3: ff d0                         callq   *%rax
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x1f1
// 2af: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1+0x192
// 2b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1+0x1c7
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  __assert_fail
// 2cd: ba 87 00 00 00                movl    $0x87, %edx
// 2d2: ff d0                         callq   *%rax
// 2d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d6:  R_X86_64_64  .rodata.str1.1+0x240
// 2de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002e0:  R_X86_64_64  .rodata.str1.1+0x210
// 2e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ea:  R_X86_64_64  .rodata.str1.1+0x25c
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  __assert_fail
// 2fc: ba 55 01 00 00                movl    $0x155, %edx            # imm = 0x155
// 301: ff d0                         callq   *%rax
// 303: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000305:  R_X86_64_64  .rodata.str1.1+0x27b
// 30d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000030f:  R_X86_64_64  .rodata.str1.1+0x210
// 317: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000319:  R_X86_64_64  .rodata.str1.1+0x25c
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  __assert_fail
// 32b: ba 56 01 00 00                movl    $0x156, %edx            # imm = 0x156
// 330: ff d0                         callq   *%rax
// 332: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000334:  R_X86_64_64  .rodata.str1.1+0x1f8
// 33c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000033e:  R_X86_64_64  .rodata.str1.1+0x192
// 346: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000348:  R_X86_64_64  .rodata.str1.1+0x1c7
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  __assert_fail
// 35a: ba 88 00 00 00                movl    $0x88, %edx
// 35f: ff d0                         callq   *%rax
// 361: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000363:  R_X86_64_64  .rodata.str1.1+0xa7
// 36b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000036d:  R_X86_64_64  .rodata.str1.1+0xba
// 375: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000377:  R_X86_64_64  .rodata.str1.1+0x39
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  __assert_fail
// 389: ba 5b 00 00 00                movl    $0x5b, %edx
// 38e: ff d0                         callq   *%rax
// 390: 
static const unsigned char _STORE_NAME_code_body[913] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x8b, 0x07, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x68, 0x08, 0x0f, 0x85, 0x25, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x3f, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd4, 0xb2, 0x01, 0x84, 0xd2, 0x0f, 0x84, 0x61, 0x02, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x7d, 0x02, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd1, 0x0f, 0x84, 0x99, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x39, 0x48, 0x10, 0x0f, 0x8e, 0xb1, 0x02, 0x00, 0x00, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x7e, 0xf8, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x8b, 0x7f, 0x28, 0x48, 0x85, 0xff, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x74, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xbb, 0x00, 0x00, 0x00, 0xe9, 0xfa, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x7e, 0x85, 0xed, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x84, 0x73, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x03, 0x48, 0x39, 0x68, 0x08, 0x75, 0x3b, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x49, 0x29, 0xc6, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x85, 0xf6, 0x0f, 0x8e, 0x3a, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x43, 0x48, 0x49, 0x29, 0xc7, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x87, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x56, 0x01, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x88, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_NAME_code_holes[51] = {
    {0x10, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xee},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x10c},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14b},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x181},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x192},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c7},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f1},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x192},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c7},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x240},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x210},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x25c},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x27b},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x210},
    {0x319, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x25c},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1f8},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x192},
    {0x348, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c7},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa7},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xba},
    {0x377, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00no locals found when storing %R\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(v)\x00/home/jglass/Documents/cpython/Python/ceval_macros.h\x00PyObject *GETITEM(PyObject *, Py_ssize_t)\x00i >= 0\x00i < PyTuple_GET_SIZE(v)\x00/home/jglass/Documents/cpython/Include/object.h\x00ob->ob_type != &PyLong_Type\x00Py_ssize_t Py_SIZE(PyObject *)\x00ob->ob_type != &PyBool_Type\x00'
// 297: 00
static const unsigned char _STORE_NAME_data_body[665] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x63, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x47, 0x45, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x29, 0x00, 0x69, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x00, 0x69, 0x20, 0x3c, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x62, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x26, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00};
static const Hole _STORE_NAME_data_holes[1];

// _STORE_SLICE
// 
// /tmp/tmp3v1aptj0/_STORE_SLICE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 48 8b 76 f8                   movq    -0x8(%rsi), %rsi
// 19: 48 8b 7b f0                   movq    -0x10(%rbx), %rdi
// 1d: 4c 8b 6b e0                   movq    -0x20(%rbx), %r13
// 21: 4c 8b 63 e8                   movq    -0x18(%rbx), %r12
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 2f: ff d0                         callq   *%rax
// 31: 48 85 c0                      testq   %rax, %rax
// 34: 74 2a                         je      0x60 <_JIT_ENTRY+0x60>
// 36: 48 89 c5                      movq    %rax, %rbp
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  PyObject_SetItem
// 43: 4c 89 e7                      movq    %r12, %rdi
// 46: 48 89 ee                      movq    %rbp, %rsi
// 49: 4c 89 ea                      movq    %r13, %rdx
// 4c: ff d0                         callq   *%rax
// 4e: 41 89 c7                      movl    %eax, %r15d
// 51: 48 8b 45 00                   movq    (%rbp), %rax
// 55: 48 85 c0                      testq   %rax, %rax
// 58: 7e 13                         jle     0x6d <_JIT_ENTRY+0x6d>
// 5a: 85 c0                         testl   %eax, %eax
// 5c: 79 35                         jns     0x93 <_JIT_ENTRY+0x93>
// 5e: eb 54                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 60: 31 ed                         xorl    %ebp, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7f 7b                         jg      0xe6 <_JIT_ENTRY+0xe6>
// 6b: eb 57                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 6d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006f:  R_X86_64_64  .rodata.str1.1
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_NegativeRefcount
// 81: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 86: 48 89 ea                      movq    %rbp, %rdx
// 89: ff d0                         callq   *%rax
// 8b: 48 8b 45 00                   movq    (%rbp), %rax
// 8f: 85 c0                         testl   %eax, %eax
// 91: 78 21                         js      0xb4 <_JIT_ENTRY+0xb4>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9d: ff d0                         callq   *%rax
// 9f: 48 ff 4d 00                   decq    (%rbp)
// a3: 75 0f                         jne     0xb4 <_JIT_ENTRY+0xb4>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _Py_Dealloc
// af: 48 89 ef                      movq    %rbp, %rdi
// b2: ff d0                         callq   *%rax
// b4: 45 85 ff                      testl   %r15d, %r15d
// b7: 40 0f 94 c5                   sete    %bpl
// bb: 49 8b 45 00                   movq    (%r13), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7f 22                         jg      0xe6 <_JIT_ENTRY+0xe6>
// c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000c6:  R_X86_64_64  .rodata.str1.1
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_NegativeRefcount
// d8: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// dd: 4c 89 ea                      movq    %r13, %rdx
// e0: ff d0                         callq   *%rax
// e2: 49 8b 45 00                   movq    (%r13), %rax
// e6: 85 c0                         testl   %eax, %eax
// e8: 78 12                         js      0xfc <_JIT_ENTRY+0xfc>
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_DECREF_DecRefTotal
// f4: ff d0                         callq   *%rax
// f6: 49 ff 4d 00                   decq    (%r13)
// fa: 74 13                         je      0x10f <_JIT_ENTRY+0x10f>
// fc: 49 8b 04 24                   movq    (%r12), %rax
// 100: 48 85 c0                      testq   %rax, %rax
// 103: 7e 22                         jle     0x127 <_JIT_ENTRY+0x127>
// 105: 4c 8d 7b e0                   leaq    -0x20(%rbx), %r15
// 109: 85 c0                         testl   %eax, %eax
// 10b: 79 44                         jns     0x151 <_JIT_ENTRY+0x151>
// 10d: eb 54                         jmp     0x163 <_JIT_ENTRY+0x163>
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _Py_Dealloc
// 119: 4c 89 ef                      movq    %r13, %rdi
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 04 24                   movq    (%r12), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7f de                         jg      0x105 <_JIT_ENTRY+0x105>
// 127: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000129:  R_X86_64_64  .rodata.str1.1
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_NegativeRefcount
// 13b: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 140: 4c 89 e2                      movq    %r12, %rdx
// 143: ff d0                         callq   *%rax
// 145: 49 8b 04 24                   movq    (%r12), %rax
// 149: 4c 8d 7b e0                   leaq    -0x20(%rbx), %r15
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 78 12                         js      0x163 <_JIT_ENTRY+0x163>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 49 ff 0c 24                   decq    (%r12)
// 161: 74 2d                         je      0x190 <_JIT_ENTRY+0x190>
// 163: 40 84 ed                      testb   %bpl, %bpl
// 166: 49 0f 45 df                   cmovneq %r15, %rbx
// 16a: 74 3c                         je      0x1a8 <_JIT_ENTRY+0x1a8>
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  _JIT_CONTINUE
// 176: 4c 89 f7                      movq    %r14, %rdi
// 179: 48 89 de                      movq    %rbx, %rsi
// 17c: 48 8b 14 24                   movq    (%rsp), %rdx
// 180: 48 83 c4 08                   addq    $0x8, %rsp
// 184: 5b                            popq    %rbx
// 185: 41 5c                         popq    %r12
// 187: 41 5d                         popq    %r13
// 189: 41 5e                         popq    %r14
// 18b: 41 5f                         popq    %r15
// 18d: 5d                            popq    %rbp
// 18e: ff e0                         jmpq    *%rax
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 40 84 ed                      testb   %bpl, %bpl
// 1a2: 49 0f 45 df                   cmovneq %r15, %rbx
// 1a6: 75 c4                         jne     0x16c <_JIT_ENTRY+0x16c>
// 1a8: 49 8b 06                      movq    (%r14), %rax
// 1ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ad:  R_X86_64_64  PyCode_Type
// 1b5: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1b9: 75 75                         jne     0x230 <_JIT_ENTRY+0x230>
// 1bb: 48 63 40 48                   movslq  0x48(%rax), %rax
// 1bf: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 1c3: 48 83 c1 48                   addq    $0x48, %rcx
// 1c7: 48 89 d8                      movq    %rbx, %rax
// 1ca: 48 29 c8                      subq    %rcx, %rax
// 1cd: 48 89 c1                      movq    %rax, %rcx
// 1d0: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1d4: 85 c9                         testl   %ecx, %ecx
// 1d6: 0f 8e 83 00 00 00             jle     0x25f <_JIT_ENTRY+0x25f>
// 1dc: 48 8d 48 f8                   leaq    -0x8(%rax), %rcx
// 1e0: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1e4: 85 c9                         testl   %ecx, %ecx
// 1e6: 0f 8e a2 00 00 00             jle     0x28e <_JIT_ENTRY+0x28e>
// 1ec: 48 8d 48 f0                   leaq    -0x10(%rax), %rcx
// 1f0: 48 c1 e9 03                   shrq    $0x3, %rcx
// 1f4: 85 c9                         testl   %ecx, %ecx
// 1f6: 0f 8e c1 00 00 00             jle     0x2bd <_JIT_ENTRY+0x2bd>
// 1fc: 48 83 c0 e8                   addq    $-0x18, %rax
// 200: 48 c1 e8 03                   shrq    $0x3, %rax
// 204: 85 c0                         testl   %eax, %eax
// 206: 0f 8e e0 00 00 00             jle     0x2ec <_JIT_ENTRY+0x2ec>
// 20c: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 210: 48 29 c3                      subq    %rax, %rbx
// 213: 48 83 c3 e0                   addq    $-0x20, %rbx
// 217: 48 c1 eb 03                   shrq    $0x3, %rbx
// 21b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 21f: 31 c0                         xorl    %eax, %eax
// 221: 48 83 c4 08                   addq    $0x8, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: c3                            retq
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1+0xce
// 23a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000023c:  R_X86_64_64  .rodata.str1.1+0xec
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  .rodata.str1.1+0x12b
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  __assert_fail
// 258: ba 4d 00 00 00                movl    $0x4d, %edx
// 25d: ff d0                         callq   *%rax
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1+0x87
// 269: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1+0x9a
// 273: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000275:  R_X86_64_64  .rodata.str1.1+0x39
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  __assert_fail
// 287: ba 55 00 00 00                movl    $0x55, %edx
// 28c: ff d0                         callq   *%rax
// 28e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000290:  R_X86_64_64  .rodata.str1.1+0x87
// 298: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000029a:  R_X86_64_64  .rodata.str1.1+0x9a
// 2a2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a4:  R_X86_64_64  .rodata.str1.1+0x39
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  __assert_fail
// 2b6: ba 57 00 00 00                movl    $0x57, %edx
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bf:  R_X86_64_64  .rodata.str1.1+0x87
// 2c7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002c9:  R_X86_64_64  .rodata.str1.1+0x9a
// 2d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1+0x39
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  __assert_fail
// 2e5: ba 59 00 00 00                movl    $0x59, %edx
// 2ea: ff d0                         callq   *%rax
// 2ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1+0x87
// 2f6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f8:  R_X86_64_64  .rodata.str1.1+0x9a
// 300: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000302:  R_X86_64_64  .rodata.str1.1+0x39
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  __assert_fail
// 314: ba 5b 00 00 00                movl    $0x5b, %edx
// 319: ff d0                         callq   *%rax
// 31b: 
static const unsigned char _STORE_SLICE_code_body[796] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0x8b, 0x76, 0xf8, 0x48, 0x8b, 0x7b, 0xf0, 0x4c, 0x8b, 0x6b, 0xe0, 0x4c, 0x8b, 0x63, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x79, 0x35, 0xeb, 0x54, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x7b, 0xeb, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2d, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdf, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdf, 0x75, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x75, 0x48, 0x63, 0x40, 0x48, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0x48, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xc8, 0x48, 0x89, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0x83, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x48, 0xf8, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x48, 0xf0, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xc1, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc0, 0xe8, 0x48, 0xc1, 0xe8, 0x03, 0x85, 0xc0, 0x0f, 0x8e, 0xe0, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xe0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x55, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x57, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_SLICE_code_holes[37] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x302, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _STORE_SLICE_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SLICE_data_holes[1];

// _STORE_SUBSCR
// 
// /tmp/tmp3v1aptj0/_STORE_SUBSCR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 58                         jmp     0x146 <_JIT_ENTRY+0x146>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 16                         js      0x146 <_JIT_ENTRY+0x146>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 0f 84 88 00 00 00             je      0x1ce <_JIT_ENTRY+0x1ce>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 49 0f 44 df                   cmoveq  %r15, %rbx
// 14c: 0f 84 97 00 00 00             je      0x1e9 <_JIT_ENTRY+0x1e9>
// 152: 49 8b 06                      movq    (%r14), %rax
// 155: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000157:  R_X86_64_64  PyCode_Type
// 15f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 163: 0f 85 a4 00 00 00             jne     0x20d <_JIT_ENTRY+0x20d>
// 169: 48 63 40 48                   movslq  0x48(%rax), %rax
// 16d: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 171: 48 83 c1 48                   addq    $0x48, %rcx
// 175: 48 89 d8                      movq    %rbx, %rax
// 178: 48 29 c8                      subq    %rcx, %rax
// 17b: 48 89 c1                      movq    %rax, %rcx
// 17e: 48 c1 e9 03                   shrq    $0x3, %rcx
// 182: 85 c9                         testl   %ecx, %ecx
// 184: 0f 8e b2 00 00 00             jle     0x23c <_JIT_ENTRY+0x23c>
// 18a: 48 8d 48 f8                   leaq    -0x8(%rax), %rcx
// 18e: 48 c1 e9 03                   shrq    $0x3, %rcx
// 192: 85 c9                         testl   %ecx, %ecx
// 194: 0f 8e d1 00 00 00             jle     0x26b <_JIT_ENTRY+0x26b>
// 19a: 48 83 c0 f0                   addq    $-0x10, %rax
// 19e: 48 c1 e8 03                   shrq    $0x3, %rax
// 1a2: 85 c0                         testl   %eax, %eax
// 1a4: 0f 8e f0 00 00 00             jle     0x29a <_JIT_ENTRY+0x29a>
// 1aa: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 1ae: 48 29 c3                      subq    %rax, %rbx
// 1b1: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1b5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1bd: 31 c0                         xorl    %eax, %eax
// 1bf: 48 83 c4 08                   addq    $0x8, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: c3                            retq
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_Dealloc
// 1d8: 4c 89 e7                      movq    %r12, %rdi
// 1db: ff d0                         callq   *%rax
// 1dd: 85 ed                         testl   %ebp, %ebp
// 1df: 49 0f 44 df                   cmoveq  %r15, %rbx
// 1e3: 0f 85 69 ff ff ff             jne     0x152 <_JIT_ENTRY+0x152>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_CONTINUE
// 1f3: 4c 89 f7                      movq    %r14, %rdi
// 1f6: 48 89 de                      movq    %rbx, %rsi
// 1f9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1fd: 48 83 c4 08                   addq    $0x8, %rsp
// 201: 5b                            popq    %rbx
// 202: 41 5c                         popq    %r12
// 204: 41 5d                         popq    %r13
// 206: 41 5e                         popq    %r14
// 208: 41 5f                         popq    %r15
// 20a: 5d                            popq    %rbp
// 20b: ff e0                         jmpq    *%rax
// 20d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020f:  R_X86_64_64  .rodata.str1.1+0xce
// 217: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000219:  R_X86_64_64  .rodata.str1.1+0xec
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  .rodata.str1.1+0x12b
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  __assert_fail
// 235: ba 4d 00 00 00                movl    $0x4d, %edx
// 23a: ff d0                         callq   *%rax
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1+0x87
// 246: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000248:  R_X86_64_64  .rodata.str1.1+0x9a
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  .rodata.str1.1+0x39
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  __assert_fail
// 264: ba 57 00 00 00                movl    $0x57, %edx
// 269: ff d0                         callq   *%rax
// 26b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026d:  R_X86_64_64  .rodata.str1.1+0x87
// 275: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000277:  R_X86_64_64  .rodata.str1.1+0x9a
// 27f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000281:  R_X86_64_64  .rodata.str1.1+0x39
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  __assert_fail
// 293: ba 59 00 00 00                movl    $0x59, %edx
// 298: ff d0                         callq   *%rax
// 29a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029c:  R_X86_64_64  .rodata.str1.1+0x87
// 2a4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a6:  R_X86_64_64  .rodata.str1.1+0x9a
// 2ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b0:  R_X86_64_64  .rodata.str1.1+0x39
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  __assert_fail
// 2c2: ba 5b 00 00 00                movl    $0x5b, %edx
// 2c7: ff d0                         callq   *%rax
// 2c9: 
static const unsigned char _STORE_SUBSCR_code_body[714] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x58, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xa4, 0x00, 0x00, 0x00, 0x48, 0x63, 0x40, 0x48, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0x48, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xc8, 0x48, 0x89, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xb2, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x48, 0xf8, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xd1, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0xc1, 0xe8, 0x03, 0x85, 0xc0, 0x0f, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xe8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x0f, 0x85, 0x69, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x57, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_SUBSCR_code_holes[32] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x219, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x248, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x252, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x277, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x281, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCR_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCR_data_holes[1];

// _STORE_SUBSCR_DICT
// 
// /tmp/tmp3v1aptj0/_STORE_SUBSCR_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 66 f0                   movq    -0x10(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyDict_Type
// 1f: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 24: 74 41                         je      0x67 <_JIT_ENTRY+0x67>
// 26: 4c 29 f3                      subq    %r14, %rbx
// 29: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 31: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 35: 49 8b 06                      movq    (%r14), %rax
// 38: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000003a:  R_X86_64_64  PyCode_Type
// 42: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 46: 0f 85 50 01 00 00             jne     0x19c <_JIT_ENTRY+0x19c>
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _JIT_TARGET
// 56: 89 c9                         movl    %ecx, %ecx
// 58: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 62: e9 e8 00 00 00                jmp     0x14f <_JIT_ENTRY+0x14f>
// 67: 49 89 d7                      movq    %rdx, %r15
// 6a: 48 8b 53 e8                   movq    -0x18(%rbx), %rdx
// 6e: 48 8b 73 f8                   movq    -0x8(%rbx), %rsi
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _PyDict_SetItem_Take2
// 7c: 4c 89 e7                      movq    %r12, %rdi
// 7f: ff d0                         callq   *%rax
// 81: 89 c5                         movl    %eax, %ebp
// 83: 49 8b 04 24                   movq    (%r12), %rax
// 87: 48 85 c0                      testq   %rax, %rax
// 8a: 7e 0a                         jle     0x96 <_JIT_ENTRY+0x96>
// 8c: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// 90: 85 c0                         testl   %eax, %eax
// 92: 79 2c                         jns     0xc0 <_JIT_ENTRY+0xc0>
// 94: eb 40                         jmp     0xd6 <_JIT_ENTRY+0xd6>
// 96: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_NegativeRefcount
// aa: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// af: 4c 89 e2                      movq    %r12, %rdx
// b2: ff d0                         callq   *%rax
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// bc: 85 c0                         testl   %eax, %eax
// be: 78 16                         js      0xd6 <_JIT_ENTRY+0xd6>
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ca: ff d0                         callq   *%rax
// cc: 49 ff 0c 24                   decq    (%r12)
// d0: 0f 84 88 00 00 00             je      0x15e <_JIT_ENTRY+0x15e>
// d6: 85 ed                         testl   %ebp, %ebp
// d8: 49 0f 44 dd                   cmoveq  %r13, %rbx
// dc: 0f 84 97 00 00 00             je      0x179 <_JIT_ENTRY+0x179>
// e2: 49 8b 06                      movq    (%r14), %rax
// e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e7:  R_X86_64_64  PyCode_Type
// ef: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// f3: 0f 85 a3 00 00 00             jne     0x19c <_JIT_ENTRY+0x19c>
// f9: 48 63 40 48                   movslq  0x48(%rax), %rax
// fd: 49 8d 0c c6                   leaq    (%r14,%rax,8), %rcx
// 101: 48 83 c1 48                   addq    $0x48, %rcx
// 105: 48 89 d8                      movq    %rbx, %rax
// 108: 48 29 c8                      subq    %rcx, %rax
// 10b: 48 89 c1                      movq    %rax, %rcx
// 10e: 48 c1 e9 03                   shrq    $0x3, %rcx
// 112: 85 c9                         testl   %ecx, %ecx
// 114: 0f 8e b1 00 00 00             jle     0x1cb <_JIT_ENTRY+0x1cb>
// 11a: 48 8d 48 f8                   leaq    -0x8(%rax), %rcx
// 11e: 48 c1 e9 03                   shrq    $0x3, %rcx
// 122: 85 c9                         testl   %ecx, %ecx
// 124: 0f 8e d0 00 00 00             jle     0x1fa <_JIT_ENTRY+0x1fa>
// 12a: 48 83 c0 f0                   addq    $-0x10, %rax
// 12e: 48 c1 e8 03                   shrq    $0x3, %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 0f 8e ef 00 00 00             jle     0x229 <_JIT_ENTRY+0x229>
// 13a: 49 8d 46 48                   leaq    0x48(%r14), %rax
// 13e: 48 29 c3                      subq    %rax, %rbx
// 141: 48 83 c3 e8                   addq    $-0x18, %rbx
// 145: 48 c1 eb 03                   shrq    $0x3, %rbx
// 149: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14d: 31 c0                         xorl    %eax, %eax
// 14f: 48 83 c4 08                   addq    $0x8, %rsp
// 153: 5b                            popq    %rbx
// 154: 41 5c                         popq    %r12
// 156: 41 5d                         popq    %r13
// 158: 41 5e                         popq    %r14
// 15a: 41 5f                         popq    %r15
// 15c: 5d                            popq    %rbp
// 15d: c3                            retq
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 85 ed                         testl   %ebp, %ebp
// 16f: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 173: 0f 85 69 ff ff ff             jne     0xe2 <_JIT_ENTRY+0xe2>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_CONTINUE
// 183: 4c 89 f7                      movq    %r14, %rdi
// 186: 48 89 de                      movq    %rbx, %rsi
// 189: 4c 89 fa                      movq    %r15, %rdx
// 18c: 48 83 c4 08                   addq    $0x8, %rsp
// 190: 5b                            popq    %rbx
// 191: 41 5c                         popq    %r12
// 193: 41 5d                         popq    %r13
// 195: 41 5e                         popq    %r14
// 197: 41 5f                         popq    %r15
// 199: 5d                            popq    %rbp
// 19a: ff e0                         jmpq    *%rax
// 19c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019e:  R_X86_64_64  .rodata.str1.1+0xce
// 1a6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1+0xec
// 1b0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1+0x12b
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  __assert_fail
// 1c4: ba 4d 00 00 00                movl    $0x4d, %edx
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1+0x87
// 1d5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d7:  R_X86_64_64  .rodata.str1.1+0x9a
// 1df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e1:  R_X86_64_64  .rodata.str1.1+0x39
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  __assert_fail
// 1f3: ba 57 00 00 00                movl    $0x57, %edx
// 1f8: ff d0                         callq   *%rax
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1+0x87
// 204: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000206:  R_X86_64_64  .rodata.str1.1+0x9a
// 20e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000210:  R_X86_64_64  .rodata.str1.1+0x39
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  __assert_fail
// 222: ba 59 00 00 00                movl    $0x59, %edx
// 227: ff d0                         callq   *%rax
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1+0x87
// 233: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000235:  R_X86_64_64  .rodata.str1.1+0x9a
// 23d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023f:  R_X86_64_64  .rodata.str1.1+0x39
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  __assert_fail
// 251: ba 5b 00 00 00                movl    $0x5b, %edx
// 256: ff d0                         callq   *%rax
// 258: 
static const unsigned char _STORE_SUBSCR_DICT_code_body[601] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x41, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0x50, 0x01, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x53, 0xe8, 0x48, 0x8b, 0x73, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xe8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x40, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xe8, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xa3, 0x00, 0x00, 0x00, 0x48, 0x63, 0x40, 0x48, 0x49, 0x8d, 0x0c, 0xc6, 0x48, 0x83, 0xc1, 0x48, 0x48, 0x89, 0xd8, 0x48, 0x29, 0xc8, 0x48, 0x89, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xb1, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x48, 0xf8, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x0f, 0x8e, 0xd0, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc0, 0xf0, 0x48, 0xc1, 0xe8, 0x03, 0x85, 0xc0, 0x0f, 0x8e, 0xef, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xe8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x0f, 0x85, 0x69, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x57, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x59, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_SUBSCR_DICT_code_holes[27] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x3a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x206, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x210, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x235, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCR_DICT_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCR_DICT_data_holes[1];

// _STORE_SUBSCR_LIST_INT
// 
// /tmp/tmp3v1aptj0/_STORE_SUBSCR_LIST_INT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 15: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000017:  R_X86_64_64  PyLong_Type
// 1f: 49 39 4d 08                   cmpq    %rcx, 0x8(%r13)
// 23: 0f 85 30 01 00 00             jne     0x159 <_JIT_ENTRY+0x159>
// 29: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 2d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002f:  R_X86_64_64  PyList_Type
// 37: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 3c: 0f 85 17 01 00 00             jne     0x159 <_JIT_ENTRY+0x159>
// 42: f6 81 ab 00 00 00 01          testb   $0x1, 0xab(%rcx)
// 49: 0f 84 0a 02 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 4f: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 54: 0f 87 ff 00 00 00             ja      0x159 <_JIT_ENTRY+0x159>
// 5a: f6 80 ab 00 00 00 02          testb   $0x2, 0xab(%rax)
// 61: 0f 84 21 02 00 00             je      0x288 <_JIT_ENTRY+0x288>
// 67: 41 8b 45 18                   movl    0x18(%r13), %eax
// 6b: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 70: 0f 8e e3 00 00 00             jle     0x159 <_JIT_ENTRY+0x159>
// 76: 49 39 44 24 20                cmpq    %rax, 0x20(%r12)
// 7b: 0f 8e 36 02 00 00             jle     0x2b7 <_JIT_ENTRY+0x2b7>
// 81: 49 89 d7                      movq    %rdx, %r15
// 84: 48 8b 4b e8                   movq    -0x18(%rbx), %rcx
// 88: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 8d: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 91: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 95: 48 85 ed                      testq   %rbp, %rbp
// 98: 0f 84 48 02 00 00             je      0x2e6 <_JIT_ENTRY+0x2e6>
// 9e: 48 8b 45 00                   movq    (%rbp), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f 22                         jg      0xc9 <_JIT_ENTRY+0xc9>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// c0: 48 89 ea                      movq    %rbp, %rdx
// c3: ff d0                         callq   *%rax
// c5: 48 8b 45 00                   movq    (%rbp), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 21                         js      0xee <_JIT_ENTRY+0xee>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 48 ff 4d 00                   decq    (%rbp)
// dd: 75 0f                         jne     0xee <_JIT_ENTRY+0xee>
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_Dealloc
// e9: 48 89 ef                      movq    %rbp, %rdi
// ec: ff d0                         callq   *%rax
// ee: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// f3: 0f 85 ba 00 00 00             jne     0x1b3 <_JIT_ENTRY+0x1b3>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  PyInterpreterState_Get
// 103: ff d0                         callq   *%rax
// 105: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 10c: 49 8b 45 00                   movq    (%r13), %rax
// 110: 48 89 c1                      movq    %rax, %rcx
// 113: 48 ff c9                      decq    %rcx
// 116: 49 89 4d 00                   movq    %rcx, (%r13)
// 11a: 0f 84 84 00 00 00             je      0x1a4 <_JIT_ENTRY+0x1a4>
// 120: 48 83 f8 01                   cmpq    $0x1, %rax
// 124: 0f 8f 89 00 00 00             jg      0x1b3 <_JIT_ENTRY+0x1b3>
// 12a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012c:  R_X86_64_64  .rodata.str1.1+0x12c
// 134: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000136:  R_X86_64_64  .rodata.str1.1+0x13e
// 13e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000140:  R_X86_64_64  .rodata.str1.1+0x17e
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  __assert_fail
// 152: ba b8 00 00 00                movl    $0xb8, %edx
// 157: ff d0                         callq   *%rax
// 159: 4c 29 f3                      subq    %r14, %rbx
// 15c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 160: 48 c1 eb 03                   shrq    $0x3, %rbx
// 164: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 168: 49 8b 06                      movq    (%r14), %rax
// 16b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016d:  R_X86_64_64  PyCode_Type
// 175: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 179: 0f 85 ab 00 00 00             jne     0x22a <_JIT_ENTRY+0x22a>
// 17f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000181:  R_X86_64_64  _JIT_TARGET
// 189: 89 c9                         movl    %ecx, %ecx
// 18b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 195: 48 83 c4 08                   addq    $0x8, %rsp
// 199: 5b                            popq    %rbx
// 19a: 41 5c                         popq    %r12
// 19c: 41 5d                         popq    %r13
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: 5d                            popq    %rbp
// 1a3: c3                            retq
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  PyObject_Free
// 1ae: 4c 89 ef                      movq    %r13, %rdi
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 8b 04 24                   movq    (%r12), %rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 7f 22                         jg      0x1de <_JIT_ENTRY+0x1de>
// 1bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_NegativeRefcount
// 1d0: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 1d5: 4c 89 e2                      movq    %r12, %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8b 04 24                   movq    (%r12), %rax
// 1de: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 21                         js      0x207 <_JIT_ENTRY+0x207>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_Dealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _JIT_CONTINUE
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: 48 89 de                      movq    %rbx, %rsi
// 217: 4c 89 fa                      movq    %r15, %rdx
// 21a: 48 83 c4 08                   addq    $0x8, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022c:  R_X86_64_64  .rodata.str1.1+0x99
// 234: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000236:  R_X86_64_64  .rodata.str1.1+0xb7
// 23e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000240:  R_X86_64_64  .rodata.str1.1+0xf6
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  __assert_fail
// 252: ba 4d 00 00 00                movl    $0x4d, %edx
// 257: ff d0                         callq   *%rax
// 259: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025b:  R_X86_64_64  .rodata.str1.1+0x1b8
// 263: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1+0x1c9
// 26d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026f:  R_X86_64_64  .rodata.str1.1+0x207
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  __assert_fail
// 281: ba cc 00 00 00                movl    $0xcc, %edx
// 286: ff d0                         callq   *%rax
// 288: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028a:  R_X86_64_64  .rodata.str1.1+0x23e
// 292: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1+0x24f
// 29c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029e:  R_X86_64_64  .rodata.str1.1+0x28b
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  __assert_fail
// 2b0: ba 1f 00 00 00                movl    $0x1f, %edx
// 2b5: ff d0                         callq   *%rax
// 2b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b9:  R_X86_64_64  .rodata.str1.1+0x2eb
// 2c1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002c3:  R_X86_64_64  .rodata.str1.1+0x24f
// 2cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002cd:  R_X86_64_64  .rodata.str1.1+0x2b2
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  __assert_fail
// 2df: ba 2a 00 00 00                movl    $0x2a, %edx
// 2e4: ff d0                         callq   *%rax
// 2e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e8:  R_X86_64_64  .rodata.str1.1+0x87
// 2f0: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f2:  R_X86_64_64  .rodata.str1.1
// 2fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fc:  R_X86_64_64  .rodata.str1.1+0x39
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  __assert_fail
// 30e: ba 51 02 00 00                movl    $0x251, %edx            # imm = 0x251
// 313: ff d0                         callq   *%rax
// 315: 
static const unsigned char _STORE_SUBSCR_LIST_INT_code_body[790] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4d, 0x08, 0x0f, 0x85, 0x30, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x17, 0x01, 0x00, 0x00, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x84, 0x0a, 0x02, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xff, 0x00, 0x00, 0x00, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0x21, 0x02, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xe3, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x20, 0x0f, 0x8e, 0x36, 0x02, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x48, 0x8b, 0x4b, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x85, 0xed, 0x0f, 0x84, 0x48, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x89, 0xc1, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x4d, 0x00, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xb8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xcc, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x2a, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x51, 0x02, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_SUBSCR_LIST_INT_code_holes[40] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x2f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12c},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x13e},
    {0x140, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x17e},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x99},
    {0x236, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xb7},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xf6},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1b8},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1c9},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x207},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x23e},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x24f},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x28b},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2eb},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x24f},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x2b2},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00old_value != NULL\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00op->ob_refcnt > 0\x00/home/jglass/Documents/cpython/Include/internal/pycore_object.h\x00void _Py_DECREF_SPECIALIZED(PyObject *, const destructor)\x00PyLong_Check(op)\x00/home/jglass/Documents/cpython/Include/internal/pycore_long.h\x00int _PyLong_IsNonNegativeCompact(const PyLongObject *)\x00PyList_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/listobject.h\x00Py_ssize_t PyList_GET_SIZE(PyObject *)\x00void PyList_SET_ITEM(PyObject *, Py_ssize_t, PyObject *)\x00index < list->allocated\x00'
// 303: 00 00 00 00 00
static const unsigned char _STORE_SUBSCR_LIST_INT_data_body[777] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x2d, 0x3e, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x68, 0x00, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x49, 0x73, 0x4e, 0x6f, 0x6e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x3c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x3e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCR_LIST_INT_data_holes[1];

// _SWAP
// 
// /tmp/tmp3v1aptj0/_SWAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000003:  R_X86_64_64  _JIT_OPARG
// b: 0f b7 c0                      movzwl  %ax, %eax
// e: 83 f8 01                      cmpl    $0x1, %eax
// 11: 7e 36                         jle     0x49 <_JIT_ENTRY+0x49>
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  _JIT_OPARG
// 1d: 0f b7 c0                      movzwl  %ax, %eax
// 20: 48 c1 e0 03                   shlq    $0x3, %rax
// 24: 48 89 f1                      movq    %rsi, %rcx
// 27: 48 29 c1                      subq    %rax, %rcx
// 2a: 48 f7 d8                      negq    %rax
// 2d: 48 8b 09                      movq    (%rcx), %rcx
// 30: 4c 8b 46 f8                   movq    -0x8(%rsi), %r8
// 34: 4c 89 04 06                   movq    %r8, (%rsi,%rax)
// 38: 48 89 4e f8                   movq    %rcx, -0x8(%rsi)
// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003e:  R_X86_64_64  _JIT_CONTINUE
// 46: 59                            popq    %rcx
// 47: ff e0                         jmpq    *%rax
// 49: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004b:  R_X86_64_64  .rodata.str1.1+0x87
// 53: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000055:  R_X86_64_64  .rodata.str1.1
// 5d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000005f:  R_X86_64_64  .rodata.str1.1+0x39
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  __assert_fail
// 71: ba e2 0c 00 00                movl    $0xce2, %edx            # imm = 0xCE2
// 76: ff d0                         callq   *%rax
// 78: 
static const unsigned char _SWAP_code_body[121] = {0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x01, 0x7e, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x09, 0x4c, 0x8b, 0x46, 0xf8, 0x4c, 0x89, 0x04, 0x06, 0x48, 0x89, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xe2, 0x0c, 0x00, 0x00, 0xff, 0xd0};
static const Hole _SWAP_code_holes[8] = {
    {0x3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x55, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg >= 2\x00'
// 92: 00 00 00 00 00 00
static const unsigned char _SWAP_data_body[153] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3e, 0x3d, 0x20, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _SWAP_data_holes[1];

// _TO_BOOL
// 
// /tmp/tmp3v1aptj0/_TO_BOOL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyObject_IsTrue
// 1f: 4c 89 e7                      movq    %r12, %rdi
// 22: ff d0                         callq   *%rax
// 24: 89 c5                         movl    %eax, %ebp
// 26: 49 8b 04 24                   movq    (%r12), %rax
// 2a: 48 85 c0                      testq   %rax, %rax
// 2d: 7e 06                         jle     0x35 <_JIT_ENTRY+0x35>
// 2f: 85 c0                         testl   %eax, %eax
// 31: 79 28                         jns     0x5b <_JIT_ENTRY+0x5b>
// 33: eb 38                         jmp     0x6d <_JIT_ENTRY+0x6d>
// 35: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000037:  R_X86_64_64  .rodata.str1.1
// 3f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000041:  R_X86_64_64  _Py_NegativeRefcount
// 49: be 86 00 00 00                movl    $0x86, %esi
// 4e: 4c 89 e2                      movq    %r12, %rdx
// 51: ff d0                         callq   *%rax
// 53: 49 8b 04 24                   movq    (%r12), %rax
// 57: 85 c0                         testl   %eax, %eax
// 59: 78 12                         js      0x6d <_JIT_ENTRY+0x6d>
// 5b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 65: ff d0                         callq   *%rax
// 67: 49 ff 0c 24                   decq    (%r12)
// 6b: 74 3d                         je      0xaa <_JIT_ENTRY+0xaa>
// 6d: 85 ed                         testl   %ebp, %ebp
// 6f: 78 4c                         js      0xbd <_JIT_ENTRY+0xbd>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_FalseStruct
// 7b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007d:  R_X86_64_64  _Py_TrueStruct
// 85: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 89: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _JIT_CONTINUE
// 97: 4c 89 f7                      movq    %r14, %rdi
// 9a: 48 89 de                      movq    %rbx, %rsi
// 9d: 4c 89 fa                      movq    %r15, %rdx
// a0: 5b                            popq    %rbx
// a1: 41 5c                         popq    %r12
// a3: 41 5e                         popq    %r14
// a5: 41 5f                         popq    %r15
// a7: 5d                            popq    %rbp
// a8: ff e0                         jmpq    *%rax
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _Py_Dealloc
// b4: 4c 89 e7                      movq    %r12, %rdi
// b7: ff d0                         callq   *%rax
// b9: 85 ed                         testl   %ebp, %ebp
// bb: 79 b4                         jns     0x71 <_JIT_ENTRY+0x71>
// bd: 49 8b 06                      movq    (%r14), %rax
// c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c2:  R_X86_64_64  PyCode_Type
// ca: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// ce: 75 37                         jne     0x107 <_JIT_ENTRY+0x107>
// d0: 8b 40 48                      movl    0x48(%rax), %eax
// d3: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// d7: 48 83 c0 48                   addq    $0x48, %rax
// db: 48 89 d9                      movq    %rbx, %rcx
// de: 48 29 c1                      subq    %rax, %rcx
// e1: 48 c1 e9 03                   shrq    $0x3, %rcx
// e5: 85 c9                         testl   %ecx, %ecx
// e7: 7e 4d                         jle     0x136 <_JIT_ENTRY+0x136>
// e9: 48 83 c3 f8                   addq    $-0x8, %rbx
// ed: 49 8d 46 48                   leaq    0x48(%r14), %rax
// f1: 48 29 c3                      subq    %rax, %rbx
// f4: 48 c1 eb 03                   shrq    $0x3, %rbx
// f8: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// fc: 31 c0                         xorl    %eax, %eax
// fe: 5b                            popq    %rbx
// ff: 41 5c                         popq    %r12
// 101: 41 5e                         popq    %r14
// 103: 41 5f                         popq    %r15
// 105: 5d                            popq    %rbp
// 106: c3                            retq
// 107: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000109:  R_X86_64_64  .rodata.str1.1+0xce
// 111: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000113:  R_X86_64_64  .rodata.str1.1+0xec
// 11b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011d:  R_X86_64_64  .rodata.str1.1+0x12b
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  __assert_fail
// 12f: ba 4d 00 00 00                movl    $0x4d, %edx
// 134: ff d0                         callq   *%rax
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1+0x87
// 140: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1+0x9a
// 14a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x39
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  __assert_fail
// 15e: ba 5b 00 00 00                movl    $0x5b, %edx
// 163: ff d0                         callq   *%rax
// 165: 
static const unsigned char _TO_BOOL_code_body[358] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3d, 0x85, 0xed, 0x78, 0x4c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0xb4, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x37, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4d, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _TO_BOOL_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x37, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x113, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _TO_BOOL_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _TO_BOOL_data_holes[1];

// _TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmp3v1aptj0/_TO_BOOL_ALWAYS_TRUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000a:  R_X86_64_64  _JIT_OPERAND
// 12: 85 c0                         testl   %eax, %eax
// 14: 0f 84 f3 00 00 00             je      0x10d <_JIT_ENTRY+0x10d>
// 1a: 48 89 f3                      movq    %rsi, %rbx
// 1d: 49 89 fe                      movq    %rdi, %r14
// 20: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 24: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 29: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000002b:  R_X86_64_64  _JIT_OPERAND
// 33: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 39: 75 15                         jne     0x50 <_JIT_ENTRY+0x50>
// 3b: 49 89 d7                      movq    %rdx, %r15
// 3e: 49 8b 04 24                   movq    (%r12), %rax
// 42: 48 85 c0                      testq   %rax, %rax
// 45: 7e 51                         jle     0x98 <_JIT_ENTRY+0x98>
// 47: 85 c0                         testl   %eax, %eax
// 49: 79 73                         jns     0xbe <_JIT_ENTRY+0xbe>
// 4b: e9 8f 00 00 00                jmp     0xdf <_JIT_ENTRY+0xdf>
// 50: 4c 29 f3                      subq    %r14, %rbx
// 53: 48 83 c3 b8                   addq    $-0x48, %rbx
// 57: 48 c1 eb 03                   shrq    $0x3, %rbx
// 5b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 5f: 49 8b 06                      movq    (%r14), %rax
// 62: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000064:  R_X86_64_64  PyCode_Type
// 6c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 70: 0f 85 c6 00 00 00             jne     0x13c <_JIT_ENTRY+0x13c>
// 76: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000078:  R_X86_64_64  _JIT_TARGET
// 80: 89 c9                         movl    %ecx, %ecx
// 82: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 86: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 8c: 48 83 c4 08                   addq    $0x8, %rsp
// 90: 5b                            popq    %rbx
// 91: 41 5c                         popq    %r12
// 93: 41 5e                         popq    %r14
// 95: 41 5f                         popq    %r15
// 97: c3                            retq
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be db 00 00 00                movl    $0xdb, %esi
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 85 c0                         testl   %eax, %eax
// bc: 78 21                         js      0xdf <_JIT_ENTRY+0xdf>
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c8: ff d0                         callq   *%rax
// ca: 49 ff 0c 24                   decq    (%r12)
// ce: 75 0f                         jne     0xdf <_JIT_ENTRY+0xdf>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _Py_Dealloc
// da: 4c 89 e7                      movq    %r12, %rdi
// dd: ff d0                         callq   *%rax
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_TrueStruct
// e9: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _JIT_CONTINUE
// f7: 4c 89 f7                      movq    %r14, %rdi
// fa: 48 89 de                      movq    %rbx, %rsi
// fd: 4c 89 fa                      movq    %r15, %rdx
// 100: 48 83 c4 08                   addq    $0x8, %rsp
// 104: 5b                            popq    %rbx
// 105: 41 5c                         popq    %r12
// 107: 41 5e                         popq    %r14
// 109: 41 5f                         popq    %r15
// 10b: ff e0                         jmpq    *%rax
// 10d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010f:  R_X86_64_64  .rodata.str1.1+0x87
// 117: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000119:  R_X86_64_64  .rodata.str1.1
// 121: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000123:  R_X86_64_64  .rodata.str1.1+0x39
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  __assert_fail
// 135: ba d8 00 00 00                movl    $0xd8, %edx
// 13a: ff d0                         callq   *%rax
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1+0x8f
// 146: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000148:  R_X86_64_64  .rodata.str1.1+0xad
// 150: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000152:  R_X86_64_64  .rodata.str1.1+0xec
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  __assert_fail
// 164: ba 4d 00 00 00                movl    $0x4d, %edx
// 169: ff d0                         callq   *%rax
// 16b: 
static const unsigned char _TO_BOOL_ALWAYS_TRUE_code_body[364] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x15, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x51, 0x85, 0xc0, 0x79, 0x73, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xd8, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _TO_BOOL_ALWAYS_TRUE_code_holes[19] = {
    {0xa, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x2b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x64, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x119, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x8f},
    {0x148, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xad},
    {0x152, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00version\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 122: 00 00 00 00 00 00
static const unsigned char _TO_BOOL_ALWAYS_TRUE_data_body[297] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _TO_BOOL_BOOL
// 
// /tmp/tmp3v1aptj0/_TO_BOOL_BOOL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyBool_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 74 39                         je      0x4e <_JIT_ENTRY+0x4e>
// 15: 48 29 fe                      subq    %rdi, %rsi
// 18: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1c: 48 c1 ee 03                   shrq    $0x3, %rsi
// 20: 89 77 40                      movl    %esi, 0x40(%rdi)
// 23: 48 8b 07                      movq    (%rdi), %rax
// 26: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000028:  R_X86_64_64  PyCode_Type
// 30: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 34: 75 25                         jne     0x5b <_JIT_ENTRY+0x5b>
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  _JIT_TARGET
// 40: 89 c9                         movl    %ecx, %ecx
// 42: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 46: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 4c: 59                            popq    %rcx
// 4d: c3                            retq
// 4e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000050:  R_X86_64_64  _JIT_CONTINUE
// 58: 59                            popq    %rcx
// 59: ff e0                         jmpq    *%rax
// 5b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000005d:  R_X86_64_64  .rodata.str1.1
// 65: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1+0x1e
// 6f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x5d
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  __assert_fail
// 83: ba 4d 00 00 00                movl    $0x4d, %edx
// 88: ff d0                         callq   *%rax
// 8a: 
static const unsigned char _TO_BOOL_BOOL_code_body[139] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x25, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _TO_BOOL_BOOL_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x50, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _TO_BOOL_BOOL_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _TO_BOOL_BOOL_data_holes[1];

// _TO_BOOL_INT
// 
// /tmp/tmp3v1aptj0/_TO_BOOL_INT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  PyLong_Type
// 1d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 22: 74 46                         je      0x6a <_JIT_ENTRY+0x6a>
// 24: 4c 29 f3                      subq    %r14, %rbx
// 27: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 33: 49 8b 06                      movq    (%r14), %rax
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  PyCode_Type
// 40: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 44: 0f 85 c0 00 00 00             jne     0x10a <_JIT_ENTRY+0x10a>
// 4a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004c:  R_X86_64_64  _JIT_TARGET
// 54: 89 c9                         movl    %ecx, %ecx
// 56: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: c3                            retq
// 6a: 49 89 d7                      movq    %rdx, %r15
// 6d: 41 8b 4c 24 10                movl    0x10(%r12), %ecx
// 72: 83 e1 03                      andl    $0x3, %ecx
// 75: 49 8b 04 24                   movq    (%r12), %rax
// 79: 83 f9 01                      cmpl    $0x1, %ecx
// 7c: 75 14                         jne     0x92 <_JIT_ENTRY+0x92>
// 7e: 85 c0                         testl   %eax, %eax
// 80: 0f 89 b3 00 00 00             jns     0x139 <_JIT_ENTRY+0x139>
// 86: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000088:  R_X86_64_64  _Py_FalseStruct
// 90: eb 56                         jmp     0xe8 <_JIT_ENTRY+0xe8>
// 92: 48 85 c0                      testq   %rax, %rax
// 95: 7f 22                         jg      0xb9 <_JIT_ENTRY+0xb9>
// 97: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000099:  R_X86_64_64  .rodata.str1.1
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_NegativeRefcount
// ab: be a0 00 00 00                movl    $0xa0, %esi
// b0: 4c 89 e2                      movq    %r12, %rdx
// b3: ff d0                         callq   *%rax
// b5: 49 8b 04 24                   movq    (%r12), %rax
// b9: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000bb:  R_X86_64_64  _Py_TrueStruct
// c3: 85 c0                         testl   %eax, %eax
// c5: 78 21                         js      0xe8 <_JIT_ENTRY+0xe8>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d1: ff d0                         callq   *%rax
// d3: 49 ff 0c 24                   decq    (%r12)
// d7: 75 0f                         jne     0xe8 <_JIT_ENTRY+0xe8>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _Py_Dealloc
// e3: 4c 89 e7                      movq    %r12, %rdi
// e6: ff d0                         callq   *%rax
// e8: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_CONTINUE
// f6: 4c 89 f7                      movq    %r14, %rdi
// f9: 48 89 de                      movq    %rbx, %rsi
// fc: 4c 89 fa                      movq    %r15, %rdx
// ff: 5b                            popq    %rbx
// 100: 41 5c                         popq    %r12
// 102: 41 5d                         popq    %r13
// 104: 41 5e                         popq    %r14
// 106: 41 5f                         popq    %r15
// 108: ff e0                         jmpq    *%rax
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1+0x9d
// 114: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000116:  R_X86_64_64  .rodata.str1.1+0xbb
// 11e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000120:  R_X86_64_64  .rodata.str1.1+0xfa
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  __assert_fail
// 132: ba 4d 00 00 00                movl    $0x4d, %edx
// 137: ff d0                         callq   *%rax
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1+0x87
// 143: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000145:  R_X86_64_64  .rodata.str1.1
// 14d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014f:  R_X86_64_64  .rodata.str1.1+0x39
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  __assert_fail
// 161: ba 9c 00 00 00                movl    $0x9c, %edx
// 166: ff d0                         callq   *%rax
// 168: 
static const unsigned char _TO_BOOL_INT_code_body[361] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x46, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x89, 0xd7, 0x41, 0x8b, 0x4c, 0x24, 0x10, 0x83, 0xe1, 0x03, 0x49, 0x8b, 0x04, 0x24, 0x83, 0xf9, 0x01, 0x75, 0x14, 0x85, 0xc0, 0x0f, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x56, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x9c, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _TO_BOOL_INT_code_holes[19] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9d},
    {0x116, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xbb},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xfa},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00_Py_IsImmortal(value)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 130: 
static const unsigned char _TO_BOOL_INT_data_body[305] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x49, 0x73, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x28, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00};
static const Hole _TO_BOOL_INT_data_holes[1];

// _TO_BOOL_LIST
// 
// /tmp/tmp3v1aptj0/_TO_BOOL_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  PyList_Type
// 1d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 22: 74 46                         je      0x6a <_JIT_ENTRY+0x6a>
// 24: 4c 29 f3                      subq    %r14, %rbx
// 27: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 33: 49 8b 06                      movq    (%r14), %rax
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  PyCode_Type
// 40: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 44: 0f 85 bb 00 00 00             jne     0x105 <_JIT_ENTRY+0x105>
// 4a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004c:  R_X86_64_64  _JIT_TARGET
// 54: 89 c9                         movl    %ecx, %ecx
// 56: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: c3                            retq
// 6a: 49 89 d7                      movq    %rdx, %r15
// 6d: 49 8b 04 24                   movq    (%r12), %rax
// 71: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 76: 48 85 c0                      testq   %rax, %rax
// 79: 7e 06                         jle     0x81 <_JIT_ENTRY+0x81>
// 7b: 85 c0                         testl   %eax, %eax
// 7d: 79 28                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 7f: eb 47                         jmp     0xc8 <_JIT_ENTRY+0xc8>
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be ae 00 00 00                movl    $0xae, %esi
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 4d 85 ed                      testq   %r13, %r13
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _Py_FalseStruct
// d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d7:  R_X86_64_64  _Py_TrueStruct
// df: 48 0f 44 c8                   cmoveq  %rax, %rcx
// e3: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _JIT_CONTINUE
// f1: 4c 89 f7                      movq    %r14, %rdi
// f4: 48 89 de                      movq    %rbx, %rsi
// f7: 4c 89 fa                      movq    %r15, %rdx
// fa: 5b                            popq    %rbx
// fb: 41 5c                         popq    %r12
// fd: 41 5d                         popq    %r13
// ff: 41 5e                         popq    %r14
// 101: 41 5f                         popq    %r15
// 103: ff e0                         jmpq    *%rax
// 105: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000107:  R_X86_64_64  .rodata.str1.1+0x39
// 10f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000111:  R_X86_64_64  .rodata.str1.1+0x57
// 119: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011b:  R_X86_64_64  .rodata.str1.1+0x96
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  __assert_fail
// 12d: ba 4d 00 00 00                movl    $0x4d, %edx
// 132: ff d0                         callq   *%rax
// 134: 
static const unsigned char _TO_BOOL_LIST_code_body[309] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x46, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x89, 0xd7, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _TO_BOOL_LIST_code_holes[15] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x111, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// cc: 00 00 00 00
static const unsigned char _TO_BOOL_LIST_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _TO_BOOL_LIST_data_holes[1];

// _TO_BOOL_NONE
// 
// /tmp/tmp3v1aptj0/_TO_BOOL_NONE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000003:  R_X86_64_64  _Py_NoneStruct
// b: 48 39 46 f8                   cmpq    %rax, -0x8(%rsi)
// f: 74 39                         je      0x4a <_JIT_ENTRY+0x4a>
// 11: 48 29 fe                      subq    %rdi, %rsi
// 14: 48 83 c6 b8                   addq    $-0x48, %rsi
// 18: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1c: 89 77 40                      movl    %esi, 0x40(%rdi)
// 1f: 48 8b 07                      movq    (%rdi), %rax
// 22: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000024:  R_X86_64_64  PyCode_Type
// 2c: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 30: 75 33                         jne     0x65 <_JIT_ENTRY+0x65>
// 32: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000034:  R_X86_64_64  _JIT_TARGET
// 3c: 89 c9                         movl    %ecx, %ecx
// 3e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 42: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 48: 59                            popq    %rcx
// 49: c3                            retq
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _Py_FalseStruct
// 54: 48 89 46 f8                   movq    %rax, -0x8(%rsi)
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _JIT_CONTINUE
// 62: 59                            popq    %rcx
// 63: ff e0                         jmpq    *%rax
// 65: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000067:  R_X86_64_64  .rodata.str1.1
// 6f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000071:  R_X86_64_64  .rodata.str1.1+0x1e
// 79: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000007b:  R_X86_64_64  .rodata.str1.1+0x5d
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  __assert_fail
// 8d: ba 4d 00 00 00                movl    $0x4d, %edx
// 92: ff d0                         callq   *%rax
// 94: 
static const unsigned char _TO_BOOL_NONE_code_body[149] = {0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x46, 0xf8, 0x74, 0x39, 0x48, 0x29, 0xfe, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x77, 0x40, 0x48, 0x8b, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x33, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x59, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _TO_BOOL_NONE_code_holes[10] = {
    {0x3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x24, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x34, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x1e},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x5d},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: 'PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 93: 00 00 00 00 00
static const unsigned char _TO_BOOL_NONE_data_body[153] = {0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _TO_BOOL_NONE_data_holes[1];

// _TO_BOOL_STR
// 
// /tmp/tmp3v1aptj0/_TO_BOOL_STR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 89 f3                      movq    %rsi, %rbx
// c: 49 89 fe                      movq    %rdi, %r14
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  PyUnicode_Type
// 1d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 22: 74 46                         je      0x6a <_JIT_ENTRY+0x6a>
// 24: 4c 29 f3                      subq    %r14, %rbx
// 27: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 33: 49 8b 06                      movq    (%r14), %rax
// 36: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000038:  R_X86_64_64  PyCode_Type
// 40: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 44: 0f 85 da 00 00 00             jne     0x124 <_JIT_ENTRY+0x124>
// 4a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004c:  R_X86_64_64  _JIT_TARGET
// 54: 89 c9                         movl    %ecx, %ecx
// 56: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 5a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 60: 5b                            popq    %rbx
// 61: 41 5c                         popq    %r12
// 63: 41 5d                         popq    %r13
// 65: 41 5e                         popq    %r14
// 67: 41 5f                         popq    %r15
// 69: c3                            retq
// 6a: 49 89 d7                      movq    %rdx, %r15
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _PyRuntime
// 77: 48 8d 88 00 a1 00 00          leaq    0xa100(%rax), %rcx
// 7e: 49 39 cc                      cmpq    %rcx, %r12
// 81: 74 68                         je      0xeb <_JIT_ENTRY+0xeb>
// 83: 49 83 7c 24 10 00             cmpq    $0x0, 0x10(%r12)
// 89: 0f 84 c4 00 00 00             je      0x153 <_JIT_ENTRY+0x153>
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 48 85 c0                      testq   %rax, %rax
// 96: 7f 22                         jg      0xba <_JIT_ENTRY+0xba>
// 98: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000009a:  R_X86_64_64  .rodata.str1.1
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_NegativeRefcount
// ac: be cb 00 00 00                movl    $0xcb, %esi
// b1: 4c 89 e2                      movq    %r12, %rdx
// b4: ff d0                         callq   *%rax
// b6: 49 8b 04 24                   movq    (%r12), %rax
// ba: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000bc:  R_X86_64_64  _Py_TrueStruct
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 3a                         js      0x102 <_JIT_ENTRY+0x102>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d2: ff d0                         callq   *%rax
// d4: 49 ff 0c 24                   decq    (%r12)
// d8: 75 28                         jne     0x102 <_JIT_ENTRY+0x102>
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _Py_Dealloc
// e4: 4c 89 e7                      movq    %r12, %rdi
// e7: ff d0                         callq   *%rax
// e9: eb 17                         jmp     0x102 <_JIT_ENTRY+0x102>
// eb: f6 80 03 a1 00 00 80          testb   $-0x80, 0xa103(%rax)
// f2: 0f 84 8a 00 00 00             je      0x182 <_JIT_ENTRY+0x182>
// f8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000fa:  R_X86_64_64  _Py_FalseStruct
// 102: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _JIT_CONTINUE
// 110: 4c 89 f7                      movq    %r14, %rdi
// 113: 48 89 de                      movq    %rbx, %rsi
// 116: 4c 89 fa                      movq    %r15, %rdx
// 119: 5b                            popq    %rbx
// 11a: 41 5c                         popq    %r12
// 11c: 41 5d                         popq    %r13
// 11e: 41 5e                         popq    %r14
// 120: 41 5f                         popq    %r15
// 122: ff e0                         jmpq    *%rax
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1+0xac
// 12e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000130:  R_X86_64_64  .rodata.str1.1+0xca
// 138: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013a:  R_X86_64_64  .rodata.str1.1+0x109
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  __assert_fail
// 14c: ba 4d 00 00 00                movl    $0x4d, %edx
// 151: ff d0                         callq   *%rax
// 153: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1+0x9d
// 15d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000169:  R_X86_64_64  .rodata.str1.1+0x39
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  __assert_fail
// 17b: ba ca 00 00 00                movl    $0xca, %edx
// 180: ff d0                         callq   *%rax
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1+0x87
// 18c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000018e:  R_X86_64_64  .rodata.str1.1
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  .rodata.str1.1+0x39
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  __assert_fail
// 1aa: ba c6 00 00 00                movl    $0xc6, %edx
// 1af: ff d0                         callq   *%rax
// 1b1: 
static const unsigned char _TO_BOOL_STR_code_body[434] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x46, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x89, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x88, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xcc, 0x74, 0x68, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x17, 0xf6, 0x80, 0x03, 0xa1, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xca, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xc6, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _TO_BOOL_STR_code_holes[24] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x38, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xac},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xca},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x109},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9d},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00_Py_IsImmortal(value)\x00Py_SIZE(value)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 13f: 00
static const unsigned char _TO_BOOL_STR_data_body[321] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x49, 0x73, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x28, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x00, 0x50, 0x79, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _TO_BOOL_STR_data_holes[1];

// _UNARY_INVERT
// 
// /tmp/tmp3v1aptj0/_UNARY_INVERT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  PyNumber_Invert
// 20: 4c 89 ef                      movq    %r13, %rdi
// 23: ff d0                         callq   *%rax
// 25: 49 89 c4                      movq    %rax, %r12
// 28: 49 8b 45 00                   movq    (%r13), %rax
// 2c: 48 85 c0                      testq   %rax, %rax
// 2f: 7e 06                         jle     0x37 <_JIT_ENTRY+0x37>
// 31: 85 c0                         testl   %eax, %eax
// 33: 79 28                         jns     0x5d <_JIT_ENTRY+0x5d>
// 35: eb 38                         jmp     0x6f <_JIT_ENTRY+0x6f>
// 37: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000039:  R_X86_64_64  .rodata.str1.1
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  _Py_NegativeRefcount
// 4b: be e6 00 00 00                movl    $0xe6, %esi
// 50: 4c 89 ea                      movq    %r13, %rdx
// 53: ff d0                         callq   *%rax
// 55: 49 8b 45 00                   movq    (%r13), %rax
// 59: 85 c0                         testl   %eax, %eax
// 5b: 78 12                         js      0x6f <_JIT_ENTRY+0x6f>
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 67: ff d0                         callq   *%rax
// 69: 49 ff 4d 00                   decq    (%r13)
// 6d: 74 27                         je      0x96 <_JIT_ENTRY+0x96>
// 6f: 4d 85 e4                      testq   %r12, %r12
// 72: 74 36                         je      0xaa <_JIT_ENTRY+0xaa>
// 74: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _JIT_CONTINUE
// 82: 4c 89 f7                      movq    %r14, %rdi
// 85: 48 89 de                      movq    %rbx, %rsi
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: 5b                            popq    %rbx
// 8c: 41 5c                         popq    %r12
// 8e: 41 5d                         popq    %r13
// 90: 41 5e                         popq    %r14
// 92: 41 5f                         popq    %r15
// 94: ff e0                         jmpq    *%rax
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_Dealloc
// a0: 4c 89 ef                      movq    %r13, %rdi
// a3: ff d0                         callq   *%rax
// a5: 4d 85 e4                      testq   %r12, %r12
// a8: 75 ca                         jne     0x74 <_JIT_ENTRY+0x74>
// aa: 49 8b 06                      movq    (%r14), %rax
// ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000af:  R_X86_64_64  PyCode_Type
// b7: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// bb: 75 38                         jne     0xf5 <_JIT_ENTRY+0xf5>
// bd: 8b 40 48                      movl    0x48(%rax), %eax
// c0: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// c4: 48 83 c0 48                   addq    $0x48, %rax
// c8: 48 89 d9                      movq    %rbx, %rcx
// cb: 48 29 c1                      subq    %rax, %rcx
// ce: 48 c1 e9 03                   shrq    $0x3, %rcx
// d2: 85 c9                         testl   %ecx, %ecx
// d4: 7e 4e                         jle     0x124 <_JIT_ENTRY+0x124>
// d6: 48 83 c3 f8                   addq    $-0x8, %rbx
// da: 49 8d 46 48                   leaq    0x48(%r14), %rax
// de: 48 29 c3                      subq    %rax, %rbx
// e1: 48 c1 eb 03                   shrq    $0x3, %rbx
// e5: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e9: 31 c0                         xorl    %eax, %eax
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1+0xce
// ff: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000101:  R_X86_64_64  .rodata.str1.1+0xec
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  .rodata.str1.1+0x12b
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  __assert_fail
// 11d: ba 4d 00 00 00                movl    $0x4d, %edx
// 122: ff d0                         callq   *%rax
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1+0x87
// 12e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000130:  R_X86_64_64  .rodata.str1.1+0x9a
// 138: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013a:  R_X86_64_64  .rodata.str1.1+0x39
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  __assert_fail
// 14c: ba 5b 00 00 00                movl    $0x5b, %edx
// 151: ff d0                         callq   *%rax
// 153: 
static const unsigned char _UNARY_INVERT_code_body[340] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x27, 0x4d, 0x85, 0xe4, 0x74, 0x36, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xca, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x38, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4e, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNARY_INVERT_code_holes[16] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x101, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _UNARY_INVERT_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _UNARY_INVERT_data_holes[1];

// _UNARY_NEGATIVE
// 
// /tmp/tmp3v1aptj0/_UNARY_NEGATIVE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  PyNumber_Negative
// 20: 4c 89 ef                      movq    %r13, %rdi
// 23: ff d0                         callq   *%rax
// 25: 49 89 c4                      movq    %rax, %r12
// 28: 49 8b 45 00                   movq    (%r13), %rax
// 2c: 48 85 c0                      testq   %rax, %rax
// 2f: 7e 06                         jle     0x37 <_JIT_ENTRY+0x37>
// 31: 85 c0                         testl   %eax, %eax
// 33: 79 28                         jns     0x5d <_JIT_ENTRY+0x5d>
// 35: eb 38                         jmp     0x6f <_JIT_ENTRY+0x6f>
// 37: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000039:  R_X86_64_64  .rodata.str1.1
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  _Py_NegativeRefcount
// 4b: be 71 00 00 00                movl    $0x71, %esi
// 50: 4c 89 ea                      movq    %r13, %rdx
// 53: ff d0                         callq   *%rax
// 55: 49 8b 45 00                   movq    (%r13), %rax
// 59: 85 c0                         testl   %eax, %eax
// 5b: 78 12                         js      0x6f <_JIT_ENTRY+0x6f>
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 67: ff d0                         callq   *%rax
// 69: 49 ff 4d 00                   decq    (%r13)
// 6d: 74 27                         je      0x96 <_JIT_ENTRY+0x96>
// 6f: 4d 85 e4                      testq   %r12, %r12
// 72: 74 36                         je      0xaa <_JIT_ENTRY+0xaa>
// 74: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _JIT_CONTINUE
// 82: 4c 89 f7                      movq    %r14, %rdi
// 85: 48 89 de                      movq    %rbx, %rsi
// 88: 4c 89 fa                      movq    %r15, %rdx
// 8b: 5b                            popq    %rbx
// 8c: 41 5c                         popq    %r12
// 8e: 41 5d                         popq    %r13
// 90: 41 5e                         popq    %r14
// 92: 41 5f                         popq    %r15
// 94: ff e0                         jmpq    *%rax
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_Dealloc
// a0: 4c 89 ef                      movq    %r13, %rdi
// a3: ff d0                         callq   *%rax
// a5: 4d 85 e4                      testq   %r12, %r12
// a8: 75 ca                         jne     0x74 <_JIT_ENTRY+0x74>
// aa: 49 8b 06                      movq    (%r14), %rax
// ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000af:  R_X86_64_64  PyCode_Type
// b7: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// bb: 75 38                         jne     0xf5 <_JIT_ENTRY+0xf5>
// bd: 8b 40 48                      movl    0x48(%rax), %eax
// c0: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// c4: 48 83 c0 48                   addq    $0x48, %rax
// c8: 48 89 d9                      movq    %rbx, %rcx
// cb: 48 29 c1                      subq    %rax, %rcx
// ce: 48 c1 e9 03                   shrq    $0x3, %rcx
// d2: 85 c9                         testl   %ecx, %ecx
// d4: 7e 4e                         jle     0x124 <_JIT_ENTRY+0x124>
// d6: 48 83 c3 f8                   addq    $-0x8, %rbx
// da: 49 8d 46 48                   leaq    0x48(%r14), %rax
// de: 48 29 c3                      subq    %rax, %rbx
// e1: 48 c1 eb 03                   shrq    $0x3, %rbx
// e5: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e9: 31 c0                         xorl    %eax, %eax
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1+0xce
// ff: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000101:  R_X86_64_64  .rodata.str1.1+0xec
// 109: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010b:  R_X86_64_64  .rodata.str1.1+0x12b
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  __assert_fail
// 11d: ba 4d 00 00 00                movl    $0x4d, %edx
// 122: ff d0                         callq   *%rax
// 124: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1+0x87
// 12e: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000130:  R_X86_64_64  .rodata.str1.1+0x9a
// 138: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013a:  R_X86_64_64  .rodata.str1.1+0x39
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  __assert_fail
// 14c: ba 5b 00 00 00                movl    $0x5b, %edx
// 151: ff d0                         callq   *%rax
// 153: 
static const unsigned char _UNARY_NEGATIVE_code_body[340] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x27, 0x4d, 0x85, 0xe4, 0x74, 0x36, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xca, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x38, 0x8b, 0x40, 0x48, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4e, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8d, 0x46, 0x48, 0x48, 0x29, 0xc3, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNARY_NEGATIVE_code_holes[16] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x39, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x101, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _UNARY_NEGATIVE_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _UNARY_NEGATIVE_data_holes[1];

// _UNARY_NOT
// 
// /tmp/tmp3v1aptj0/_UNARY_NOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 50                            pushq   %rax
// 1: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
// 5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000007:  R_X86_64_64  PyBool_Type
// f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 13: 75 2c                         jne     0x41 <_JIT_ENTRY+0x41>
// 15: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000017:  R_X86_64_64  _Py_FalseStruct
// 1f: 48 39 c8                      cmpq    %rcx, %rax
// 22: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000024:  R_X86_64_64  _Py_TrueStruct
// 2c: 48 0f 45 c1                   cmovneq %rcx, %rax
// 30: 48 89 46 f8                   movq    %rax, -0x8(%rsi)
// 34: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000036:  R_X86_64_64  _JIT_CONTINUE
// 3e: 59                            popq    %rcx
// 3f: ff e0                         jmpq    *%rax
// 41: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000043:  R_X86_64_64  .rodata.str1.1+0x87
// 4b: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000004d:  R_X86_64_64  .rodata.str1.1
// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000057:  R_X86_64_64  .rodata.str1.1+0x39
// 5f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000061:  R_X86_64_64  __assert_fail
// 69: ba 7b 00 00 00                movl    $0x7b, %edx
// 6e: ff d0                         callq   *%rax
// 70: 
static const unsigned char _UNARY_NOT_code_body[113] = {0x50, 0x48, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x2c, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc1, 0x48, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNARY_NOT_code_holes[9] = {
    {0x7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x24, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x36, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x61, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00PyBool_Check(value)\x00'
// 9b: 00 00 00 00 00
static const unsigned char _UNARY_NOT_data_body[161] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _UNARY_NOT_data_holes[1];

// _UNPACK_EX
// 
// /tmp/tmp3v1aptj0/_UNPACK_EX.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 49 89 d6                      movq    %rdx, %r14
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPARG
// 1f: 0f b6 cc                      movzbl  %ah, %ecx
// 22: 0f b6 d0                      movzbl  %al, %edx
// 25: 8d 44 0a 01                   leal    0x1(%rdx,%rcx), %eax
// 29: 4c 8d 44 c6 f8                leaq    -0x8(%rsi,%rax,8), %r8
// 2e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000030:  R_X86_64_64  _PyEval_UnpackIterable
// 38: 4c 89 f7                      movq    %r14, %rdi
// 3b: 4c 89 e6                      movq    %r12, %rsi
// 3e: ff d0                         callq   *%rax
// 40: 89 c5                         movl    %eax, %ebp
// 42: 49 8b 04 24                   movq    (%r12), %rax
// 46: 48 85 c0                      testq   %rax, %rax
// 49: 7e 06                         jle     0x51 <_JIT_ENTRY+0x51>
// 4b: 85 c0                         testl   %eax, %eax
// 4d: 79 28                         jns     0x77 <_JIT_ENTRY+0x77>
// 4f: eb 47                         jmp     0x98 <_JIT_ENTRY+0x98>
// 51: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000053:  R_X86_64_64  .rodata.str1.1
// 5b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005d:  R_X86_64_64  _Py_NegativeRefcount
// 65: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 6a: 4c 89 e2                      movq    %r12, %rdx
// 6d: ff d0                         callq   *%rax
// 6f: 49 8b 04 24                   movq    (%r12), %rax
// 73: 85 c0                         testl   %eax, %eax
// 75: 78 21                         js      0x98 <_JIT_ENTRY+0x98>
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 81: ff d0                         callq   *%rax
// 83: 49 ff 0c 24                   decq    (%r12)
// 87: 75 0f                         jne     0x98 <_JIT_ENTRY+0x98>
// 89: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008b:  R_X86_64_64  _Py_Dealloc
// 93: 4c 89 e7                      movq    %r12, %rdi
// 96: ff d0                         callq   *%rax
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _JIT_OPARG
// a2: 0f b6 c8                      movzbl  %al, %ecx
// a5: 0f b6 c4                      movzbl  %ah, %eax
// a8: 01 c8                         addl    %ecx, %eax
// aa: 31 c9                         xorl    %ecx, %ecx
// ac: 85 ed                         testl   %ebp, %ebp
// ae: 48 0f 45 c8                   cmovneq %rax, %rcx
// b2: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// b6: 74 1a                         je      0xd2 <_JIT_ENTRY+0xd2>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _JIT_CONTINUE
// c2: 48 89 df                      movq    %rbx, %rdi
// c5: 4c 89 f2                      movq    %r14, %rdx
// c8: 5b                            popq    %rbx
// c9: 41 5c                         popq    %r12
// cb: 41 5e                         popq    %r14
// cd: 41 5f                         popq    %r15
// cf: 5d                            popq    %rbp
// d0: ff e0                         jmpq    *%rax
// d2: 48 8b 03                      movq    (%rbx), %rax
// d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d7:  R_X86_64_64  PyCode_Type
// df: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// e3: 75 36                         jne     0x11b <_JIT_ENTRY+0x11b>
// e5: 8b 40 48                      movl    0x48(%rax), %eax
// e8: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// ec: 48 83 c0 48                   addq    $0x48, %rax
// f0: 48 89 f1                      movq    %rsi, %rcx
// f3: 48 29 c1                      subq    %rax, %rcx
// f6: 48 c1 e9 03                   shrq    $0x3, %rcx
// fa: 85 c9                         testl   %ecx, %ecx
// fc: 7e 4c                         jle     0x14a <_JIT_ENTRY+0x14a>
// fe: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 102: 48 29 c6                      subq    %rax, %rsi
// 105: 48 83 c6 f8                   addq    $-0x8, %rsi
// 109: 48 c1 ee 03                   shrq    $0x3, %rsi
// 10d: 89 73 40                      movl    %esi, 0x40(%rbx)
// 110: 31 c0                         xorl    %eax, %eax
// 112: 5b                            popq    %rbx
// 113: 41 5c                         popq    %r12
// 115: 41 5e                         popq    %r14
// 117: 41 5f                         popq    %r15
// 119: 5d                            popq    %rbp
// 11a: c3                            retq
// 11b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011d:  R_X86_64_64  .rodata.str1.1+0xce
// 125: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000127:  R_X86_64_64  .rodata.str1.1+0xec
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  .rodata.str1.1+0x12b
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  __assert_fail
// 143: ba 4d 00 00 00                movl    $0x4d, %edx
// 148: ff d0                         callq   *%rax
// 14a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014c:  R_X86_64_64  .rodata.str1.1+0x87
// 154: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000156:  R_X86_64_64  .rodata.str1.1+0x9a
// 15e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000160:  R_X86_64_64  .rodata.str1.1+0x39
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  __assert_fail
// 172: ba 5b 00 00 00                movl    $0x5b, %edx
// 177: ff d0                         callq   *%rax
// 179: 
static const unsigned char _UNPACK_EX_code_body[378] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x8d, 0x44, 0x0a, 0x01, 0x4c, 0x8d, 0x44, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xc4, 0x01, 0xc8, 0x31, 0xc9, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc8, 0x49, 0x8d, 0x34, 0xcf, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x36, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4c, 0x48, 0x8d, 0x43, 0x48, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNPACK_EX_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x5d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x127, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x131, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x156, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x160, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _UNPACK_EX_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _UNPACK_EX_data_holes[1];

// _UNPACK_SEQUENCE
// 
// /tmp/tmp3v1aptj0/_UNPACK_SEQUENCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 49 89 d6                      movq    %rdx, %r14
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  _JIT_OPARG
// 1f: 0f b7 c8                      movzwl  %ax, %ecx
// 22: 4c 8d 44 ce f8                leaq    -0x8(%rsi,%rcx,8), %r8
// 27: 0f b7 d0                      movzwl  %ax, %edx
// 2a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000002c:  R_X86_64_64  _PyEval_UnpackIterable
// 34: 4c 89 f7                      movq    %r14, %rdi
// 37: 4c 89 e6                      movq    %r12, %rsi
// 3a: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 3f: ff d0                         callq   *%rax
// 41: 89 c5                         movl    %eax, %ebp
// 43: 49 8b 04 24                   movq    (%r12), %rax
// 47: 48 85 c0                      testq   %rax, %rax
// 4a: 7e 06                         jle     0x52 <_JIT_ENTRY+0x52>
// 4c: 85 c0                         testl   %eax, %eax
// 4e: 79 28                         jns     0x78 <_JIT_ENTRY+0x78>
// 50: eb 47                         jmp     0x99 <_JIT_ENTRY+0x99>
// 52: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000054:  R_X86_64_64  .rodata.str1.1
// 5c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005e:  R_X86_64_64  _Py_NegativeRefcount
// 66: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 6b: 4c 89 e2                      movq    %r12, %rdx
// 6e: ff d0                         callq   *%rax
// 70: 49 8b 04 24                   movq    (%r12), %rax
// 74: 85 c0                         testl   %eax, %eax
// 76: 78 21                         js      0x99 <_JIT_ENTRY+0x99>
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 82: ff d0                         callq   *%rax
// 84: 49 ff 0c 24                   decq    (%r12)
// 88: 75 0f                         jne     0x99 <_JIT_ENTRY+0x99>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_Dealloc
// 94: 4c 89 e7                      movq    %r12, %rdi
// 97: ff d0                         callq   *%rax
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _JIT_OPARG
// a3: 0f b7 c0                      movzwl  %ax, %eax
// a6: 48 ff c8                      decq    %rax
// a9: 31 c9                         xorl    %ecx, %ecx
// ab: 85 ed                         testl   %ebp, %ebp
// ad: 48 0f 45 c8                   cmovneq %rax, %rcx
// b1: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// b5: 74 1a                         je      0xd1 <_JIT_ENTRY+0xd1>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _JIT_CONTINUE
// c1: 48 89 df                      movq    %rbx, %rdi
// c4: 4c 89 f2                      movq    %r14, %rdx
// c7: 5b                            popq    %rbx
// c8: 41 5c                         popq    %r12
// ca: 41 5e                         popq    %r14
// cc: 41 5f                         popq    %r15
// ce: 5d                            popq    %rbp
// cf: ff e0                         jmpq    *%rax
// d1: 48 8b 03                      movq    (%rbx), %rax
// d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d6:  R_X86_64_64  PyCode_Type
// de: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// e2: 75 36                         jne     0x11a <_JIT_ENTRY+0x11a>
// e4: 8b 40 48                      movl    0x48(%rax), %eax
// e7: 48 8d 04 c3                   leaq    (%rbx,%rax,8), %rax
// eb: 48 83 c0 48                   addq    $0x48, %rax
// ef: 48 89 f1                      movq    %rsi, %rcx
// f2: 48 29 c1                      subq    %rax, %rcx
// f5: 48 c1 e9 03                   shrq    $0x3, %rcx
// f9: 85 c9                         testl   %ecx, %ecx
// fb: 7e 4c                         jle     0x149 <_JIT_ENTRY+0x149>
// fd: 48 8d 43 48                   leaq    0x48(%rbx), %rax
// 101: 48 29 c6                      subq    %rax, %rsi
// 104: 48 83 c6 f8                   addq    $-0x8, %rsi
// 108: 48 c1 ee 03                   shrq    $0x3, %rsi
// 10c: 89 73 40                      movl    %esi, 0x40(%rbx)
// 10f: 31 c0                         xorl    %eax, %eax
// 111: 5b                            popq    %rbx
// 112: 41 5c                         popq    %r12
// 114: 41 5e                         popq    %r14
// 116: 41 5f                         popq    %r15
// 118: 5d                            popq    %rbp
// 119: c3                            retq
// 11a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011c:  R_X86_64_64  .rodata.str1.1+0xce
// 124: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000126:  R_X86_64_64  .rodata.str1.1+0xec
// 12e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000130:  R_X86_64_64  .rodata.str1.1+0x12b
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  __assert_fail
// 142: ba 4d 00 00 00                movl    $0x4d, %edx
// 147: ff d0                         callq   *%rax
// 149: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014b:  R_X86_64_64  .rodata.str1.1+0x87
// 153: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000155:  R_X86_64_64  .rodata.str1.1+0x9a
// 15d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015f:  R_X86_64_64  .rodata.str1.1+0x39
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  __assert_fail
// 171: ba 5b 00 00 00                movl    $0x5b, %edx
// 176: ff d0                         callq   *%rax
// 178: 
static const unsigned char _UNPACK_SEQUENCE_code_body[377] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4c, 0x8d, 0x44, 0xce, 0xf8, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xff, 0xc8, 0x31, 0xc9, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc8, 0x49, 0x8d, 0x34, 0xcf, 0x74, 0x1a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x36, 0x8b, 0x40, 0x48, 0x48, 0x8d, 0x04, 0xc3, 0x48, 0x83, 0xc0, 0x48, 0x48, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0xc1, 0xe9, 0x03, 0x85, 0xc9, 0x7e, 0x4c, 0x48, 0x8d, 0x43, 0x48, 0x48, 0x29, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNPACK_SEQUENCE_code_holes[18] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x5e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xce},
    {0x126, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xec},
    {0x130, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x12b},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x155, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x9a},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00STACK_LEVEL() >= 1\x00/home/jglass/Documents/cpython/Tools/jit/template.c\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00'
// 161: 00 00 00 00 00 00 00
static const unsigned char _UNPACK_SEQUENCE_data_body[361] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x31, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _UNPACK_SEQUENCE_data_holes[1];

// _UNPACK_SEQUENCE_LIST
// 
// /tmp/tmp3v1aptj0/_UNPACK_SEQUENCE_LIST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 8b 4e f8                   movq    -0x8(%rsi), %rcx
// 18: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001a:  R_X86_64_64  PyList_Type
// 22: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 26: 0f 85 98 00 00 00             jne     0xc4 <_JIT_ENTRY+0xc4>
// 2c: f6 80 ab 00 00 00 02          testb   $0x2, 0xab(%rax)
// 33: 0f 84 94 01 00 00             je      0x1cd <_JIT_ENTRY+0x1cd>
// 39: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003b:  R_X86_64_64  _JIT_OPARG
// 43: 0f b7 c0                      movzwl  %ax, %eax
// 46: 48 39 41 10                   cmpq    %rax, 0x10(%rcx)
// 4a: 75 78                         jne     0xc4 <_JIT_ENTRY+0xc4>
// 4c: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 51: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_OPARG
// 60: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 65: 0f 8e a4 00 00 00             jle     0x10f <_JIT_ENTRY+0x10f>
// 6b: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 6f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 74: 48 8b 68 18                   movq    0x18(%rax), %rbp
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _JIT_OPARG
// 82: 44 0f b7 f8                   movzwl  %ax, %r15d
// 86: 49 ff c7                      incq    %r15
// 89: eb 16                         jmp     0xa1 <_JIT_ENTRY+0xa1>
// 8b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 90: 4d 89 65 00                   movq    %r12, (%r13)
// 94: 49 83 c5 08                   addq    $0x8, %r13
// 98: 49 ff cf                      decq    %r15
// 9b: 49 83 ff 01                   cmpq    $0x1, %r15
// 9f: 7e 6e                         jle     0x10f <_JIT_ENTRY+0x10f>
// a1: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// a5: 4c 8b 64 c5 00                movq    (%rbp,%rax,8), %r12
// aa: 41 8b 04 24                   movl    (%r12), %eax
// ae: ff c0                         incl    %eax
// b0: 74 de                         je      0x90 <_JIT_ENTRY+0x90>
// b2: 41 89 04 24                   movl    %eax, (%r12)
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_INCREF_IncRefTotal
// c0: ff d0                         callq   *%rax
// c2: eb cc                         jmp     0x90 <_JIT_ENTRY+0x90>
// c4: 49 29 de                      subq    %rbx, %r14
// c7: 49 83 c6 b8                   addq    $-0x48, %r14
// cb: 49 c1 ee 03                   shrq    $0x3, %r14
// cf: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// d3: 48 8b 03                      movq    (%rbx), %rax
// d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d8:  R_X86_64_64  PyCode_Type
// e0: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// e4: 0f 85 b4 00 00 00             jne     0x19e <_JIT_ENTRY+0x19e>
// ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ec:  R_X86_64_64  _JIT_TARGET
// f4: 89 c9                         movl    %ecx, %ecx
// f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 100: 48 83 c4 18                   addq    $0x18, %rsp
// 104: 5b                            popq    %rbx
// 105: 41 5c                         popq    %r12
// 107: 41 5d                         popq    %r13
// 109: 41 5e                         popq    %r14
// 10b: 41 5f                         popq    %r15
// 10d: 5d                            popq    %rbp
// 10e: c3                            retq
// 10f: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 114: 49 8b 04 24                   movq    (%r12), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7f 22                         jg      0x13f <_JIT_ENTRY+0x13f>
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_NegativeRefcount
// 131: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 136: 4c 89 e2                      movq    %r12, %rdx
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 146: 78 21                         js      0x169 <_JIT_ENTRY+0x169>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 152: ff d0                         callq   *%rax
// 154: 49 ff 0c 24                   decq    (%r12)
// 158: 75 0f                         jne     0x169 <_JIT_ENTRY+0x169>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _Py_Dealloc
// 164: 4c 89 e7                      movq    %r12, %rdi
// 167: ff d0                         callq   *%rax
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _JIT_OPARG
// 173: 0f b7 c0                      movzwl  %ax, %eax
// 176: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 17a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _JIT_CONTINUE
// 188: 48 89 df                      movq    %rbx, %rdi
// 18b: 4c 89 fa                      movq    %r15, %rdx
// 18e: 48 83 c4 18                   addq    $0x18, %rsp
// 192: 5b                            popq    %rbx
// 193: 41 5c                         popq    %r12
// 195: 41 5d                         popq    %r13
// 197: 41 5e                         popq    %r14
// 199: 41 5f                         popq    %r15
// 19b: 5d                            popq    %rbp
// 19c: ff e0                         jmpq    *%rax
// 19e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a0:  R_X86_64_64  .rodata.str1.1+0x39
// 1a8: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001aa:  R_X86_64_64  .rodata.str1.1+0x57
// 1b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b4:  R_X86_64_64  .rodata.str1.1+0x96
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  __assert_fail
// 1c6: ba 4d 00 00 00                movl    $0x4d, %edx
// 1cb: ff d0                         callq   *%rax
// 1cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cf:  R_X86_64_64  .rodata.str1.1+0xcc
// 1d7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001d9:  R_X86_64_64  .rodata.str1.1+0xdd
// 1e1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1+0x119
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  __assert_fail
// 1f5: ba 1f 00 00 00                movl    $0x1f, %edx
// 1fa: ff d0                         callq   *%rax
// 1fc: 
static const unsigned char _UNPACK_SEQUENCE_LIST_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x0f, 0x85, 0x98, 0x00, 0x00, 0x00, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x39, 0x41, 0x10, 0x75, 0x78, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xa4, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x16, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x6e, 0x41, 0x8d, 0x47, 0xfe, 0x4c, 0x8b, 0x64, 0xc5, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xde, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcc, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNPACK_SEQUENCE_LIST_code_holes[22] = {
    {0x1a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x3b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcc},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xdd},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x119},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyList_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/listobject.h\x00Py_ssize_t PyList_GET_SIZE(PyObject *)\x00'
// 140: 
static const unsigned char _UNPACK_SEQUENCE_LIST_data_body[321] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00};
static const Hole _UNPACK_SEQUENCE_LIST_data_holes[1];

// _UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmp3v1aptj0/_UNPACK_SEQUENCE_TUPLE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 15: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000017:  R_X86_64_64  PyTuple_Type
// 1f: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 24: 75 7b                         jne     0xa1 <_JIT_ENTRY+0xa1>
// 26: f6 80 ab 00 00 00 04          testb   $0x4, 0xab(%rax)
// 2d: 0f 84 71 01 00 00             je      0x1a4 <_JIT_ENTRY+0x1a4>
// 33: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000035:  R_X86_64_64  _JIT_OPARG
// 3d: 0f b7 c0                      movzwl  %ax, %eax
// 40: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 45: 75 5a                         jne     0xa1 <_JIT_ENTRY+0xa1>
// 47: 48 89 14 24                   movq    %rdx, (%rsp)
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 5a: 0f 8e 8c 00 00 00             jle     0xec <_JIT_ENTRY+0xec>
// 60: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 64: 0f b7 e8                      movzwl  %ax, %ebp
// 67: 48 ff c5                      incq    %rbp
// 6a: eb 15                         jmp     0x81 <_JIT_ENTRY+0x81>
// 6c: 0f 1f 40 00                   nopl    (%rax)
// 70: 4d 89 7d 00                   movq    %r15, (%r13)
// 74: 49 83 c5 08                   addq    $0x8, %r13
// 78: 48 ff cd                      decq    %rbp
// 7b: 48 83 fd 01                   cmpq    $0x1, %rbp
// 7f: 7e 6b                         jle     0xec <_JIT_ENTRY+0xec>
// 81: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 84: 4d 8b 7c c4 18                movq    0x18(%r12,%rax,8), %r15
// 89: 41 8b 07                      movl    (%r15), %eax
// 8c: ff c0                         incl    %eax
// 8e: 74 e0                         je      0x70 <_JIT_ENTRY+0x70>
// 90: 41 89 07                      movl    %eax, (%r15)
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 9d: ff d0                         callq   *%rax
// 9f: eb cf                         jmp     0x70 <_JIT_ENTRY+0x70>
// a1: 49 29 de                      subq    %rbx, %r14
// a4: 49 83 c6 b8                   addq    $-0x48, %r14
// a8: 49 c1 ee 03                   shrq    $0x3, %r14
// ac: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// b0: 48 8b 03                      movq    (%rbx), %rax
// b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b5:  R_X86_64_64  PyCode_Type
// bd: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c1: 0f 85 ae 00 00 00             jne     0x175 <_JIT_ENTRY+0x175>
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  _JIT_TARGET
// d1: 89 c9                         movl    %ecx, %ecx
// d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// dd: 48 83 c4 08                   addq    $0x8, %rsp
// e1: 5b                            popq    %rbx
// e2: 41 5c                         popq    %r12
// e4: 41 5d                         popq    %r13
// e6: 41 5e                         popq    %r14
// e8: 41 5f                         popq    %r15
// ea: 5d                            popq    %rbp
// eb: c3                            retq
// ec: 49 8b 04 24                   movq    (%r12), %rax
// f0: 48 85 c0                      testq   %rax, %rax
// f3: 7f 22                         jg      0x117 <_JIT_ENTRY+0x117>
// f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_NegativeRefcount
// 109: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 10e: 4c 89 e2                      movq    %r12, %rdx
// 111: ff d0                         callq   *%rax
// 113: 49 8b 04 24                   movq    (%r12), %rax
// 117: 85 c0                         testl   %eax, %eax
// 119: 4c 8b 3c 24                   movq    (%rsp), %r15
// 11d: 78 21                         js      0x140 <_JIT_ENTRY+0x140>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 129: ff d0                         callq   *%rax
// 12b: 49 ff 0c 24                   decq    (%r12)
// 12f: 75 0f                         jne     0x140 <_JIT_ENTRY+0x140>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_Dealloc
// 13b: 4c 89 e7                      movq    %r12, %rdi
// 13e: ff d0                         callq   *%rax
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_OPARG
// 14a: 0f b7 c0                      movzwl  %ax, %eax
// 14d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 151: 48 83 c6 f8                   addq    $-0x8, %rsi
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _JIT_CONTINUE
// 15f: 48 89 df                      movq    %rbx, %rdi
// 162: 4c 89 fa                      movq    %r15, %rdx
// 165: 48 83 c4 08                   addq    $0x8, %rsp
// 169: 5b                            popq    %rbx
// 16a: 41 5c                         popq    %r12
// 16c: 41 5d                         popq    %r13
// 16e: 41 5e                         popq    %r14
// 170: 41 5f                         popq    %r15
// 172: 5d                            popq    %rbp
// 173: ff e0                         jmpq    *%rax
// 175: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000177:  R_X86_64_64  .rodata.str1.1+0x39
// 17f: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000181:  R_X86_64_64  .rodata.str1.1+0x57
// 189: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018b:  R_X86_64_64  .rodata.str1.1+0x96
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  __assert_fail
// 19d: ba 4d 00 00 00                movl    $0x4d, %edx
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1+0xcc
// 1ae: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001b0:  R_X86_64_64  .rodata.str1.1+0xde
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1+0x11b
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  __assert_fail
// 1cc: ba 16 00 00 00                movl    $0x16, %edx
// 1d1: ff d0                         callq   *%rax
// 1d3: 
static const unsigned char _UNPACK_SEQUENCE_TUPLE_code_body[468] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x7b, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x71, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x75, 0x5a, 0x48, 0x89, 0x14, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x8c, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x15, 0x0f, 0x1f, 0x40, 0x00, 0x4d, 0x89, 0x7d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x6b, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc4, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x16, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNPACK_SEQUENCE_TUPLE_code_holes[21] = {
    {0x17, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x35, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x181, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x57},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x96},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xcc},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xde},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x11b},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/tupleobject.h\x00Py_ssize_t PyTuple_GET_SIZE(PyObject *)\x00'
// 143: 00 00 00 00 00
static const unsigned char _UNPACK_SEQUENCE_TUPLE_data_body[329] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmp3v1aptj0/_UNPACK_SEQUENCE_TWO_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 f6                      movq    %rsi, %r14
// c: 48 89 fb                      movq    %rdi, %rbx
// f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 13: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000015:  R_X86_64_64  PyTuple_Type
// 1d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 22: 0f 85 85 00 00 00             jne     0xad <_JIT_ENTRY+0xad>
// 28: f6 80 ab 00 00 00 04          testb   $0x4, 0xab(%rax)
// 2f: 0f 84 80 01 00 00             je      0x1b5 <_JIT_ENTRY+0x1b5>
// 35: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 3b: 75 70                         jne     0xad <_JIT_ENTRY+0xad>
// 3d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000003f:  R_X86_64_64  _JIT_OPARG
// 47: 66 83 f8 02                   cmpw    $0x2, %ax
// 4b: 0f 85 93 01 00 00             jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 51: 49 89 d7                      movq    %rdx, %r15
// 54: 4d 8b 6c 24 20                movq    0x20(%r12), %r13
// 59: 41 8b 45 00                   movl    (%r13), %eax
// 5d: ff c0                         incl    %eax
// 5f: 74 10                         je      0x71 <_JIT_ENTRY+0x71>
// 61: 41 89 45 00                   movl    %eax, (%r13)
// 65: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000067:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 6f: ff d0                         callq   *%rax
// 71: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 75: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 7a: f6 80 ab 00 00 00 04          testb   $0x4, 0xab(%rax)
// 81: 0f 84 8c 01 00 00             je      0x213 <_JIT_ENTRY+0x213>
// 87: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 8c: 41 8b 45 00                   movl    (%r13), %eax
// 90: ff c0                         incl    %eax
// 92: 75 5f                         jne     0xf3 <_JIT_ENTRY+0xf3>
// 94: 4d 89 2e                      movq    %r13, (%r14)
// 97: 49 8b 04 24                   movq    (%r12), %rax
// 9b: 48 85 c0                      testq   %rax, %rax
// 9e: 7e 6f                         jle     0x10f <_JIT_ENTRY+0x10f>
// a0: 85 c0                         testl   %eax, %eax
// a2: 0f 89 8d 00 00 00             jns     0x135 <_JIT_ENTRY+0x135>
// a8: e9 a9 00 00 00                jmp     0x156 <_JIT_ENTRY+0x156>
// ad: 49 29 de                      subq    %rbx, %r14
// b0: 49 83 c6 b8                   addq    $-0x48, %r14
// b4: 49 c1 ee 03                   shrq    $0x3, %r14
// b8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// bc: 48 8b 03                      movq    (%rbx), %rax
// bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c1:  R_X86_64_64  PyCode_Type
// c9: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// cd: 0f 85 b3 00 00 00             jne     0x186 <_JIT_ENTRY+0x186>
// d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d5:  R_X86_64_64  _JIT_TARGET
// dd: 89 c9                         movl    %ecx, %ecx
// df: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e9: 5b                            popq    %rbx
// ea: 41 5c                         popq    %r12
// ec: 41 5d                         popq    %r13
// ee: 41 5e                         popq    %r14
// f0: 41 5f                         popq    %r15
// f2: c3                            retq
// f3: 41 89 45 00                   movl    %eax, (%r13)
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 101: ff d0                         callq   *%rax
// 103: 4d 89 2e                      movq    %r13, (%r14)
// 106: 49 8b 04 24                   movq    (%r12), %rax
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 7f 91                         jg      0xa0 <_JIT_ENTRY+0xa0>
// 10f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000111:  R_X86_64_64  .rodata.str1.1
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _Py_NegativeRefcount
// 123: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 128: 4c 89 e2                      movq    %r12, %rdx
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 85 c0                         testl   %eax, %eax
// 133: 78 21                         js      0x156 <_JIT_ENTRY+0x156>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 49 ff 0c 24                   decq    (%r12)
// 145: 75 0f                         jne     0x156 <_JIT_ENTRY+0x156>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_Dealloc
// 151: 4c 89 e7                      movq    %r12, %rdi
// 154: ff d0                         callq   *%rax
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _JIT_OPARG
// 160: 0f b7 c0                      movzwl  %ax, %eax
// 163: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 167: 48 83 c6 f8                   addq    $-0x8, %rsi
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _JIT_CONTINUE
// 175: 48 89 df                      movq    %rbx, %rdi
// 178: 4c 89 fa                      movq    %r15, %rdx
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: ff e0                         jmpq    *%rax
// 186: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000188:  R_X86_64_64  .rodata.str1.1+0xa5
// 190: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1+0xc3
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  .rodata.str1.1+0x102
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  __assert_fail
// 1ae: ba 4d 00 00 00                movl    $0x4d, %edx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b7:  R_X86_64_64  .rodata.str1.1+0x138
// 1bf: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1+0x14a
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  .rodata.str1.1+0x187
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  __assert_fail
// 1dd: ba 16 00 00 00                movl    $0x16, %edx
// 1e2: ff d0                         callq   *%rax
// 1e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e6:  R_X86_64_64  .rodata.str1.1+0x87
// 1ee: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001f0:  R_X86_64_64  .rodata.str1.1
// 1f8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fa:  R_X86_64_64  .rodata.str1.1+0x39
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  __assert_fail
// 20c: ba 83 03 00 00                movl    $0x383, %edx            # imm = 0x383
// 211: ff d0                         callq   *%rax
// 213: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000215:  R_X86_64_64  .rodata.str1.1+0x92
// 21d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000021f:  R_X86_64_64  .rodata.str1.1
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  .rodata.str1.1+0x39
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  __assert_fail
// 23b: ba 86 03 00 00                movl    $0x386, %edx            # imm = 0x386
// 240: ff d0                         callq   *%rax
// 242: 
static const unsigned char _UNPACK_SEQUENCE_TWO_TUPLE_code_body[579] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x85, 0x00, 0x00, 0x00, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x80, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x02, 0x0f, 0x85, 0x93, 0x01, 0x00, 0x00, 0x49, 0x89, 0xd7, 0x4d, 0x8b, 0x6c, 0x24, 0x20, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x5f, 0x4d, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x6f, 0x85, 0xc0, 0x0f, 0x89, 0x8d, 0x00, 0x00, 0x00, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x0f, 0x85, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x91, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x4d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x16, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x83, 0x03, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x86, 0x03, 0x00, 0x00, 0xff, 0xd0};
static const Hole _UNPACK_SEQUENCE_TWO_TUPLE_code_holes[29] = {
    {0x15, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x3f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x67, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCode_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xa5},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xc3},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x102},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x138},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x14a},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x187},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x92},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00oparg == 2\x00PyTuple_Check(seq)\x00PyCode_Check(f->f_executable)\x00/home/jglass/Documents/cpython/Include/internal/pycore_frame.h\x00PyCodeObject *_PyFrame_GetCode(_PyInterpreterFrame *)\x00PyTuple_Check(op)\x00/home/jglass/Documents/cpython/Include/cpython/tupleobject.h\x00Py_ssize_t PyTuple_GET_SIZE(PyObject *)\x00'
// 1af: 00
static const unsigned char _UNPACK_SEQUENCE_TWO_TUPLE_data_body[433] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x6f, 0x70, 0x61, 0x72, 0x67, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x73, 0x65, 0x71, 0x29, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x66, 0x2d, 0x3e, 0x66, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x5f, 0x50, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6f, 0x70, 0x29, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x50, 0x79, 0x5f, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x50, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x28, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x29, 0x00, 0x00};
static const Hole _UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _WITH_EXCEPT_START
// 
// /tmp/tmp3v1aptj0/_WITH_EXCEPT_START.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 48 89 3c 24                   movq    %rdi, (%rsp)
// 17: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1b: 4d 85 e4                      testq   %r12, %r12
// 1e: 0f 84 34 01 00 00             je      0x158 <_JIT_ENTRY+0x158>
// 24: 4d 8b 7c 24 08                movq    0x8(%r12), %r15
// 29: 41 f6 87 ab 00 00 00 40       testb   $0x40, 0xab(%r15)
// 31: 0f 84 21 01 00 00             je      0x158 <_JIT_ENTRY+0x158>
// 37: 48 89 f3                      movq    %rsi, %rbx
// 3a: 4c 8b 6e e0                   movq    -0x20(%rsi), %r13
// 3e: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 42: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000044:  R_X86_64_64  PyException_GetTraceback
// 4c: 4c 89 e7                      movq    %r12, %rdi
// 4f: ff d0                         callq   *%rax
// 51: 48 85 c0                      testq   %rax, %rax
// 54: 74 11                         je      0x67 <_JIT_ENTRY+0x67>
// 56: 48 89 c5                      movq    %rax, %rbp
// 59: 48 8b 00                      movq    (%rax), %rax
// 5c: 48 85 c0                      testq   %rax, %rax
// 5f: 7e 12                         jle     0x73 <_JIT_ENTRY+0x73>
// 61: 85 c0                         testl   %eax, %eax
// 63: 79 34                         jns     0x99 <_JIT_ENTRY+0x99>
// 65: eb 53                         jmp     0xba <_JIT_ENTRY+0xba>
// 67: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000069:  R_X86_64_64  _Py_NoneStruct
// 71: eb 47                         jmp     0xba <_JIT_ENTRY+0xba>
// 73: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000075:  R_X86_64_64  .rodata.str1.1
// 7d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007f:  R_X86_64_64  _Py_NegativeRefcount
// 87: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 8c: 48 89 ea                      movq    %rbp, %rdx
// 8f: ff d0                         callq   *%rax
// 91: 48 8b 45 00                   movq    (%rbp), %rax
// 95: 85 c0                         testl   %eax, %eax
// 97: 78 21                         js      0xba <_JIT_ENTRY+0xba>
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a3: ff d0                         callq   *%rax
// a5: 48 ff 4d 00                   decq    (%rbp)
// a9: 75 0f                         jne     0xba <_JIT_ENTRY+0xba>
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _Py_Dealloc
// b5: 48 89 ef                      movq    %rbp, %rdi
// b8: ff d0                         callq   *%rax
// ba: 49 8b 46 08                   movq    0x8(%r14), %rax
// be: f6 80 ab 00 00 00 01          testb   $0x1, 0xab(%rax)
// c5: 0f 84 bc 00 00 00             je      0x187 <_JIT_ENTRY+0x187>
// cb: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// d4: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// d9: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// de: 4c 89 64 24 20                movq    %r12, 0x20(%rsp)
// e3: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  PyObject_Vectorcall
// f2: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: 31 c9                         xorl    %ecx, %ecx
// 101: ff d0                         callq   *%rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 74 2d                         je      0x135 <_JIT_ENTRY+0x135>
// 108: 48 89 03                      movq    %rax, (%rbx)
// 10b: 48 83 c3 08                   addq    $0x8, %rbx
// 10f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000111:  R_X86_64_64  _JIT_CONTINUE
// 119: 48 8b 3c 24                   movq    (%rsp), %rdi
// 11d: 48 89 de                      movq    %rbx, %rsi
// 120: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 125: 48 83 c4 38                   addq    $0x38, %rsp
// 129: 5b                            popq    %rbx
// 12a: 41 5c                         popq    %r12
// 12c: 41 5d                         popq    %r13
// 12e: 41 5e                         popq    %r14
// 130: 41 5f                         popq    %r15
// 132: 5d                            popq    %rbp
// 133: ff e0                         jmpq    *%rax
// 135: 48 8b 04 24                   movq    (%rsp), %rax
// 139: 48 29 c3                      subq    %rax, %rbx
// 13c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 140: 48 c1 eb 03                   shrq    $0x3, %rbx
// 144: 89 58 40                      movl    %ebx, 0x40(%rax)
// 147: 31 c0                         xorl    %eax, %eax
// 149: 48 83 c4 38                   addq    $0x38, %rsp
// 14d: 5b                            popq    %rbx
// 14e: 41 5c                         popq    %r12
// 150: 41 5d                         popq    %r13
// 152: 41 5e                         popq    %r14
// 154: 41 5f                         popq    %r15
// 156: 5d                            popq    %rbp
// 157: c3                            retq
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1+0x87
// 162: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000164:  R_X86_64_64  .rodata.str1.1
// 16c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000016e:  R_X86_64_64  .rodata.str1.1+0x39
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  __assert_fail
// 180: ba 5d 09 00 00                movl    $0x95d, %edx            # imm = 0x95D
// 185: ff d0                         callq   *%rax
// 187: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000189:  R_X86_64_64  .rodata.str1.1+0xad
// 191: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000193:  R_X86_64_64  .rodata.str1.1
// 19b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019d:  R_X86_64_64  .rodata.str1.1+0x39
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  __assert_fail
// 1af: ba 66 09 00 00                movl    $0x966, %edx            # imm = 0x966
// 1b4: ff d0                         callq   *%rax
// 1b6: 
static const unsigned char _WITH_EXCEPT_START_code_body[439] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x66, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x34, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x7c, 0x24, 0x08, 0x41, 0xf6, 0x87, 0xab, 0x00, 0x00, 0x00, 0x40, 0x0f, 0x84, 0x21, 0x01, 0x00, 0x00, 0x48, 0x89, 0xf3, 0x4c, 0x8b, 0x6e, 0xe0, 0x4c, 0x8b, 0x76, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x53, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x46, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x64, 0x24, 0x20, 0x48, 0x89, 0x6c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x89, 0xef, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2d, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x5d, 0x09, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x66, 0x09, 0x00, 0x00, 0xff, 0xd0};
static const Hole _WITH_EXCEPT_START_code_holes[17] = {
    {0x44, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x87},
    {0x164, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0xad},
    {0x193, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &__assert_fail, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_CODEUNIT *_JIT_ENTRY(_PyInterpreterFrame *, PyObject **, PyThreadState *)\x00val && PyExceptionInstance_Check(val)\x00PyLong_Check(lasti)\x00'
// c1: 00 00 00 00 00 00 00
static const unsigned char _WITH_EXCEPT_START_data_body[201] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x20, 0x2a, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x28, 0x5f, 0x50, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x2a, 0x2a, 0x2c, 0x20, 0x50, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2a, 0x29, 0x00, 0x76, 0x61, 0x6c, 0x20, 0x26, 0x26, 0x20, 0x50, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x76, 0x61, 0x6c, 0x29, 0x00, 0x50, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x28, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_BEFORE_ASYNC_WITH),
    [_BEFORE_WITH] = INIT_STENCIL_GROUP(_BEFORE_WITH),
    [_BINARY_OP] = INIT_STENCIL_GROUP(_BINARY_OP),
    [_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_BINARY_OP_ADD_FLOAT),
    [_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_BINARY_OP_ADD_INT),
    [_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_BINARY_OP_ADD_UNICODE),
    [_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_BINARY_OP_MULTIPLY_FLOAT),
    [_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_BINARY_OP_MULTIPLY_INT),
    [_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_BINARY_OP_SUBTRACT_FLOAT),
    [_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_BINARY_OP_SUBTRACT_INT),
    [_BINARY_SLICE] = INIT_STENCIL_GROUP(_BINARY_SLICE),
    [_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_BINARY_SUBSCR),
    [_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_DICT),
    [_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_LIST_INT),
    [_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_STR_INT),
    [_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_BINARY_SUBSCR_TUPLE_INT),
    [_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_BUILD_CONST_KEY_MAP),
    [_BUILD_LIST] = INIT_STENCIL_GROUP(_BUILD_LIST),
    [_BUILD_MAP] = INIT_STENCIL_GROUP(_BUILD_MAP),
    [_BUILD_SET] = INIT_STENCIL_GROUP(_BUILD_SET),
    [_BUILD_SLICE] = INIT_STENCIL_GROUP(_BUILD_SLICE),
    [_BUILD_STRING] = INIT_STENCIL_GROUP(_BUILD_STRING),
    [_BUILD_TUPLE] = INIT_STENCIL_GROUP(_BUILD_TUPLE),
    [_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_CLASS),
    [_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_CALL_BUILTIN_FAST),
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_CALL_BUILTIN_O),
    [_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_CALL_INTRINSIC_1),
    [_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_CALL_INTRINSIC_2),
    [_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_CALL_ISINSTANCE),
    [_CALL_LEN] = INIT_STENCIL_GROUP(_CALL_LEN),
    [_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FAST),
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_CALL_METHOD_DESCRIPTOR_O),
    [_CALL_STR_1] = INIT_STENCIL_GROUP(_CALL_STR_1),
    [_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_CALL_TUPLE_1),
    [_CALL_TYPE_1] = INIT_STENCIL_GROUP(_CALL_TYPE_1),
    [_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_CHECK_ATTR_CLASS),
    [_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CHECK_ATTR_METHOD_LAZY_DICT),
    [_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_CHECK_ATTR_MODULE),
    [_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CHECK_ATTR_WITH_HINT),
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_CHECK_EG_MATCH),
    [_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_CHECK_EXC_MATCH),
    [_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_FUNCTION_EXACT_ARGS),
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_CHECK_PEP_523] = INIT_STENCIL_GROUP(_CHECK_PEP_523),
    [_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_CHECK_STACK_SPACE),
    [_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_CHECK_VALIDITY),
    [_COMPARE_OP] = INIT_STENCIL_GROUP(_COMPARE_OP),
    [_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_COMPARE_OP_FLOAT),
    [_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_COMPARE_OP_INT),
    [_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_COMPARE_OP_STR),
    [_CONTAINS_OP] = INIT_STENCIL_GROUP(_CONTAINS_OP),
    [_CONVERT_VALUE] = INIT_STENCIL_GROUP(_CONVERT_VALUE),
    [_COPY] = INIT_STENCIL_GROUP(_COPY),
    [_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_COPY_FREE_VARS),
    [_DELETE_ATTR] = INIT_STENCIL_GROUP(_DELETE_ATTR),
    [_DELETE_DEREF] = INIT_STENCIL_GROUP(_DELETE_DEREF),
    [_DELETE_FAST] = INIT_STENCIL_GROUP(_DELETE_FAST),
    [_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_DELETE_GLOBAL),
    [_DELETE_NAME] = INIT_STENCIL_GROUP(_DELETE_NAME),
    [_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_DELETE_SUBSCR),
    [_DICT_MERGE] = INIT_STENCIL_GROUP(_DICT_MERGE),
    [_DICT_UPDATE] = INIT_STENCIL_GROUP(_DICT_UPDATE),
    [_END_SEND] = INIT_STENCIL_GROUP(_END_SEND),
    [_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_EXIT_INIT_CHECK),
    [_EXIT_TRACE] = INIT_STENCIL_GROUP(_EXIT_TRACE),
    [_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_FORMAT_SIMPLE),
    [_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_FORMAT_WITH_SPEC),
    [_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_FOR_ITER_TIER_TWO),
    [_GET_AITER] = INIT_STENCIL_GROUP(_GET_AITER),
    [_GET_ANEXT] = INIT_STENCIL_GROUP(_GET_ANEXT),
    [_GET_AWAITABLE] = INIT_STENCIL_GROUP(_GET_AWAITABLE),
    [_GET_ITER] = INIT_STENCIL_GROUP(_GET_ITER),
    [_GET_LEN] = INIT_STENCIL_GROUP(_GET_LEN),
    [_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_GET_YIELD_FROM_ITER),
    [_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_GUARD_BOTH_FLOAT),
    [_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_GUARD_BOTH_INT),
    [_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_GUARD_BOTH_UNICODE),
    [_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_GUARD_BUILTINS_VERSION),
    [_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_GUARD_DORV_VALUES),
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_GUARD_GLOBALS_VERSION),
    [_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_GUARD_IS_FALSE_POP),
    [_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_GUARD_IS_NONE_POP),
    [_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_GUARD_IS_NOT_NONE_POP),
    [_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_GUARD_IS_TRUE_POP),
    [_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_GUARD_KEYS_VERSION),
    [_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_GUARD_NOT_EXHAUSTED_LIST),
    [_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_GUARD_NOT_EXHAUSTED_RANGE),
    [_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_GUARD_NOT_EXHAUSTED_TUPLE),
    [_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_GUARD_TYPE_VERSION),
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_INIT_CALL_PY_EXACT_ARGS),
    [_INSERT] = INIT_STENCIL_GROUP(_INSERT),
    [_IS_NONE] = INIT_STENCIL_GROUP(_IS_NONE),
    [_IS_OP] = INIT_STENCIL_GROUP(_IS_OP),
    [_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_ITER_CHECK_LIST),
    [_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_ITER_CHECK_RANGE),
    [_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_ITER_CHECK_TUPLE),
    [_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_ITER_NEXT_LIST),
    [_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_ITER_NEXT_RANGE),
    [_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_ITER_NEXT_TUPLE),
    [_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_JUMP_TO_TOP),
    [_LIST_APPEND] = INIT_STENCIL_GROUP(_LIST_APPEND),
    [_LIST_EXTEND] = INIT_STENCIL_GROUP(_LIST_EXTEND),
    [_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_LOAD_ASSERTION_ERROR),
    [_LOAD_ATTR] = INIT_STENCIL_GROUP(_LOAD_ATTR),
    [_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_LOAD_ATTR_CLASS),
    [_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_LOAD_ATTR_INSTANCE_VALUE),
    [_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_METHOD_LAZY_DICT),
    [_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_METHOD_NO_DICT),
    [_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_LOAD_ATTR_METHOD_WITH_VALUES),
    [_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_LOAD_ATTR_MODULE),
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_LOAD_ATTR_SLOT),
    [_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_LOAD_ATTR_WITH_HINT),
    [_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_LOAD_BUILD_CLASS),
    [_LOAD_CONST] = INIT_STENCIL_GROUP(_LOAD_CONST),
    [_LOAD_DEREF] = INIT_STENCIL_GROUP(_LOAD_DEREF),
    [_LOAD_FAST] = INIT_STENCIL_GROUP(_LOAD_FAST),
    [_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_LOAD_FAST_AND_CLEAR),
    [_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_LOAD_FAST_CHECK),
    [_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_LOAD_FROM_DICT_OR_DEREF),
    [_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_LOAD_FROM_DICT_OR_GLOBALS),
    [_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_LOAD_GLOBAL),
    [_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_LOAD_GLOBAL_BUILTINS),
    [_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_LOAD_GLOBAL_MODULE),
    [_LOAD_LOCALS] = INIT_STENCIL_GROUP(_LOAD_LOCALS),
    [_LOAD_NAME] = INIT_STENCIL_GROUP(_LOAD_NAME),
    [_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_ATTR),
    [_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_LOAD_SUPER_ATTR_METHOD),
    [_MAKE_CELL] = INIT_STENCIL_GROUP(_MAKE_CELL),
    [_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_MAKE_FUNCTION),
    [_MAP_ADD] = INIT_STENCIL_GROUP(_MAP_ADD),
    [_MATCH_CLASS] = INIT_STENCIL_GROUP(_MATCH_CLASS),
    [_MATCH_KEYS] = INIT_STENCIL_GROUP(_MATCH_KEYS),
    [_MATCH_MAPPING] = INIT_STENCIL_GROUP(_MATCH_MAPPING),
    [_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_MATCH_SEQUENCE),
    [_NOP] = INIT_STENCIL_GROUP(_NOP),
    [_POP_EXCEPT] = INIT_STENCIL_GROUP(_POP_EXCEPT),
    [_POP_FRAME] = INIT_STENCIL_GROUP(_POP_FRAME),
    [_POP_TOP] = INIT_STENCIL_GROUP(_POP_TOP),
    [_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_PUSH_EXC_INFO),
    [_PUSH_FRAME] = INIT_STENCIL_GROUP(_PUSH_FRAME),
    [_PUSH_NULL] = INIT_STENCIL_GROUP(_PUSH_NULL),
    [_RESUME_CHECK] = INIT_STENCIL_GROUP(_RESUME_CHECK),
    [_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_SAVE_RETURN_OFFSET),
    [_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_SETUP_ANNOTATIONS),
    [_SET_ADD] = INIT_STENCIL_GROUP(_SET_ADD),
    [_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_SET_FUNCTION_ATTRIBUTE),
    [_SET_IP] = INIT_STENCIL_GROUP(_SET_IP),
    [_SET_UPDATE] = INIT_STENCIL_GROUP(_SET_UPDATE),
    [_STORE_ATTR] = INIT_STENCIL_GROUP(_STORE_ATTR),
    [_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_STORE_ATTR_INSTANCE_VALUE),
    [_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_STORE_ATTR_SLOT),
    [_STORE_DEREF] = INIT_STENCIL_GROUP(_STORE_DEREF),
    [_STORE_FAST] = INIT_STENCIL_GROUP(_STORE_FAST),
    [_STORE_GLOBAL] = INIT_STENCIL_GROUP(_STORE_GLOBAL),
    [_STORE_NAME] = INIT_STENCIL_GROUP(_STORE_NAME),
    [_STORE_SLICE] = INIT_STENCIL_GROUP(_STORE_SLICE),
    [_STORE_SUBSCR] = INIT_STENCIL_GROUP(_STORE_SUBSCR),
    [_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCR_DICT),
    [_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCR_LIST_INT),
    [_SWAP] = INIT_STENCIL_GROUP(_SWAP),
    [_TO_BOOL] = INIT_STENCIL_GROUP(_TO_BOOL),
    [_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_TO_BOOL_ALWAYS_TRUE),
    [_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_TO_BOOL_BOOL),
    [_TO_BOOL_INT] = INIT_STENCIL_GROUP(_TO_BOOL_INT),
    [_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_TO_BOOL_LIST),
    [_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_TO_BOOL_NONE),
    [_TO_BOOL_STR] = INIT_STENCIL_GROUP(_TO_BOOL_STR),
    [_UNARY_INVERT] = INIT_STENCIL_GROUP(_UNARY_INVERT),
    [_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_UNARY_NEGATIVE),
    [_UNARY_NOT] = INIT_STENCIL_GROUP(_UNARY_NOT),
    [_UNPACK_EX] = INIT_STENCIL_GROUP(_UNPACK_EX),
    [_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_UNPACK_SEQUENCE),
    [_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_UNPACK_SEQUENCE_LIST),
    [_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_UNPACK_SEQUENCE_TUPLE),
    [_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_UNPACK_SEQUENCE_TWO_TUPLE),
    [_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
